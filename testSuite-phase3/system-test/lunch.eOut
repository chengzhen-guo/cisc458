@Program
 ?sProgram (sProgram)
 oSymbolStkPush(syProcedure)
 oSymbolTblPushScope
 oCountPush(three)
 [ (sIdentifier)
 | *:
 @ProgramParameter
  ?sIdentifier (sIdentifier)
  oSymbolStkPushLocalIdentifier
  [ oSymbolStkChooseKind (syUndefined)
  | syUndefined:
  [ oSymbolStkChooseStandardFile (stdOutput)
  | stdOutput:
  oSymbolStkSetKind(syVariable)
  oTypeStkPush(tpFile)
  oTypeStkLinkToStandardType(stdText)
  oSymbolStkEnterTypeReference
  oValuePush(two)
  ] or >
  @AllocateVar
   [ oSymbolStkChooseKind (syVariable)
   | *:
   [ oTypeStkChooseKind (tpFile)
   | tpFile:
   .tFileDescriptor
   oAllocateAlignOnWord
   oSymbolStkEnterDataAddress
   .tLiteralInteger
   oEmitValue
   % value emitted 2
   .tFileBind
   .tLiteralAddress
   oEmitDataAddress
   % value emitted 0
   .tStoreInteger
   oAllocateDescriptor
   ] or >
   >>
  ;AllocateVar
  oSymbolTblEnter
  ] or >
  oSymbolStkPop
  oTypeStkPop
  oValuePop
  >>
 ;ProgramParameter
 }
 [ (sParmEnd)
 | sParmEnd:
 ] or >
 oCountPop
 @Block
  ?sBegin (sBegin)
  [ (sVar)
  | sVar:
  @VariableDeclarations
   [ (sIdentifier)
   | sIdentifier:
   oSymbolStkPushLocalIdentifier
   [ oSymbolStkChooseKind (syUndefined)
   | syUndefined:
   ] or >
   @PublicDefinition
    [ (sArray)
    | *:
    >>
   ;PublicDefinition
   [ (sArray)
   | *:
   @TypeBody
    [ (sArray)
    | sArray:
    oTypeStkPush(tpArray)
    @IndexType
     oValuePush(one)
     @ConstantValue
      [ (sInteger)
      | sInteger:
      oTypeStkPush(tpInteger)
      oTypeStkLinkToStandardType(stdInteger)
      oValuePushInteger
      [ (sLike)
      | *:
      ] or >
      >>
     ;ConstantValue
     [ oTypeStkChooseKind (tpInteger)
     | tpInteger:
     oValuePushTypeStkLowerBound
     oValuePushTypeStkUpperBound
     ] or >
     oTypeStkPop
     oTypeStkEnterBounds
     [ oTypeStkVerifyBounds (yes)
     | yes:
     oValuePop
     ] or >
     oValuePop
     oValuePop
     >>
    ;IndexType
    @ComponentType
     @SimpleType
      ?sLike (sLike)
      [ (sStringLiteral)
      | sStringLiteral:
      oTypeStkPush(tpChar)
      oTypeStkLinkToStandardType(stdChar)
      ] or >
      >>
     ;SimpleType
     [ oTypeStkChooseKind (tpChar)
     | *:
     @TypeTblEnterIfNew
      [ oTypeStkChooseTypeReference (yes)
      | *:
      >>
     ;TypeTblEnterIfNew
     oTypeStkEnterComponentReference
     oTypeStkPop
     >>
    ;ComponentType
    oValuePop
    ] or >
    @TypeTblEnterIfNew
     [ oTypeStkChooseTypeReference (no)
     | no:
     oTypeTblEnter
     ] or >
     >>
    ;TypeTblEnterIfNew
    >>
   ;TypeBody
   @EnterVariableAttributes
    [ oSymbolStkChooseKind (syUndefined)
    | *:
    oSymbolStkSetKind(syVariable)
    [ oTypeStkChooseKind (tpArray)
    | *:
    @AllocateVar
     [ oSymbolStkChooseKind (syVariable)
     | *:
     [ oTypeStkChooseKind (tpArray)
     | tpArray:
     .tArrayDescriptor
     oAllocateAlignOnWord
     oSymbolStkEnterDataAddress
     .tLiteralInteger
     oValuePushTypeStkLowerBound
     oEmitValue
     % value emitted 0
     oValuePop
     .tLiteralAddress
     oEmitDataAddress
     % value emitted 4
     .tStoreInteger
     oAllocateDescriptor
     .tLiteralInteger
     oValuePushTypeStkUpperBound
     oEmitValue
     % value emitted 0
     oValuePop
     .tLiteralAddress
     oEmitDataAddress
     % value emitted 8
     .tStoreInteger
     oAllocateDescriptor
     oAllocateVariable
     ] or >
     >>
    ;AllocateVar
    oSymbolStkEnterTypeReference
    oSymbolTblEnter
    >>
   ;EnterVariableAttributes
   oTypeStkPop
   oSymbolStkPop
   ] or >
   >>
  ;VariableDeclarations
  ] or >
  }
  [ (sVar)
  | sVar:
  @VariableDeclarations
   [ (sIdentifier)
   | sIdentifier:
   oSymbolStkPushLocalIdentifier
   [ oSymbolStkChooseKind (syUndefined)
   | syUndefined:
   ] or >
   @PublicDefinition
    [ (sArray)
    | *:
    >>
   ;PublicDefinition
   [ (sArray)
   | *:
   @TypeBody
    [ (sArray)
    | sArray:
    oTypeStkPush(tpArray)
    @IndexType
     oValuePush(one)
     @ConstantValue
      [ (sInteger)
      | sInteger:
      oTypeStkPush(tpInteger)
      oTypeStkLinkToStandardType(stdInteger)
      oValuePushInteger
      [ (sLike)
      | *:
      ] or >
      >>
     ;ConstantValue
     [ oTypeStkChooseKind (tpInteger)
     | tpInteger:
     oValuePushTypeStkLowerBound
     oValuePushTypeStkUpperBound
     ] or >
     oTypeStkPop
     oTypeStkEnterBounds
     [ oTypeStkVerifyBounds (yes)
     | yes:
     oValuePop
     ] or >
     oValuePop
     oValuePop
     >>
    ;IndexType
    @ComponentType
     @SimpleType
      ?sLike (sLike)
      [ (sStringLiteral)
      | sStringLiteral:
      oTypeStkPush(tpChar)
      oTypeStkLinkToStandardType(stdChar)
      ] or >
      >>
     ;SimpleType
     [ oTypeStkChooseKind (tpChar)
     | *:
     @TypeTblEnterIfNew
      [ oTypeStkChooseTypeReference (yes)
      | *:
      >>
     ;TypeTblEnterIfNew
     oTypeStkEnterComponentReference
     oTypeStkPop
     >>
    ;ComponentType
    oValuePop
    ] or >
    @TypeTblEnterIfNew
     [ oTypeStkChooseTypeReference (no)
     | no:
     oTypeTblEnter
     ] or >
     >>
    ;TypeTblEnterIfNew
    >>
   ;TypeBody
   @EnterVariableAttributes
    [ oSymbolStkChooseKind (syUndefined)
    | *:
    oSymbolStkSetKind(syVariable)
    [ oTypeStkChooseKind (tpArray)
    | *:
    @AllocateVar
     [ oSymbolStkChooseKind (syVariable)
     | *:
     [ oTypeStkChooseKind (tpArray)
     | tpArray:
     .tArrayDescriptor
     oAllocateAlignOnWord
     oSymbolStkEnterDataAddress
     .tLiteralInteger
     oValuePushTypeStkLowerBound
     oEmitValue
     % value emitted 0
     oValuePop
     .tLiteralAddress
     oEmitDataAddress
     % value emitted 268
     .tStoreInteger
     oAllocateDescriptor
     .tLiteralInteger
     oValuePushTypeStkUpperBound
     oEmitValue
     % value emitted 0
     oValuePop
     .tLiteralAddress
     oEmitDataAddress
     % value emitted 272
     .tStoreInteger
     oAllocateDescriptor
     oAllocateVariable
     ] or >
     >>
    ;AllocateVar
    oSymbolStkEnterTypeReference
    oSymbolTblEnter
    >>
   ;EnterVariableAttributes
   oTypeStkPop
   oSymbolStkPop
   ] or >
   >>
  ;VariableDeclarations
  ] or >
  }
  [ (sAssignmentStmt)
  | sAssignmentStmt:
  @AssignmentStmt
   ?sIdentifier (sIdentifier)
   oSymbolStkPushIdentifier
   .tAssignBegin
   @Variable
    [ oSymbolStkChooseKind (syVariable)
    | syVariable:
    .tLiteralAddress
    oValuePushSymbol
    oEmitValue
    % value emitted 4
    oValuePop
    ] or >
    oTypeStkPushSymbol
    @VariableExtension
     [ (sSubscript)
     | sSubscript:
     .tSubscriptBegin
     @Expression
      @Operand
       [ (sInteger)
       | sInteger:
       oValuePushInteger
       oSymbolStkPush(syExpression)
       oTypeStkPush(tpInteger)
       oTypeStkLinkToStandardType(stdInteger)
       .tLiteralInteger
       oEmitValue
       % value emitted 1
       oValuePop
       ] or >
       >>
      ;Operand
      @UnaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;UnaryOperator
      @BinaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;BinaryOperator
      [ (sExpnEnd)
      | sExpnEnd:
      ] or >
      >>
     ;Expression
     [ oTypeStkChooseKind (tpInteger)
     | tpInteger:
     ] or >
     oSymbolStkPop
     oTypeStkPop
     [ oTypeStkChooseKind (tpArray)
     | tpArray:
     oTypeStkPushComponent
     oTypeStkSwap
     oTypeStkPop
     ] or >
     [ oTypeStkChooseKind (tpChar)
     | tpChar:
     .tSubscriptChar
     ] or >
     ] or >
     >>
    ;VariableExtension
    >>
   ;Variable
   [ oTypeStkChooseKind (tpChar)
   | *:
   @Expression
    @Operand
     [ (sStringLiteral)
     | sStringLiteral:
     oSymbolStkPush(syExpression)
     @StringLiteral
      oValuePushStringLength
      .tSkipString
      oFixPushForwardBranch
      oEmitNullAddress
      % value emitted -32767
      .tStringData
      oEmitValue
      % value emitted 3
      oValuePop
      oValuePushCodeAddress
      oValueNegate
      oEmitString
      % value emitted 102
      % value emitted 108
      % value emitted 121
      % value emitted 0
      oFixPopForwardBranch
      oTypeStkPush(tpChar)
      oTypeStkLinkToStandardType(stdChar)
      oValuePush(one)
      oValuePushStringLength
      oTypeStkEnterBounds
      oValuePop
      oValuePop
      oTypeTblEnter
      >>
     ;StringLiteral
     [ oTypeStkChooseKind (tpChar)
     | tpChar:
     .tLiteralAddress
     oEmitValue
     % value emitted -48
     .tFetchChar
     ] or >
     oValuePop
     ] or >
     >>
    ;Operand
    @UnaryOperator
     [ (sExpnEnd)
     | *:
     >>
    ;UnaryOperator
    @BinaryOperator
     [ (sExpnEnd)
     | *:
     >>
    ;BinaryOperator
    [ (sExpnEnd)
    | sExpnEnd:
    ] or >
    >>
   ;Expression
   @CompareAndSwapTypes
    [ oTypeStkChooseKind (tpChar)
    | tpChar:
    oTypeStkSwap
    [ oTypeStkChooseKind (tpChar)
    | tpChar:
    ] or >
    ] or >
    >>
   ;CompareAndSwapTypes
   @EmitAssign
    [ oTypeStkChooseKind (tpChar)
    | tpChar:
    .tAssignChar
    ] or >
    >>
   ;EmitAssign
   oTypeStkPop
   oSymbolStkPop
   oTypeStkPop
   oSymbolStkPop
   >>
  ;AssignmentStmt
  ] or >
  }
  [ (sAssignmentStmt)
  | sAssignmentStmt:
  @AssignmentStmt
   ?sIdentifier (sIdentifier)
   oSymbolStkPushIdentifier
   .tAssignBegin
   @Variable
    [ oSymbolStkChooseKind (syVariable)
    | syVariable:
    .tLiteralAddress
    oValuePushSymbol
    oEmitValue
    % value emitted 4
    oValuePop
    ] or >
    oTypeStkPushSymbol
    @VariableExtension
     [ (sSubscript)
     | sSubscript:
     .tSubscriptBegin
     @Expression
      @Operand
       [ (sInteger)
       | sInteger:
       oValuePushInteger
       oSymbolStkPush(syExpression)
       oTypeStkPush(tpInteger)
       oTypeStkLinkToStandardType(stdInteger)
       .tLiteralInteger
       oEmitValue
       % value emitted 2
       oValuePop
       ] or >
       >>
      ;Operand
      @UnaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;UnaryOperator
      @BinaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;BinaryOperator
      [ (sExpnEnd)
      | sExpnEnd:
      ] or >
      >>
     ;Expression
     [ oTypeStkChooseKind (tpInteger)
     | tpInteger:
     ] or >
     oSymbolStkPop
     oTypeStkPop
     [ oTypeStkChooseKind (tpArray)
     | tpArray:
     oTypeStkPushComponent
     oTypeStkSwap
     oTypeStkPop
     ] or >
     [ oTypeStkChooseKind (tpChar)
     | tpChar:
     .tSubscriptChar
     ] or >
     ] or >
     >>
    ;VariableExtension
    >>
   ;Variable
   [ oTypeStkChooseKind (tpChar)
   | *:
   @Expression
    @Operand
     [ (sStringLiteral)
     | sStringLiteral:
     oSymbolStkPush(syExpression)
     @StringLiteral
      oValuePushStringLength
      .tSkipString
      oFixPushForwardBranch
      oEmitNullAddress
      % value emitted -32767
      .tStringData
      oEmitValue
      % value emitted 6
      oValuePop
      oValuePushCodeAddress
      oValueNegate
      oEmitString
      % value emitted 115
      % value emitted 112
      % value emitted 105
      % value emitted 100
      % value emitted 101
      % value emitted 114
      % value emitted 0
      oFixPopForwardBranch
      oTypeStkPush(tpChar)
      oTypeStkLinkToStandardType(stdChar)
      oValuePush(one)
      oValuePushStringLength
      oTypeStkEnterBounds
      oValuePop
      oValuePop
      oTypeTblEnter
      >>
     ;StringLiteral
     [ oTypeStkChooseKind (tpChar)
     | tpChar:
     .tLiteralAddress
     oEmitValue
     % value emitted -69
     .tFetchChar
     ] or >
     oValuePop
     ] or >
     >>
    ;Operand
    @UnaryOperator
     [ (sExpnEnd)
     | *:
     >>
    ;UnaryOperator
    @BinaryOperator
     [ (sExpnEnd)
     | *:
     >>
    ;BinaryOperator
    [ (sExpnEnd)
    | sExpnEnd:
    ] or >
    >>
   ;Expression
   @CompareAndSwapTypes
    [ oTypeStkChooseKind (tpChar)
    | tpChar:
    oTypeStkSwap
    [ oTypeStkChooseKind (tpChar)
    | tpChar:
    ] or >
    ] or >
    >>
   ;CompareAndSwapTypes
   @EmitAssign
    [ oTypeStkChooseKind (tpChar)
    | tpChar:
    .tAssignChar
    ] or >
    >>
   ;EmitAssign
   oTypeStkPop
   oSymbolStkPop
   oTypeStkPop
   oSymbolStkPop
   >>
  ;AssignmentStmt
  ] or >
  }
  [ (sAssignmentStmt)
  | sAssignmentStmt:
  @AssignmentStmt
   ?sIdentifier (sIdentifier)
   oSymbolStkPushIdentifier
   .tAssignBegin
   @Variable
    [ oSymbolStkChooseKind (syVariable)
    | syVariable:
    .tLiteralAddress
    oValuePushSymbol
    oEmitValue
    % value emitted 4
    oValuePop
    ] or >
    oTypeStkPushSymbol
    @VariableExtension
     [ (sSubscript)
     | sSubscript:
     .tSubscriptBegin
     @Expression
      @Operand
       [ (sInteger)
       | sInteger:
       oValuePushInteger
       oSymbolStkPush(syExpression)
       oTypeStkPush(tpInteger)
       oTypeStkLinkToStandardType(stdInteger)
       .tLiteralInteger
       oEmitValue
       % value emitted 3
       oValuePop
       ] or >
       >>
      ;Operand
      @UnaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;UnaryOperator
      @BinaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;BinaryOperator
      [ (sExpnEnd)
      | sExpnEnd:
      ] or >
      >>
     ;Expression
     [ oTypeStkChooseKind (tpInteger)
     | tpInteger:
     ] or >
     oSymbolStkPop
     oTypeStkPop
     [ oTypeStkChooseKind (tpArray)
     | tpArray:
     oTypeStkPushComponent
     oTypeStkSwap
     oTypeStkPop
     ] or >
     [ oTypeStkChooseKind (tpChar)
     | tpChar:
     .tSubscriptChar
     ] or >
     ] or >
     >>
    ;VariableExtension
    >>
   ;Variable
   [ oTypeStkChooseKind (tpChar)
   | *:
   @Expression
    @Operand
     [ (sStringLiteral)
     | sStringLiteral:
     oSymbolStkPush(syExpression)
     @StringLiteral
      oValuePushStringLength
      .tSkipString
      oFixPushForwardBranch
      oEmitNullAddress
      % value emitted -32767
      .tStringData
      oEmitValue
      % value emitted 4
      oValuePop
      oValuePushCodeAddress
      oValueNegate
      oEmitString
      % value emitted 98
      % value emitted 105
      % value emitted 114
      % value emitted 100
      % value emitted 0
      oFixPopForwardBranch
      oTypeStkPush(tpChar)
      oTypeStkLinkToStandardType(stdChar)
      oValuePush(one)
      oValuePushStringLength
      oTypeStkEnterBounds
      oValuePop
      oValuePop
      oTypeTblEnter
      >>
     ;StringLiteral
     [ oTypeStkChooseKind (tpChar)
     | tpChar:
     .tLiteralAddress
     oEmitValue
     % value emitted -93
     .tFetchChar
     ] or >
     oValuePop
     ] or >
     >>
    ;Operand
    @UnaryOperator
     [ (sExpnEnd)
     | *:
     >>
    ;UnaryOperator
    @BinaryOperator
     [ (sExpnEnd)
     | *:
     >>
    ;BinaryOperator
    [ (sExpnEnd)
    | sExpnEnd:
    ] or >
    >>
   ;Expression
   @CompareAndSwapTypes
    [ oTypeStkChooseKind (tpChar)
    | tpChar:
    oTypeStkSwap
    [ oTypeStkChooseKind (tpChar)
    | tpChar:
    ] or >
    ] or >
    >>
   ;CompareAndSwapTypes
   @EmitAssign
    [ oTypeStkChooseKind (tpChar)
    | tpChar:
    .tAssignChar
    ] or >
    >>
   ;EmitAssign
   oTypeStkPop
   oSymbolStkPop
   oTypeStkPop
   oSymbolStkPop
   >>
  ;AssignmentStmt
  ] or >
  }
  [ (sAssignmentStmt)
  | sAssignmentStmt:
  @AssignmentStmt
   ?sIdentifier (sIdentifier)
   oSymbolStkPushIdentifier
   .tAssignBegin
   @Variable
    [ oSymbolStkChooseKind (syVariable)
    | syVariable:
    .tLiteralAddress
    oValuePushSymbol
    oEmitValue
    % value emitted 4
    oValuePop
    ] or >
    oTypeStkPushSymbol
    @VariableExtension
     [ (sSubscript)
     | sSubscript:
     .tSubscriptBegin
     @Expression
      @Operand
       [ (sInteger)
       | sInteger:
       oValuePushInteger
       oSymbolStkPush(syExpression)
       oTypeStkPush(tpInteger)
       oTypeStkLinkToStandardType(stdInteger)
       .tLiteralInteger
       oEmitValue
       % value emitted 4
       oValuePop
       ] or >
       >>
      ;Operand
      @UnaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;UnaryOperator
      @BinaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;BinaryOperator
      [ (sExpnEnd)
      | sExpnEnd:
      ] or >
      >>
     ;Expression
     [ oTypeStkChooseKind (tpInteger)
     | tpInteger:
     ] or >
     oSymbolStkPop
     oTypeStkPop
     [ oTypeStkChooseKind (tpArray)
     | tpArray:
     oTypeStkPushComponent
     oTypeStkSwap
     oTypeStkPop
     ] or >
     [ oTypeStkChooseKind (tpChar)
     | tpChar:
     .tSubscriptChar
     ] or >
     ] or >
     >>
    ;VariableExtension
    >>
   ;Variable
   [ oTypeStkChooseKind (tpChar)
   | *:
   @Expression
    @Operand
     [ (sStringLiteral)
     | sStringLiteral:
     oSymbolStkPush(syExpression)
     @StringLiteral
      oValuePushStringLength
      .tSkipString
      oFixPushForwardBranch
      oEmitNullAddress
      % value emitted -32767
      .tStringData
      oEmitValue
      % value emitted 3
      oValuePop
      oValuePushCodeAddress
      oValueNegate
      oEmitString
      % value emitted 99
      % value emitted 97
      % value emitted 116
      % value emitted 0
      oFixPopForwardBranch
      oTypeStkPush(tpChar)
      oTypeStkLinkToStandardType(stdChar)
      oValuePush(one)
      oValuePushStringLength
      oTypeStkEnterBounds
      oValuePop
      oValuePop
      oTypeTblEnter
      >>
     ;StringLiteral
     [ oTypeStkChooseKind (tpChar)
     | tpChar:
     .tLiteralAddress
     oEmitValue
     % value emitted -115
     .tFetchChar
     ] or >
     oValuePop
     ] or >
     >>
    ;Operand
    @UnaryOperator
     [ (sExpnEnd)
     | *:
     >>
    ;UnaryOperator
    @BinaryOperator
     [ (sExpnEnd)
     | *:
     >>
    ;BinaryOperator
    [ (sExpnEnd)
    | sExpnEnd:
    ] or >
    >>
   ;Expression
   @CompareAndSwapTypes
    [ oTypeStkChooseKind (tpChar)
    | tpChar:
    oTypeStkSwap
    [ oTypeStkChooseKind (tpChar)
    | tpChar:
    ] or >
    ] or >
    >>
   ;CompareAndSwapTypes
   @EmitAssign
    [ oTypeStkChooseKind (tpChar)
    | tpChar:
    .tAssignChar
    ] or >
    >>
   ;EmitAssign
   oTypeStkPop
   oSymbolStkPop
   oTypeStkPop
   oSymbolStkPop
   >>
  ;AssignmentStmt
  ] or >
  }
  [ (sAssignmentStmt)
  | sAssignmentStmt:
  @AssignmentStmt
   ?sIdentifier (sIdentifier)
   oSymbolStkPushIdentifier
   .tAssignBegin
   @Variable
    [ oSymbolStkChooseKind (syVariable)
    | syVariable:
    .tLiteralAddress
    oValuePushSymbol
    oEmitValue
    % value emitted 4
    oValuePop
    ] or >
    oTypeStkPushSymbol
    @VariableExtension
     [ (sSubscript)
     | sSubscript:
     .tSubscriptBegin
     @Expression
      @Operand
       [ (sInteger)
       | sInteger:
       oValuePushInteger
       oSymbolStkPush(syExpression)
       oTypeStkPush(tpInteger)
       oTypeStkLinkToStandardType(stdInteger)
       .tLiteralInteger
       oEmitValue
       % value emitted 5
       oValuePop
       ] or >
       >>
      ;Operand
      @UnaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;UnaryOperator
      @BinaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;BinaryOperator
      [ (sExpnEnd)
      | sExpnEnd:
      ] or >
      >>
     ;Expression
     [ oTypeStkChooseKind (tpInteger)
     | tpInteger:
     ] or >
     oSymbolStkPop
     oTypeStkPop
     [ oTypeStkChooseKind (tpArray)
     | tpArray:
     oTypeStkPushComponent
     oTypeStkSwap
     oTypeStkPop
     ] or >
     [ oTypeStkChooseKind (tpChar)
     | tpChar:
     .tSubscriptChar
     ] or >
     ] or >
     >>
    ;VariableExtension
    >>
   ;Variable
   [ oTypeStkChooseKind (tpChar)
   | *:
   @Expression
    @Operand
     [ (sStringLiteral)
     | sStringLiteral:
     oSymbolStkPush(syExpression)
     @StringLiteral
      oValuePushStringLength
      .tSkipString
      oFixPushForwardBranch
      oEmitNullAddress
      % value emitted -32767
      .tStringData
      oEmitValue
      % value emitted 3
      oValuePop
      oValuePushCodeAddress
      oValueNegate
      oEmitString
      % value emitted 100
      % value emitted 111
      % value emitted 103
      % value emitted 0
      oFixPopForwardBranch
      oTypeStkPush(tpChar)
      oTypeStkLinkToStandardType(stdChar)
      oValuePush(one)
      oValuePushStringLength
      oTypeStkEnterBounds
      oValuePop
      oValuePop
      oTypeTblEnter
      >>
     ;StringLiteral
     [ oTypeStkChooseKind (tpChar)
     | tpChar:
     .tLiteralAddress
     oEmitValue
     % value emitted -136
     .tFetchChar
     ] or >
     oValuePop
     ] or >
     >>
    ;Operand
    @UnaryOperator
     [ (sExpnEnd)
     | *:
     >>
    ;UnaryOperator
    @BinaryOperator
     [ (sExpnEnd)
     | *:
     >>
    ;BinaryOperator
    [ (sExpnEnd)
    | sExpnEnd:
    ] or >
    >>
   ;Expression
   @CompareAndSwapTypes
    [ oTypeStkChooseKind (tpChar)
    | tpChar:
    oTypeStkSwap
    [ oTypeStkChooseKind (tpChar)
    | tpChar:
    ] or >
    ] or >
    >>
   ;CompareAndSwapTypes
   @EmitAssign
    [ oTypeStkChooseKind (tpChar)
    | tpChar:
    .tAssignChar
    ] or >
    >>
   ;EmitAssign
   oTypeStkPop
   oSymbolStkPop
   oTypeStkPop
   oSymbolStkPop
   >>
  ;AssignmentStmt
  ] or >
  }
  [ (sAssignmentStmt)
  | sAssignmentStmt:
  @AssignmentStmt
   ?sIdentifier (sIdentifier)
   oSymbolStkPushIdentifier
   .tAssignBegin
   @Variable
    [ oSymbolStkChooseKind (syVariable)
    | syVariable:
    .tLiteralAddress
    oValuePushSymbol
    oEmitValue
    % value emitted 4
    oValuePop
    ] or >
    oTypeStkPushSymbol
    @VariableExtension
     [ (sSubscript)
     | sSubscript:
     .tSubscriptBegin
     @Expression
      @Operand
       [ (sInteger)
       | sInteger:
       oValuePushInteger
       oSymbolStkPush(syExpression)
       oTypeStkPush(tpInteger)
       oTypeStkLinkToStandardType(stdInteger)
       .tLiteralInteger
       oEmitValue
       % value emitted 6
       oValuePop
       ] or >
       >>
      ;Operand
      @UnaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;UnaryOperator
      @BinaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;BinaryOperator
      [ (sExpnEnd)
      | sExpnEnd:
      ] or >
      >>
     ;Expression
     [ oTypeStkChooseKind (tpInteger)
     | tpInteger:
     ] or >
     oSymbolStkPop
     oTypeStkPop
     [ oTypeStkChooseKind (tpArray)
     | tpArray:
     oTypeStkPushComponent
     oTypeStkSwap
     oTypeStkPop
     ] or >
     [ oTypeStkChooseKind (tpChar)
     | tpChar:
     .tSubscriptChar
     ] or >
     ] or >
     >>
    ;VariableExtension
    >>
   ;Variable
   [ oTypeStkChooseKind (tpChar)
   | *:
   @Expression
    @Operand
     [ (sStringLiteral)
     | sStringLiteral:
     oSymbolStkPush(syExpression)
     @StringLiteral
      oValuePushStringLength
      .tSkipString
      oFixPushForwardBranch
      oEmitNullAddress
      % value emitted -32767
      .tStringData
      oEmitValue
      % value emitted 4
      oValuePop
      oValuePushCodeAddress
      oValueNegate
      oEmitString
      % value emitted 103
      % value emitted 111
      % value emitted 97
      % value emitted 116
      % value emitted 0
      oFixPopForwardBranch
      oTypeStkPush(tpChar)
      oTypeStkLinkToStandardType(stdChar)
      oValuePush(one)
      oValuePushStringLength
      oTypeStkEnterBounds
      oValuePop
      oValuePop
      oTypeTblEnter
      >>
     ;StringLiteral
     [ oTypeStkChooseKind (tpChar)
     | tpChar:
     .tLiteralAddress
     oEmitValue
     % value emitted -157
     .tFetchChar
     ] or >
     oValuePop
     ] or >
     >>
    ;Operand
    @UnaryOperator
     [ (sExpnEnd)
     | *:
     >>
    ;UnaryOperator
    @BinaryOperator
     [ (sExpnEnd)
     | *:
     >>
    ;BinaryOperator
    [ (sExpnEnd)
    | sExpnEnd:
    ] or >
    >>
   ;Expression
   @CompareAndSwapTypes
    [ oTypeStkChooseKind (tpChar)
    | tpChar:
    oTypeStkSwap
    [ oTypeStkChooseKind (tpChar)
    | tpChar:
    ] or >
    ] or >
    >>
   ;CompareAndSwapTypes
   @EmitAssign
    [ oTypeStkChooseKind (tpChar)
    | tpChar:
    .tAssignChar
    ] or >
    >>
   ;EmitAssign
   oTypeStkPop
   oSymbolStkPop
   oTypeStkPop
   oSymbolStkPop
   >>
  ;AssignmentStmt
  ] or >
  }
  [ (sAssignmentStmt)
  | sAssignmentStmt:
  @AssignmentStmt
   ?sIdentifier (sIdentifier)
   oSymbolStkPushIdentifier
   .tAssignBegin
   @Variable
    [ oSymbolStkChooseKind (syVariable)
    | syVariable:
    .tLiteralAddress
    oValuePushSymbol
    oEmitValue
    % value emitted 4
    oValuePop
    ] or >
    oTypeStkPushSymbol
    @VariableExtension
     [ (sSubscript)
     | sSubscript:
     .tSubscriptBegin
     @Expression
      @Operand
       [ (sInteger)
       | sInteger:
       oValuePushInteger
       oSymbolStkPush(syExpression)
       oTypeStkPush(tpInteger)
       oTypeStkLinkToStandardType(stdInteger)
       .tLiteralInteger
       oEmitValue
       % value emitted 7
       oValuePop
       ] or >
       >>
      ;Operand
      @UnaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;UnaryOperator
      @BinaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;BinaryOperator
      [ (sExpnEnd)
      | sExpnEnd:
      ] or >
      >>
     ;Expression
     [ oTypeStkChooseKind (tpInteger)
     | tpInteger:
     ] or >
     oSymbolStkPop
     oTypeStkPop
     [ oTypeStkChooseKind (tpArray)
     | tpArray:
     oTypeStkPushComponent
     oTypeStkSwap
     oTypeStkPop
     ] or >
     [ oTypeStkChooseKind (tpChar)
     | tpChar:
     .tSubscriptChar
     ] or >
     ] or >
     >>
    ;VariableExtension
    >>
   ;Variable
   [ oTypeStkChooseKind (tpChar)
   | *:
   @Expression
    @Operand
     [ (sStringLiteral)
     | sStringLiteral:
     oSymbolStkPush(syExpression)
     @StringLiteral
      oValuePushStringLength
      .tSkipString
      oFixPushForwardBranch
      oEmitNullAddress
      % value emitted -32767
      .tStringData
      oEmitValue
      % value emitted 3
      oValuePop
      oValuePushCodeAddress
      oValueNegate
      oEmitString
      % value emitted 99
      % value emitted 111
      % value emitted 119
      % value emitted 0
      oFixPopForwardBranch
      oTypeStkPush(tpChar)
      oTypeStkLinkToStandardType(stdChar)
      oValuePush(one)
      oValuePushStringLength
      oTypeStkEnterBounds
      oValuePop
      oValuePop
      oTypeTblEnter
      >>
     ;StringLiteral
     [ oTypeStkChooseKind (tpChar)
     | tpChar:
     .tLiteralAddress
     oEmitValue
     % value emitted -179
     .tFetchChar
     ] or >
     oValuePop
     ] or >
     >>
    ;Operand
    @UnaryOperator
     [ (sExpnEnd)
     | *:
     >>
    ;UnaryOperator
    @BinaryOperator
     [ (sExpnEnd)
     | *:
     >>
    ;BinaryOperator
    [ (sExpnEnd)
    | sExpnEnd:
    ] or >
    >>
   ;Expression
   @CompareAndSwapTypes
    [ oTypeStkChooseKind (tpChar)
    | tpChar:
    oTypeStkSwap
    [ oTypeStkChooseKind (tpChar)
    | tpChar:
    ] or >
    ] or >
    >>
   ;CompareAndSwapTypes
   @EmitAssign
    [ oTypeStkChooseKind (tpChar)
    | tpChar:
    .tAssignChar
    ] or >
    >>
   ;EmitAssign
   oTypeStkPop
   oSymbolStkPop
   oTypeStkPop
   oSymbolStkPop
   >>
  ;AssignmentStmt
  ] or >
  }
  [ (sAssignmentStmt)
  | sAssignmentStmt:
  @AssignmentStmt
   ?sIdentifier (sIdentifier)
   oSymbolStkPushIdentifier
   .tAssignBegin
   @Variable
    [ oSymbolStkChooseKind (syVariable)
    | syVariable:
    .tLiteralAddress
    oValuePushSymbol
    oEmitValue
    % value emitted 4
    oValuePop
    ] or >
    oTypeStkPushSymbol
    @VariableExtension
     [ (sSubscript)
     | sSubscript:
     .tSubscriptBegin
     @Expression
      @Operand
       [ (sInteger)
       | sInteger:
       oValuePushInteger
       oSymbolStkPush(syExpression)
       oTypeStkPush(tpInteger)
       oTypeStkLinkToStandardType(stdInteger)
       .tLiteralInteger
       oEmitValue
       % value emitted 8
       oValuePop
       ] or >
       >>
      ;Operand
      @UnaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;UnaryOperator
      @BinaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;BinaryOperator
      [ (sExpnEnd)
      | sExpnEnd:
      ] or >
      >>
     ;Expression
     [ oTypeStkChooseKind (tpInteger)
     | tpInteger:
     ] or >
     oSymbolStkPop
     oTypeStkPop
     [ oTypeStkChooseKind (tpArray)
     | tpArray:
     oTypeStkPushComponent
     oTypeStkSwap
     oTypeStkPop
     ] or >
     [ oTypeStkChooseKind (tpChar)
     | tpChar:
     .tSubscriptChar
     ] or >
     ] or >
     >>
    ;VariableExtension
    >>
   ;Variable
   [ oTypeStkChooseKind (tpChar)
   | *:
   @Expression
    @Operand
     [ (sStringLiteral)
     | sStringLiteral:
     oSymbolStkPush(syExpression)
     @StringLiteral
      oValuePushStringLength
      .tSkipString
      oFixPushForwardBranch
      oEmitNullAddress
      % value emitted -32767
      .tStringData
      oEmitValue
      % value emitted 5
      oValuePop
      oValuePushCodeAddress
      oValueNegate
      oEmitString
      % value emitted 104
      % value emitted 111
      % value emitted 114
      % value emitted 115
      % value emitted 101
      % value emitted 0
      oFixPopForwardBranch
      oTypeStkPush(tpChar)
      oTypeStkLinkToStandardType(stdChar)
      oValuePush(one)
      oValuePushStringLength
      oTypeStkEnterBounds
      oValuePop
      oValuePop
      oTypeTblEnter
      >>
     ;StringLiteral
     [ oTypeStkChooseKind (tpChar)
     | tpChar:
     .tLiteralAddress
     oEmitValue
     % value emitted -200
     .tFetchChar
     ] or >
     oValuePop
     ] or >
     >>
    ;Operand
    @UnaryOperator
     [ (sExpnEnd)
     | *:
     >>
    ;UnaryOperator
    @BinaryOperator
     [ (sExpnEnd)
     | *:
     >>
    ;BinaryOperator
    [ (sExpnEnd)
    | sExpnEnd:
    ] or >
    >>
   ;Expression
   @CompareAndSwapTypes
    [ oTypeStkChooseKind (tpChar)
    | tpChar:
    oTypeStkSwap
    [ oTypeStkChooseKind (tpChar)
    | tpChar:
    ] or >
    ] or >
    >>
   ;CompareAndSwapTypes
   @EmitAssign
    [ oTypeStkChooseKind (tpChar)
    | tpChar:
    .tAssignChar
    ] or >
    >>
   ;EmitAssign
   oTypeStkPop
   oSymbolStkPop
   oTypeStkPop
   oSymbolStkPop
   >>
  ;AssignmentStmt
  ] or >
  }
  [ (sAssignmentStmt)
  | sAssignmentStmt:
  @AssignmentStmt
   ?sIdentifier (sIdentifier)
   oSymbolStkPushIdentifier
   .tAssignBegin
   @Variable
    [ oSymbolStkChooseKind (syVariable)
    | syVariable:
    .tLiteralAddress
    oValuePushSymbol
    oEmitValue
    % value emitted 268
    oValuePop
    ] or >
    oTypeStkPushSymbol
    @VariableExtension
     [ (sSubscript)
     | sSubscript:
     .tSubscriptBegin
     @Expression
      @Operand
       [ (sInteger)
       | sInteger:
       oValuePushInteger
       oSymbolStkPush(syExpression)
       oTypeStkPush(tpInteger)
       oTypeStkLinkToStandardType(stdInteger)
       .tLiteralInteger
       oEmitValue
       % value emitted 1
       oValuePop
       ] or >
       >>
      ;Operand
      @UnaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;UnaryOperator
      @BinaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;BinaryOperator
      [ (sExpnEnd)
      | sExpnEnd:
      ] or >
      >>
     ;Expression
     [ oTypeStkChooseKind (tpInteger)
     | tpInteger:
     ] or >
     oSymbolStkPop
     oTypeStkPop
     [ oTypeStkChooseKind (tpArray)
     | tpArray:
     oTypeStkPushComponent
     oTypeStkSwap
     oTypeStkPop
     ] or >
     [ oTypeStkChooseKind (tpChar)
     | tpChar:
     .tSubscriptChar
     ] or >
     ] or >
     >>
    ;VariableExtension
    >>
   ;Variable
   [ oTypeStkChooseKind (tpChar)
   | *:
   @Expression
    @Operand
     [ (sStringLiteral)
     | sStringLiteral:
     oSymbolStkPush(syExpression)
     @StringLiteral
      oValuePushStringLength
      .tSkipString
      oFixPushForwardBranch
      oEmitNullAddress
      % value emitted -32767
      .tStringData
      oEmitValue
      % value emitted 37
      oValuePop
      oValuePushCodeAddress
      oValueNegate
      oEmitString
      % value emitted 73
      % value emitted 32
      % value emitted 100
      % value emitted 111
      % value emitted 110
      % value emitted 39
      % value emitted 116
      % value emitted 32
      % value emitted 107
      % value emitted 110
      % value emitted 111
      % value emitted 119
      % value emitted 32
      % value emitted 119
      % value emitted 104
      % value emitted 121
      % value emitted 32
      % value emitted 115
      % value emitted 104
      % value emitted 101
      % value emitted 32
      % value emitted 115
      % value emitted 119
      % value emitted 97
      % value emitted 108
      % value emitted 108
      % value emitted 111
      % value emitted 119
      % value emitted 101
      % value emitted 100
      % value emitted 32
      % value emitted 97
      % value emitted 32
      % value emitted 102
      % value emitted 108
      % value emitted 121
      % value emitted 46
      % value emitted 0
      oFixPopForwardBranch
      oTypeStkPush(tpChar)
      oTypeStkLinkToStandardType(stdChar)
      oValuePush(one)
      oValuePushStringLength
      oTypeStkEnterBounds
      oValuePop
      oValuePop
      oTypeTblEnter
      >>
     ;StringLiteral
     [ oTypeStkChooseKind (tpChar)
     | tpChar:
     .tLiteralAddress
     oEmitValue
     % value emitted -223
     .tFetchChar
     ] or >
     oValuePop
     ] or >
     >>
    ;Operand
    @UnaryOperator
     [ (sExpnEnd)
     | *:
     >>
    ;UnaryOperator
    @BinaryOperator
     [ (sExpnEnd)
     | *:
     >>
    ;BinaryOperator
    [ (sExpnEnd)
    | sExpnEnd:
    ] or >
    >>
   ;Expression
   @CompareAndSwapTypes
    [ oTypeStkChooseKind (tpChar)
    | tpChar:
    oTypeStkSwap
    [ oTypeStkChooseKind (tpChar)
    | tpChar:
    ] or >
    ] or >
    >>
   ;CompareAndSwapTypes
   @EmitAssign
    [ oTypeStkChooseKind (tpChar)
    | tpChar:
    .tAssignChar
    ] or >
    >>
   ;EmitAssign
   oTypeStkPop
   oSymbolStkPop
   oTypeStkPop
   oSymbolStkPop
   >>
  ;AssignmentStmt
  ] or >
  }
  [ (sAssignmentStmt)
  | sAssignmentStmt:
  @AssignmentStmt
   ?sIdentifier (sIdentifier)
   oSymbolStkPushIdentifier
   .tAssignBegin
   @Variable
    [ oSymbolStkChooseKind (syVariable)
    | syVariable:
    .tLiteralAddress
    oValuePushSymbol
    oEmitValue
    % value emitted 268
    oValuePop
    ] or >
    oTypeStkPushSymbol
    @VariableExtension
     [ (sSubscript)
     | sSubscript:
     .tSubscriptBegin
     @Expression
      @Operand
       [ (sInteger)
       | sInteger:
       oValuePushInteger
       oSymbolStkPush(syExpression)
       oTypeStkPush(tpInteger)
       oTypeStkLinkToStandardType(stdInteger)
       .tLiteralInteger
       oEmitValue
       % value emitted 2
       oValuePop
       ] or >
       >>
      ;Operand
      @UnaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;UnaryOperator
      @BinaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;BinaryOperator
      [ (sExpnEnd)
      | sExpnEnd:
      ] or >
      >>
     ;Expression
     [ oTypeStkChooseKind (tpInteger)
     | tpInteger:
     ] or >
     oSymbolStkPop
     oTypeStkPop
     [ oTypeStkChooseKind (tpArray)
     | tpArray:
     oTypeStkPushComponent
     oTypeStkSwap
     oTypeStkPop
     ] or >
     [ oTypeStkChooseKind (tpChar)
     | tpChar:
     .tSubscriptChar
     ] or >
     ] or >
     >>
    ;VariableExtension
    >>
   ;Variable
   [ oTypeStkChooseKind (tpChar)
   | *:
   @Expression
    @Operand
     [ (sStringLiteral)
     | sStringLiteral:
     oSymbolStkPush(syExpression)
     @StringLiteral
      oValuePushStringLength
      .tSkipString
      oFixPushForwardBranch
      oEmitNullAddress
      % value emitted -32767
      .tStringData
      oEmitValue
      % value emitted 48
      oValuePop
      oValuePushCodeAddress
      oValueNegate
      oEmitString
      % value emitted 84
      % value emitted 104
      % value emitted 97
      % value emitted 116
      % value emitted 32
      % value emitted 119
      % value emitted 105
      % value emitted 103
      % value emitted 103
      % value emitted 108
      % value emitted 101
      % value emitted 100
      % value emitted 32
      % value emitted 97
      % value emitted 110
      % value emitted 100
      % value emitted 32
      % value emitted 106
      % value emitted 105
      % value emitted 103
      % value emitted 103
      % value emitted 108
      % value emitted 101
      % value emitted 100
      % value emitted 32
      % value emitted 97
      % value emitted 110
      % value emitted 100
      % value emitted 32
      % value emitted 116
      % value emitted 105
      % value emitted 99
      % value emitted 107
      % value emitted 108
      % value emitted 101
      % value emitted 100
      % value emitted 32
      % value emitted 105
      % value emitted 110
      % value emitted 115
      % value emitted 105
      % value emitted 100
      % value emitted 101
      % value emitted 32
      % value emitted 104
      % value emitted 101
      % value emitted 114
      % value emitted 46
      % value emitted 0
      oFixPopForwardBranch
      oTypeStkPush(tpChar)
      oTypeStkLinkToStandardType(stdChar)
      oValuePush(one)
      oValuePushStringLength
      oTypeStkEnterBounds
      oValuePop
      oValuePop
      oTypeTblEnter
      >>
     ;StringLiteral
     [ oTypeStkChooseKind (tpChar)
     | tpChar:
     .tLiteralAddress
     oEmitValue
     % value emitted -278
     .tFetchChar
     ] or >
     oValuePop
     ] or >
     >>
    ;Operand
    @UnaryOperator
     [ (sExpnEnd)
     | *:
     >>
    ;UnaryOperator
    @BinaryOperator
     [ (sExpnEnd)
     | *:
     >>
    ;BinaryOperator
    [ (sExpnEnd)
    | sExpnEnd:
    ] or >
    >>
   ;Expression
   @CompareAndSwapTypes
    [ oTypeStkChooseKind (tpChar)
    | tpChar:
    oTypeStkSwap
    [ oTypeStkChooseKind (tpChar)
    | tpChar:
    ] or >
    ] or >
    >>
   ;CompareAndSwapTypes
   @EmitAssign
    [ oTypeStkChooseKind (tpChar)
    | tpChar:
    .tAssignChar
    ] or >
    >>
   ;EmitAssign
   oTypeStkPop
   oSymbolStkPop
   oTypeStkPop
   oSymbolStkPop
   >>
  ;AssignmentStmt
  ] or >
  }
  [ (sAssignmentStmt)
  | sAssignmentStmt:
  @AssignmentStmt
   ?sIdentifier (sIdentifier)
   oSymbolStkPushIdentifier
   .tAssignBegin
   @Variable
    [ oSymbolStkChooseKind (syVariable)
    | syVariable:
    .tLiteralAddress
    oValuePushSymbol
    oEmitValue
    % value emitted 268
    oValuePop
    ] or >
    oTypeStkPushSymbol
    @VariableExtension
     [ (sSubscript)
     | sSubscript:
     .tSubscriptBegin
     @Expression
      @Operand
       [ (sInteger)
       | sInteger:
       oValuePushInteger
       oSymbolStkPush(syExpression)
       oTypeStkPush(tpInteger)
       oTypeStkLinkToStandardType(stdInteger)
       .tLiteralInteger
       oEmitValue
       % value emitted 3
       oValuePop
       ] or >
       >>
      ;Operand
      @UnaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;UnaryOperator
      @BinaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;BinaryOperator
      [ (sExpnEnd)
      | sExpnEnd:
      ] or >
      >>
     ;Expression
     [ oTypeStkChooseKind (tpInteger)
     | tpInteger:
     ] or >
     oSymbolStkPop
     oTypeStkPop
     [ oTypeStkChooseKind (tpArray)
     | tpArray:
     oTypeStkPushComponent
     oTypeStkSwap
     oTypeStkPop
     ] or >
     [ oTypeStkChooseKind (tpChar)
     | tpChar:
     .tSubscriptChar
     ] or >
     ] or >
     >>
    ;VariableExtension
    >>
   ;Variable
   [ oTypeStkChooseKind (tpChar)
   | *:
   @Expression
    @Operand
     [ (sStringLiteral)
     | sStringLiteral:
     oSymbolStkPush(syExpression)
     @StringLiteral
      oValuePushStringLength
      .tSkipString
      oFixPushForwardBranch
      oEmitNullAddress
      % value emitted -32767
      .tStringData
      oEmitValue
      % value emitted 30
      oValuePop
      oValuePushCodeAddress
      oValueNegate
      oEmitString
      % value emitted 72
      % value emitted 111
      % value emitted 119
      % value emitted 32
      % value emitted 97
      % value emitted 98
      % value emitted 115
      % value emitted 117
      % value emitted 114
      % value emitted 100
      % value emitted 44
      % value emitted 32
      % value emitted 116
      % value emitted 111
      % value emitted 32
      % value emitted 115
      % value emitted 119
      % value emitted 97
      % value emitted 108
      % value emitted 108
      % value emitted 111
      % value emitted 119
      % value emitted 32
      % value emitted 97
      % value emitted 32
      % value emitted 98
      % value emitted 105
      % value emitted 114
      % value emitted 100
      % value emitted 46
      % value emitted 0
      oFixPopForwardBranch
      oTypeStkPush(tpChar)
      oTypeStkLinkToStandardType(stdChar)
      oValuePush(one)
      oValuePushStringLength
      oTypeStkEnterBounds
      oValuePop
      oValuePop
      oTypeTblEnter
      >>
     ;StringLiteral
     [ oTypeStkChooseKind (tpChar)
     | tpChar:
     .tLiteralAddress
     oEmitValue
     % value emitted -344
     .tFetchChar
     ] or >
     oValuePop
     ] or >
     >>
    ;Operand
    @UnaryOperator
     [ (sExpnEnd)
     | *:
     >>
    ;UnaryOperator
    @BinaryOperator
     [ (sExpnEnd)
     | *:
     >>
    ;BinaryOperator
    [ (sExpnEnd)
    | sExpnEnd:
    ] or >
    >>
   ;Expression
   @CompareAndSwapTypes
    [ oTypeStkChooseKind (tpChar)
    | tpChar:
    oTypeStkSwap
    [ oTypeStkChooseKind (tpChar)
    | tpChar:
    ] or >
    ] or >
    >>
   ;CompareAndSwapTypes
   @EmitAssign
    [ oTypeStkChooseKind (tpChar)
    | tpChar:
    .tAssignChar
    ] or >
    >>
   ;EmitAssign
   oTypeStkPop
   oSymbolStkPop
   oTypeStkPop
   oSymbolStkPop
   >>
  ;AssignmentStmt
  ] or >
  }
  [ (sAssignmentStmt)
  | sAssignmentStmt:
  @AssignmentStmt
   ?sIdentifier (sIdentifier)
   oSymbolStkPushIdentifier
   .tAssignBegin
   @Variable
    [ oSymbolStkChooseKind (syVariable)
    | syVariable:
    .tLiteralAddress
    oValuePushSymbol
    oEmitValue
    % value emitted 268
    oValuePop
    ] or >
    oTypeStkPushSymbol
    @VariableExtension
     [ (sSubscript)
     | sSubscript:
     .tSubscriptBegin
     @Expression
      @Operand
       [ (sInteger)
       | sInteger:
       oValuePushInteger
       oSymbolStkPush(syExpression)
       oTypeStkPush(tpInteger)
       oTypeStkLinkToStandardType(stdInteger)
       .tLiteralInteger
       oEmitValue
       % value emitted 4
       oValuePop
       ] or >
       >>
      ;Operand
      @UnaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;UnaryOperator
      @BinaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;BinaryOperator
      [ (sExpnEnd)
      | sExpnEnd:
      ] or >
      >>
     ;Expression
     [ oTypeStkChooseKind (tpInteger)
     | tpInteger:
     ] or >
     oSymbolStkPop
     oTypeStkPop
     [ oTypeStkChooseKind (tpArray)
     | tpArray:
     oTypeStkPushComponent
     oTypeStkSwap
     oTypeStkPop
     ] or >
     [ oTypeStkChooseKind (tpChar)
     | tpChar:
     .tSubscriptChar
     ] or >
     ] or >
     >>
    ;VariableExtension
    >>
   ;Variable
   [ oTypeStkChooseKind (tpChar)
   | *:
   @Expression
    @Operand
     [ (sStringLiteral)
     | sStringLiteral:
     oSymbolStkPush(syExpression)
     @StringLiteral
      oValuePushStringLength
      .tSkipString
      oFixPushForwardBranch
      oEmitNullAddress
      % value emitted -32767
      .tStringData
      oEmitValue
      % value emitted 34
      oValuePop
      oValuePushCodeAddress
      oValueNegate
      oEmitString
      % value emitted 73
      % value emitted 109
      % value emitted 97
      % value emitted 103
      % value emitted 105
      % value emitted 110
      % value emitted 101
      % value emitted 32
      % value emitted 116
      % value emitted 104
      % value emitted 97
      % value emitted 116
      % value emitted 44
      % value emitted 32
      % value emitted 115
      % value emitted 104
      % value emitted 101
      % value emitted 32
      % value emitted 115
      % value emitted 119
      % value emitted 97
      % value emitted 108
      % value emitted 108
      % value emitted 111
      % value emitted 119
      % value emitted 101
      % value emitted 100
      % value emitted 32
      % value emitted 97
      % value emitted 32
      % value emitted 99
      % value emitted 97
      % value emitted 116
      % value emitted 46
      % value emitted 0
      oFixPopForwardBranch
      oTypeStkPush(tpChar)
      oTypeStkLinkToStandardType(stdChar)
      oValuePush(one)
      oValuePushStringLength
      oTypeStkEnterBounds
      oValuePop
      oValuePop
      oTypeTblEnter
      >>
     ;StringLiteral
     [ oTypeStkChooseKind (tpChar)
     | tpChar:
     .tLiteralAddress
     oEmitValue
     % value emitted -392
     .tFetchChar
     ] or >
     oValuePop
     ] or >
     >>
    ;Operand
    @UnaryOperator
     [ (sExpnEnd)
     | *:
     >>
    ;UnaryOperator
    @BinaryOperator
     [ (sExpnEnd)
     | *:
     >>
    ;BinaryOperator
    [ (sExpnEnd)
    | sExpnEnd:
    ] or >
    >>
   ;Expression
   @CompareAndSwapTypes
    [ oTypeStkChooseKind (tpChar)
    | tpChar:
    oTypeStkSwap
    [ oTypeStkChooseKind (tpChar)
    | tpChar:
    ] or >
    ] or >
    >>
   ;CompareAndSwapTypes
   @EmitAssign
    [ oTypeStkChooseKind (tpChar)
    | tpChar:
    .tAssignChar
    ] or >
    >>
   ;EmitAssign
   oTypeStkPop
   oSymbolStkPop
   oTypeStkPop
   oSymbolStkPop
   >>
  ;AssignmentStmt
  ] or >
  }
  [ (sAssignmentStmt)
  | sAssignmentStmt:
  @AssignmentStmt
   ?sIdentifier (sIdentifier)
   oSymbolStkPushIdentifier
   .tAssignBegin
   @Variable
    [ oSymbolStkChooseKind (syVariable)
    | syVariable:
    .tLiteralAddress
    oValuePushSymbol
    oEmitValue
    % value emitted 268
    oValuePop
    ] or >
    oTypeStkPushSymbol
    @VariableExtension
     [ (sSubscript)
     | sSubscript:
     .tSubscriptBegin
     @Expression
      @Operand
       [ (sInteger)
       | sInteger:
       oValuePushInteger
       oSymbolStkPush(syExpression)
       oTypeStkPush(tpInteger)
       oTypeStkLinkToStandardType(stdInteger)
       .tLiteralInteger
       oEmitValue
       % value emitted 5
       oValuePop
       ] or >
       >>
      ;Operand
      @UnaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;UnaryOperator
      @BinaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;BinaryOperator
      [ (sExpnEnd)
      | sExpnEnd:
      ] or >
      >>
     ;Expression
     [ oTypeStkChooseKind (tpInteger)
     | tpInteger:
     ] or >
     oSymbolStkPop
     oTypeStkPop
     [ oTypeStkChooseKind (tpArray)
     | tpArray:
     oTypeStkPushComponent
     oTypeStkSwap
     oTypeStkPop
     ] or >
     [ oTypeStkChooseKind (tpChar)
     | tpChar:
     .tSubscriptChar
     ] or >
     ] or >
     >>
    ;VariableExtension
    >>
   ;Variable
   [ oTypeStkChooseKind (tpChar)
   | *:
   @Expression
    @Operand
     [ (sStringLiteral)
     | sStringLiteral:
     oSymbolStkPush(syExpression)
     @StringLiteral
      oValuePushStringLength
      .tSkipString
      oFixPushForwardBranch
      oEmitNullAddress
      % value emitted -32767
      .tStringData
      oEmitValue
      % value emitted 29
      oValuePop
      oValuePushCodeAddress
      oValueNegate
      oEmitString
      % value emitted 87
      % value emitted 104
      % value emitted 97
      % value emitted 116
      % value emitted 32
      % value emitted 97
      % value emitted 32
      % value emitted 104
      % value emitted 111
      % value emitted 103
      % value emitted 44
      % value emitted 32
      % value emitted 116
      % value emitted 111
      % value emitted 32
      % value emitted 115
      % value emitted 119
      % value emitted 97
      % value emitted 108
      % value emitted 108
      % value emitted 111
      % value emitted 119
      % value emitted 32
      % value emitted 97
      % value emitted 32
      % value emitted 100
      % value emitted 111
      % value emitted 103
      % value emitted 46
      % value emitted 0
      oFixPopForwardBranch
      oTypeStkPush(tpChar)
      oTypeStkLinkToStandardType(stdChar)
      oValuePush(one)
      oValuePushStringLength
      oTypeStkEnterBounds
      oValuePop
      oValuePop
      oTypeTblEnter
      >>
     ;StringLiteral
     [ oTypeStkChooseKind (tpChar)
     | tpChar:
     .tLiteralAddress
     oEmitValue
     % value emitted -444
     .tFetchChar
     ] or >
     oValuePop
     ] or >
     >>
    ;Operand
    @UnaryOperator
     [ (sExpnEnd)
     | *:
     >>
    ;UnaryOperator
    @BinaryOperator
     [ (sExpnEnd)
     | *:
     >>
    ;BinaryOperator
    [ (sExpnEnd)
    | sExpnEnd:
    ] or >
    >>
   ;Expression
   @CompareAndSwapTypes
    [ oTypeStkChooseKind (tpChar)
    | tpChar:
    oTypeStkSwap
    [ oTypeStkChooseKind (tpChar)
    | tpChar:
    ] or >
    ] or >
    >>
   ;CompareAndSwapTypes
   @EmitAssign
    [ oTypeStkChooseKind (tpChar)
    | tpChar:
    .tAssignChar
    ] or >
    >>
   ;EmitAssign
   oTypeStkPop
   oSymbolStkPop
   oTypeStkPop
   oSymbolStkPop
   >>
  ;AssignmentStmt
  ] or >
  }
  [ (sAssignmentStmt)
  | sAssignmentStmt:
  @AssignmentStmt
   ?sIdentifier (sIdentifier)
   oSymbolStkPushIdentifier
   .tAssignBegin
   @Variable
    [ oSymbolStkChooseKind (syVariable)
    | syVariable:
    .tLiteralAddress
    oValuePushSymbol
    oEmitValue
    % value emitted 268
    oValuePop
    ] or >
    oTypeStkPushSymbol
    @VariableExtension
     [ (sSubscript)
     | sSubscript:
     .tSubscriptBegin
     @Expression
      @Operand
       [ (sInteger)
       | sInteger:
       oValuePushInteger
       oSymbolStkPush(syExpression)
       oTypeStkPush(tpInteger)
       oTypeStkLinkToStandardType(stdInteger)
       .tLiteralInteger
       oEmitValue
       % value emitted 6
       oValuePop
       ] or >
       >>
      ;Operand
      @UnaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;UnaryOperator
      @BinaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;BinaryOperator
      [ (sExpnEnd)
      | sExpnEnd:
      ] or >
      >>
     ;Expression
     [ oTypeStkChooseKind (tpInteger)
     | tpInteger:
     ] or >
     oSymbolStkPop
     oTypeStkPop
     [ oTypeStkChooseKind (tpArray)
     | tpArray:
     oTypeStkPushComponent
     oTypeStkSwap
     oTypeStkPop
     ] or >
     [ oTypeStkChooseKind (tpChar)
     | tpChar:
     .tSubscriptChar
     ] or >
     ] or >
     >>
    ;VariableExtension
    >>
   ;Variable
   [ oTypeStkChooseKind (tpChar)
   | *:
   @Expression
    @Operand
     [ (sStringLiteral)
     | sStringLiteral:
     oSymbolStkPush(syExpression)
     @StringLiteral
      oValuePushStringLength
      .tSkipString
      oFixPushForwardBranch
      oEmitNullAddress
      % value emitted -32767
      .tStringData
      oEmitValue
      % value emitted 31
      oValuePop
      oValuePushCodeAddress
      oValueNegate
      oEmitString
      % value emitted 87
      % value emitted 104
      % value emitted 97
      % value emitted 116
      % value emitted 32
      % value emitted 97
      % value emitted 32
      % value emitted 100
      % value emitted 111
      % value emitted 112
      % value emitted 101
      % value emitted 44
      % value emitted 32
      % value emitted 116
      % value emitted 111
      % value emitted 32
      % value emitted 115
      % value emitted 119
      % value emitted 97
      % value emitted 108
      % value emitted 108
      % value emitted 111
      % value emitted 119
      % value emitted 32
      % value emitted 97
      % value emitted 32
      % value emitted 103
      % value emitted 111
      % value emitted 97
      % value emitted 116
      % value emitted 46
      % value emitted 0
      oFixPopForwardBranch
      oTypeStkPush(tpChar)
      oTypeStkLinkToStandardType(stdChar)
      oValuePush(one)
      oValuePushStringLength
      oTypeStkEnterBounds
      oValuePop
      oValuePop
      oTypeTblEnter
      >>
     ;StringLiteral
     [ oTypeStkChooseKind (tpChar)
     | tpChar:
     .tLiteralAddress
     oEmitValue
     % value emitted -491
     .tFetchChar
     ] or >
     oValuePop
     ] or >
     >>
    ;Operand
    @UnaryOperator
     [ (sExpnEnd)
     | *:
     >>
    ;UnaryOperator
    @BinaryOperator
     [ (sExpnEnd)
     | *:
     >>
    ;BinaryOperator
    [ (sExpnEnd)
    | sExpnEnd:
    ] or >
    >>
   ;Expression
   @CompareAndSwapTypes
    [ oTypeStkChooseKind (tpChar)
    | tpChar:
    oTypeStkSwap
    [ oTypeStkChooseKind (tpChar)
    | tpChar:
    ] or >
    ] or >
    >>
   ;CompareAndSwapTypes
   @EmitAssign
    [ oTypeStkChooseKind (tpChar)
    | tpChar:
    .tAssignChar
    ] or >
    >>
   ;EmitAssign
   oTypeStkPop
   oSymbolStkPop
   oTypeStkPop
   oSymbolStkPop
   >>
  ;AssignmentStmt
  ] or >
  }
  [ (sAssignmentStmt)
  | sAssignmentStmt:
  @AssignmentStmt
   ?sIdentifier (sIdentifier)
   oSymbolStkPushIdentifier
   .tAssignBegin
   @Variable
    [ oSymbolStkChooseKind (syVariable)
    | syVariable:
    .tLiteralAddress
    oValuePushSymbol
    oEmitValue
    % value emitted 268
    oValuePop
    ] or >
    oTypeStkPushSymbol
    @VariableExtension
     [ (sSubscript)
     | sSubscript:
     .tSubscriptBegin
     @Expression
      @Operand
       [ (sInteger)
       | sInteger:
       oValuePushInteger
       oSymbolStkPush(syExpression)
       oTypeStkPush(tpInteger)
       oTypeStkLinkToStandardType(stdInteger)
       .tLiteralInteger
       oEmitValue
       % value emitted 7
       oValuePop
       ] or >
       >>
      ;Operand
      @UnaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;UnaryOperator
      @BinaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;BinaryOperator
      [ (sExpnEnd)
      | sExpnEnd:
      ] or >
      >>
     ;Expression
     [ oTypeStkChooseKind (tpInteger)
     | tpInteger:
     ] or >
     oSymbolStkPop
     oTypeStkPop
     [ oTypeStkChooseKind (tpArray)
     | tpArray:
     oTypeStkPushComponent
     oTypeStkSwap
     oTypeStkPop
     ] or >
     [ oTypeStkChooseKind (tpChar)
     | tpChar:
     .tSubscriptChar
     ] or >
     ] or >
     >>
    ;VariableExtension
    >>
   ;Variable
   [ oTypeStkChooseKind (tpChar)
   | *:
   @Expression
    @Operand
     [ (sStringLiteral)
     | sStringLiteral:
     oSymbolStkPush(syExpression)
     @StringLiteral
      oValuePushStringLength
      .tSkipString
      oFixPushForwardBranch
      oEmitNullAddress
      % value emitted -32767
      .tStringData
      oEmitValue
      % value emitted 40
      oValuePop
      oValuePushCodeAddress
      oValueNegate
      oEmitString
      % value emitted 73
      % value emitted 32
      % value emitted 100
      % value emitted 111
      % value emitted 110
      % value emitted 39
      % value emitted 116
      % value emitted 32
      % value emitted 107
      % value emitted 110
      % value emitted 111
      % value emitted 119
      % value emitted 32
      % value emitted 104
      % value emitted 111
      % value emitted 119
      % value emitted 32
      % value emitted 115
      % value emitted 104
      % value emitted 101
      % value emitted 32
      % value emitted 115
      % value emitted 119
      % value emitted 97
      % value emitted 108
      % value emitted 108
      % value emitted 111
      % value emitted 119
      % value emitted 101
      % value emitted 100
      % value emitted 32
      % value emitted 116
      % value emitted 104
      % value emitted 97
      % value emitted 116
      % value emitted 32
      % value emitted 99
      % value emitted 111
      % value emitted 119
      % value emitted 46
      % value emitted 0
      oFixPopForwardBranch
      oTypeStkPush(tpChar)
      oTypeStkLinkToStandardType(stdChar)
      oValuePush(one)
      oValuePushStringLength
      oTypeStkEnterBounds
      oValuePop
      oValuePop
      oTypeTblEnter
      >>
     ;StringLiteral
     [ oTypeStkChooseKind (tpChar)
     | tpChar:
     .tLiteralAddress
     oEmitValue
     % value emitted -540
     .tFetchChar
     ] or >
     oValuePop
     ] or >
     >>
    ;Operand
    @UnaryOperator
     [ (sExpnEnd)
     | *:
     >>
    ;UnaryOperator
    @BinaryOperator
     [ (sExpnEnd)
     | *:
     >>
    ;BinaryOperator
    [ (sExpnEnd)
    | sExpnEnd:
    ] or >
    >>
   ;Expression
   @CompareAndSwapTypes
    [ oTypeStkChooseKind (tpChar)
    | tpChar:
    oTypeStkSwap
    [ oTypeStkChooseKind (tpChar)
    | tpChar:
    ] or >
    ] or >
    >>
   ;CompareAndSwapTypes
   @EmitAssign
    [ oTypeStkChooseKind (tpChar)
    | tpChar:
    .tAssignChar
    ] or >
    >>
   ;EmitAssign
   oTypeStkPop
   oSymbolStkPop
   oTypeStkPop
   oSymbolStkPop
   >>
  ;AssignmentStmt
  ] or >
  }
  [ (sAssignmentStmt)
  | sAssignmentStmt:
  @AssignmentStmt
   ?sIdentifier (sIdentifier)
   oSymbolStkPushIdentifier
   .tAssignBegin
   @Variable
    [ oSymbolStkChooseKind (syVariable)
    | syVariable:
    .tLiteralAddress
    oValuePushSymbol
    oEmitValue
    % value emitted 268
    oValuePop
    ] or >
    oTypeStkPushSymbol
    @VariableExtension
     [ (sSubscript)
     | sSubscript:
     .tSubscriptBegin
     @Expression
      @Operand
       [ (sInteger)
       | sInteger:
       oValuePushInteger
       oSymbolStkPush(syExpression)
       oTypeStkPush(tpInteger)
       oTypeStkLinkToStandardType(stdInteger)
       .tLiteralInteger
       oEmitValue
       % value emitted 8
       oValuePop
       ] or >
       >>
      ;Operand
      @UnaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;UnaryOperator
      @BinaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;BinaryOperator
      [ (sExpnEnd)
      | sExpnEnd:
      ] or >
      >>
     ;Expression
     [ oTypeStkChooseKind (tpInteger)
     | tpInteger:
     ] or >
     oSymbolStkPop
     oTypeStkPop
     [ oTypeStkChooseKind (tpArray)
     | tpArray:
     oTypeStkPushComponent
     oTypeStkSwap
     oTypeStkPop
     ] or >
     [ oTypeStkChooseKind (tpChar)
     | tpChar:
     .tSubscriptChar
     ] or >
     ] or >
     >>
    ;VariableExtension
    >>
   ;Variable
   [ oTypeStkChooseKind (tpChar)
   | *:
   @Expression
    @Operand
     [ (sStringLiteral)
     | sStringLiteral:
     oSymbolStkPush(syExpression)
     @StringLiteral
      oValuePushStringLength
      .tSkipString
      oFixPushForwardBranch
      oEmitNullAddress
      % value emitted -32767
      .tStringData
      oEmitValue
      % value emitted 19
      oValuePop
      oValuePushCodeAddress
      oValueNegate
      oEmitString
      % value emitted 83
      % value emitted 104
      % value emitted 101
      % value emitted 32
      % value emitted 100
      % value emitted 105
      % value emitted 101
      % value emitted 100
      % value emitted 32
      % value emitted 111
      % value emitted 102
      % value emitted 32
      % value emitted 99
      % value emitted 111
      % value emitted 117
      % value emitted 114
      % value emitted 115
      % value emitted 101
      % value emitted 46
      % value emitted 0
      oFixPopForwardBranch
      oTypeStkPush(tpChar)
      oTypeStkLinkToStandardType(stdChar)
      oValuePush(one)
      oValuePushStringLength
      oTypeStkEnterBounds
      oValuePop
      oValuePop
      oTypeTblEnter
      >>
     ;StringLiteral
     [ oTypeStkChooseKind (tpChar)
     | tpChar:
     .tLiteralAddress
     oEmitValue
     % value emitted -598
     .tFetchChar
     ] or >
     oValuePop
     ] or >
     >>
    ;Operand
    @UnaryOperator
     [ (sExpnEnd)
     | *:
     >>
    ;UnaryOperator
    @BinaryOperator
     [ (sExpnEnd)
     | *:
     >>
    ;BinaryOperator
    [ (sExpnEnd)
    | sExpnEnd:
    ] or >
    >>
   ;Expression
   @CompareAndSwapTypes
    [ oTypeStkChooseKind (tpChar)
    | tpChar:
    oTypeStkSwap
    [ oTypeStkChooseKind (tpChar)
    | tpChar:
    ] or >
    ] or >
    >>
   ;CompareAndSwapTypes
   @EmitAssign
    [ oTypeStkChooseKind (tpChar)
    | tpChar:
    .tAssignChar
    ] or >
    >>
   ;EmitAssign
   oTypeStkPop
   oSymbolStkPop
   oTypeStkPop
   oSymbolStkPop
   >>
  ;AssignmentStmt
  ] or >
  }
  [ (sCallStmt)
  | sCallStmt:
  @CallStmt
   ?sIdentifier (sIdentifier)
   oSymbolStkPushIdentifier
   [ oSymbolStkChooseKind (syProcedure)
   | *:
   [ oSymbolStkChooseKind (syProcedure)
   | syProcedure:
   [ oSymbolStkChooseStandardRoutine (rtWrite)
   | rtWrite:
   .tWriteBegin
   @WriteProcedure
    [ (sStringLiteral)
    | *:
    @WriteStandardExpnList
     oSymbolStkPushStandardVariable(stdOutput)
     [ oSymbolStkChooseKind (syVariable)
     | *:
     oValuePushSymbol
     oSymbolStkPop
     [ (sStringLiteral)
     | *:
     .tTrapBegin
     .tLiteralAddress
     oEmitValue
     % value emitted 0
     .tVarParm
     .tParmEnd
     @Expression
      @Operand
       [ (sStringLiteral)
       | sStringLiteral:
       oSymbolStkPush(syExpression)
       @StringLiteral
        oValuePushStringLength
        .tSkipString
        oFixPushForwardBranch
        oEmitNullAddress
        % value emitted -32767
        .tStringData
        oEmitValue
        % value emitted 18
        oValuePop
        oValuePushCodeAddress
        oValueNegate
        oEmitString
        % value emitted 73
        % value emitted 32
        % value emitted 75
        % value emitted 110
        % value emitted 111
        % value emitted 119
        % value emitted 32
        % value emitted 97
        % value emitted 110
        % value emitted 32
        % value emitted 79
        % value emitted 108
        % value emitted 100
        % value emitted 32
        % value emitted 76
        % value emitted 97
        % value emitted 100
        % value emitted 121
        % value emitted 0
        oFixPopForwardBranch
        oTypeStkPush(tpChar)
        oTypeStkLinkToStandardType(stdChar)
        oValuePush(one)
        oValuePushStringLength
        oTypeStkEnterBounds
        oValuePop
        oValuePop
        oTypeTblEnter
        >>
       ;StringLiteral
       [ oTypeStkChooseKind (tpChar)
       | tpChar:
       .tLiteralAddress
       oEmitValue
       % value emitted -634
       .tFetchChar
       ] or >
       oValuePop
       ] or >
       >>
      ;Operand
      @UnaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;UnaryOperator
      @BinaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;BinaryOperator
      [ (sExpnEnd)
      | sExpnEnd:
      ] or >
      >>
     ;Expression
     .tParmEnd
     @WriteText
      [ (sParmEnd)
      | *:
      [ oTypeStkChooseKind (tpChar)
      | tpChar:
      oValuePushTypeStkUpperBound
      ] or >
      .tLiteralInteger
      oEmitValue
      % value emitted 18
      oValuePop
      .tParmEnd
      [ oTypeStkChooseKind (tpChar)
      | tpChar:
      .tTrap
      oEmitTrapKind(trWriteString)
      % value emitted 109
      ] or >
      oSymbolStkPop
      oTypeStkPop
      >>
     ;WriteText
     }
     [ (sParmEnd)
     | sParmEnd:
     ] or >
     oValuePop
     >>
    ;WriteStandardExpnList
    .tWriteEnd
    >>
   ;WriteProcedure
   ] or >
   ] or >
   oSymbolStkPop
   >>
  ;CallStmt
  ] or >
  }
  [ (sCallStmt)
  | sCallStmt:
  @CallStmt
   ?sIdentifier (sIdentifier)
   oSymbolStkPushIdentifier
   [ oSymbolStkChooseKind (syProcedure)
   | *:
   [ oSymbolStkChooseKind (syProcedure)
   | syProcedure:
   [ oSymbolStkChooseStandardRoutine (rtWriteln)
   | rtWriteln:
   .tTrapBegin
   @WritelnProcedure
    [ (sParmEnd)
    | sParmEnd:
    oSymbolStkPushStandardVariable(stdOutput)
    [ oSymbolStkChooseKind (syVariable)
    | *:
    oValuePushSymbol
    .tLiteralAddress
    oEmitValue
    % value emitted 0
    oValuePop
    oSymbolStkPop
    .tVarParm
    .tParmEnd
    ] or >
    >>
   ;WritelnProcedure
   .tTrap
   oEmitTrapKind(trWriteln)
   % value emitted 6
   ] or >
   ] or >
   oSymbolStkPop
   >>
  ;CallStmt
  ] or >
  }
  [ (sVar)
  | sVar:
  @VariableDeclarations
   [ (sIdentifier)
   | sIdentifier:
   oSymbolStkPushLocalIdentifier
   [ oSymbolStkChooseKind (syUndefined)
   | syUndefined:
   ] or >
   @PublicDefinition
    [ (sInitialValue)
    | *:
    >>
   ;PublicDefinition
   [ (sInitialValue)
   | sInitialValue:
   .tInitialValue
   @Expression
    @Operand
     [ (sInteger)
     | sInteger:
     oValuePushInteger
     oSymbolStkPush(syExpression)
     oTypeStkPush(tpInteger)
     oTypeStkLinkToStandardType(stdInteger)
     .tLiteralInteger
     oEmitValue
     % value emitted 1
     oValuePop
     ] or >
     >>
    ;Operand
    @UnaryOperator
     [ (sExpnEnd)
     | *:
     >>
    ;UnaryOperator
    @BinaryOperator
     [ (sExpnEnd)
     | *:
     >>
    ;BinaryOperator
    [ (sExpnEnd)
    | sExpnEnd:
    ] or >
    >>
   ;Expression
   @TypeTblEnterIfNew
    [ oTypeStkChooseTypeReference (yes)
    | *:
    >>
   ;TypeTblEnterIfNew
   .tInitEnd
   .tLiteralAddress
   @EmitStore
    [ oTypeStkChooseKind (tpInteger)
    | tpInteger:
    .tStoreInteger
    ] or >
    >>
   ;EmitStore
   oSymbolStkPop
   ] or >
   @EnterVariableAttributes
    [ oSymbolStkChooseKind (syUndefined)
    | *:
    oSymbolStkSetKind(syVariable)
    [ oTypeStkChooseKind (tpInteger)
    | *:
    @AllocateVar
     [ oSymbolStkChooseKind (syVariable)
     | *:
     [ oTypeStkChooseKind (tpInteger)
     | tpInteger:
     oAllocateAlignOnWord
     oSymbolStkEnterDataAddress
     oAllocateVariable
     ] or >
     >>
    ;AllocateVar
    oSymbolStkEnterTypeReference
    oSymbolTblEnter
    >>
   ;EnterVariableAttributes
   oTypeStkPop
   oSymbolStkPop
   ] or >
   >>
  ;VariableDeclarations
  ] or >
  }
  [ (sWhileStmt)
  | sWhileStmt:
  @WhileStmt
   .tWhileBegin
   oFixPushTargetAddress
   @BooleanControlExpression
    @Expression
     @Operand
      [ (sIdentifier)
      | sIdentifier:
      oSymbolStkPushIdentifier
      [ oSymbolStkChooseKind (syVariable)
      | *:
      [ oSymbolStkChooseKind (syVariable)
      | syVariable:
      @Variable
       [ oSymbolStkChooseKind (syVariable)
       | syVariable:
       .tLiteralAddress
       oValuePushSymbol
       oEmitValue
       % value emitted 532
       oValuePop
       ] or >
       oTypeStkPushSymbol
       @VariableExtension
        [ (sInteger)
        | *:
        >>
       ;VariableExtension
       >>
      ;Variable
      @VariableOperand
       [ oTypeStkChooseKind (tpInteger)
       | tpInteger:
       .tFetchInteger
       ] or >
       >>
      ;VariableOperand
      ] or >
      ] or >
      >>
     ;Operand
     @UnaryOperator
      [ (sInteger)
      | *:
      >>
     ;UnaryOperator
     @BinaryOperator
      [ (sInteger)
      | *:
      >>
     ;BinaryOperator
     [ (sInteger)
     | *:
     }
     @Operand
      [ (sInteger)
      | sInteger:
      oValuePushInteger
      oSymbolStkPush(syExpression)
      oTypeStkPush(tpInteger)
      oTypeStkLinkToStandardType(stdInteger)
      .tLiteralInteger
      oEmitValue
      % value emitted 8
      oValuePop
      ] or >
      >>
     ;Operand
     @UnaryOperator
      [ (sLT)
      | *:
      >>
     ;UnaryOperator
     @BinaryOperator
      [ (sLT)
      | sLT:
      .tLT
      @CompareRelationalOperandTypes
       [ oTypeStkChooseKind (tpInteger)
       | tpInteger:
       oTypeStkPop
       [ oTypeStkChooseKind (tpInteger)
       | tpInteger:
       ] or >
       ] or >
       oTypeStkPop
       oTypeStkPush(tpBoolean)
       oSymbolStkPop
       oSymbolStkSetKind(syExpression)
       >>
      ;CompareRelationalOperandTypes
      ] or >
      oSymbolStkSetKind(syExpression)
      >>
     ;BinaryOperator
     [ (sExpnEnd)
     | sExpnEnd:
     ] or >
     >>
    ;Expression
    [ oTypeStkChooseKind (tpBoolean)
    | tpBoolean:
    ] or >
    oSymbolStkPop
    oTypeStkPop
    >>
   ;BooleanControlExpression
   .tWhileTest
   oFixPushForwardBranch
   oEmitNullAddress
   % value emitted -32767
   oFixSwap
   @Statement
    oSymbolTblPushScope
    @Block
     ?sBegin (sBegin)
     [ (sNullStmt)
     | sNullStmt:
     ] or >
     }
     [ (sCallStmt)
     | sCallStmt:
     @CallStmt
      ?sIdentifier (sIdentifier)
      oSymbolStkPushIdentifier
      [ oSymbolStkChooseKind (syProcedure)
      | *:
      [ oSymbolStkChooseKind (syProcedure)
      | syProcedure:
      [ oSymbolStkChooseStandardRoutine (rtWriteln)
      | rtWriteln:
      .tTrapBegin
      @WritelnProcedure
       [ (sParmEnd)
       | sParmEnd:
       oSymbolStkPushStandardVariable(stdOutput)
       [ oSymbolStkChooseKind (syVariable)
       | *:
       oValuePushSymbol
       .tLiteralAddress
       oEmitValue
       % value emitted 0
       oValuePop
       oSymbolStkPop
       .tVarParm
       .tParmEnd
       ] or >
       >>
      ;WritelnProcedure
      .tTrap
      oEmitTrapKind(trWriteln)
      % value emitted 6
      ] or >
      ] or >
      oSymbolStkPop
      >>
     ;CallStmt
     ] or >
     }
     [ (sCallStmt)
     | sCallStmt:
     @CallStmt
      ?sIdentifier (sIdentifier)
      oSymbolStkPushIdentifier
      [ oSymbolStkChooseKind (syProcedure)
      | *:
      [ oSymbolStkChooseKind (syProcedure)
      | syProcedure:
      [ oSymbolStkChooseStandardRoutine (rtWrite)
      | rtWrite:
      .tWriteBegin
      @WriteProcedure
       [ (sStringLiteral)
       | *:
       @WriteStandardExpnList
        oSymbolStkPushStandardVariable(stdOutput)
        [ oSymbolStkChooseKind (syVariable)
        | *:
        oValuePushSymbol
        oSymbolStkPop
        [ (sStringLiteral)
        | *:
        .tTrapBegin
        .tLiteralAddress
        oEmitValue
        % value emitted 0
        .tVarParm
        .tParmEnd
        @Expression
         @Operand
          [ (sStringLiteral)
          | sStringLiteral:
          oSymbolStkPush(syExpression)
          @StringLiteral
           oValuePushStringLength
           .tSkipString
           oFixPushForwardBranch
           oEmitNullAddress
           % value emitted -32767
           .tStringData
           oEmitValue
           % value emitted 18
           oValuePop
           oValuePushCodeAddress
           oValueNegate
           oEmitString
           % value emitted 73
           % value emitted 32
           % value emitted 107
           % value emitted 110
           % value emitted 111
           % value emitted 119
           % value emitted 32
           % value emitted 97
           % value emitted 110
           % value emitted 32
           % value emitted 111
           % value emitted 108
           % value emitted 100
           % value emitted 32
           % value emitted 108
           % value emitted 97
           % value emitted 100
           % value emitted 121
           % value emitted 0
           oFixPopForwardBranch
           oTypeStkPush(tpChar)
           oTypeStkLinkToStandardType(stdChar)
           oValuePush(one)
           oValuePushStringLength
           oTypeStkEnterBounds
           oValuePop
           oValuePop
           oTypeTblEnter
           >>
          ;StringLiteral
          [ oTypeStkChooseKind (tpChar)
          | tpChar:
          .tLiteralAddress
          oEmitValue
          % value emitted -710
          .tFetchChar
          ] or >
          oValuePop
          ] or >
          >>
         ;Operand
         @UnaryOperator
          [ (sExpnEnd)
          | *:
          >>
         ;UnaryOperator
         @BinaryOperator
          [ (sExpnEnd)
          | *:
          >>
         ;BinaryOperator
         [ (sExpnEnd)
         | sExpnEnd:
         ] or >
         >>
        ;Expression
        .tParmEnd
        @WriteText
         [ (sParmEnd)
         | *:
         [ oTypeStkChooseKind (tpChar)
         | tpChar:
         oValuePushTypeStkUpperBound
         ] or >
         .tLiteralInteger
         oEmitValue
         % value emitted 18
         oValuePop
         .tParmEnd
         [ oTypeStkChooseKind (tpChar)
         | tpChar:
         .tTrap
         oEmitTrapKind(trWriteString)
         % value emitted 109
         ] or >
         oSymbolStkPop
         oTypeStkPop
         >>
        ;WriteText
        }
        [ (sParmEnd)
        | sParmEnd:
        ] or >
        oValuePop
        >>
       ;WriteStandardExpnList
       .tWriteEnd
       >>
      ;WriteProcedure
      ] or >
      ] or >
      oSymbolStkPop
      >>
     ;CallStmt
     ] or >
     }
     [ (sCallStmt)
     | sCallStmt:
     @CallStmt
      ?sIdentifier (sIdentifier)
      oSymbolStkPushIdentifier
      [ oSymbolStkChooseKind (syProcedure)
      | *:
      [ oSymbolStkChooseKind (syProcedure)
      | syProcedure:
      [ oSymbolStkChooseStandardRoutine (rtWriteln)
      | rtWriteln:
      .tTrapBegin
      @WritelnProcedure
       [ (sParmEnd)
       | sParmEnd:
       oSymbolStkPushStandardVariable(stdOutput)
       [ oSymbolStkChooseKind (syVariable)
       | *:
       oValuePushSymbol
       .tLiteralAddress
       oEmitValue
       % value emitted 0
       oValuePop
       oSymbolStkPop
       .tVarParm
       .tParmEnd
       ] or >
       >>
      ;WritelnProcedure
      .tTrap
      oEmitTrapKind(trWriteln)
      % value emitted 6
      ] or >
      ] or >
      oSymbolStkPop
      >>
     ;CallStmt
     ] or >
     }
     [ (sCallStmt)
     | sCallStmt:
     @CallStmt
      ?sIdentifier (sIdentifier)
      oSymbolStkPushIdentifier
      [ oSymbolStkChooseKind (syProcedure)
      | *:
      [ oSymbolStkChooseKind (syProcedure)
      | syProcedure:
      [ oSymbolStkChooseStandardRoutine (rtWrite)
      | rtWrite:
      .tWriteBegin
      @WriteProcedure
       [ (sStringLiteral)
       | *:
       @WriteStandardExpnList
        oSymbolStkPushStandardVariable(stdOutput)
        [ oSymbolStkChooseKind (syVariable)
        | *:
        oValuePushSymbol
        oSymbolStkPop
        [ (sStringLiteral)
        | *:
        .tTrapBegin
        .tLiteralAddress
        oEmitValue
        % value emitted 0
        .tVarParm
        .tParmEnd
        @Expression
         @Operand
          [ (sStringLiteral)
          | sStringLiteral:
          oSymbolStkPush(syExpression)
          @StringLiteral
           oValuePushStringLength
           .tSkipString
           oFixPushForwardBranch
           oEmitNullAddress
           % value emitted -32767
           .tStringData
           oEmitValue
           % value emitted 16
           oValuePop
           oValuePushCodeAddress
           oValueNegate
           oEmitString
           % value emitted 87
           % value emitted 104
           % value emitted 111
           % value emitted 32
           % value emitted 115
           % value emitted 119
           % value emitted 97
           % value emitted 108
           % value emitted 108
           % value emitted 111
           % value emitted 119
           % value emitted 101
           % value emitted 100
           % value emitted 32
           % value emitted 97
           % value emitted 32
           % value emitted 0
           oFixPopForwardBranch
           oTypeStkPush(tpChar)
           oTypeStkLinkToStandardType(stdChar)
           oValuePush(one)
           oValuePushStringLength
           oTypeStkEnterBounds
           oValuePop
           oValuePop
           oTypeTblEnter
           >>
          ;StringLiteral
          [ oTypeStkChooseKind (tpChar)
          | tpChar:
          .tLiteralAddress
          oEmitValue
          % value emitted -758
          .tFetchChar
          ] or >
          oValuePop
          ] or >
          >>
         ;Operand
         @UnaryOperator
          [ (sIdentifier)
          | *:
          >>
         ;UnaryOperator
         @BinaryOperator
          [ (sIdentifier)
          | *:
          >>
         ;BinaryOperator
         [ (sIdentifier)
         | *:
         }
         @Operand
          [ (sIdentifier)
          | sIdentifier:
          oSymbolStkPushIdentifier
          [ oSymbolStkChooseKind (syVariable)
          | *:
          [ oSymbolStkChooseKind (syVariable)
          | syVariable:
          @Variable
           [ oSymbolStkChooseKind (syVariable)
           | syVariable:
           .tLiteralAddress
           oValuePushSymbol
           oEmitValue
           % value emitted 4
           oValuePop
           ] or >
           oTypeStkPushSymbol
           @VariableExtension
            [ (sSubscript)
            | sSubscript:
            .tSubscriptBegin
            @Expression
             @Operand
              [ (sIdentifier)
              | sIdentifier:
              oSymbolStkPushIdentifier
              [ oSymbolStkChooseKind (syVariable)
              | *:
              [ oSymbolStkChooseKind (syVariable)
              | syVariable:
              @Variable
               [ oSymbolStkChooseKind (syVariable)
               | syVariable:
               .tLiteralAddress
               oValuePushSymbol
               oEmitValue
               % value emitted 532
               oValuePop
               ] or >
               oTypeStkPushSymbol
               @VariableExtension
                [ (sExpnEnd)
                | *:
                >>
               ;VariableExtension
               >>
              ;Variable
              @VariableOperand
               [ oTypeStkChooseKind (tpInteger)
               | tpInteger:
               .tFetchInteger
               ] or >
               >>
              ;VariableOperand
              ] or >
              ] or >
              >>
             ;Operand
             @UnaryOperator
              [ (sExpnEnd)
              | *:
              >>
             ;UnaryOperator
             @BinaryOperator
              [ (sExpnEnd)
              | *:
              >>
             ;BinaryOperator
             [ (sExpnEnd)
             | sExpnEnd:
             ] or >
             >>
            ;Expression
            [ oTypeStkChooseKind (tpInteger)
            | tpInteger:
            ] or >
            oSymbolStkPop
            oTypeStkPop
            [ oTypeStkChooseKind (tpArray)
            | tpArray:
            oTypeStkPushComponent
            oTypeStkSwap
            oTypeStkPop
            ] or >
            [ oTypeStkChooseKind (tpChar)
            | tpChar:
            .tSubscriptChar
            ] or >
            ] or >
            >>
           ;VariableExtension
           >>
          ;Variable
          @VariableOperand
           [ oTypeStkChooseKind (tpChar)
           | tpChar:
           .tFetchChar
           ] or >
           >>
          ;VariableOperand
          ] or >
          ] or >
          >>
         ;Operand
         @UnaryOperator
          [ (sConcatenate)
          | *:
          >>
         ;UnaryOperator
         @BinaryOperator
          [ (sConcatenate)
          | sConcatenate:
          .tConcatenate
          oTypeStkPush(tpChar)
          [ oTypeStkChooseKind (tpChar)
          | tpChar:
          oTypeStkSwap
          [ oTypeStkChooseKind (tpChar)
          | tpChar:
          ] or >
          oTypeStkPop
          ] or >
          oTypeStkPop
          oSymbolStkPop
          ] or >
          oSymbolStkSetKind(syExpression)
          >>
         ;BinaryOperator
         [ (sExpnEnd)
         | sExpnEnd:
         ] or >
         >>
        ;Expression
        .tParmEnd
        @WriteText
         [ (sParmEnd)
         | *:
         [ oTypeStkChooseKind (tpChar)
         | tpChar:
         oValuePushTypeStkUpperBound
         ] or >
         .tLiteralInteger
         oEmitValue
         % value emitted 16
         oValuePop
         .tParmEnd
         [ oTypeStkChooseKind (tpChar)
         | tpChar:
         .tTrap
         oEmitTrapKind(trWriteString)
         % value emitted 109
         ] or >
         oSymbolStkPop
         oTypeStkPop
         >>
        ;WriteText
        }
        [ (sParmEnd)
        | sParmEnd:
        ] or >
        oValuePop
        >>
       ;WriteStandardExpnList
       .tWriteEnd
       >>
      ;WriteProcedure
      ] or >
      ] or >
      oSymbolStkPop
      >>
     ;CallStmt
     ] or >
     }
     [ (sCallStmt)
     | sCallStmt:
     @CallStmt
      ?sIdentifier (sIdentifier)
      oSymbolStkPushIdentifier
      [ oSymbolStkChooseKind (syProcedure)
      | *:
      [ oSymbolStkChooseKind (syProcedure)
      | syProcedure:
      [ oSymbolStkChooseStandardRoutine (rtWriteln)
      | rtWriteln:
      .tTrapBegin
      @WritelnProcedure
       [ (sParmEnd)
       | sParmEnd:
       oSymbolStkPushStandardVariable(stdOutput)
       [ oSymbolStkChooseKind (syVariable)
       | *:
       oValuePushSymbol
       .tLiteralAddress
       oEmitValue
       % value emitted 0
       oValuePop
       oSymbolStkPop
       .tVarParm
       .tParmEnd
       ] or >
       >>
      ;WritelnProcedure
      .tTrap
      oEmitTrapKind(trWriteln)
      % value emitted 6
      ] or >
      ] or >
      oSymbolStkPop
      >>
     ;CallStmt
     ] or >
     }
     [ (sCallStmt)
     | sCallStmt:
     @CallStmt
      ?sIdentifier (sIdentifier)
      oSymbolStkPushIdentifier
      [ oSymbolStkChooseKind (syProcedure)
      | *:
      [ oSymbolStkChooseKind (syProcedure)
      | syProcedure:
      [ oSymbolStkChooseStandardRoutine (rtWrite)
      | rtWrite:
      .tWriteBegin
      @WriteProcedure
       [ (sIdentifier)
       | sIdentifier:
       oSymbolStkPushIdentifier
       oTypeStkPushSymbol
       [ oTypeStkChooseKind (tpArray)
       | *:
       oTypeStkPop
       oSymbolStkPushStandardVariable(stdOutput)
       [ oSymbolStkChooseKind (syVariable)
       | *:
       oValuePushSymbol
       oSymbolStkPop
       .tTrapBegin
       .tLiteralAddress
       oEmitValue
       % value emitted 0
       .tVarParm
       .tParmEnd
       oValuePop
       [ oSymbolStkChooseKind (syVariable)
       | *:
       [ oSymbolStkChooseKind (syVariable)
       | syVariable:
       @Variable
        [ oSymbolStkChooseKind (syVariable)
        | syVariable:
        .tLiteralAddress
        oValuePushSymbol
        oEmitValue
        % value emitted 268
        oValuePop
        ] or >
        oTypeStkPushSymbol
        @VariableExtension
         [ (sSubscript)
         | sSubscript:
         .tSubscriptBegin
         @Expression
          @Operand
           [ (sIdentifier)
           | sIdentifier:
           oSymbolStkPushIdentifier
           [ oSymbolStkChooseKind (syVariable)
           | *:
           [ oSymbolStkChooseKind (syVariable)
           | syVariable:
           @Variable
            [ oSymbolStkChooseKind (syVariable)
            | syVariable:
            .tLiteralAddress
            oValuePushSymbol
            oEmitValue
            % value emitted 532
            oValuePop
            ] or >
            oTypeStkPushSymbol
            @VariableExtension
             [ (sExpnEnd)
             | *:
             >>
            ;VariableExtension
            >>
           ;Variable
           @VariableOperand
            [ oTypeStkChooseKind (tpInteger)
            | tpInteger:
            .tFetchInteger
            ] or >
            >>
           ;VariableOperand
           ] or >
           ] or >
           >>
          ;Operand
          @UnaryOperator
           [ (sExpnEnd)
           | *:
           >>
          ;UnaryOperator
          @BinaryOperator
           [ (sExpnEnd)
           | *:
           >>
          ;BinaryOperator
          [ (sExpnEnd)
          | sExpnEnd:
          ] or >
          >>
         ;Expression
         [ oTypeStkChooseKind (tpInteger)
         | tpInteger:
         ] or >
         oSymbolStkPop
         oTypeStkPop
         [ oTypeStkChooseKind (tpArray)
         | tpArray:
         oTypeStkPushComponent
         oTypeStkSwap
         oTypeStkPop
         ] or >
         [ oTypeStkChooseKind (tpChar)
         | tpChar:
         .tSubscriptChar
         ] or >
         ] or >
         >>
        ;VariableExtension
        >>
       ;Variable
       @VariableOperand
        [ oTypeStkChooseKind (tpChar)
        | tpChar:
        .tFetchChar
        ] or >
        >>
       ;VariableOperand
       ] or >
       @Expression
        @Operand
         [ (sExpnEnd)
         | *:
         >>
        ;Operand
        @UnaryOperator
         [ (sExpnEnd)
         | *:
         >>
        ;UnaryOperator
        @BinaryOperator
         [ (sExpnEnd)
         | *:
         >>
        ;BinaryOperator
        [ (sExpnEnd)
        | sExpnEnd:
        ] or >
        >>
       ;Expression
       .tParmEnd
       @WriteText
        [ (sParmEnd)
        | *:
        [ oTypeStkChooseKind (tpChar)
        | tpChar:
        oValuePushTypeStkUpperBound
        ] or >
        .tLiteralInteger
        oEmitValue
        % value emitted 0
        oValuePop
        .tParmEnd
        [ oTypeStkChooseKind (tpChar)
        | tpChar:
        .tTrap
        oEmitTrapKind(trWriteString)
        % value emitted 109
        ] or >
        oSymbolStkPop
        oTypeStkPop
        >>
       ;WriteText
       @WriteStandardExpnList
        oSymbolStkPushStandardVariable(stdOutput)
        [ oSymbolStkChooseKind (syVariable)
        | *:
        oValuePushSymbol
        oSymbolStkPop
        [ (sParmEnd)
        | sParmEnd:
        ] or >
        oValuePop
        >>
       ;WriteStandardExpnList
       ] or >
       .tWriteEnd
       >>
      ;WriteProcedure
      ] or >
      ] or >
      oSymbolStkPop
      >>
     ;CallStmt
     ] or >
     }
     [ (sCallStmt)
     | sCallStmt:
     @CallStmt
      ?sIdentifier (sIdentifier)
      oSymbolStkPushIdentifier
      [ oSymbolStkChooseKind (syProcedure)
      | *:
      [ oSymbolStkChooseKind (syProcedure)
      | syProcedure:
      [ oSymbolStkChooseStandardRoutine (rtWriteln)
      | rtWriteln:
      .tTrapBegin
      @WritelnProcedure
       [ (sParmEnd)
       | sParmEnd:
       oSymbolStkPushStandardVariable(stdOutput)
       [ oSymbolStkChooseKind (syVariable)
       | *:
       oValuePushSymbol
       .tLiteralAddress
       oEmitValue
       % value emitted 0
       oValuePop
       oSymbolStkPop
       .tVarParm
       .tParmEnd
       ] or >
       >>
      ;WritelnProcedure
      .tTrap
      oEmitTrapKind(trWriteln)
      % value emitted 6
      ] or >
      ] or >
      oSymbolStkPop
      >>
     ;CallStmt
     ] or >
     }
     [ (sVar)
     | sVar:
     @VariableDeclarations
      [ (sIdentifier)
      | sIdentifier:
      oSymbolStkPushLocalIdentifier
      [ oSymbolStkChooseKind (syUndefined)
      | syUndefined:
      ] or >
      @PublicDefinition
       [ (sInitialValue)
       | *:
       >>
      ;PublicDefinition
      [ (sInitialValue)
      | sInitialValue:
      .tInitialValue
      @Expression
       @Operand
        [ (sIdentifier)
        | sIdentifier:
        oSymbolStkPushIdentifier
        [ oSymbolStkChooseKind (syVariable)
        | *:
        [ oSymbolStkChooseKind (syVariable)
        | syVariable:
        @Variable
         [ oSymbolStkChooseKind (syVariable)
         | syVariable:
         .tLiteralAddress
         oValuePushSymbol
         oEmitValue
         % value emitted 532
         oValuePop
         ] or >
         oTypeStkPushSymbol
         @VariableExtension
          [ (sExpnEnd)
          | *:
          >>
         ;VariableExtension
         >>
        ;Variable
        @VariableOperand
         [ oTypeStkChooseKind (tpInteger)
         | tpInteger:
         .tFetchInteger
         ] or >
         >>
        ;VariableOperand
        ] or >
        ] or >
        >>
       ;Operand
       @UnaryOperator
        [ (sExpnEnd)
        | *:
        >>
       ;UnaryOperator
       @BinaryOperator
        [ (sExpnEnd)
        | *:
        >>
       ;BinaryOperator
       [ (sExpnEnd)
       | sExpnEnd:
       ] or >
       >>
      ;Expression
      @TypeTblEnterIfNew
       [ oTypeStkChooseTypeReference (yes)
       | *:
       >>
      ;TypeTblEnterIfNew
      .tInitEnd
      .tLiteralAddress
      @EmitStore
       [ oTypeStkChooseKind (tpInteger)
       | tpInteger:
       .tStoreInteger
       ] or >
       >>
      ;EmitStore
      oSymbolStkPop
      ] or >
      @EnterVariableAttributes
       [ oSymbolStkChooseKind (syUndefined)
       | *:
       oSymbolStkSetKind(syVariable)
       [ oTypeStkChooseKind (tpInteger)
       | *:
       @AllocateVar
        [ oSymbolStkChooseKind (syVariable)
        | *:
        [ oTypeStkChooseKind (tpInteger)
        | tpInteger:
        oAllocateAlignOnWord
        oSymbolStkEnterDataAddress
        oAllocateVariable
        ] or >
        >>
       ;AllocateVar
       oSymbolStkEnterTypeReference
       oSymbolTblEnter
       >>
      ;EnterVariableAttributes
      oTypeStkPop
      oSymbolStkPop
      ] or >
      >>
     ;VariableDeclarations
     ] or >
     }
     [ (sWhileStmt)
     | sWhileStmt:
     @WhileStmt
      .tWhileBegin
      oFixPushTargetAddress
      @BooleanControlExpression
       @Expression
        @Operand
         [ (sIdentifier)
         | sIdentifier:
         oSymbolStkPushIdentifier
         [ oSymbolStkChooseKind (syVariable)
         | *:
         [ oSymbolStkChooseKind (syVariable)
         | syVariable:
         @Variable
          [ oSymbolStkChooseKind (syVariable)
          | syVariable:
          .tLiteralAddress
          oValuePushSymbol
          oEmitValue
          % value emitted 536
          oValuePop
          ] or >
          oTypeStkPushSymbol
          @VariableExtension
           [ (sInteger)
           | *:
           >>
          ;VariableExtension
          >>
         ;Variable
         @VariableOperand
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          .tFetchInteger
          ] or >
          >>
         ;VariableOperand
         ] or >
         ] or >
         >>
        ;Operand
        @UnaryOperator
         [ (sInteger)
         | *:
         >>
        ;UnaryOperator
        @BinaryOperator
         [ (sInteger)
         | *:
         >>
        ;BinaryOperator
        [ (sInteger)
        | *:
        }
        @Operand
         [ (sInteger)
         | sInteger:
         oValuePushInteger
         oSymbolStkPush(syExpression)
         oTypeStkPush(tpInteger)
         oTypeStkLinkToStandardType(stdInteger)
         .tLiteralInteger
         oEmitValue
         % value emitted 2
         oValuePop
         ] or >
         >>
        ;Operand
        @UnaryOperator
         [ (sGE)
         | *:
         >>
        ;UnaryOperator
        @BinaryOperator
         [ (sGE)
         | sGE:
         .tGE
         @CompareRelationalOperandTypes
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          oTypeStkPop
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          ] or >
          ] or >
          oTypeStkPop
          oTypeStkPush(tpBoolean)
          oSymbolStkPop
          oSymbolStkSetKind(syExpression)
          >>
         ;CompareRelationalOperandTypes
         ] or >
         oSymbolStkSetKind(syExpression)
         >>
        ;BinaryOperator
        [ (sExpnEnd)
        | sExpnEnd:
        ] or >
        >>
       ;Expression
       [ oTypeStkChooseKind (tpBoolean)
       | tpBoolean:
       ] or >
       oSymbolStkPop
       oTypeStkPop
       >>
      ;BooleanControlExpression
      .tWhileTest
      oFixPushForwardBranch
      oEmitNullAddress
      % value emitted -32767
      oFixSwap
      @Statement
       oSymbolTblPushScope
       @Block
        ?sBegin (sBegin)
        [ (sNullStmt)
        | sNullStmt:
        ] or >
        }
        [ (sCallStmt)
        | sCallStmt:
        @CallStmt
         ?sIdentifier (sIdentifier)
         oSymbolStkPushIdentifier
         [ oSymbolStkChooseKind (syProcedure)
         | *:
         [ oSymbolStkChooseKind (syProcedure)
         | syProcedure:
         [ oSymbolStkChooseStandardRoutine (rtWrite)
         | rtWrite:
         .tWriteBegin
         @WriteProcedure
          [ (sStringLiteral)
          | *:
          @WriteStandardExpnList
           oSymbolStkPushStandardVariable(stdOutput)
           [ oSymbolStkChooseKind (syVariable)
           | *:
           oValuePushSymbol
           oSymbolStkPop
           [ (sStringLiteral)
           | *:
           .tTrapBegin
           .tLiteralAddress
           oEmitValue
           % value emitted 0
           .tVarParm
           .tParmEnd
           @Expression
            @Operand
             [ (sStringLiteral)
             | sStringLiteral:
             oSymbolStkPush(syExpression)
             @StringLiteral
              oValuePushStringLength
              .tSkipString
              oFixPushForwardBranch
              oEmitNullAddress
              % value emitted -32767
              .tStringData
              oEmitValue
              % value emitted 18
              oValuePop
              oValuePushCodeAddress
              oValueNegate
              oEmitString
              % value emitted 83
              % value emitted 104
              % value emitted 101
              % value emitted 32
              % value emitted 115
              % value emitted 119
              % value emitted 97
              % value emitted 108
              % value emitted 108
              % value emitted 111
              % value emitted 119
              % value emitted 101
              % value emitted 100
              % value emitted 32
              % value emitted 116
              % value emitted 104
              % value emitted 101
              % value emitted 32
              % value emitted 0
              oFixPopForwardBranch
              oTypeStkPush(tpChar)
              oTypeStkLinkToStandardType(stdChar)
              oValuePush(one)
              oValuePushStringLength
              oTypeStkEnterBounds
              oValuePop
              oValuePop
              oTypeTblEnter
              >>
             ;StringLiteral
             [ oTypeStkChooseKind (tpChar)
             | tpChar:
             .tLiteralAddress
             oEmitValue
             % value emitted -863
             .tFetchChar
             ] or >
             oValuePop
             ] or >
             >>
            ;Operand
            @UnaryOperator
             [ (sIdentifier)
             | *:
             >>
            ;UnaryOperator
            @BinaryOperator
             [ (sIdentifier)
             | *:
             >>
            ;BinaryOperator
            [ (sIdentifier)
            | *:
            }
            @Operand
             [ (sIdentifier)
             | sIdentifier:
             oSymbolStkPushIdentifier
             [ oSymbolStkChooseKind (syVariable)
             | *:
             [ oSymbolStkChooseKind (syVariable)
             | syVariable:
             @Variable
              [ oSymbolStkChooseKind (syVariable)
              | syVariable:
              .tLiteralAddress
              oValuePushSymbol
              oEmitValue
              % value emitted 4
              oValuePop
              ] or >
              oTypeStkPushSymbol
              @VariableExtension
               [ (sSubscript)
               | sSubscript:
               .tSubscriptBegin
               @Expression
                @Operand
                 [ (sIdentifier)
                 | sIdentifier:
                 oSymbolStkPushIdentifier
                 [ oSymbolStkChooseKind (syVariable)
                 | *:
                 [ oSymbolStkChooseKind (syVariable)
                 | syVariable:
                 @Variable
                  [ oSymbolStkChooseKind (syVariable)
                  | syVariable:
                  .tLiteralAddress
                  oValuePushSymbol
                  oEmitValue
                  % value emitted 536
                  oValuePop
                  ] or >
                  oTypeStkPushSymbol
                  @VariableExtension
                   [ (sExpnEnd)
                   | *:
                   >>
                  ;VariableExtension
                  >>
                 ;Variable
                 @VariableOperand
                  [ oTypeStkChooseKind (tpInteger)
                  | tpInteger:
                  .tFetchInteger
                  ] or >
                  >>
                 ;VariableOperand
                 ] or >
                 ] or >
                 >>
                ;Operand
                @UnaryOperator
                 [ (sExpnEnd)
                 | *:
                 >>
                ;UnaryOperator
                @BinaryOperator
                 [ (sExpnEnd)
                 | *:
                 >>
                ;BinaryOperator
                [ (sExpnEnd)
                | sExpnEnd:
                ] or >
                >>
               ;Expression
               [ oTypeStkChooseKind (tpInteger)
               | tpInteger:
               ] or >
               oSymbolStkPop
               oTypeStkPop
               [ oTypeStkChooseKind (tpArray)
               | tpArray:
               oTypeStkPushComponent
               oTypeStkSwap
               oTypeStkPop
               ] or >
               [ oTypeStkChooseKind (tpChar)
               | tpChar:
               .tSubscriptChar
               ] or >
               ] or >
               >>
              ;VariableExtension
              >>
             ;Variable
             @VariableOperand
              [ oTypeStkChooseKind (tpChar)
              | tpChar:
              .tFetchChar
              ] or >
              >>
             ;VariableOperand
             ] or >
             ] or >
             >>
            ;Operand
            @UnaryOperator
             [ (sConcatenate)
             | *:
             >>
            ;UnaryOperator
            @BinaryOperator
             [ (sConcatenate)
             | sConcatenate:
             .tConcatenate
             oTypeStkPush(tpChar)
             [ oTypeStkChooseKind (tpChar)
             | tpChar:
             oTypeStkSwap
             [ oTypeStkChooseKind (tpChar)
             | tpChar:
             ] or >
             oTypeStkPop
             ] or >
             oTypeStkPop
             oSymbolStkPop
             ] or >
             oSymbolStkSetKind(syExpression)
             >>
            ;BinaryOperator
            [ (sExpnEnd)
            | sExpnEnd:
            ] or >
            >>
           ;Expression
           .tParmEnd
           @WriteText
            [ (sParmEnd)
            | *:
            [ oTypeStkChooseKind (tpChar)
            | tpChar:
            oValuePushTypeStkUpperBound
            ] or >
            .tLiteralInteger
            oEmitValue
            % value emitted 18
            oValuePop
            .tParmEnd
            [ oTypeStkChooseKind (tpChar)
            | tpChar:
            .tTrap
            oEmitTrapKind(trWriteString)
            % value emitted 109
            ] or >
            oSymbolStkPop
            oTypeStkPop
            >>
           ;WriteText
           }
           [ (sParmEnd)
           | sParmEnd:
           ] or >
           oValuePop
           >>
          ;WriteStandardExpnList
          .tWriteEnd
          >>
         ;WriteProcedure
         ] or >
         ] or >
         oSymbolStkPop
         >>
        ;CallStmt
        ] or >
        }
        [ (sCallStmt)
        | sCallStmt:
        @CallStmt
         ?sIdentifier (sIdentifier)
         oSymbolStkPushIdentifier
         [ oSymbolStkChooseKind (syProcedure)
         | *:
         [ oSymbolStkChooseKind (syProcedure)
         | syProcedure:
         [ oSymbolStkChooseStandardRoutine (rtWrite)
         | rtWrite:
         .tWriteBegin
         @WriteProcedure
          [ (sStringLiteral)
          | *:
          @WriteStandardExpnList
           oSymbolStkPushStandardVariable(stdOutput)
           [ oSymbolStkChooseKind (syVariable)
           | *:
           oValuePushSymbol
           oSymbolStkPop
           [ (sStringLiteral)
           | *:
           .tTrapBegin
           .tLiteralAddress
           oEmitValue
           % value emitted 0
           .tVarParm
           .tParmEnd
           @Expression
            @Operand
             [ (sStringLiteral)
             | sStringLiteral:
             oSymbolStkPush(syExpression)
             @StringLiteral
              oValuePushStringLength
              .tSkipString
              oFixPushForwardBranch
              oEmitNullAddress
              % value emitted -32767
              .tStringData
              oEmitValue
              % value emitted 14
              oValuePop
              oValuePushCodeAddress
              oValueNegate
              oEmitString
              % value emitted 32
              % value emitted 116
              % value emitted 111
              % value emitted 32
              % value emitted 99
              % value emitted 97
              % value emitted 116
              % value emitted 99
              % value emitted 104
              % value emitted 32
              % value emitted 116
              % value emitted 104
              % value emitted 101
              % value emitted 32
              % value emitted 0
              oFixPopForwardBranch
              oTypeStkPush(tpChar)
              oTypeStkLinkToStandardType(stdChar)
              oValuePush(one)
              oValuePushStringLength
              oTypeStkEnterBounds
              oValuePop
              oValuePop
              oTypeTblEnter
              >>
             ;StringLiteral
             [ oTypeStkChooseKind (tpChar)
             | tpChar:
             .tLiteralAddress
             oEmitValue
             % value emitted -913
             .tFetchChar
             ] or >
             oValuePop
             ] or >
             >>
            ;Operand
            @UnaryOperator
             [ (sIdentifier)
             | *:
             >>
            ;UnaryOperator
            @BinaryOperator
             [ (sIdentifier)
             | *:
             >>
            ;BinaryOperator
            [ (sIdentifier)
            | *:
            }
            @Operand
             [ (sIdentifier)
             | sIdentifier:
             oSymbolStkPushIdentifier
             [ oSymbolStkChooseKind (syVariable)
             | *:
             [ oSymbolStkChooseKind (syVariable)
             | syVariable:
             @Variable
              [ oSymbolStkChooseKind (syVariable)
              | syVariable:
              .tLiteralAddress
              oValuePushSymbol
              oEmitValue
              % value emitted 4
              oValuePop
              ] or >
              oTypeStkPushSymbol
              @VariableExtension
               [ (sSubscript)
               | sSubscript:
               .tSubscriptBegin
               @Expression
                @Operand
                 [ (sIdentifier)
                 | sIdentifier:
                 oSymbolStkPushIdentifier
                 [ oSymbolStkChooseKind (syVariable)
                 | *:
                 [ oSymbolStkChooseKind (syVariable)
                 | syVariable:
                 @Variable
                  [ oSymbolStkChooseKind (syVariable)
                  | syVariable:
                  .tLiteralAddress
                  oValuePushSymbol
                  oEmitValue
                  % value emitted 536
                  oValuePop
                  ] or >
                  oTypeStkPushSymbol
                  @VariableExtension
                   [ (sInteger)
                   | *:
                   >>
                  ;VariableExtension
                  >>
                 ;Variable
                 @VariableOperand
                  [ oTypeStkChooseKind (tpInteger)
                  | tpInteger:
                  .tFetchInteger
                  ] or >
                  >>
                 ;VariableOperand
                 ] or >
                 ] or >
                 >>
                ;Operand
                @UnaryOperator
                 [ (sInteger)
                 | *:
                 >>
                ;UnaryOperator
                @BinaryOperator
                 [ (sInteger)
                 | *:
                 >>
                ;BinaryOperator
                [ (sInteger)
                | *:
                }
                @Operand
                 [ (sInteger)
                 | sInteger:
                 oValuePushInteger
                 oSymbolStkPush(syExpression)
                 oTypeStkPush(tpInteger)
                 oTypeStkLinkToStandardType(stdInteger)
                 .tLiteralInteger
                 oEmitValue
                 % value emitted 1
                 oValuePop
                 ] or >
                 >>
                ;Operand
                @UnaryOperator
                 [ (sSubtract)
                 | *:
                 >>
                ;UnaryOperator
                @BinaryOperator
                 [ (sSubtract)
                 | sSubtract:
                 .tSubtract
                 oTypeStkPush(tpInteger)
                 @CompareOperandAndResultTypes
                  @CompareAndSwapTypes
                   [ oTypeStkChooseKind (tpInteger)
                   | tpInteger:
                   oTypeStkSwap
                   [ oTypeStkChooseKind (tpInteger)
                   | tpInteger:
                   ] or >
                   ] or >
                   >>
                  ;CompareAndSwapTypes
                  oTypeStkPop
                  @CompareAndSwapTypes
                   [ oTypeStkChooseKind (tpInteger)
                   | tpInteger:
                   oTypeStkSwap
                   [ oTypeStkChooseKind (tpInteger)
                   | tpInteger:
                   ] or >
                   ] or >
                   >>
                  ;CompareAndSwapTypes
                  oTypeStkPop
                  oSymbolStkPop
                  oSymbolStkSetKind(syExpression)
                  >>
                 ;CompareOperandAndResultTypes
                 ] or >
                 oSymbolStkSetKind(syExpression)
                 >>
                ;BinaryOperator
                [ (sExpnEnd)
                | sExpnEnd:
                ] or >
                >>
               ;Expression
               [ oTypeStkChooseKind (tpInteger)
               | tpInteger:
               ] or >
               oSymbolStkPop
               oTypeStkPop
               [ oTypeStkChooseKind (tpArray)
               | tpArray:
               oTypeStkPushComponent
               oTypeStkSwap
               oTypeStkPop
               ] or >
               [ oTypeStkChooseKind (tpChar)
               | tpChar:
               .tSubscriptChar
               ] or >
               ] or >
               >>
              ;VariableExtension
              >>
             ;Variable
             @VariableOperand
              [ oTypeStkChooseKind (tpChar)
              | tpChar:
              .tFetchChar
              ] or >
              >>
             ;VariableOperand
             ] or >
             ] or >
             >>
            ;Operand
            @UnaryOperator
             [ (sConcatenate)
             | *:
             >>
            ;UnaryOperator
            @BinaryOperator
             [ (sConcatenate)
             | sConcatenate:
             .tConcatenate
             oTypeStkPush(tpChar)
             [ oTypeStkChooseKind (tpChar)
             | tpChar:
             oTypeStkSwap
             [ oTypeStkChooseKind (tpChar)
             | tpChar:
             ] or >
             oTypeStkPop
             ] or >
             oTypeStkPop
             oSymbolStkPop
             ] or >
             oSymbolStkSetKind(syExpression)
             >>
            ;BinaryOperator
            [ (sStringLiteral)
            | *:
            }
            @Operand
             [ (sStringLiteral)
             | sStringLiteral:
             oSymbolStkPush(syExpression)
             @StringLiteral
              oValuePushStringLength
              .tSkipString
              oFixPushForwardBranch
              oEmitNullAddress
              % value emitted -32767
              .tStringData
              oEmitValue
              % value emitted 1
              oValuePop
              oValuePushCodeAddress
              oValueNegate
              oEmitString
              % value emitted 44
              % value emitted 0
              oFixPopForwardBranch
              oTypeStkPush(tpChar)
              oTypeStkLinkToStandardType(stdChar)
              oValuePush(one)
              oValuePushStringLength
              oTypeStkEnterBounds
              oValuePop
              oValuePop
              oTypeTblEnter
              >>
             ;StringLiteral
             [ oTypeStkChooseKind (tpChar)
             | tpChar:
             .tLiteralAddress
             oEmitValue
             % value emitted -947
             .tFetchChar
             ] or >
             oValuePop
             ] or >
             >>
            ;Operand
            @UnaryOperator
             [ (sConcatenate)
             | *:
             >>
            ;UnaryOperator
            @BinaryOperator
             [ (sConcatenate)
             | sConcatenate:
             .tConcatenate
             oTypeStkPush(tpChar)
             [ oTypeStkChooseKind (tpChar)
             | tpChar:
             oTypeStkSwap
             [ oTypeStkChooseKind (tpChar)
             | tpChar:
             ] or >
             oTypeStkPop
             ] or >
             oTypeStkPop
             oSymbolStkPop
             ] or >
             oSymbolStkSetKind(syExpression)
             >>
            ;BinaryOperator
            [ (sExpnEnd)
            | sExpnEnd:
            ] or >
            >>
           ;Expression
           .tParmEnd
           @WriteText
            [ (sParmEnd)
            | *:
            [ oTypeStkChooseKind (tpChar)
            | tpChar:
            oValuePushTypeStkUpperBound
            ] or >
            .tLiteralInteger
            oEmitValue
            % value emitted 14
            oValuePop
            .tParmEnd
            [ oTypeStkChooseKind (tpChar)
            | tpChar:
            .tTrap
            oEmitTrapKind(trWriteString)
            % value emitted 109
            ] or >
            oSymbolStkPop
            oTypeStkPop
            >>
           ;WriteText
           }
           [ (sParmEnd)
           | sParmEnd:
           ] or >
           oValuePop
           >>
          ;WriteStandardExpnList
          .tWriteEnd
          >>
         ;WriteProcedure
         ] or >
         ] or >
         oSymbolStkPop
         >>
        ;CallStmt
        ] or >
        }
        [ (sCallStmt)
        | sCallStmt:
        @CallStmt
         ?sIdentifier (sIdentifier)
         oSymbolStkPushIdentifier
         [ oSymbolStkChooseKind (syProcedure)
         | *:
         [ oSymbolStkChooseKind (syProcedure)
         | syProcedure:
         [ oSymbolStkChooseStandardRoutine (rtWriteln)
         | rtWriteln:
         .tTrapBegin
         @WritelnProcedure
          [ (sParmEnd)
          | sParmEnd:
          oSymbolStkPushStandardVariable(stdOutput)
          [ oSymbolStkChooseKind (syVariable)
          | *:
          oValuePushSymbol
          .tLiteralAddress
          oEmitValue
          % value emitted 0
          oValuePop
          oSymbolStkPop
          .tVarParm
          .tParmEnd
          ] or >
          >>
         ;WritelnProcedure
         .tTrap
         oEmitTrapKind(trWriteln)
         % value emitted 6
         ] or >
         ] or >
         oSymbolStkPop
         >>
        ;CallStmt
        ] or >
        }
        [ (sAssignmentStmt)
        | sAssignmentStmt:
        @AssignmentStmt
         ?sIdentifier (sIdentifier)
         oSymbolStkPushIdentifier
         .tAssignBegin
         @Variable
          [ oSymbolStkChooseKind (syVariable)
          | syVariable:
          .tLiteralAddress
          oValuePushSymbol
          oEmitValue
          % value emitted 536
          oValuePop
          ] or >
          oTypeStkPushSymbol
          @VariableExtension
           [ (sIdentifier)
           | *:
           >>
          ;VariableExtension
          >>
         ;Variable
         [ oTypeStkChooseKind (tpInteger)
         | *:
         @Expression
          @Operand
           [ (sIdentifier)
           | sIdentifier:
           oSymbolStkPushIdentifier
           [ oSymbolStkChooseKind (syVariable)
           | *:
           [ oSymbolStkChooseKind (syVariable)
           | syVariable:
           @Variable
            [ oSymbolStkChooseKind (syVariable)
            | syVariable:
            .tLiteralAddress
            oValuePushSymbol
            oEmitValue
            % value emitted 536
            oValuePop
            ] or >
            oTypeStkPushSymbol
            @VariableExtension
             [ (sInteger)
             | *:
             >>
            ;VariableExtension
            >>
           ;Variable
           @VariableOperand
            [ oTypeStkChooseKind (tpInteger)
            | tpInteger:
            .tFetchInteger
            ] or >
            >>
           ;VariableOperand
           ] or >
           ] or >
           >>
          ;Operand
          @UnaryOperator
           [ (sInteger)
           | *:
           >>
          ;UnaryOperator
          @BinaryOperator
           [ (sInteger)
           | *:
           >>
          ;BinaryOperator
          [ (sInteger)
          | *:
          }
          @Operand
           [ (sInteger)
           | sInteger:
           oValuePushInteger
           oSymbolStkPush(syExpression)
           oTypeStkPush(tpInteger)
           oTypeStkLinkToStandardType(stdInteger)
           .tLiteralInteger
           oEmitValue
           % value emitted 1
           oValuePop
           ] or >
           >>
          ;Operand
          @UnaryOperator
           [ (sSubtract)
           | *:
           >>
          ;UnaryOperator
          @BinaryOperator
           [ (sSubtract)
           | sSubtract:
           .tSubtract
           oTypeStkPush(tpInteger)
           @CompareOperandAndResultTypes
            @CompareAndSwapTypes
             [ oTypeStkChooseKind (tpInteger)
             | tpInteger:
             oTypeStkSwap
             [ oTypeStkChooseKind (tpInteger)
             | tpInteger:
             ] or >
             ] or >
             >>
            ;CompareAndSwapTypes
            oTypeStkPop
            @CompareAndSwapTypes
             [ oTypeStkChooseKind (tpInteger)
             | tpInteger:
             oTypeStkSwap
             [ oTypeStkChooseKind (tpInteger)
             | tpInteger:
             ] or >
             ] or >
             >>
            ;CompareAndSwapTypes
            oTypeStkPop
            oSymbolStkPop
            oSymbolStkSetKind(syExpression)
            >>
           ;CompareOperandAndResultTypes
           ] or >
           oSymbolStkSetKind(syExpression)
           >>
          ;BinaryOperator
          [ (sExpnEnd)
          | sExpnEnd:
          ] or >
          >>
         ;Expression
         @CompareAndSwapTypes
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          oTypeStkSwap
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          ] or >
          ] or >
          >>
         ;CompareAndSwapTypes
         @EmitAssign
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          .tAssignInteger
          ] or >
          >>
         ;EmitAssign
         oTypeStkPop
         oSymbolStkPop
         oTypeStkPop
         oSymbolStkPop
         >>
        ;AssignmentStmt
        ] or >
        }
        [ (sEnd)
        | *:
        ] or >
        ?sEnd (sEnd)
        >>
       ;Block
       oSymbolTblPopScope
       >>
      ;Statement
      .tWhileEnd
      oFixPopTargetAddress
      % value emitted 843
      oFixPopForwardBranch
      >>
     ;WhileStmt
     ] or >
     }
     [ (sIfStmt)
     | sIfStmt:
     @IfStmt
      .tIfBegin
      @BooleanControlExpression
       @Expression
        @Operand
         [ (sIdentifier)
         | sIdentifier:
         oSymbolStkPushIdentifier
         [ oSymbolStkChooseKind (syVariable)
         | *:
         [ oSymbolStkChooseKind (syVariable)
         | syVariable:
         @Variable
          [ oSymbolStkChooseKind (syVariable)
          | syVariable:
          .tLiteralAddress
          oValuePushSymbol
          oEmitValue
          % value emitted 532
          oValuePop
          ] or >
          oTypeStkPushSymbol
          @VariableExtension
           [ (sInteger)
           | *:
           >>
          ;VariableExtension
          >>
         ;Variable
         @VariableOperand
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          .tFetchInteger
          ] or >
          >>
         ;VariableOperand
         ] or >
         ] or >
         >>
        ;Operand
        @UnaryOperator
         [ (sInteger)
         | *:
         >>
        ;UnaryOperator
        @BinaryOperator
         [ (sInteger)
         | *:
         >>
        ;BinaryOperator
        [ (sInteger)
        | *:
        }
        @Operand
         [ (sInteger)
         | sInteger:
         oValuePushInteger
         oSymbolStkPush(syExpression)
         oTypeStkPush(tpInteger)
         oTypeStkLinkToStandardType(stdInteger)
         .tLiteralInteger
         oEmitValue
         % value emitted 1
         oValuePop
         ] or >
         >>
        ;Operand
        @UnaryOperator
         [ (sGT)
         | *:
         >>
        ;UnaryOperator
        @BinaryOperator
         [ (sGT)
         | sGT:
         .tGT
         @CompareRelationalOperandTypes
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          oTypeStkPop
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          ] or >
          ] or >
          oTypeStkPop
          oTypeStkPush(tpBoolean)
          oSymbolStkPop
          oSymbolStkSetKind(syExpression)
          >>
         ;CompareRelationalOperandTypes
         ] or >
         oSymbolStkSetKind(syExpression)
         >>
        ;BinaryOperator
        [ (sExpnEnd)
        | sExpnEnd:
        ] or >
        >>
       ;Expression
       [ oTypeStkChooseKind (tpBoolean)
       | tpBoolean:
       ] or >
       oSymbolStkPop
       oTypeStkPop
       >>
      ;BooleanControlExpression
      ?sThen (sThen)
      .tIfThen
      oFixPushForwardBranch
      oEmitNullAddress
      % value emitted -32767
      @Statement
       oSymbolTblPushScope
       @Block
        ?sBegin (sBegin)
        [ (sCallStmt)
        | sCallStmt:
        @CallStmt
         ?sIdentifier (sIdentifier)
         oSymbolStkPushIdentifier
         [ oSymbolStkChooseKind (syProcedure)
         | *:
         [ oSymbolStkChooseKind (syProcedure)
         | syProcedure:
         [ oSymbolStkChooseStandardRoutine (rtWrite)
         | rtWrite:
         .tWriteBegin
         @WriteProcedure
          [ (sIdentifier)
          | sIdentifier:
          oSymbolStkPushIdentifier
          oTypeStkPushSymbol
          [ oTypeStkChooseKind (tpArray)
          | *:
          oTypeStkPop
          oSymbolStkPushStandardVariable(stdOutput)
          [ oSymbolStkChooseKind (syVariable)
          | *:
          oValuePushSymbol
          oSymbolStkPop
          .tTrapBegin
          .tLiteralAddress
          oEmitValue
          % value emitted 0
          .tVarParm
          .tParmEnd
          oValuePop
          [ oSymbolStkChooseKind (syVariable)
          | *:
          [ oSymbolStkChooseKind (syVariable)
          | syVariable:
          @Variable
           [ oSymbolStkChooseKind (syVariable)
           | syVariable:
           .tLiteralAddress
           oValuePushSymbol
           oEmitValue
           % value emitted 268
           oValuePop
           ] or >
           oTypeStkPushSymbol
           @VariableExtension
            [ (sSubscript)
            | sSubscript:
            .tSubscriptBegin
            @Expression
             @Operand
              [ (sInteger)
              | sInteger:
              oValuePushInteger
              oSymbolStkPush(syExpression)
              oTypeStkPush(tpInteger)
              oTypeStkLinkToStandardType(stdInteger)
              .tLiteralInteger
              oEmitValue
              % value emitted 1
              oValuePop
              ] or >
              >>
             ;Operand
             @UnaryOperator
              [ (sExpnEnd)
              | *:
              >>
             ;UnaryOperator
             @BinaryOperator
              [ (sExpnEnd)
              | *:
              >>
             ;BinaryOperator
             [ (sExpnEnd)
             | sExpnEnd:
             ] or >
             >>
            ;Expression
            [ oTypeStkChooseKind (tpInteger)
            | tpInteger:
            ] or >
            oSymbolStkPop
            oTypeStkPop
            [ oTypeStkChooseKind (tpArray)
            | tpArray:
            oTypeStkPushComponent
            oTypeStkSwap
            oTypeStkPop
            ] or >
            [ oTypeStkChooseKind (tpChar)
            | tpChar:
            .tSubscriptChar
            ] or >
            ] or >
            >>
           ;VariableExtension
           >>
          ;Variable
          @VariableOperand
           [ oTypeStkChooseKind (tpChar)
           | tpChar:
           .tFetchChar
           ] or >
           >>
          ;VariableOperand
          ] or >
          @Expression
           @Operand
            [ (sExpnEnd)
            | *:
            >>
           ;Operand
           @UnaryOperator
            [ (sExpnEnd)
            | *:
            >>
           ;UnaryOperator
           @BinaryOperator
            [ (sExpnEnd)
            | *:
            >>
           ;BinaryOperator
           [ (sExpnEnd)
           | sExpnEnd:
           ] or >
           >>
          ;Expression
          .tParmEnd
          @WriteText
           [ (sParmEnd)
           | *:
           [ oTypeStkChooseKind (tpChar)
           | tpChar:
           oValuePushTypeStkUpperBound
           ] or >
           .tLiteralInteger
           oEmitValue
           % value emitted 0
           oValuePop
           .tParmEnd
           [ oTypeStkChooseKind (tpChar)
           | tpChar:
           .tTrap
           oEmitTrapKind(trWriteString)
           % value emitted 109
           ] or >
           oSymbolStkPop
           oTypeStkPop
           >>
          ;WriteText
          @WriteStandardExpnList
           oSymbolStkPushStandardVariable(stdOutput)
           [ oSymbolStkChooseKind (syVariable)
           | *:
           oValuePushSymbol
           oSymbolStkPop
           [ (sParmEnd)
           | sParmEnd:
           ] or >
           oValuePop
           >>
          ;WriteStandardExpnList
          ] or >
          .tWriteEnd
          >>
         ;WriteProcedure
         ] or >
         ] or >
         oSymbolStkPop
         >>
        ;CallStmt
        ] or >
        }
        [ (sCallStmt)
        | sCallStmt:
        @CallStmt
         ?sIdentifier (sIdentifier)
         oSymbolStkPushIdentifier
         [ oSymbolStkChooseKind (syProcedure)
         | *:
         [ oSymbolStkChooseKind (syProcedure)
         | syProcedure:
         [ oSymbolStkChooseStandardRoutine (rtWriteln)
         | rtWriteln:
         .tTrapBegin
         @WritelnProcedure
          [ (sParmEnd)
          | sParmEnd:
          oSymbolStkPushStandardVariable(stdOutput)
          [ oSymbolStkChooseKind (syVariable)
          | *:
          oValuePushSymbol
          .tLiteralAddress
          oEmitValue
          % value emitted 0
          oValuePop
          oSymbolStkPop
          .tVarParm
          .tParmEnd
          ] or >
          >>
         ;WritelnProcedure
         .tTrap
         oEmitTrapKind(trWriteln)
         % value emitted 6
         ] or >
         ] or >
         oSymbolStkPop
         >>
        ;CallStmt
        ] or >
        }
        [ (sEnd)
        | *:
        ] or >
        ?sEnd (sEnd)
        >>
       ;Block
       oSymbolTblPopScope
       >>
      ;Statement
      [ (sIfStmt)
      | *:
      .tIfEnd
      oFixPopForwardBranch
      >>
     ;IfStmt
     ] or >
     }
     [ (sIfStmt)
     | sIfStmt:
     @IfStmt
      .tIfBegin
      @BooleanControlExpression
       @Expression
        @Operand
         [ (sIdentifier)
         | sIdentifier:
         oSymbolStkPushIdentifier
         [ oSymbolStkChooseKind (syVariable)
         | *:
         [ oSymbolStkChooseKind (syVariable)
         | syVariable:
         @Variable
          [ oSymbolStkChooseKind (syVariable)
          | syVariable:
          .tLiteralAddress
          oValuePushSymbol
          oEmitValue
          % value emitted 532
          oValuePop
          ] or >
          oTypeStkPushSymbol
          @VariableExtension
           [ (sInteger)
           | *:
           >>
          ;VariableExtension
          >>
         ;Variable
         @VariableOperand
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          .tFetchInteger
          ] or >
          >>
         ;VariableOperand
         ] or >
         ] or >
         >>
        ;Operand
        @UnaryOperator
         [ (sInteger)
         | *:
         >>
        ;UnaryOperator
        @BinaryOperator
         [ (sInteger)
         | *:
         >>
        ;BinaryOperator
        [ (sInteger)
        | *:
        }
        @Operand
         [ (sInteger)
         | sInteger:
         oValuePushInteger
         oSymbolStkPush(syExpression)
         oTypeStkPush(tpInteger)
         oTypeStkLinkToStandardType(stdInteger)
         .tLiteralInteger
         oEmitValue
         % value emitted 8
         oValuePop
         ] or >
         >>
        ;Operand
        @UnaryOperator
         [ (sLT)
         | *:
         >>
        ;UnaryOperator
        @BinaryOperator
         [ (sLT)
         | sLT:
         .tLT
         @CompareRelationalOperandTypes
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          oTypeStkPop
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          ] or >
          ] or >
          oTypeStkPop
          oTypeStkPush(tpBoolean)
          oSymbolStkPop
          oSymbolStkSetKind(syExpression)
          >>
         ;CompareRelationalOperandTypes
         ] or >
         oSymbolStkSetKind(syExpression)
         >>
        ;BinaryOperator
        [ (sExpnEnd)
        | sExpnEnd:
        ] or >
        >>
       ;Expression
       [ oTypeStkChooseKind (tpBoolean)
       | tpBoolean:
       ] or >
       oSymbolStkPop
       oTypeStkPop
       >>
      ;BooleanControlExpression
      ?sThen (sThen)
      .tIfThen
      oFixPushForwardBranch
      oEmitNullAddress
      % value emitted -32767
      @Statement
       oSymbolTblPushScope
       @Block
        ?sBegin (sBegin)
        [ (sCallStmt)
        | sCallStmt:
        @CallStmt
         ?sIdentifier (sIdentifier)
         oSymbolStkPushIdentifier
         [ oSymbolStkChooseKind (syProcedure)
         | *:
         [ oSymbolStkChooseKind (syProcedure)
         | syProcedure:
         [ oSymbolStkChooseStandardRoutine (rtWrite)
         | rtWrite:
         .tWriteBegin
         @WriteProcedure
          [ (sStringLiteral)
          | *:
          @WriteStandardExpnList
           oSymbolStkPushStandardVariable(stdOutput)
           [ oSymbolStkChooseKind (syVariable)
           | *:
           oValuePushSymbol
           oSymbolStkPop
           [ (sStringLiteral)
           | *:
           .tTrapBegin
           .tLiteralAddress
           oEmitValue
           % value emitted 0
           .tVarParm
           .tParmEnd
           @Expression
            @Operand
             [ (sStringLiteral)
             | sStringLiteral:
             oSymbolStkPush(syExpression)
             @StringLiteral
              oValuePushStringLength
              .tSkipString
              oFixPushForwardBranch
              oEmitNullAddress
              % value emitted -32767
              .tStringData
              oEmitValue
              % value emitted 19
              oValuePop
              oValuePushCodeAddress
              oValueNegate
              oEmitString
              % value emitted 80
              % value emitted 101
              % value emitted 114
              % value emitted 104
              % value emitted 97
              % value emitted 112
              % value emitted 115
              % value emitted 32
              % value emitted 115
              % value emitted 104
              % value emitted 101
              % value emitted 39
              % value emitted 108
              % value emitted 108
              % value emitted 32
              % value emitted 100
              % value emitted 105
              % value emitted 101
              % value emitted 46
              % value emitted 0
              oFixPopForwardBranch
              oTypeStkPush(tpChar)
              oTypeStkLinkToStandardType(stdChar)
              oValuePush(one)
              oValuePushStringLength
              oTypeStkEnterBounds
              oValuePop
              oValuePop
              oTypeTblEnter
              >>
             ;StringLiteral
             [ oTypeStkChooseKind (tpChar)
             | tpChar:
             .tLiteralAddress
             oEmitValue
             % value emitted -1049
             .tFetchChar
             ] or >
             oValuePop
             ] or >
             >>
            ;Operand
            @UnaryOperator
             [ (sExpnEnd)
             | *:
             >>
            ;UnaryOperator
            @BinaryOperator
             [ (sExpnEnd)
             | *:
             >>
            ;BinaryOperator
            [ (sExpnEnd)
            | sExpnEnd:
            ] or >
            >>
           ;Expression
           .tParmEnd
           @WriteText
            [ (sParmEnd)
            | *:
            [ oTypeStkChooseKind (tpChar)
            | tpChar:
            oValuePushTypeStkUpperBound
            ] or >
            .tLiteralInteger
            oEmitValue
            % value emitted 19
            oValuePop
            .tParmEnd
            [ oTypeStkChooseKind (tpChar)
            | tpChar:
            .tTrap
            oEmitTrapKind(trWriteString)
            % value emitted 109
            ] or >
            oSymbolStkPop
            oTypeStkPop
            >>
           ;WriteText
           }
           [ (sParmEnd)
           | sParmEnd:
           ] or >
           oValuePop
           >>
          ;WriteStandardExpnList
          .tWriteEnd
          >>
         ;WriteProcedure
         ] or >
         ] or >
         oSymbolStkPop
         >>
        ;CallStmt
        ] or >
        }
        [ (sCallStmt)
        | sCallStmt:
        @CallStmt
         ?sIdentifier (sIdentifier)
         oSymbolStkPushIdentifier
         [ oSymbolStkChooseKind (syProcedure)
         | *:
         [ oSymbolStkChooseKind (syProcedure)
         | syProcedure:
         [ oSymbolStkChooseStandardRoutine (rtWriteln)
         | rtWriteln:
         .tTrapBegin
         @WritelnProcedure
          [ (sParmEnd)
          | sParmEnd:
          oSymbolStkPushStandardVariable(stdOutput)
          [ oSymbolStkChooseKind (syVariable)
          | *:
          oValuePushSymbol
          .tLiteralAddress
          oEmitValue
          % value emitted 0
          oValuePop
          oSymbolStkPop
          .tVarParm
          .tParmEnd
          ] or >
          >>
         ;WritelnProcedure
         .tTrap
         oEmitTrapKind(trWriteln)
         % value emitted 6
         ] or >
         ] or >
         oSymbolStkPop
         >>
        ;CallStmt
        ] or >
        }
        [ (sEnd)
        | *:
        ] or >
        ?sEnd (sEnd)
        >>
       ;Block
       oSymbolTblPopScope
       >>
      ;Statement
      [ (sAssignmentStmt)
      | *:
      .tIfEnd
      oFixPopForwardBranch
      >>
     ;IfStmt
     ] or >
     }
     [ (sAssignmentStmt)
     | sAssignmentStmt:
     @AssignmentStmt
      ?sIdentifier (sIdentifier)
      oSymbolStkPushIdentifier
      .tAssignBegin
      @Variable
       [ oSymbolStkChooseKind (syVariable)
       | syVariable:
       .tLiteralAddress
       oValuePushSymbol
       oEmitValue
       % value emitted 532
       oValuePop
       ] or >
       oTypeStkPushSymbol
       @VariableExtension
        [ (sIdentifier)
        | *:
        >>
       ;VariableExtension
       >>
      ;Variable
      [ oTypeStkChooseKind (tpInteger)
      | *:
      @Expression
       @Operand
        [ (sIdentifier)
        | sIdentifier:
        oSymbolStkPushIdentifier
        [ oSymbolStkChooseKind (syVariable)
        | *:
        [ oSymbolStkChooseKind (syVariable)
        | syVariable:
        @Variable
         [ oSymbolStkChooseKind (syVariable)
         | syVariable:
         .tLiteralAddress
         oValuePushSymbol
         oEmitValue
         % value emitted 532
         oValuePop
         ] or >
         oTypeStkPushSymbol
         @VariableExtension
          [ (sInteger)
          | *:
          >>
         ;VariableExtension
         >>
        ;Variable
        @VariableOperand
         [ oTypeStkChooseKind (tpInteger)
         | tpInteger:
         .tFetchInteger
         ] or >
         >>
        ;VariableOperand
        ] or >
        ] or >
        >>
       ;Operand
       @UnaryOperator
        [ (sInteger)
        | *:
        >>
       ;UnaryOperator
       @BinaryOperator
        [ (sInteger)
        | *:
        >>
       ;BinaryOperator
       [ (sInteger)
       | *:
       }
       @Operand
        [ (sInteger)
        | sInteger:
        oValuePushInteger
        oSymbolStkPush(syExpression)
        oTypeStkPush(tpInteger)
        oTypeStkLinkToStandardType(stdInteger)
        .tLiteralInteger
        oEmitValue
        % value emitted 1
        oValuePop
        ] or >
        >>
       ;Operand
       @UnaryOperator
        [ (sAdd)
        | *:
        >>
       ;UnaryOperator
       @BinaryOperator
        [ (sAdd)
        | sAdd:
        .tAdd
        oTypeStkPush(tpInteger)
        @CompareOperandAndResultTypes
         @CompareAndSwapTypes
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          oTypeStkSwap
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          ] or >
          ] or >
          >>
         ;CompareAndSwapTypes
         oTypeStkPop
         @CompareAndSwapTypes
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          oTypeStkSwap
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          ] or >
          ] or >
          >>
         ;CompareAndSwapTypes
         oTypeStkPop
         oSymbolStkPop
         oSymbolStkSetKind(syExpression)
         >>
        ;CompareOperandAndResultTypes
        ] or >
        oSymbolStkSetKind(syExpression)
        >>
       ;BinaryOperator
       [ (sExpnEnd)
       | sExpnEnd:
       ] or >
       >>
      ;Expression
      @CompareAndSwapTypes
       [ oTypeStkChooseKind (tpInteger)
       | tpInteger:
       oTypeStkSwap
       [ oTypeStkChooseKind (tpInteger)
       | tpInteger:
       ] or >
       ] or >
       >>
      ;CompareAndSwapTypes
      @EmitAssign
       [ oTypeStkChooseKind (tpInteger)
       | tpInteger:
       .tAssignInteger
       ] or >
       >>
      ;EmitAssign
      oTypeStkPop
      oSymbolStkPop
      oTypeStkPop
      oSymbolStkPop
      >>
     ;AssignmentStmt
     ] or >
     }
     [ (sEnd)
     | *:
     ] or >
     ?sEnd (sEnd)
     >>
    ;Block
    oSymbolTblPopScope
    >>
   ;Statement
   .tWhileEnd
   oFixPopTargetAddress
   % value emitted 681
   oFixPopForwardBranch
   >>
  ;WhileStmt
  ] or >
  }
  [ (sCallStmt)
  | sCallStmt:
  @CallStmt
   ?sIdentifier (sIdentifier)
   oSymbolStkPushIdentifier
   [ oSymbolStkChooseKind (syProcedure)
   | *:
   [ oSymbolStkChooseKind (syProcedure)
   | syProcedure:
   [ oSymbolStkChooseStandardRoutine (rtWriteln)
   | rtWriteln:
   .tTrapBegin
   @WritelnProcedure
    [ (sParmEnd)
    | sParmEnd:
    oSymbolStkPushStandardVariable(stdOutput)
    [ oSymbolStkChooseKind (syVariable)
    | *:
    oValuePushSymbol
    .tLiteralAddress
    oEmitValue
    % value emitted 0
    oValuePop
    oSymbolStkPop
    .tVarParm
    .tParmEnd
    ] or >
    >>
   ;WritelnProcedure
   .tTrap
   oEmitTrapKind(trWriteln)
   % value emitted 6
   ] or >
   ] or >
   oSymbolStkPop
   >>
  ;CallStmt
  ] or >
  }
  [ (sCallStmt)
  | sCallStmt:
  @CallStmt
   ?sIdentifier (sIdentifier)
   oSymbolStkPushIdentifier
   [ oSymbolStkChooseKind (syProcedure)
   | *:
   [ oSymbolStkChooseKind (syProcedure)
   | syProcedure:
   [ oSymbolStkChooseStandardRoutine (rtWrite)
   | rtWrite:
   .tWriteBegin
   @WriteProcedure
    [ (sStringLiteral)
    | *:
    @WriteStandardExpnList
     oSymbolStkPushStandardVariable(stdOutput)
     [ oSymbolStkChooseKind (syVariable)
     | *:
     oValuePushSymbol
     oSymbolStkPop
     [ (sStringLiteral)
     | *:
     .tTrapBegin
     .tLiteralAddress
     oEmitValue
     % value emitted 0
     .tVarParm
     .tParmEnd
     @Expression
      @Operand
       [ (sStringLiteral)
       | sStringLiteral:
       oSymbolStkPush(syExpression)
       @StringLiteral
        oValuePushStringLength
        .tSkipString
        oFixPushForwardBranch
        oEmitNullAddress
        % value emitted -32767
        .tStringData
        oEmitValue
        % value emitted 8
        oValuePop
        oValuePushCodeAddress
        oValueNegate
        oEmitString
        % value emitted 84
        % value emitted 104
        % value emitted 101
        % value emitted 32
        % value emitted 101
        % value emitted 110
        % value emitted 100
        % value emitted 46
        % value emitted 0
        oFixPopForwardBranch
        oTypeStkPush(tpChar)
        oTypeStkLinkToStandardType(stdChar)
        oValuePush(one)
        oValuePushStringLength
        oTypeStkEnterBounds
        oValuePop
        oValuePop
        oTypeTblEnter
        >>
       ;StringLiteral
       [ oTypeStkChooseKind (tpChar)
       | tpChar:
       .tLiteralAddress
       oEmitValue
       % value emitted -1126
       .tFetchChar
       ] or >
       oValuePop
       ] or >
       >>
      ;Operand
      @UnaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;UnaryOperator
      @BinaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;BinaryOperator
      [ (sExpnEnd)
      | sExpnEnd:
      ] or >
      >>
     ;Expression
     .tParmEnd
     @WriteText
      [ (sParmEnd)
      | *:
      [ oTypeStkChooseKind (tpChar)
      | tpChar:
      oValuePushTypeStkUpperBound
      ] or >
      .tLiteralInteger
      oEmitValue
      % value emitted 8
      oValuePop
      .tParmEnd
      [ oTypeStkChooseKind (tpChar)
      | tpChar:
      .tTrap
      oEmitTrapKind(trWriteString)
      % value emitted 109
      ] or >
      oSymbolStkPop
      oTypeStkPop
      >>
     ;WriteText
     }
     [ (sParmEnd)
     | sParmEnd:
     ] or >
     oValuePop
     >>
    ;WriteStandardExpnList
    .tWriteEnd
    >>
   ;WriteProcedure
   ] or >
   ] or >
   oSymbolStkPop
   >>
  ;CallStmt
  ] or >
  }
  [ (sCallStmt)
  | sCallStmt:
  @CallStmt
   ?sIdentifier (sIdentifier)
   oSymbolStkPushIdentifier
   [ oSymbolStkChooseKind (syProcedure)
   | *:
   [ oSymbolStkChooseKind (syProcedure)
   | syProcedure:
   [ oSymbolStkChooseStandardRoutine (rtWriteln)
   | rtWriteln:
   .tTrapBegin
   @WritelnProcedure
    [ (sParmEnd)
    | sParmEnd:
    oSymbolStkPushStandardVariable(stdOutput)
    [ oSymbolStkChooseKind (syVariable)
    | *:
    oValuePushSymbol
    .tLiteralAddress
    oEmitValue
    % value emitted 0
    oValuePop
    oSymbolStkPop
    .tVarParm
    .tParmEnd
    ] or >
    >>
   ;WritelnProcedure
   .tTrap
   oEmitTrapKind(trWriteln)
   % value emitted 6
   ] or >
   ] or >
   oSymbolStkPop
   >>
  ;CallStmt
  ] or >
  }
  [ (sCallStmt)
  | sCallStmt:
  @CallStmt
   ?sIdentifier (sIdentifier)
   oSymbolStkPushIdentifier
   [ oSymbolStkChooseKind (syProcedure)
   | *:
   [ oSymbolStkChooseKind (syProcedure)
   | syProcedure:
   [ oSymbolStkChooseStandardRoutine (rtWriteln)
   | rtWriteln:
   .tTrapBegin
   @WritelnProcedure
    [ (sParmEnd)
    | sParmEnd:
    oSymbolStkPushStandardVariable(stdOutput)
    [ oSymbolStkChooseKind (syVariable)
    | *:
    oValuePushSymbol
    .tLiteralAddress
    oEmitValue
    % value emitted 0
    oValuePop
    oSymbolStkPop
    .tVarParm
    .tParmEnd
    ] or >
    >>
   ;WritelnProcedure
   .tTrap
   oEmitTrapKind(trWriteln)
   % value emitted 6
   ] or >
   ] or >
   oSymbolStkPop
   >>
  ;CallStmt
  ] or >
  }
  [ (sCallStmt)
  | sCallStmt:
  @CallStmt
   ?sIdentifier (sIdentifier)
   oSymbolStkPushIdentifier
   [ oSymbolStkChooseKind (syProcedure)
   | *:
   [ oSymbolStkChooseKind (syProcedure)
   | syProcedure:
   [ oSymbolStkChooseStandardRoutine (rtWrite)
   | rtWrite:
   .tWriteBegin
   @WriteProcedure
    [ (sStringLiteral)
    | *:
    @WriteStandardExpnList
     oSymbolStkPushStandardVariable(stdOutput)
     [ oSymbolStkChooseKind (syVariable)
     | *:
     oValuePushSymbol
     oSymbolStkPop
     [ (sStringLiteral)
     | *:
     .tTrapBegin
     .tLiteralAddress
     oEmitValue
     % value emitted 0
     .tVarParm
     .tParmEnd
     @Expression
      @Operand
       [ (sStringLiteral)
       | sStringLiteral:
       oSymbolStkPush(syExpression)
       @StringLiteral
        oValuePushStringLength
        .tSkipString
        oFixPushForwardBranch
        oEmitNullAddress
        % value emitted -32767
        .tStringData
        oEmitValue
        % value emitted 37
        oValuePop
        oValuePushCodeAddress
        oValueNegate
        oEmitString
        % value emitted 84
        % value emitted 104
        % value emitted 97
        % value emitted 110
        % value emitted 107
        % value emitted 32
        % value emitted 121
        % value emitted 111
        % value emitted 117
        % value emitted 32
        % value emitted 118
        % value emitted 101
        % value emitted 114
        % value emitted 121
        % value emitted 32
        % value emitted 109
        % value emitted 117
        % value emitted 99
        % value emitted 104
        % value emitted 44
        % value emitted 32
        % value emitted 121
        % value emitted 111
        % value emitted 117
        % value emitted 39
        % value emitted 114
        % value emitted 101
        % value emitted 32
        % value emitted 116
        % value emitted 111
        % value emitted 111
        % value emitted 32
        % value emitted 107
        % value emitted 105
        % value emitted 110
        % value emitted 100
        % value emitted 46
        % value emitted 0
        oFixPopForwardBranch
        oTypeStkPush(tpChar)
        oTypeStkLinkToStandardType(stdChar)
        oValuePush(one)
        oValuePushStringLength
        oTypeStkEnterBounds
        oValuePop
        oValuePop
        oTypeTblEnter
        >>
       ;StringLiteral
       [ oTypeStkChooseKind (tpChar)
       | tpChar:
       .tLiteralAddress
       oEmitValue
       % value emitted -1173
       .tFetchChar
       ] or >
       oValuePop
       ] or >
       >>
      ;Operand
      @UnaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;UnaryOperator
      @BinaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;BinaryOperator
      [ (sExpnEnd)
      | sExpnEnd:
      ] or >
      >>
     ;Expression
     .tParmEnd
     @WriteText
      [ (sParmEnd)
      | *:
      [ oTypeStkChooseKind (tpChar)
      | tpChar:
      oValuePushTypeStkUpperBound
      ] or >
      .tLiteralInteger
      oEmitValue
      % value emitted 37
      oValuePop
      .tParmEnd
      [ oTypeStkChooseKind (tpChar)
      | tpChar:
      .tTrap
      oEmitTrapKind(trWriteString)
      % value emitted 109
      ] or >
      oSymbolStkPop
      oTypeStkPop
      >>
     ;WriteText
     }
     [ (sParmEnd)
     | sParmEnd:
     ] or >
     oValuePop
     >>
    ;WriteStandardExpnList
    .tWriteEnd
    >>
   ;WriteProcedure
   ] or >
   ] or >
   oSymbolStkPop
   >>
  ;CallStmt
  ] or >
  }
  [ (sCallStmt)
  | sCallStmt:
  @CallStmt
   ?sIdentifier (sIdentifier)
   oSymbolStkPushIdentifier
   [ oSymbolStkChooseKind (syProcedure)
   | *:
   [ oSymbolStkChooseKind (syProcedure)
   | syProcedure:
   [ oSymbolStkChooseStandardRoutine (rtWriteln)
   | rtWriteln:
   .tTrapBegin
   @WritelnProcedure
    [ (sParmEnd)
    | sParmEnd:
    oSymbolStkPushStandardVariable(stdOutput)
    [ oSymbolStkChooseKind (syVariable)
    | *:
    oValuePushSymbol
    .tLiteralAddress
    oEmitValue
    % value emitted 0
    oValuePop
    oSymbolStkPop
    .tVarParm
    .tParmEnd
    ] or >
    >>
   ;WritelnProcedure
   .tTrap
   oEmitTrapKind(trWriteln)
   % value emitted 6
   ] or >
   ] or >
   oSymbolStkPop
   >>
  ;CallStmt
  ] or >
  }
  [ (sCallStmt)
  | sCallStmt:
  @CallStmt
   ?sIdentifier (sIdentifier)
   oSymbolStkPushIdentifier
   [ oSymbolStkChooseKind (syProcedure)
   | *:
   [ oSymbolStkChooseKind (syProcedure)
   | syProcedure:
   [ oSymbolStkChooseStandardRoutine (rtWrite)
   | rtWrite:
   .tWriteBegin
   @WriteProcedure
    [ (sStringLiteral)
    | *:
    @WriteStandardExpnList
     oSymbolStkPushStandardVariable(stdOutput)
     [ oSymbolStkChooseKind (syVariable)
     | *:
     oValuePushSymbol
     oSymbolStkPop
     [ (sStringLiteral)
     | *:
     .tTrapBegin
     .tLiteralAddress
     oEmitValue
     % value emitted 0
     .tVarParm
     .tParmEnd
     @Expression
      @Operand
       [ (sStringLiteral)
       | sStringLiteral:
       oSymbolStkPush(syExpression)
       @StringLiteral
        oValuePushStringLength
        .tSkipString
        oFixPushForwardBranch
        oEmitNullAddress
        % value emitted -32767
        .tStringData
        oEmitValue
        % value emitted 43
        oValuePop
        oValuePushCodeAddress
        oValueNegate
        oEmitString
        % value emitted 73
        % value emitted 39
        % value emitted 108
        % value emitted 108
        % value emitted 32
        % value emitted 98
        % value emitted 101
        % value emitted 32
        % value emitted 104
        % value emitted 101
        % value emitted 114
        % value emitted 101
        % value emitted 32
        % value emitted 117
        % value emitted 110
        % value emitted 116
        % value emitted 105
        % value emitted 108
        % value emitted 32
        % value emitted 84
        % value emitted 104
        % value emitted 117
        % value emitted 114
        % value emitted 115
        % value emitted 100
        % value emitted 97
        % value emitted 121
        % value emitted 32
        % value emitted 45
        % value emitted 32
        % value emitted 116
        % value emitted 114
        % value emitted 121
        % value emitted 32
        % value emitted 116
        % value emitted 104
        % value emitted 101
        % value emitted 32
        % value emitted 118
        % value emitted 101
        % value emitted 97
        % value emitted 108
        % value emitted 33
        % value emitted 0
        oFixPopForwardBranch
        oTypeStkPush(tpChar)
        oTypeStkLinkToStandardType(stdChar)
        oValuePush(one)
        oValuePushStringLength
        oTypeStkEnterBounds
        oValuePop
        oValuePop
        oTypeTblEnter
        >>
       ;StringLiteral
       [ oTypeStkChooseKind (tpChar)
       | tpChar:
       .tLiteralAddress
       oEmitValue
       % value emitted -1240
       .tFetchChar
       ] or >
       oValuePop
       ] or >
       >>
      ;Operand
      @UnaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;UnaryOperator
      @BinaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;BinaryOperator
      [ (sExpnEnd)
      | sExpnEnd:
      ] or >
      >>
     ;Expression
     .tParmEnd
     @WriteText
      [ (sParmEnd)
      | *:
      [ oTypeStkChooseKind (tpChar)
      | tpChar:
      oValuePushTypeStkUpperBound
      ] or >
      .tLiteralInteger
      oEmitValue
      % value emitted 43
      oValuePop
      .tParmEnd
      [ oTypeStkChooseKind (tpChar)
      | tpChar:
      .tTrap
      oEmitTrapKind(trWriteString)
      % value emitted 109
      ] or >
      oSymbolStkPop
      oTypeStkPop
      >>
     ;WriteText
     }
     [ (sParmEnd)
     | sParmEnd:
     ] or >
     oValuePop
     >>
    ;WriteStandardExpnList
    .tWriteEnd
    >>
   ;WriteProcedure
   ] or >
   ] or >
   oSymbolStkPop
   >>
  ;CallStmt
  ] or >
  }
  [ (sCallStmt)
  | sCallStmt:
  @CallStmt
   ?sIdentifier (sIdentifier)
   oSymbolStkPushIdentifier
   [ oSymbolStkChooseKind (syProcedure)
   | *:
   [ oSymbolStkChooseKind (syProcedure)
   | syProcedure:
   [ oSymbolStkChooseStandardRoutine (rtWriteln)
   | rtWriteln:
   .tTrapBegin
   @WritelnProcedure
    [ (sParmEnd)
    | sParmEnd:
    oSymbolStkPushStandardVariable(stdOutput)
    [ oSymbolStkChooseKind (syVariable)
    | *:
    oValuePushSymbol
    .tLiteralAddress
    oEmitValue
    % value emitted 0
    oValuePop
    oSymbolStkPop
    .tVarParm
    .tParmEnd
    ] or >
    >>
   ;WritelnProcedure
   .tTrap
   oEmitTrapKind(trWriteln)
   % value emitted 6
   ] or >
   ] or >
   oSymbolStkPop
   >>
  ;CallStmt
  ] or >
  }
  [ (sCallStmt)
  | sCallStmt:
  @CallStmt
   ?sIdentifier (sIdentifier)
   oSymbolStkPushIdentifier
   [ oSymbolStkChooseKind (syProcedure)
   | *:
   [ oSymbolStkChooseKind (syProcedure)
   | syProcedure:
   [ oSymbolStkChooseStandardRoutine (rtWriteln)
   | rtWriteln:
   .tTrapBegin
   @WritelnProcedure
    [ (sParmEnd)
    | sParmEnd:
    oSymbolStkPushStandardVariable(stdOutput)
    [ oSymbolStkChooseKind (syVariable)
    | *:
    oValuePushSymbol
    .tLiteralAddress
    oEmitValue
    % value emitted 0
    oValuePop
    oSymbolStkPop
    .tVarParm
    .tParmEnd
    ] or >
    >>
   ;WritelnProcedure
   .tTrap
   oEmitTrapKind(trWriteln)
   % value emitted 6
   ] or >
   ] or >
   oSymbolStkPop
   >>
  ;CallStmt
  ] or >
  }
  [ (sEnd)
  | *:
  ] or >
  ?sEnd (sEnd)
  >>
 ;Block
 [ oSymbolTblLookupExternal (no)
 | *:
 oSymbolTblPopScope
 oSymbolStkPop
 .tTrapBegin
 .tTrap
 oEmitTrapKind(trHalt)
 % value emitted 0
 >>
;Program
