@Program
 ?sProgram (sProgram)
 oSymbolStkPush(syProcedure)
 oSymbolTblPushScope
 oCountPush(three)
 [ (sIdentifier)
 | *:
 @ProgramParameter
  ?sIdentifier (sIdentifier)
  oSymbolStkPushLocalIdentifier
  [ oSymbolStkChooseKind (syUndefined)
  | syUndefined:
  [ oSymbolStkChooseStandardFile (stdOutput)
  | stdOutput:
  oSymbolStkSetKind(syVariable)
  oTypeStkPush(tpFile)
  oTypeStkLinkToStandardType(stdText)
  oSymbolStkEnterTypeReference
  oValuePush(two)
  ] or >
  @AllocateVar
   [ oSymbolStkChooseKind (syVariable)
   | *:
   [ oTypeStkChooseKind (tpFile)
   | tpFile:
   .tFileDescriptor
   oAllocateAlignOnWord
   oSymbolStkEnterDataAddress
   .tLiteralInteger
   oEmitValue
   % value emitted 2
   .tFileBind
   .tLiteralAddress
   oEmitDataAddress
   % value emitted 0
   .tStoreInteger
   oAllocateDescriptor
   ] or >
   >>
  ;AllocateVar
  oSymbolTblEnter
  ] or >
  oSymbolStkPop
  oTypeStkPop
  oValuePop
  >>
 ;ProgramParameter
 }
 [ (sParmEnd)
 | sParmEnd:
 ] or >
 oCountPop
 @Block
  ?sBegin (sBegin)
  [ (sVar)
  | sVar:
  @VariableDeclarations
   ?sIdentifier (sIdentifier)
   oSymbolStkPushLocalIdentifier
   [ oSymbolStkChooseKind (syUndefined)
   | syUndefined:
   ] or >
   @PublicDefinition
    [ (sArray)
    | *:
    >>
   ;PublicDefinition
   [ (sArray)
   | *:
   @TypeBody
    [ (sArray)
    | sArray:
    oTypeStkPush(tpArray)
    @IndexType
     oValuePush(one)
     @ConstantValue
      [ (sInteger)
      | sInteger:
      oTypeStkPush(tpInteger)
      oTypeStkLinkToStandardType(stdInteger)
      oValuePushInteger
      [ (sLike)
      | *:
      ] or >
      >>
     ;ConstantValue
     [ oTypeStkChooseKind (tpInteger)
     | tpInteger:
     ] or >
     oTypeStkPop
     oTypeStkEnterBounds
     [ oTypeStkVerifyBounds (yes)
     | yes:
     ] or >
     oValuePop
     oValuePop
     >>
    ;IndexType
    [ (sLike)
    | *:
    @ComponentType
     @SimpleType
      ?sLike (sLike)
      [ (sInteger)
      | sInteger:
      oTypeStkPush(tpInteger)
      oTypeStkLinkToStandardType(stdInteger)
      ] or >
      >>
     ;SimpleType
     [ oTypeStkChooseKind (tpInteger)
     | *:
     @TypeTblEnterIfNew
      [ oTypeStkChooseTypeReference (yes)
      | *:
      >>
     ;TypeTblEnterIfNew
     oTypeStkEnterComponentReference
     oTypeStkPop
     >>
    ;ComponentType
    ] or >
    @TypeTblEnterIfNew
     [ oTypeStkChooseTypeReference (no)
     | no:
     oTypeTblEnter
     ] or >
     >>
    ;TypeTblEnterIfNew
    >>
   ;TypeBody
   @EnterVariableAttributes
    [ oSymbolStkChooseKind (syUndefined)
    | *:
    oSymbolStkSetKind(syVariable)
    [ oTypeStkChooseKind (tpArray)
    | *:
    @AllocateVar
     [ oSymbolStkChooseKind (syVariable)
     | *:
     [ oTypeStkChooseKind (tpArray)
     | tpArray:
     .tArrayDescriptor
     oAllocateAlignOnWord
     oSymbolStkEnterDataAddress
     .tLiteralInteger
     oValuePushTypeStkLowerBound
     oEmitValue
     % value emitted 1
     oValuePop
     .tLiteralAddress
     oEmitDataAddress
     % value emitted 4
     .tStoreInteger
     oAllocateDescriptor
     .tLiteralInteger
     oValuePushTypeStkUpperBound
     oEmitValue
     % value emitted 15
     oValuePop
     .tLiteralAddress
     oEmitDataAddress
     % value emitted 8
     .tStoreInteger
     oAllocateDescriptor
     oAllocateVariable
     ] or >
     >>
    ;AllocateVar
    oSymbolStkEnterTypeReference
    oSymbolTblEnter
    >>
   ;EnterVariableAttributes
   oTypeStkPop
   oSymbolStkPop
   >>
  ;VariableDeclarations
  ] or >
  }
  [ (sProcedure)
  | sProcedure:
  @ProcedureDefinition
   ?sIdentifier (sIdentifier)
   oSymbolStkPushLocalIdentifier
   [ oSymbolStkChooseKind (syUndefined)
   | syUndefined:
   ] or >
   .tSkipProc
   oFixPushForwardBranch
   oEmitNullAddress
   % value emitted -32767
   oSymbolStkSetKind(syProcedure)
   oValuePushCodeAddress
   oSymbolStkEnterValue
   oValuePop
   oTypeStkPush(tpNull)
   oTypeStkSetRecursionFlag(yes)
   oTypeTblEnter
   oSymbolStkEnterTypeReference
   @PublicDefinition
    [ (sIdentifier)
    | *:
    >>
   ;PublicDefinition
   oSymbolTblEnter
   oSymbolTblPushScope
   @ProcedureHeading
    oCountPush(zero)
    [ (sIdentifier)
    | *:
    oCountIncrement
    ?sIdentifier (sIdentifier)
    oSymbolStkPushLocalIdentifier
    [ oSymbolStkChooseKind (syUndefined)
    | syUndefined:
    ] or >
    [ (sLike)
    | *:
    oSymbolStkSetKind(syVariable)
    @ProcedureParameterType
     @SimpleType
      ?sLike (sLike)
      [ (sInteger)
      | sInteger:
      oTypeStkPush(tpInteger)
      oTypeStkLinkToStandardType(stdInteger)
      ] or >
      >>
     ;SimpleType
     [ oSymbolStkChooseKind (syVariable)
     | syVariable:
     [ oTypeStkChooseKind (tpInteger)
     | *:
     ] or >
     oSymbolStkEnterTypeReference
     @AllocateVar
      [ oSymbolStkChooseKind (syVariable)
      | *:
      [ oTypeStkChooseKind (tpInteger)
      | tpInteger:
      oAllocateAlignOnWord
      oSymbolStkEnterDataAddress
      oAllocateVariable
      ] or >
      >>
     ;AllocateVar
     oSymbolTblEnter
     >>
    ;ProcedureParameterType
    }
    [ (sParmEnd)
    | sParmEnd:
    ] or >
    @ProcedurePrologue
     @CountPushCopy
      oValuePushCount
      oCountPushValue
      oValuePop
      >>
     ;CountPushCopy
     [ oCountChoose (one)
     | *:
     .tLiteralAddress
     oValuePushSymbol
     oEmitValue
     % value emitted 72
     oValuePop
     [ oSymbolStkChooseKind (syVariable)
     | syVariable:
     @EmitStore
      [ oTypeStkChooseKind (tpInteger)
      | tpInteger:
      .tStoreInteger
      ] or >
      >>
     ;EmitStore
     ] or >
     oSymbolStkPop
     oTypeStkPop
     oCountDecrement
     }
     [ oCountChoose (zero)
     | zero:
     oCountPop
     .tParmEnd
     ] or >
     oTypeStkEnterParameterCount
     oCountPop
     >>
    ;ProcedurePrologue
    >>
   ;ProcedureHeading
   @Block
    ?sBegin (sBegin)
    [ (sIfStmt)
    | sIfStmt:
    @IfStmt
     .tIfBegin
     @BooleanControlExpression
      @Expression
       @Operand
        [ (sIdentifier)
        | sIdentifier:
        oSymbolStkPushIdentifier
        [ oSymbolStkChooseKind (syVariable)
        | *:
        [ oSymbolStkChooseKind (syVariable)
        | syVariable:
        @Variable
         [ oSymbolStkChooseKind (syVariable)
         | syVariable:
         .tLiteralAddress
         oValuePushSymbol
         oEmitValue
         % value emitted 72
         oValuePop
         ] or >
         oTypeStkPushSymbol
         @VariableExtension
          [ (sInteger)
          | *:
          >>
         ;VariableExtension
         >>
        ;Variable
        @VariableOperand
         [ oTypeStkChooseKind (tpInteger)
         | tpInteger:
         .tFetchInteger
         ] or >
         >>
        ;VariableOperand
        ] or >
        ] or >
        >>
       ;Operand
       @UnaryOperator
        [ (sInteger)
        | *:
        >>
       ;UnaryOperator
       @BinaryOperator
        [ (sInteger)
        | *:
        >>
       ;BinaryOperator
       [ (sInteger)
       | *:
       }
       @Operand
        [ (sInteger)
        | sInteger:
        oValuePushInteger
        oSymbolStkPush(syExpression)
        oTypeStkPush(tpInteger)
        oTypeStkLinkToStandardType(stdInteger)
        .tLiteralInteger
        oEmitValue
        % value emitted 1
        oValuePop
        ] or >
        >>
       ;Operand
       @UnaryOperator
        [ (sEq)
        | *:
        >>
       ;UnaryOperator
       @BinaryOperator
        [ (sEq)
        | sEq:
        [ oTypeStkChooseKind (tpInteger)
        | *:
        .tEQ
        @CompareEqualityOperandTypes
         [ oTypeStkChooseKind (tpInteger)
         | tpInteger:
         oTypeStkPop
         [ oTypeStkChooseKind (tpInteger)
         | tpInteger:
         ] or >
         ] or >
         oTypeStkPop
         oTypeStkPush(tpBoolean)
         oSymbolStkPop
         oSymbolStkSetKind(syExpression)
         >>
        ;CompareEqualityOperandTypes
        ] or >
        oSymbolStkSetKind(syExpression)
        >>
       ;BinaryOperator
       [ (sExpnEnd)
       | sExpnEnd:
       ] or >
       >>
      ;Expression
      [ oTypeStkChooseKind (tpBoolean)
      | tpBoolean:
      ] or >
      oSymbolStkPop
      oTypeStkPop
      >>
     ;BooleanControlExpression
     ?sThen (sThen)
     .tIfThen
     oFixPushForwardBranch
     oEmitNullAddress
     % value emitted -32767
     @Statement
      oSymbolTblPushScope
      @Block
       ?sBegin (sBegin)
       [ (sAssignmentStmt)
       | sAssignmentStmt:
       @AssignmentStmt
        ?sIdentifier (sIdentifier)
        oSymbolStkPushIdentifier
        .tAssignBegin
        @Variable
         [ oSymbolStkChooseKind (syVariable)
         | syVariable:
         .tLiteralAddress
         oValuePushSymbol
         oEmitValue
         % value emitted 4
         oValuePop
         ] or >
         oTypeStkPushSymbol
         @VariableExtension
          [ (sSubscript)
          | sSubscript:
          .tSubscriptBegin
          @Expression
           @Operand
            [ (sInteger)
            | sInteger:
            oValuePushInteger
            oSymbolStkPush(syExpression)
            oTypeStkPush(tpInteger)
            oTypeStkLinkToStandardType(stdInteger)
            .tLiteralInteger
            oEmitValue
            % value emitted 1
            oValuePop
            ] or >
            >>
           ;Operand
           @UnaryOperator
            [ (sExpnEnd)
            | *:
            >>
           ;UnaryOperator
           @BinaryOperator
            [ (sExpnEnd)
            | *:
            >>
           ;BinaryOperator
           [ (sExpnEnd)
           | sExpnEnd:
           ] or >
           >>
          ;Expression
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          ] or >
          oSymbolStkPop
          oTypeStkPop
          [ oTypeStkChooseKind (tpArray)
          | tpArray:
          oTypeStkPushComponent
          oTypeStkSwap
          oTypeStkPop
          ] or >
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          .tSubscriptInteger
          ] or >
          ] or >
          >>
         ;VariableExtension
         >>
        ;Variable
        [ oTypeStkChooseKind (tpInteger)
        | *:
        @Expression
         @Operand
          [ (sIdentifier)
          | sIdentifier:
          oSymbolStkPushIdentifier
          [ oSymbolStkChooseKind (syVariable)
          | *:
          [ oSymbolStkChooseKind (syVariable)
          | syVariable:
          @Variable
           [ oSymbolStkChooseKind (syVariable)
           | syVariable:
           .tLiteralAddress
           oValuePushSymbol
           oEmitValue
           % value emitted 4
           oValuePop
           ] or >
           oTypeStkPushSymbol
           @VariableExtension
            [ (sSubscript)
            | sSubscript:
            .tSubscriptBegin
            @Expression
             @Operand
              [ (sInteger)
              | sInteger:
              oValuePushInteger
              oSymbolStkPush(syExpression)
              oTypeStkPush(tpInteger)
              oTypeStkLinkToStandardType(stdInteger)
              .tLiteralInteger
              oEmitValue
              % value emitted 1
              oValuePop
              ] or >
              >>
             ;Operand
             @UnaryOperator
              [ (sExpnEnd)
              | *:
              >>
             ;UnaryOperator
             @BinaryOperator
              [ (sExpnEnd)
              | *:
              >>
             ;BinaryOperator
             [ (sExpnEnd)
             | sExpnEnd:
             ] or >
             >>
            ;Expression
            [ oTypeStkChooseKind (tpInteger)
            | tpInteger:
            ] or >
            oSymbolStkPop
            oTypeStkPop
            [ oTypeStkChooseKind (tpArray)
            | tpArray:
            oTypeStkPushComponent
            oTypeStkSwap
            oTypeStkPop
            ] or >
            [ oTypeStkChooseKind (tpInteger)
            | tpInteger:
            .tSubscriptInteger
            ] or >
            ] or >
            >>
           ;VariableExtension
           >>
          ;Variable
          @VariableOperand
           [ oTypeStkChooseKind (tpInteger)
           | tpInteger:
           .tFetchInteger
           ] or >
           >>
          ;VariableOperand
          ] or >
          ] or >
          >>
         ;Operand
         @UnaryOperator
          [ (sInteger)
          | *:
          >>
         ;UnaryOperator
         @BinaryOperator
          [ (sInteger)
          | *:
          >>
         ;BinaryOperator
         [ (sInteger)
         | *:
         }
         @Operand
          [ (sInteger)
          | sInteger:
          oValuePushInteger
          oSymbolStkPush(syExpression)
          oTypeStkPush(tpInteger)
          oTypeStkLinkToStandardType(stdInteger)
          .tLiteralInteger
          oEmitValue
          % value emitted 1
          oValuePop
          ] or >
          >>
         ;Operand
         @UnaryOperator
          [ (sAdd)
          | *:
          >>
         ;UnaryOperator
         @BinaryOperator
          [ (sAdd)
          | sAdd:
          .tAdd
          oTypeStkPush(tpInteger)
          @CompareOperandAndResultTypes
           @CompareAndSwapTypes
            [ oTypeStkChooseKind (tpInteger)
            | tpInteger:
            oTypeStkSwap
            [ oTypeStkChooseKind (tpInteger)
            | tpInteger:
            ] or >
            ] or >
            >>
           ;CompareAndSwapTypes
           oTypeStkPop
           @CompareAndSwapTypes
            [ oTypeStkChooseKind (tpInteger)
            | tpInteger:
            oTypeStkSwap
            [ oTypeStkChooseKind (tpInteger)
            | tpInteger:
            ] or >
            ] or >
            >>
           ;CompareAndSwapTypes
           oTypeStkPop
           oSymbolStkPop
           oSymbolStkSetKind(syExpression)
           >>
          ;CompareOperandAndResultTypes
          ] or >
          oSymbolStkSetKind(syExpression)
          >>
         ;BinaryOperator
         [ (sExpnEnd)
         | sExpnEnd:
         ] or >
         >>
        ;Expression
        @CompareAndSwapTypes
         [ oTypeStkChooseKind (tpInteger)
         | tpInteger:
         oTypeStkSwap
         [ oTypeStkChooseKind (tpInteger)
         | tpInteger:
         ] or >
         ] or >
         >>
        ;CompareAndSwapTypes
        @EmitAssign
         [ oTypeStkChooseKind (tpInteger)
         | tpInteger:
         .tAssignInteger
         ] or >
         >>
        ;EmitAssign
        oTypeStkPop
        oSymbolStkPop
        oTypeStkPop
        oSymbolStkPop
        >>
       ;AssignmentStmt
       ] or >
       }
       [ (sEnd)
       | *:
       ] or >
       ?sEnd (sEnd)
       >>
      ;Block
      oSymbolTblPopScope
      >>
     ;Statement
     [ (sElse)
     | sElse:
     .tIfMerge
     oFixPushForwardBranch
     oEmitNullAddress
     % value emitted -32767
     oFixSwap
     oFixPopForwardBranch
     @Statement
      oSymbolTblPushScope
      @Block
       ?sBegin (sBegin)
       [ (sAssignmentStmt)
       | sAssignmentStmt:
       @AssignmentStmt
        ?sIdentifier (sIdentifier)
        oSymbolStkPushIdentifier
        .tAssignBegin
        @Variable
         [ oSymbolStkChooseKind (syVariable)
         | syVariable:
         .tLiteralAddress
         oValuePushSymbol
         oEmitValue
         % value emitted 4
         oValuePop
         ] or >
         oTypeStkPushSymbol
         @VariableExtension
          [ (sSubscript)
          | sSubscript:
          .tSubscriptBegin
          @Expression
           @Operand
            [ (sIdentifier)
            | sIdentifier:
            oSymbolStkPushIdentifier
            [ oSymbolStkChooseKind (syVariable)
            | *:
            [ oSymbolStkChooseKind (syVariable)
            | syVariable:
            @Variable
             [ oSymbolStkChooseKind (syVariable)
             | syVariable:
             .tLiteralAddress
             oValuePushSymbol
             oEmitValue
             % value emitted 72
             oValuePop
             ] or >
             oTypeStkPushSymbol
             @VariableExtension
              [ (sExpnEnd)
              | *:
              >>
             ;VariableExtension
             >>
            ;Variable
            @VariableOperand
             [ oTypeStkChooseKind (tpInteger)
             | tpInteger:
             .tFetchInteger
             ] or >
             >>
            ;VariableOperand
            ] or >
            ] or >
            >>
           ;Operand
           @UnaryOperator
            [ (sExpnEnd)
            | *:
            >>
           ;UnaryOperator
           @BinaryOperator
            [ (sExpnEnd)
            | *:
            >>
           ;BinaryOperator
           [ (sExpnEnd)
           | sExpnEnd:
           ] or >
           >>
          ;Expression
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          ] or >
          oSymbolStkPop
          oTypeStkPop
          [ oTypeStkChooseKind (tpArray)
          | tpArray:
          oTypeStkPushComponent
          oTypeStkSwap
          oTypeStkPop
          ] or >
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          .tSubscriptInteger
          ] or >
          ] or >
          >>
         ;VariableExtension
         >>
        ;Variable
        [ oTypeStkChooseKind (tpInteger)
        | *:
        @Expression
         @Operand
          [ (sIdentifier)
          | sIdentifier:
          oSymbolStkPushIdentifier
          [ oSymbolStkChooseKind (syVariable)
          | *:
          [ oSymbolStkChooseKind (syVariable)
          | syVariable:
          @Variable
           [ oSymbolStkChooseKind (syVariable)
           | syVariable:
           .tLiteralAddress
           oValuePushSymbol
           oEmitValue
           % value emitted 4
           oValuePop
           ] or >
           oTypeStkPushSymbol
           @VariableExtension
            [ (sSubscript)
            | sSubscript:
            .tSubscriptBegin
            @Expression
             @Operand
              [ (sIdentifier)
              | sIdentifier:
              oSymbolStkPushIdentifier
              [ oSymbolStkChooseKind (syVariable)
              | *:
              [ oSymbolStkChooseKind (syVariable)
              | syVariable:
              @Variable
               [ oSymbolStkChooseKind (syVariable)
               | syVariable:
               .tLiteralAddress
               oValuePushSymbol
               oEmitValue
               % value emitted 72
               oValuePop
               ] or >
               oTypeStkPushSymbol
               @VariableExtension
                [ (sExpnEnd)
                | *:
                >>
               ;VariableExtension
               >>
              ;Variable
              @VariableOperand
               [ oTypeStkChooseKind (tpInteger)
               | tpInteger:
               .tFetchInteger
               ] or >
               >>
              ;VariableOperand
              ] or >
              ] or >
              >>
             ;Operand
             @UnaryOperator
              [ (sExpnEnd)
              | *:
              >>
             ;UnaryOperator
             @BinaryOperator
              [ (sExpnEnd)
              | *:
              >>
             ;BinaryOperator
             [ (sExpnEnd)
             | sExpnEnd:
             ] or >
             >>
            ;Expression
            [ oTypeStkChooseKind (tpInteger)
            | tpInteger:
            ] or >
            oSymbolStkPop
            oTypeStkPop
            [ oTypeStkChooseKind (tpArray)
            | tpArray:
            oTypeStkPushComponent
            oTypeStkSwap
            oTypeStkPop
            ] or >
            [ oTypeStkChooseKind (tpInteger)
            | tpInteger:
            .tSubscriptInteger
            ] or >
            ] or >
            >>
           ;VariableExtension
           >>
          ;Variable
          @VariableOperand
           [ oTypeStkChooseKind (tpInteger)
           | tpInteger:
           .tFetchInteger
           ] or >
           >>
          ;VariableOperand
          ] or >
          ] or >
          >>
         ;Operand
         @UnaryOperator
          [ (sIdentifier)
          | *:
          >>
         ;UnaryOperator
         @BinaryOperator
          [ (sIdentifier)
          | *:
          >>
         ;BinaryOperator
         [ (sIdentifier)
         | *:
         }
         @Operand
          [ (sIdentifier)
          | sIdentifier:
          oSymbolStkPushIdentifier
          [ oSymbolStkChooseKind (syVariable)
          | *:
          [ oSymbolStkChooseKind (syVariable)
          | syVariable:
          @Variable
           [ oSymbolStkChooseKind (syVariable)
           | syVariable:
           .tLiteralAddress
           oValuePushSymbol
           oEmitValue
           % value emitted 4
           oValuePop
           ] or >
           oTypeStkPushSymbol
           @VariableExtension
            [ (sSubscript)
            | sSubscript:
            .tSubscriptBegin
            @Expression
             @Operand
              [ (sIdentifier)
              | sIdentifier:
              oSymbolStkPushIdentifier
              [ oSymbolStkChooseKind (syVariable)
              | *:
              [ oSymbolStkChooseKind (syVariable)
              | syVariable:
              @Variable
               [ oSymbolStkChooseKind (syVariable)
               | syVariable:
               .tLiteralAddress
               oValuePushSymbol
               oEmitValue
               % value emitted 72
               oValuePop
               ] or >
               oTypeStkPushSymbol
               @VariableExtension
                [ (sInteger)
                | *:
                >>
               ;VariableExtension
               >>
              ;Variable
              @VariableOperand
               [ oTypeStkChooseKind (tpInteger)
               | tpInteger:
               .tFetchInteger
               ] or >
               >>
              ;VariableOperand
              ] or >
              ] or >
              >>
             ;Operand
             @UnaryOperator
              [ (sInteger)
              | *:
              >>
             ;UnaryOperator
             @BinaryOperator
              [ (sInteger)
              | *:
              >>
             ;BinaryOperator
             [ (sInteger)
             | *:
             }
             @Operand
              [ (sInteger)
              | sInteger:
              oValuePushInteger
              oSymbolStkPush(syExpression)
              oTypeStkPush(tpInteger)
              oTypeStkLinkToStandardType(stdInteger)
              .tLiteralInteger
              oEmitValue
              % value emitted 1
              oValuePop
              ] or >
              >>
             ;Operand
             @UnaryOperator
              [ (sSubtract)
              | *:
              >>
             ;UnaryOperator
             @BinaryOperator
              [ (sSubtract)
              | sSubtract:
              .tSubtract
              oTypeStkPush(tpInteger)
              @CompareOperandAndResultTypes
               @CompareAndSwapTypes
                [ oTypeStkChooseKind (tpInteger)
                | tpInteger:
                oTypeStkSwap
                [ oTypeStkChooseKind (tpInteger)
                | tpInteger:
                ] or >
                ] or >
                >>
               ;CompareAndSwapTypes
               oTypeStkPop
               @CompareAndSwapTypes
                [ oTypeStkChooseKind (tpInteger)
                | tpInteger:
                oTypeStkSwap
                [ oTypeStkChooseKind (tpInteger)
                | tpInteger:
                ] or >
                ] or >
                >>
               ;CompareAndSwapTypes
               oTypeStkPop
               oSymbolStkPop
               oSymbolStkSetKind(syExpression)
               >>
              ;CompareOperandAndResultTypes
              ] or >
              oSymbolStkSetKind(syExpression)
              >>
             ;BinaryOperator
             [ (sExpnEnd)
             | sExpnEnd:
             ] or >
             >>
            ;Expression
            [ oTypeStkChooseKind (tpInteger)
            | tpInteger:
            ] or >
            oSymbolStkPop
            oTypeStkPop
            [ oTypeStkChooseKind (tpArray)
            | tpArray:
            oTypeStkPushComponent
            oTypeStkSwap
            oTypeStkPop
            ] or >
            [ oTypeStkChooseKind (tpInteger)
            | tpInteger:
            .tSubscriptInteger
            ] or >
            ] or >
            >>
           ;VariableExtension
           >>
          ;Variable
          @VariableOperand
           [ oTypeStkChooseKind (tpInteger)
           | tpInteger:
           .tFetchInteger
           ] or >
           >>
          ;VariableOperand
          ] or >
          ] or >
          >>
         ;Operand
         @UnaryOperator
          [ (sAdd)
          | *:
          >>
         ;UnaryOperator
         @BinaryOperator
          [ (sAdd)
          | sAdd:
          .tAdd
          oTypeStkPush(tpInteger)
          @CompareOperandAndResultTypes
           @CompareAndSwapTypes
            [ oTypeStkChooseKind (tpInteger)
            | tpInteger:
            oTypeStkSwap
            [ oTypeStkChooseKind (tpInteger)
            | tpInteger:
            ] or >
            ] or >
            >>
           ;CompareAndSwapTypes
           oTypeStkPop
           @CompareAndSwapTypes
            [ oTypeStkChooseKind (tpInteger)
            | tpInteger:
            oTypeStkSwap
            [ oTypeStkChooseKind (tpInteger)
            | tpInteger:
            ] or >
            ] or >
            >>
           ;CompareAndSwapTypes
           oTypeStkPop
           oSymbolStkPop
           oSymbolStkSetKind(syExpression)
           >>
          ;CompareOperandAndResultTypes
          ] or >
          oSymbolStkSetKind(syExpression)
          >>
         ;BinaryOperator
         [ (sExpnEnd)
         | sExpnEnd:
         ] or >
         >>
        ;Expression
        @CompareAndSwapTypes
         [ oTypeStkChooseKind (tpInteger)
         | tpInteger:
         oTypeStkSwap
         [ oTypeStkChooseKind (tpInteger)
         | tpInteger:
         ] or >
         ] or >
         >>
        ;CompareAndSwapTypes
        @EmitAssign
         [ oTypeStkChooseKind (tpInteger)
         | tpInteger:
         .tAssignInteger
         ] or >
         >>
        ;EmitAssign
        oTypeStkPop
        oSymbolStkPop
        oTypeStkPop
        oSymbolStkPop
        >>
       ;AssignmentStmt
       ] or >
       }
       [ (sEnd)
       | *:
       ] or >
       ?sEnd (sEnd)
       >>
      ;Block
      oSymbolTblPopScope
      >>
     ;Statement
     ] or >
     .tIfEnd
     oFixPopForwardBranch
     >>
    ;IfStmt
    ] or >
    }
    [ (sEnd)
    | *:
    ] or >
    ?sEnd (sEnd)
    >>
   ;Block
   oTypeStkSetRecursionFlag(no)
   oTypeTblUpdate
   oTypeStkPop
   oSymbolTblUpdate
   oSymbolStkPop
   oSymbolTblPopScope
   oSymbolTblPreserveParameters
   .tProcedureEnd
   oFixPopForwardBranch
   >>
  ;ProcedureDefinition
  ] or >
  }
  [ (sAssignmentStmt)
  | sAssignmentStmt:
  @AssignmentStmt
   ?sIdentifier (sIdentifier)
   oSymbolStkPushIdentifier
   .tAssignBegin
   @Variable
    [ oSymbolStkChooseKind (syVariable)
    | syVariable:
    .tLiteralAddress
    oValuePushSymbol
    oEmitValue
    % value emitted 4
    oValuePop
    ] or >
    oTypeStkPushSymbol
    @VariableExtension
     [ (sSubscript)
     | sSubscript:
     .tSubscriptBegin
     @Expression
      @Operand
       [ (sInteger)
       | sInteger:
       oValuePushInteger
       oSymbolStkPush(syExpression)
       oTypeStkPush(tpInteger)
       oTypeStkLinkToStandardType(stdInteger)
       .tLiteralInteger
       oEmitValue
       % value emitted 1
       oValuePop
       ] or >
       >>
      ;Operand
      @UnaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;UnaryOperator
      @BinaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;BinaryOperator
      [ (sExpnEnd)
      | sExpnEnd:
      ] or >
      >>
     ;Expression
     [ oTypeStkChooseKind (tpInteger)
     | tpInteger:
     ] or >
     oSymbolStkPop
     oTypeStkPop
     [ oTypeStkChooseKind (tpArray)
     | tpArray:
     oTypeStkPushComponent
     oTypeStkSwap
     oTypeStkPop
     ] or >
     [ oTypeStkChooseKind (tpInteger)
     | tpInteger:
     .tSubscriptInteger
     ] or >
     ] or >
     >>
    ;VariableExtension
    >>
   ;Variable
   [ oTypeStkChooseKind (tpInteger)
   | *:
   @Expression
    @Operand
     [ (sInteger)
     | sInteger:
     oValuePushInteger
     oSymbolStkPush(syExpression)
     oTypeStkPush(tpInteger)
     oTypeStkLinkToStandardType(stdInteger)
     .tLiteralInteger
     oEmitValue
     % value emitted 1
     oValuePop
     ] or >
     >>
    ;Operand
    @UnaryOperator
     [ (sExpnEnd)
     | *:
     >>
    ;UnaryOperator
    @BinaryOperator
     [ (sExpnEnd)
     | *:
     >>
    ;BinaryOperator
    [ (sExpnEnd)
    | sExpnEnd:
    ] or >
    >>
   ;Expression
   @CompareAndSwapTypes
    [ oTypeStkChooseKind (tpInteger)
    | tpInteger:
    oTypeStkSwap
    [ oTypeStkChooseKind (tpInteger)
    | tpInteger:
    ] or >
    ] or >
    >>
   ;CompareAndSwapTypes
   @EmitAssign
    [ oTypeStkChooseKind (tpInteger)
    | tpInteger:
    .tAssignInteger
    ] or >
    >>
   ;EmitAssign
   oTypeStkPop
   oSymbolStkPop
   oTypeStkPop
   oSymbolStkPop
   >>
  ;AssignmentStmt
  ] or >
  }
  [ (sVar)
  | sVar:
  @VariableDeclarations
   ?sIdentifier (sIdentifier)
   oSymbolStkPushLocalIdentifier
   [ oSymbolStkChooseKind (syUndefined)
   | syUndefined:
   ] or >
   @PublicDefinition
    [ (sInitialValue)
    | *:
    >>
   ;PublicDefinition
   [ (sInitialValue)
   | sInitialValue:
   .tInitialValue
   @Expression
    @Operand
     [ (sInteger)
     | sInteger:
     oValuePushInteger
     oSymbolStkPush(syExpression)
     oTypeStkPush(tpInteger)
     oTypeStkLinkToStandardType(stdInteger)
     .tLiteralInteger
     oEmitValue
     % value emitted 2
     oValuePop
     ] or >
     >>
    ;Operand
    @UnaryOperator
     [ (sExpnEnd)
     | *:
     >>
    ;UnaryOperator
    @BinaryOperator
     [ (sExpnEnd)
     | *:
     >>
    ;BinaryOperator
    [ (sExpnEnd)
    | sExpnEnd:
    ] or >
    >>
   ;Expression
   .tInitEnd
   @TypeTblEnterIfNew
    [ oTypeStkChooseTypeReference (yes)
    | *:
    >>
   ;TypeTblEnterIfNew
   oSymbolStkPop
   @EnterVariableAttributes
    [ oSymbolStkChooseKind (syUndefined)
    | *:
    oSymbolStkSetKind(syVariable)
    [ oTypeStkChooseKind (tpInteger)
    | *:
    @AllocateVar
     [ oSymbolStkChooseKind (syVariable)
     | *:
     [ oTypeStkChooseKind (tpInteger)
     | tpInteger:
     oAllocateAlignOnWord
     oSymbolStkEnterDataAddress
     oAllocateVariable
     ] or >
     >>
    ;AllocateVar
    oSymbolStkEnterTypeReference
    oSymbolTblEnter
    >>
   ;EnterVariableAttributes
   .tLiteralAddress
   oValuePushSymbol
   oEmitValue
   % value emitted 76
   oValuePop
   [ oTypeStkChooseKind (tpInteger)
   | *:
   @EmitStore
    [ oTypeStkChooseKind (tpInteger)
    | tpInteger:
    .tStoreInteger
    ] or >
    >>
   ;EmitStore
   ] or >
   oTypeStkPop
   oSymbolStkPop
   >>
  ;VariableDeclarations
  ] or >
  }
  [ (sRepeatStmt)
  | sRepeatStmt:
  @RepeatStmt
   .tRepeatBegin
   oFixPushTargetAddress
   [ (sBegin)
   | *:
   @Statement
    oSymbolTblPushScope
    @Block
     ?sBegin (sBegin)
     [ (sAssignmentStmt)
     | sAssignmentStmt:
     @AssignmentStmt
      ?sIdentifier (sIdentifier)
      oSymbolStkPushIdentifier
      .tAssignBegin
      @Variable
       [ oSymbolStkChooseKind (syVariable)
       | syVariable:
       .tLiteralAddress
       oValuePushSymbol
       oEmitValue
       % value emitted 4
       oValuePop
       ] or >
       oTypeStkPushSymbol
       @VariableExtension
        [ (sSubscript)
        | sSubscript:
        .tSubscriptBegin
        @Expression
         @Operand
          [ (sIdentifier)
          | sIdentifier:
          oSymbolStkPushIdentifier
          [ oSymbolStkChooseKind (syVariable)
          | *:
          [ oSymbolStkChooseKind (syVariable)
          | syVariable:
          @Variable
           [ oSymbolStkChooseKind (syVariable)
           | syVariable:
           .tLiteralAddress
           oValuePushSymbol
           oEmitValue
           % value emitted 76
           oValuePop
           ] or >
           oTypeStkPushSymbol
           @VariableExtension
            [ (sExpnEnd)
            | *:
            >>
           ;VariableExtension
           >>
          ;Variable
          @VariableOperand
           [ oTypeStkChooseKind (tpInteger)
           | tpInteger:
           .tFetchInteger
           ] or >
           >>
          ;VariableOperand
          ] or >
          ] or >
          >>
         ;Operand
         @UnaryOperator
          [ (sExpnEnd)
          | *:
          >>
         ;UnaryOperator
         @BinaryOperator
          [ (sExpnEnd)
          | *:
          >>
         ;BinaryOperator
         [ (sExpnEnd)
         | sExpnEnd:
         ] or >
         >>
        ;Expression
        [ oTypeStkChooseKind (tpInteger)
        | tpInteger:
        ] or >
        oSymbolStkPop
        oTypeStkPop
        [ oTypeStkChooseKind (tpArray)
        | tpArray:
        oTypeStkPushComponent
        oTypeStkSwap
        oTypeStkPop
        ] or >
        [ oTypeStkChooseKind (tpInteger)
        | tpInteger:
        .tSubscriptInteger
        ] or >
        ] or >
        >>
       ;VariableExtension
       >>
      ;Variable
      [ oTypeStkChooseKind (tpInteger)
      | *:
      @Expression
       @Operand
        [ (sInteger)
        | sInteger:
        oValuePushInteger
        oSymbolStkPush(syExpression)
        oTypeStkPush(tpInteger)
        oTypeStkLinkToStandardType(stdInteger)
        .tLiteralInteger
        oEmitValue
        % value emitted 0
        oValuePop
        ] or >
        >>
       ;Operand
       @UnaryOperator
        [ (sExpnEnd)
        | *:
        >>
       ;UnaryOperator
       @BinaryOperator
        [ (sExpnEnd)
        | *:
        >>
       ;BinaryOperator
       [ (sExpnEnd)
       | sExpnEnd:
       ] or >
       >>
      ;Expression
      @CompareAndSwapTypes
       [ oTypeStkChooseKind (tpInteger)
       | tpInteger:
       oTypeStkSwap
       [ oTypeStkChooseKind (tpInteger)
       | tpInteger:
       ] or >
       ] or >
       >>
      ;CompareAndSwapTypes
      @EmitAssign
       [ oTypeStkChooseKind (tpInteger)
       | tpInteger:
       .tAssignInteger
       ] or >
       >>
      ;EmitAssign
      oTypeStkPop
      oSymbolStkPop
      oTypeStkPop
      oSymbolStkPop
      >>
     ;AssignmentStmt
     ] or >
     }
     [ (sAssignmentStmt)
     | sAssignmentStmt:
     @AssignmentStmt
      ?sIdentifier (sIdentifier)
      oSymbolStkPushIdentifier
      .tAssignBegin
      @Variable
       [ oSymbolStkChooseKind (syVariable)
       | syVariable:
       .tLiteralAddress
       oValuePushSymbol
       oEmitValue
       % value emitted 76
       oValuePop
       ] or >
       oTypeStkPushSymbol
       @VariableExtension
        [ (sIdentifier)
        | *:
        >>
       ;VariableExtension
       >>
      ;Variable
      [ oTypeStkChooseKind (tpInteger)
      | *:
      @Expression
       @Operand
        [ (sIdentifier)
        | sIdentifier:
        oSymbolStkPushIdentifier
        [ oSymbolStkChooseKind (syVariable)
        | *:
        [ oSymbolStkChooseKind (syVariable)
        | syVariable:
        @Variable
         [ oSymbolStkChooseKind (syVariable)
         | syVariable:
         .tLiteralAddress
         oValuePushSymbol
         oEmitValue
         % value emitted 76
         oValuePop
         ] or >
         oTypeStkPushSymbol
         @VariableExtension
          [ (sInteger)
          | *:
          >>
         ;VariableExtension
         >>
        ;Variable
        @VariableOperand
         [ oTypeStkChooseKind (tpInteger)
         | tpInteger:
         .tFetchInteger
         ] or >
         >>
        ;VariableOperand
        ] or >
        ] or >
        >>
       ;Operand
       @UnaryOperator
        [ (sInteger)
        | *:
        >>
       ;UnaryOperator
       @BinaryOperator
        [ (sInteger)
        | *:
        >>
       ;BinaryOperator
       [ (sInteger)
       | *:
       }
       @Operand
        [ (sInteger)
        | sInteger:
        oValuePushInteger
        oSymbolStkPush(syExpression)
        oTypeStkPush(tpInteger)
        oTypeStkLinkToStandardType(stdInteger)
        .tLiteralInteger
        oEmitValue
        % value emitted 1
        oValuePop
        ] or >
        >>
       ;Operand
       @UnaryOperator
        [ (sAdd)
        | *:
        >>
       ;UnaryOperator
       @BinaryOperator
        [ (sAdd)
        | sAdd:
        .tAdd
        oTypeStkPush(tpInteger)
        @CompareOperandAndResultTypes
         @CompareAndSwapTypes
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          oTypeStkSwap
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          ] or >
          ] or >
          >>
         ;CompareAndSwapTypes
         oTypeStkPop
         @CompareAndSwapTypes
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          oTypeStkSwap
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          ] or >
          ] or >
          >>
         ;CompareAndSwapTypes
         oTypeStkPop
         oSymbolStkPop
         oSymbolStkSetKind(syExpression)
         >>
        ;CompareOperandAndResultTypes
        ] or >
        oSymbolStkSetKind(syExpression)
        >>
       ;BinaryOperator
       [ (sExpnEnd)
       | sExpnEnd:
       ] or >
       >>
      ;Expression
      @CompareAndSwapTypes
       [ oTypeStkChooseKind (tpInteger)
       | tpInteger:
       oTypeStkSwap
       [ oTypeStkChooseKind (tpInteger)
       | tpInteger:
       ] or >
       ] or >
       >>
      ;CompareAndSwapTypes
      @EmitAssign
       [ oTypeStkChooseKind (tpInteger)
       | tpInteger:
       .tAssignInteger
       ] or >
       >>
      ;EmitAssign
      oTypeStkPop
      oSymbolStkPop
      oTypeStkPop
      oSymbolStkPop
      >>
     ;AssignmentStmt
     ] or >
     }
     [ (sEnd)
     | *:
     ] or >
     ?sEnd (sEnd)
     >>
    ;Block
    oSymbolTblPopScope
    >>
   ;Statement
   }
   [ (sRepeatEnd)
   | sRepeatEnd:
   ] or >
   .tRepeatControl
   @BooleanControlExpression
    @Expression
     @Operand
      [ (sIdentifier)
      | sIdentifier:
      oSymbolStkPushIdentifier
      [ oSymbolStkChooseKind (syVariable)
      | *:
      [ oSymbolStkChooseKind (syVariable)
      | syVariable:
      @Variable
       [ oSymbolStkChooseKind (syVariable)
       | syVariable:
       .tLiteralAddress
       oValuePushSymbol
       oEmitValue
       % value emitted 76
       oValuePop
       ] or >
       oTypeStkPushSymbol
       @VariableExtension
        [ (sInteger)
        | *:
        >>
       ;VariableExtension
       >>
      ;Variable
      @VariableOperand
       [ oTypeStkChooseKind (tpInteger)
       | tpInteger:
       .tFetchInteger
       ] or >
       >>
      ;VariableOperand
      ] or >
      ] or >
      >>
     ;Operand
     @UnaryOperator
      [ (sInteger)
      | *:
      >>
     ;UnaryOperator
     @BinaryOperator
      [ (sInteger)
      | *:
      >>
     ;BinaryOperator
     [ (sInteger)
     | *:
     }
     @Operand
      [ (sInteger)
      | sInteger:
      oValuePushInteger
      oSymbolStkPush(syExpression)
      oTypeStkPush(tpInteger)
      oTypeStkLinkToStandardType(stdInteger)
      .tLiteralInteger
      oEmitValue
      % value emitted 15
      oValuePop
      ] or >
      >>
     ;Operand
     @UnaryOperator
      [ (sLE)
      | *:
      >>
     ;UnaryOperator
     @BinaryOperator
      [ (sLE)
      | sLE:
      .tLE
      @CompareRelationalOperandTypes
       [ oTypeStkChooseKind (tpInteger)
       | tpInteger:
       oTypeStkPop
       [ oTypeStkChooseKind (tpInteger)
       | tpInteger:
       ] or >
       ] or >
       oTypeStkPop
       oTypeStkPush(tpBoolean)
       oSymbolStkPop
       oSymbolStkSetKind(syExpression)
       >>
      ;CompareRelationalOperandTypes
      ] or >
      oSymbolStkSetKind(syExpression)
      >>
     ;BinaryOperator
     [ (sNot)
     | *:
     }
     @Operand
      [ (sNot)
      | *:
      >>
     ;Operand
     @UnaryOperator
      [ (sNot)
      | sNot:
      .tNot
      oTypeStkPush(tpBoolean)
      @CompareAndSwapTypes
       [ oTypeStkChooseKind (tpBoolean)
       | tpBoolean:
       oTypeStkSwap
       [ oTypeStkChooseKind (tpBoolean)
       | tpBoolean:
       ] or >
       ] or >
       >>
      ;CompareAndSwapTypes
      oTypeStkPop
      ] or >
      oSymbolStkSetKind(syExpression)
      >>
     ;UnaryOperator
     @BinaryOperator
      [ (sExpnEnd)
      | *:
      >>
     ;BinaryOperator
     [ (sExpnEnd)
     | sExpnEnd:
     ] or >
     >>
    ;Expression
    [ oTypeStkChooseKind (tpBoolean)
    | tpBoolean:
    ] or >
    oSymbolStkPop
    oTypeStkPop
    >>
   ;BooleanControlExpression
   .tRepeatTest
   oFixPopTargetAddress
   % value emitted 124
   >>
  ;RepeatStmt
  ] or >
  }
  [ (sCallStmt)
  | sCallStmt:
  @CallStmt
   ?sIdentifier (sIdentifier)
   oSymbolStkPushIdentifier
   [ oSymbolStkChooseKind (syProcedure)
   | *:
   [ oSymbolStkChooseKind (syProcedure)
   | syProcedure:
   [ oSymbolStkChooseStandardRoutine (rtWrite)
   | rtWrite:
   .tWriteBegin
   @WriteProcedure
    [ (sInteger)
    | *:
    @WriteStandardExpnList
     oSymbolStkPushStandardVariable(stdOutput)
     [ oSymbolStkChooseKind (syVariable)
     | *:
     oValuePushSymbol
     oSymbolStkPop
     [ (sInteger)
     | *:
     .tTrapBegin
     .tLiteralAddress
     oEmitValue
     % value emitted 0
     .tVarParm
     .tParmEnd
     @Expression
      @Operand
       [ (sInteger)
       | sInteger:
       oValuePushInteger
       oSymbolStkPush(syExpression)
       oTypeStkPush(tpInteger)
       oTypeStkLinkToStandardType(stdInteger)
       .tLiteralInteger
       oEmitValue
       % value emitted 1
       oValuePop
       ] or >
       >>
      ;Operand
      @UnaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;UnaryOperator
      @BinaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;BinaryOperator
      [ (sExpnEnd)
      | sExpnEnd:
      ] or >
      >>
     ;Expression
     .tParmEnd
     @WriteText
      [ (sFieldWidth)
      | sFieldWidth:
      @Expression
       @Operand
        [ (sInteger)
        | sInteger:
        oValuePushInteger
        oSymbolStkPush(syExpression)
        oTypeStkPush(tpInteger)
        oTypeStkLinkToStandardType(stdInteger)
        .tLiteralInteger
        oEmitValue
        % value emitted 5
        oValuePop
        ] or >
        >>
       ;Operand
       @UnaryOperator
        [ (sExpnEnd)
        | *:
        >>
       ;UnaryOperator
       @BinaryOperator
        [ (sExpnEnd)
        | *:
        >>
       ;BinaryOperator
       [ (sExpnEnd)
       | sExpnEnd:
       ] or >
       >>
      ;Expression
      [ oTypeStkChooseKind (tpInteger)
      | tpInteger:
      ] or >
      oSymbolStkPop
      oTypeStkPop
      ] or >
      .tParmEnd
      [ oTypeStkChooseKind (tpInteger)
      | tpInteger:
      .tTrap
      oEmitTrapKind(trWriteInteger)
      % value emitted 8
      ] or >
      oSymbolStkPop
      oTypeStkPop
      >>
     ;WriteText
     }
     [ (sParmEnd)
     | sParmEnd:
     ] or >
     oValuePop
     >>
    ;WriteStandardExpnList
    .tWriteEnd
    >>
   ;WriteProcedure
   ] or >
   ] or >
   oSymbolStkPop
   >>
  ;CallStmt
  ] or >
  }
  [ (sCallStmt)
  | sCallStmt:
  @CallStmt
   ?sIdentifier (sIdentifier)
   oSymbolStkPushIdentifier
   [ oSymbolStkChooseKind (syProcedure)
   | *:
   [ oSymbolStkChooseKind (syProcedure)
   | syProcedure:
   [ oSymbolStkChooseStandardRoutine (rtWriteln)
   | rtWriteln:
   .tTrapBegin
   @WritelnProcedure
    [ (sParmEnd)
    | sParmEnd:
    oSymbolStkPushStandardVariable(stdOutput)
    [ oSymbolStkChooseKind (syVariable)
    | *:
    oValuePushSymbol
    .tLiteralAddress
    oEmitValue
    % value emitted 0
    oValuePop
    oSymbolStkPop
    .tVarParm
    .tParmEnd
    ] or >
    >>
   ;WritelnProcedure
   .tTrap
   oEmitTrapKind(trWriteln)
   % value emitted 6
   ] or >
   ] or >
   oSymbolStkPop
   >>
  ;CallStmt
  ] or >
  }
  [ (sVar)
  | sVar:
  @VariableDeclarations
   ?sIdentifier (sIdentifier)
   oSymbolStkPushLocalIdentifier
   [ oSymbolStkChooseKind (syUndefined)
   | syUndefined:
   ] or >
   @PublicDefinition
    [ (sInitialValue)
    | *:
    >>
   ;PublicDefinition
   [ (sInitialValue)
   | sInitialValue:
   .tInitialValue
   @Expression
    @Operand
     [ (sInteger)
     | sInteger:
     oValuePushInteger
     oSymbolStkPush(syExpression)
     oTypeStkPush(tpInteger)
     oTypeStkLinkToStandardType(stdInteger)
     .tLiteralInteger
     oEmitValue
     % value emitted 2
     oValuePop
     ] or >
     >>
    ;Operand
    @UnaryOperator
     [ (sExpnEnd)
     | *:
     >>
    ;UnaryOperator
    @BinaryOperator
     [ (sExpnEnd)
     | *:
     >>
    ;BinaryOperator
    [ (sExpnEnd)
    | sExpnEnd:
    ] or >
    >>
   ;Expression
   .tInitEnd
   @TypeTblEnterIfNew
    [ oTypeStkChooseTypeReference (yes)
    | *:
    >>
   ;TypeTblEnterIfNew
   oSymbolStkPop
   @EnterVariableAttributes
    [ oSymbolStkChooseKind (syUndefined)
    | *:
    oSymbolStkSetKind(syVariable)
    [ oTypeStkChooseKind (tpInteger)
    | *:
    @AllocateVar
     [ oSymbolStkChooseKind (syVariable)
     | *:
     [ oTypeStkChooseKind (tpInteger)
     | tpInteger:
     oAllocateAlignOnWord
     oSymbolStkEnterDataAddress
     oAllocateVariable
     ] or >
     >>
    ;AllocateVar
    oSymbolStkEnterTypeReference
    oSymbolTblEnter
    >>
   ;EnterVariableAttributes
   .tLiteralAddress
   oValuePushSymbol
   oEmitValue
   % value emitted 80
   oValuePop
   [ oTypeStkChooseKind (tpInteger)
   | *:
   @EmitStore
    [ oTypeStkChooseKind (tpInteger)
    | tpInteger:
    .tStoreInteger
    ] or >
    >>
   ;EmitStore
   ] or >
   oTypeStkPop
   oSymbolStkPop
   >>
  ;VariableDeclarations
  ] or >
  }
  [ (sRepeatStmt)
  | sRepeatStmt:
  @RepeatStmt
   .tRepeatBegin
   oFixPushTargetAddress
   [ (sBegin)
   | *:
   @Statement
    oSymbolTblPushScope
    @Block
     ?sBegin (sBegin)
     [ (sAssignmentStmt)
     | sAssignmentStmt:
     @AssignmentStmt
      ?sIdentifier (sIdentifier)
      oSymbolStkPushIdentifier
      .tAssignBegin
      @Variable
       [ oSymbolStkChooseKind (syVariable)
       | syVariable:
       .tLiteralAddress
       oValuePushSymbol
       oEmitValue
       % value emitted 76
       oValuePop
       ] or >
       oTypeStkPushSymbol
       @VariableExtension
        [ (sIdentifier)
        | *:
        >>
       ;VariableExtension
       >>
      ;Variable
      [ oTypeStkChooseKind (tpInteger)
      | *:
      @Expression
       @Operand
        [ (sIdentifier)
        | sIdentifier:
        oSymbolStkPushIdentifier
        [ oSymbolStkChooseKind (syVariable)
        | *:
        [ oSymbolStkChooseKind (syVariable)
        | syVariable:
        @Variable
         [ oSymbolStkChooseKind (syVariable)
         | syVariable:
         .tLiteralAddress
         oValuePushSymbol
         oEmitValue
         % value emitted 80
         oValuePop
         ] or >
         oTypeStkPushSymbol
         @VariableExtension
          [ (sExpnEnd)
          | *:
          >>
         ;VariableExtension
         >>
        ;Variable
        @VariableOperand
         [ oTypeStkChooseKind (tpInteger)
         | tpInteger:
         .tFetchInteger
         ] or >
         >>
        ;VariableOperand
        ] or >
        ] or >
        >>
       ;Operand
       @UnaryOperator
        [ (sExpnEnd)
        | *:
        >>
       ;UnaryOperator
       @BinaryOperator
        [ (sExpnEnd)
        | *:
        >>
       ;BinaryOperator
       [ (sExpnEnd)
       | sExpnEnd:
       ] or >
       >>
      ;Expression
      @CompareAndSwapTypes
       [ oTypeStkChooseKind (tpInteger)
       | tpInteger:
       oTypeStkSwap
       [ oTypeStkChooseKind (tpInteger)
       | tpInteger:
       ] or >
       ] or >
       >>
      ;CompareAndSwapTypes
      @EmitAssign
       [ oTypeStkChooseKind (tpInteger)
       | tpInteger:
       .tAssignInteger
       ] or >
       >>
      ;EmitAssign
      oTypeStkPop
      oSymbolStkPop
      oTypeStkPop
      oSymbolStkPop
      >>
     ;AssignmentStmt
     ] or >
     }
     [ (sWhileStmt)
     | sWhileStmt:
     @WhileStmt
      .tWhileBegin
      oFixPushTargetAddress
      @BooleanControlExpression
       @Expression
        @Operand
         [ (sIdentifier)
         | sIdentifier:
         oSymbolStkPushIdentifier
         [ oSymbolStkChooseKind (syVariable)
         | *:
         [ oSymbolStkChooseKind (syVariable)
         | syVariable:
         @Variable
          [ oSymbolStkChooseKind (syVariable)
          | syVariable:
          .tLiteralAddress
          oValuePushSymbol
          oEmitValue
          % value emitted 76
          oValuePop
          ] or >
          oTypeStkPushSymbol
          @VariableExtension
           [ (sInteger)
           | *:
           >>
          ;VariableExtension
          >>
         ;Variable
         @VariableOperand
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          .tFetchInteger
          ] or >
          >>
         ;VariableOperand
         ] or >
         ] or >
         >>
        ;Operand
        @UnaryOperator
         [ (sInteger)
         | *:
         >>
        ;UnaryOperator
        @BinaryOperator
         [ (sInteger)
         | *:
         >>
        ;BinaryOperator
        [ (sInteger)
        | *:
        }
        @Operand
         [ (sInteger)
         | sInteger:
         oValuePushInteger
         oSymbolStkPush(syExpression)
         oTypeStkPush(tpInteger)
         oTypeStkLinkToStandardType(stdInteger)
         .tLiteralInteger
         oEmitValue
         % value emitted 1
         oValuePop
         ] or >
         >>
        ;Operand
        @UnaryOperator
         [ (sGE)
         | *:
         >>
        ;UnaryOperator
        @BinaryOperator
         [ (sGE)
         | sGE:
         .tGE
         @CompareRelationalOperandTypes
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          oTypeStkPop
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          ] or >
          ] or >
          oTypeStkPop
          oTypeStkPush(tpBoolean)
          oSymbolStkPop
          oSymbolStkSetKind(syExpression)
          >>
         ;CompareRelationalOperandTypes
         ] or >
         oSymbolStkSetKind(syExpression)
         >>
        ;BinaryOperator
        [ (sExpnEnd)
        | sExpnEnd:
        ] or >
        >>
       ;Expression
       [ oTypeStkChooseKind (tpBoolean)
       | tpBoolean:
       ] or >
       oSymbolStkPop
       oTypeStkPop
       >>
      ;BooleanControlExpression
      .tWhileTest
      oFixPushForwardBranch
      oEmitNullAddress
      % value emitted -32767
      oFixSwap
      @Statement
       oSymbolTblPushScope
       @Block
        ?sBegin (sBegin)
        [ (sCallStmt)
        | sCallStmt:
        @CallStmt
         ?sIdentifier (sIdentifier)
         oSymbolStkPushIdentifier
         [ oSymbolStkChooseKind (syProcedure)
         | *:
         [ oSymbolStkChooseKind (syProcedure)
         | syProcedure:
         [ oSymbolStkChooseStandardRoutine (rtNull)
         | *:
         .tCallBegin
         oTypeStkPushSymbol
         [ oTypeStkChooseRecursionFlag (no)
         | *:
         @ActualParameters
          oCountPush(zero)
          [ (sIdentifier)
          | *:
          [ oTypeStkCompareParameterCount (no)
          | *:
          oCountIncrement
          oSymbolStkPushFormalParameter
          oTypeStkPushSymbol
          [ oSymbolStkChooseKind (syVariable)
          | syVariable:
          @Expression
           @Operand
            [ (sIdentifier)
            | sIdentifier:
            oSymbolStkPushIdentifier
            [ oSymbolStkChooseKind (syVariable)
            | *:
            [ oSymbolStkChooseKind (syVariable)
            | syVariable:
            @Variable
             [ oSymbolStkChooseKind (syVariable)
             | syVariable:
             .tLiteralAddress
             oValuePushSymbol
             oEmitValue
             % value emitted 76
             oValuePop
             ] or >
             oTypeStkPushSymbol
             @VariableExtension
              [ (sExpnEnd)
              | *:
              >>
             ;VariableExtension
             >>
            ;Variable
            @VariableOperand
             [ oTypeStkChooseKind (tpInteger)
             | tpInteger:
             .tFetchInteger
             ] or >
             >>
            ;VariableOperand
            ] or >
            ] or >
            >>
           ;Operand
           @UnaryOperator
            [ (sExpnEnd)
            | *:
            >>
           ;UnaryOperator
           @BinaryOperator
            [ (sExpnEnd)
            | *:
            >>
           ;BinaryOperator
           [ (sExpnEnd)
           | sExpnEnd:
           ] or >
           >>
          ;Expression
          @CompareAndSwapTypes
           [ oTypeStkChooseKind (tpInteger)
           | tpInteger:
           oTypeStkSwap
           [ oTypeStkChooseKind (tpInteger)
           | tpInteger:
           ] or >
           ] or >
           >>
          ;CompareAndSwapTypes
          ] or >
          oSymbolStkPop
          oTypeStkPop
          oSymbolStkPop
          oTypeStkPop
          .tParmEnd
          }
          [ (sParmEnd)
          | sParmEnd:
          ] or >
          [ oTypeStkCompareParameterCount (yes)
          | yes:
          ] or >
          oCountPop
          >>
         ;ActualParameters
         .tCallEnd
         oValuePushSymbol
         oEmitValue
         % value emitted 26
         oValuePop
         oTypeStkPop
         ] or >
         oSymbolStkPop
         >>
        ;CallStmt
        ] or >
        }
        [ (sAssignmentStmt)
        | sAssignmentStmt:
        @AssignmentStmt
         ?sIdentifier (sIdentifier)
         oSymbolStkPushIdentifier
         .tAssignBegin
         @Variable
          [ oSymbolStkChooseKind (syVariable)
          | syVariable:
          .tLiteralAddress
          oValuePushSymbol
          oEmitValue
          % value emitted 76
          oValuePop
          ] or >
          oTypeStkPushSymbol
          @VariableExtension
           [ (sIdentifier)
           | *:
           >>
          ;VariableExtension
          >>
         ;Variable
         [ oTypeStkChooseKind (tpInteger)
         | *:
         @Expression
          @Operand
           [ (sIdentifier)
           | sIdentifier:
           oSymbolStkPushIdentifier
           [ oSymbolStkChooseKind (syVariable)
           | *:
           [ oSymbolStkChooseKind (syVariable)
           | syVariable:
           @Variable
            [ oSymbolStkChooseKind (syVariable)
            | syVariable:
            .tLiteralAddress
            oValuePushSymbol
            oEmitValue
            % value emitted 76
            oValuePop
            ] or >
            oTypeStkPushSymbol
            @VariableExtension
             [ (sInteger)
             | *:
             >>
            ;VariableExtension
            >>
           ;Variable
           @VariableOperand
            [ oTypeStkChooseKind (tpInteger)
            | tpInteger:
            .tFetchInteger
            ] or >
            >>
           ;VariableOperand
           ] or >
           ] or >
           >>
          ;Operand
          @UnaryOperator
           [ (sInteger)
           | *:
           >>
          ;UnaryOperator
          @BinaryOperator
           [ (sInteger)
           | *:
           >>
          ;BinaryOperator
          [ (sInteger)
          | *:
          }
          @Operand
           [ (sInteger)
           | sInteger:
           oValuePushInteger
           oSymbolStkPush(syExpression)
           oTypeStkPush(tpInteger)
           oTypeStkLinkToStandardType(stdInteger)
           .tLiteralInteger
           oEmitValue
           % value emitted 1
           oValuePop
           ] or >
           >>
          ;Operand
          @UnaryOperator
           [ (sSubtract)
           | *:
           >>
          ;UnaryOperator
          @BinaryOperator
           [ (sSubtract)
           | sSubtract:
           .tSubtract
           oTypeStkPush(tpInteger)
           @CompareOperandAndResultTypes
            @CompareAndSwapTypes
             [ oTypeStkChooseKind (tpInteger)
             | tpInteger:
             oTypeStkSwap
             [ oTypeStkChooseKind (tpInteger)
             | tpInteger:
             ] or >
             ] or >
             >>
            ;CompareAndSwapTypes
            oTypeStkPop
            @CompareAndSwapTypes
             [ oTypeStkChooseKind (tpInteger)
             | tpInteger:
             oTypeStkSwap
             [ oTypeStkChooseKind (tpInteger)
             | tpInteger:
             ] or >
             ] or >
             >>
            ;CompareAndSwapTypes
            oTypeStkPop
            oSymbolStkPop
            oSymbolStkSetKind(syExpression)
            >>
           ;CompareOperandAndResultTypes
           ] or >
           oSymbolStkSetKind(syExpression)
           >>
          ;BinaryOperator
          [ (sExpnEnd)
          | sExpnEnd:
          ] or >
          >>
         ;Expression
         @CompareAndSwapTypes
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          oTypeStkSwap
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          ] or >
          ] or >
          >>
         ;CompareAndSwapTypes
         @EmitAssign
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          .tAssignInteger
          ] or >
          >>
         ;EmitAssign
         oTypeStkPop
         oSymbolStkPop
         oTypeStkPop
         oSymbolStkPop
         >>
        ;AssignmentStmt
        ] or >
        }
        [ (sEnd)
        | *:
        ] or >
        ?sEnd (sEnd)
        >>
       ;Block
       oSymbolTblPopScope
       >>
      ;Statement
      .tWhileEnd
      oFixPopTargetAddress
      % value emitted 205
      oFixPopForwardBranch
      >>
     ;WhileStmt
     ] or >
     }
     [ (sAssignmentStmt)
     | sAssignmentStmt:
     @AssignmentStmt
      ?sIdentifier (sIdentifier)
      oSymbolStkPushIdentifier
      .tAssignBegin
      @Variable
       [ oSymbolStkChooseKind (syVariable)
       | syVariable:
       .tLiteralAddress
       oValuePushSymbol
       oEmitValue
       % value emitted 76
       oValuePop
       ] or >
       oTypeStkPushSymbol
       @VariableExtension
        [ (sInteger)
        | *:
        >>
       ;VariableExtension
       >>
      ;Variable
      [ oTypeStkChooseKind (tpInteger)
      | *:
      @Expression
       @Operand
        [ (sInteger)
        | sInteger:
        oValuePushInteger
        oSymbolStkPush(syExpression)
        oTypeStkPush(tpInteger)
        oTypeStkLinkToStandardType(stdInteger)
        .tLiteralInteger
        oEmitValue
        % value emitted 1
        oValuePop
        ] or >
        >>
       ;Operand
       @UnaryOperator
        [ (sExpnEnd)
        | *:
        >>
       ;UnaryOperator
       @BinaryOperator
        [ (sExpnEnd)
        | *:
        >>
       ;BinaryOperator
       [ (sExpnEnd)
       | sExpnEnd:
       ] or >
       >>
      ;Expression
      @CompareAndSwapTypes
       [ oTypeStkChooseKind (tpInteger)
       | tpInteger:
       oTypeStkSwap
       [ oTypeStkChooseKind (tpInteger)
       | tpInteger:
       ] or >
       ] or >
       >>
      ;CompareAndSwapTypes
      @EmitAssign
       [ oTypeStkChooseKind (tpInteger)
       | tpInteger:
       .tAssignInteger
       ] or >
       >>
      ;EmitAssign
      oTypeStkPop
      oSymbolStkPop
      oTypeStkPop
      oSymbolStkPop
      >>
     ;AssignmentStmt
     ] or >
     }
     [ (sWhileStmt)
     | sWhileStmt:
     @WhileStmt
      .tWhileBegin
      oFixPushTargetAddress
      @BooleanControlExpression
       @Expression
        @Operand
         [ (sIdentifier)
         | sIdentifier:
         oSymbolStkPushIdentifier
         [ oSymbolStkChooseKind (syVariable)
         | *:
         [ oSymbolStkChooseKind (syVariable)
         | syVariable:
         @Variable
          [ oSymbolStkChooseKind (syVariable)
          | syVariable:
          .tLiteralAddress
          oValuePushSymbol
          oEmitValue
          % value emitted 76
          oValuePop
          ] or >
          oTypeStkPushSymbol
          @VariableExtension
           [ (sIdentifier)
           | *:
           >>
          ;VariableExtension
          >>
         ;Variable
         @VariableOperand
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          .tFetchInteger
          ] or >
          >>
         ;VariableOperand
         ] or >
         ] or >
         >>
        ;Operand
        @UnaryOperator
         [ (sIdentifier)
         | *:
         >>
        ;UnaryOperator
        @BinaryOperator
         [ (sIdentifier)
         | *:
         >>
        ;BinaryOperator
        [ (sIdentifier)
        | *:
        }
        @Operand
         [ (sIdentifier)
         | sIdentifier:
         oSymbolStkPushIdentifier
         [ oSymbolStkChooseKind (syVariable)
         | *:
         [ oSymbolStkChooseKind (syVariable)
         | syVariable:
         @Variable
          [ oSymbolStkChooseKind (syVariable)
          | syVariable:
          .tLiteralAddress
          oValuePushSymbol
          oEmitValue
          % value emitted 80
          oValuePop
          ] or >
          oTypeStkPushSymbol
          @VariableExtension
           [ (sLE)
           | *:
           >>
          ;VariableExtension
          >>
         ;Variable
         @VariableOperand
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          .tFetchInteger
          ] or >
          >>
         ;VariableOperand
         ] or >
         ] or >
         >>
        ;Operand
        @UnaryOperator
         [ (sLE)
         | *:
         >>
        ;UnaryOperator
        @BinaryOperator
         [ (sLE)
         | sLE:
         .tLE
         @CompareRelationalOperandTypes
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          oTypeStkPop
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          ] or >
          ] or >
          oTypeStkPop
          oTypeStkPush(tpBoolean)
          oSymbolStkPop
          oSymbolStkSetKind(syExpression)
          >>
         ;CompareRelationalOperandTypes
         ] or >
         oSymbolStkSetKind(syExpression)
         >>
        ;BinaryOperator
        [ (sExpnEnd)
        | sExpnEnd:
        ] or >
        >>
       ;Expression
       [ oTypeStkChooseKind (tpBoolean)
       | tpBoolean:
       ] or >
       oSymbolStkPop
       oTypeStkPop
       >>
      ;BooleanControlExpression
      .tWhileTest
      oFixPushForwardBranch
      oEmitNullAddress
      % value emitted -32767
      oFixSwap
      @Statement
       oSymbolTblPushScope
       @Block
        ?sBegin (sBegin)
        [ (sCallStmt)
        | sCallStmt:
        @CallStmt
         ?sIdentifier (sIdentifier)
         oSymbolStkPushIdentifier
         [ oSymbolStkChooseKind (syProcedure)
         | *:
         [ oSymbolStkChooseKind (syProcedure)
         | syProcedure:
         [ oSymbolStkChooseStandardRoutine (rtWrite)
         | rtWrite:
         .tWriteBegin
         @WriteProcedure
          [ (sIdentifier)
          | sIdentifier:
          oSymbolStkPushIdentifier
          oTypeStkPushSymbol
          [ oTypeStkChooseKind (tpArray)
          | *:
          oTypeStkPop
          oSymbolStkPushStandardVariable(stdOutput)
          [ oSymbolStkChooseKind (syVariable)
          | *:
          oValuePushSymbol
          oSymbolStkPop
          .tTrapBegin
          .tLiteralAddress
          oEmitValue
          % value emitted 0
          .tVarParm
          .tParmEnd
          oValuePop
          [ oSymbolStkChooseKind (syVariable)
          | *:
          [ oSymbolStkChooseKind (syVariable)
          | syVariable:
          @Variable
           [ oSymbolStkChooseKind (syVariable)
           | syVariable:
           .tLiteralAddress
           oValuePushSymbol
           oEmitValue
           % value emitted 4
           oValuePop
           ] or >
           oTypeStkPushSymbol
           @VariableExtension
            [ (sSubscript)
            | sSubscript:
            .tSubscriptBegin
            @Expression
             @Operand
              [ (sIdentifier)
              | sIdentifier:
              oSymbolStkPushIdentifier
              [ oSymbolStkChooseKind (syVariable)
              | *:
              [ oSymbolStkChooseKind (syVariable)
              | syVariable:
              @Variable
               [ oSymbolStkChooseKind (syVariable)
               | syVariable:
               .tLiteralAddress
               oValuePushSymbol
               oEmitValue
               % value emitted 76
               oValuePop
               ] or >
               oTypeStkPushSymbol
               @VariableExtension
                [ (sExpnEnd)
                | *:
                >>
               ;VariableExtension
               >>
              ;Variable
              @VariableOperand
               [ oTypeStkChooseKind (tpInteger)
               | tpInteger:
               .tFetchInteger
               ] or >
               >>
              ;VariableOperand
              ] or >
              ] or >
              >>
             ;Operand
             @UnaryOperator
              [ (sExpnEnd)
              | *:
              >>
             ;UnaryOperator
             @BinaryOperator
              [ (sExpnEnd)
              | *:
              >>
             ;BinaryOperator
             [ (sExpnEnd)
             | sExpnEnd:
             ] or >
             >>
            ;Expression
            [ oTypeStkChooseKind (tpInteger)
            | tpInteger:
            ] or >
            oSymbolStkPop
            oTypeStkPop
            [ oTypeStkChooseKind (tpArray)
            | tpArray:
            oTypeStkPushComponent
            oTypeStkSwap
            oTypeStkPop
            ] or >
            [ oTypeStkChooseKind (tpInteger)
            | tpInteger:
            .tSubscriptInteger
            ] or >
            ] or >
            >>
           ;VariableExtension
           >>
          ;Variable
          @VariableOperand
           [ oTypeStkChooseKind (tpInteger)
           | tpInteger:
           .tFetchInteger
           ] or >
           >>
          ;VariableOperand
          ] or >
          @Expression
           @Operand
            [ (sExpnEnd)
            | *:
            >>
           ;Operand
           @UnaryOperator
            [ (sExpnEnd)
            | *:
            >>
           ;UnaryOperator
           @BinaryOperator
            [ (sExpnEnd)
            | *:
            >>
           ;BinaryOperator
           [ (sExpnEnd)
           | sExpnEnd:
           ] or >
           >>
          ;Expression
          .tParmEnd
          @WriteText
           [ (sFieldWidth)
           | sFieldWidth:
           @Expression
            @Operand
             [ (sInteger)
             | sInteger:
             oValuePushInteger
             oSymbolStkPush(syExpression)
             oTypeStkPush(tpInteger)
             oTypeStkLinkToStandardType(stdInteger)
             .tLiteralInteger
             oEmitValue
             % value emitted 5
             oValuePop
             ] or >
             >>
            ;Operand
            @UnaryOperator
             [ (sExpnEnd)
             | *:
             >>
            ;UnaryOperator
            @BinaryOperator
             [ (sExpnEnd)
             | *:
             >>
            ;BinaryOperator
            [ (sExpnEnd)
            | sExpnEnd:
            ] or >
            >>
           ;Expression
           [ oTypeStkChooseKind (tpInteger)
           | tpInteger:
           ] or >
           oSymbolStkPop
           oTypeStkPop
           ] or >
           .tParmEnd
           [ oTypeStkChooseKind (tpInteger)
           | tpInteger:
           .tTrap
           oEmitTrapKind(trWriteInteger)
           % value emitted 8
           ] or >
           oSymbolStkPop
           oTypeStkPop
           >>
          ;WriteText
          @WriteStandardExpnList
           oSymbolStkPushStandardVariable(stdOutput)
           [ oSymbolStkChooseKind (syVariable)
           | *:
           oValuePushSymbol
           oSymbolStkPop
           [ (sParmEnd)
           | sParmEnd:
           ] or >
           oValuePop
           >>
          ;WriteStandardExpnList
          ] or >
          .tWriteEnd
          >>
         ;WriteProcedure
         ] or >
         ] or >
         oSymbolStkPop
         >>
        ;CallStmt
        ] or >
        }
        [ (sAssignmentStmt)
        | sAssignmentStmt:
        @AssignmentStmt
         ?sIdentifier (sIdentifier)
         oSymbolStkPushIdentifier
         .tAssignBegin
         @Variable
          [ oSymbolStkChooseKind (syVariable)
          | syVariable:
          .tLiteralAddress
          oValuePushSymbol
          oEmitValue
          % value emitted 76
          oValuePop
          ] or >
          oTypeStkPushSymbol
          @VariableExtension
           [ (sIdentifier)
           | *:
           >>
          ;VariableExtension
          >>
         ;Variable
         [ oTypeStkChooseKind (tpInteger)
         | *:
         @Expression
          @Operand
           [ (sIdentifier)
           | sIdentifier:
           oSymbolStkPushIdentifier
           [ oSymbolStkChooseKind (syVariable)
           | *:
           [ oSymbolStkChooseKind (syVariable)
           | syVariable:
           @Variable
            [ oSymbolStkChooseKind (syVariable)
            | syVariable:
            .tLiteralAddress
            oValuePushSymbol
            oEmitValue
            % value emitted 76
            oValuePop
            ] or >
            oTypeStkPushSymbol
            @VariableExtension
             [ (sInteger)
             | *:
             >>
            ;VariableExtension
            >>
           ;Variable
           @VariableOperand
            [ oTypeStkChooseKind (tpInteger)
            | tpInteger:
            .tFetchInteger
            ] or >
            >>
           ;VariableOperand
           ] or >
           ] or >
           >>
          ;Operand
          @UnaryOperator
           [ (sInteger)
           | *:
           >>
          ;UnaryOperator
          @BinaryOperator
           [ (sInteger)
           | *:
           >>
          ;BinaryOperator
          [ (sInteger)
          | *:
          }
          @Operand
           [ (sInteger)
           | sInteger:
           oValuePushInteger
           oSymbolStkPush(syExpression)
           oTypeStkPush(tpInteger)
           oTypeStkLinkToStandardType(stdInteger)
           .tLiteralInteger
           oEmitValue
           % value emitted 1
           oValuePop
           ] or >
           >>
          ;Operand
          @UnaryOperator
           [ (sAdd)
           | *:
           >>
          ;UnaryOperator
          @BinaryOperator
           [ (sAdd)
           | sAdd:
           .tAdd
           oTypeStkPush(tpInteger)
           @CompareOperandAndResultTypes
            @CompareAndSwapTypes
             [ oTypeStkChooseKind (tpInteger)
             | tpInteger:
             oTypeStkSwap
             [ oTypeStkChooseKind (tpInteger)
             | tpInteger:
             ] or >
             ] or >
             >>
            ;CompareAndSwapTypes
            oTypeStkPop
            @CompareAndSwapTypes
             [ oTypeStkChooseKind (tpInteger)
             | tpInteger:
             oTypeStkSwap
             [ oTypeStkChooseKind (tpInteger)
             | tpInteger:
             ] or >
             ] or >
             >>
            ;CompareAndSwapTypes
            oTypeStkPop
            oSymbolStkPop
            oSymbolStkSetKind(syExpression)
            >>
           ;CompareOperandAndResultTypes
           ] or >
           oSymbolStkSetKind(syExpression)
           >>
          ;BinaryOperator
          [ (sExpnEnd)
          | sExpnEnd:
          ] or >
          >>
         ;Expression
         @CompareAndSwapTypes
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          oTypeStkSwap
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          ] or >
          ] or >
          >>
         ;CompareAndSwapTypes
         @EmitAssign
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          .tAssignInteger
          ] or >
          >>
         ;EmitAssign
         oTypeStkPop
         oSymbolStkPop
         oTypeStkPop
         oSymbolStkPop
         >>
        ;AssignmentStmt
        ] or >
        }
        [ (sEnd)
        | *:
        ] or >
        ?sEnd (sEnd)
        >>
       ;Block
       oSymbolTblPopScope
       >>
      ;Statement
      .tWhileEnd
      oFixPopTargetAddress
      % value emitted 249
      oFixPopForwardBranch
      >>
     ;WhileStmt
     ] or >
     }
     [ (sCallStmt)
     | sCallStmt:
     @CallStmt
      ?sIdentifier (sIdentifier)
      oSymbolStkPushIdentifier
      [ oSymbolStkChooseKind (syProcedure)
      | *:
      [ oSymbolStkChooseKind (syProcedure)
      | syProcedure:
      [ oSymbolStkChooseStandardRoutine (rtWriteln)
      | rtWriteln:
      .tTrapBegin
      @WritelnProcedure
       [ (sParmEnd)
       | sParmEnd:
       oSymbolStkPushStandardVariable(stdOutput)
       [ oSymbolStkChooseKind (syVariable)
       | *:
       oValuePushSymbol
       .tLiteralAddress
       oEmitValue
       % value emitted 0
       oValuePop
       oSymbolStkPop
       .tVarParm
       .tParmEnd
       ] or >
       >>
      ;WritelnProcedure
      .tTrap
      oEmitTrapKind(trWriteln)
      % value emitted 6
      ] or >
      ] or >
      oSymbolStkPop
      >>
     ;CallStmt
     ] or >
     }
     [ (sAssignmentStmt)
     | sAssignmentStmt:
     @AssignmentStmt
      ?sIdentifier (sIdentifier)
      oSymbolStkPushIdentifier
      .tAssignBegin
      @Variable
       [ oSymbolStkChooseKind (syVariable)
       | syVariable:
       .tLiteralAddress
       oValuePushSymbol
       oEmitValue
       % value emitted 80
       oValuePop
       ] or >
       oTypeStkPushSymbol
       @VariableExtension
        [ (sIdentifier)
        | *:
        >>
       ;VariableExtension
       >>
      ;Variable
      [ oTypeStkChooseKind (tpInteger)
      | *:
      @Expression
       @Operand
        [ (sIdentifier)
        | sIdentifier:
        oSymbolStkPushIdentifier
        [ oSymbolStkChooseKind (syVariable)
        | *:
        [ oSymbolStkChooseKind (syVariable)
        | syVariable:
        @Variable
         [ oSymbolStkChooseKind (syVariable)
         | syVariable:
         .tLiteralAddress
         oValuePushSymbol
         oEmitValue
         % value emitted 80
         oValuePop
         ] or >
         oTypeStkPushSymbol
         @VariableExtension
          [ (sInteger)
          | *:
          >>
         ;VariableExtension
         >>
        ;Variable
        @VariableOperand
         [ oTypeStkChooseKind (tpInteger)
         | tpInteger:
         .tFetchInteger
         ] or >
         >>
        ;VariableOperand
        ] or >
        ] or >
        >>
       ;Operand
       @UnaryOperator
        [ (sInteger)
        | *:
        >>
       ;UnaryOperator
       @BinaryOperator
        [ (sInteger)
        | *:
        >>
       ;BinaryOperator
       [ (sInteger)
       | *:
       }
       @Operand
        [ (sInteger)
        | sInteger:
        oValuePushInteger
        oSymbolStkPush(syExpression)
        oTypeStkPush(tpInteger)
        oTypeStkLinkToStandardType(stdInteger)
        .tLiteralInteger
        oEmitValue
        % value emitted 1
        oValuePop
        ] or >
        >>
       ;Operand
       @UnaryOperator
        [ (sAdd)
        | *:
        >>
       ;UnaryOperator
       @BinaryOperator
        [ (sAdd)
        | sAdd:
        .tAdd
        oTypeStkPush(tpInteger)
        @CompareOperandAndResultTypes
         @CompareAndSwapTypes
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          oTypeStkSwap
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          ] or >
          ] or >
          >>
         ;CompareAndSwapTypes
         oTypeStkPop
         @CompareAndSwapTypes
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          oTypeStkSwap
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          ] or >
          ] or >
          >>
         ;CompareAndSwapTypes
         oTypeStkPop
         oSymbolStkPop
         oSymbolStkSetKind(syExpression)
         >>
        ;CompareOperandAndResultTypes
        ] or >
        oSymbolStkSetKind(syExpression)
        >>
       ;BinaryOperator
       [ (sExpnEnd)
       | sExpnEnd:
       ] or >
       >>
      ;Expression
      @CompareAndSwapTypes
       [ oTypeStkChooseKind (tpInteger)
       | tpInteger:
       oTypeStkSwap
       [ oTypeStkChooseKind (tpInteger)
       | tpInteger:
       ] or >
       ] or >
       >>
      ;CompareAndSwapTypes
      @EmitAssign
       [ oTypeStkChooseKind (tpInteger)
       | tpInteger:
       .tAssignInteger
       ] or >
       >>
      ;EmitAssign
      oTypeStkPop
      oSymbolStkPop
      oTypeStkPop
      oSymbolStkPop
      >>
     ;AssignmentStmt
     ] or >
     }
     [ (sEnd)
     | *:
     ] or >
     ?sEnd (sEnd)
     >>
    ;Block
    oSymbolTblPopScope
    >>
   ;Statement
   }
   [ (sRepeatEnd)
   | sRepeatEnd:
   ] or >
   .tRepeatControl
   @BooleanControlExpression
    @Expression
     @Operand
      [ (sIdentifier)
      | sIdentifier:
      oSymbolStkPushIdentifier
      [ oSymbolStkChooseKind (syVariable)
      | *:
      [ oSymbolStkChooseKind (syVariable)
      | syVariable:
      @Variable
       [ oSymbolStkChooseKind (syVariable)
       | syVariable:
       .tLiteralAddress
       oValuePushSymbol
       oEmitValue
       % value emitted 80
       oValuePop
       ] or >
       oTypeStkPushSymbol
       @VariableExtension
        [ (sInteger)
        | *:
        >>
       ;VariableExtension
       >>
      ;Variable
      @VariableOperand
       [ oTypeStkChooseKind (tpInteger)
       | tpInteger:
       .tFetchInteger
       ] or >
       >>
      ;VariableOperand
      ] or >
      ] or >
      >>
     ;Operand
     @UnaryOperator
      [ (sInteger)
      | *:
      >>
     ;UnaryOperator
     @BinaryOperator
      [ (sInteger)
      | *:
      >>
     ;BinaryOperator
     [ (sInteger)
     | *:
     }
     @Operand
      [ (sInteger)
      | sInteger:
      oValuePushInteger
      oSymbolStkPush(syExpression)
      oTypeStkPush(tpInteger)
      oTypeStkLinkToStandardType(stdInteger)
      .tLiteralInteger
      oEmitValue
      % value emitted 15
      oValuePop
      ] or >
      >>
     ;Operand
     @UnaryOperator
      [ (sLE)
      | *:
      >>
     ;UnaryOperator
     @BinaryOperator
      [ (sLE)
      | sLE:
      .tLE
      @CompareRelationalOperandTypes
       [ oTypeStkChooseKind (tpInteger)
       | tpInteger:
       oTypeStkPop
       [ oTypeStkChooseKind (tpInteger)
       | tpInteger:
       ] or >
       ] or >
       oTypeStkPop
       oTypeStkPush(tpBoolean)
       oSymbolStkPop
       oSymbolStkSetKind(syExpression)
       >>
      ;CompareRelationalOperandTypes
      ] or >
      oSymbolStkSetKind(syExpression)
      >>
     ;BinaryOperator
     [ (sNot)
     | *:
     }
     @Operand
      [ (sNot)
      | *:
      >>
     ;Operand
     @UnaryOperator
      [ (sNot)
      | sNot:
      .tNot
      oTypeStkPush(tpBoolean)
      @CompareAndSwapTypes
       [ oTypeStkChooseKind (tpBoolean)
       | tpBoolean:
       oTypeStkSwap
       [ oTypeStkChooseKind (tpBoolean)
       | tpBoolean:
       ] or >
       ] or >
       >>
      ;CompareAndSwapTypes
      oTypeStkPop
      ] or >
      oSymbolStkSetKind(syExpression)
      >>
     ;UnaryOperator
     @BinaryOperator
      [ (sExpnEnd)
      | *:
      >>
     ;BinaryOperator
     [ (sExpnEnd)
     | sExpnEnd:
     ] or >
     >>
    ;Expression
    [ oTypeStkChooseKind (tpBoolean)
    | tpBoolean:
    ] or >
    oSymbolStkPop
    oTypeStkPop
    >>
   ;BooleanControlExpression
   .tRepeatTest
   oFixPopTargetAddress
   % value emitted 195
   >>
  ;RepeatStmt
  ] or >
  }
  [ (sEnd)
  | *:
  ] or >
  ?sEnd (sEnd)
  >>
 ;Block
 [ oSymbolTblLookupExternal (no)
 | *:
 oSymbolTblPopScope
 oSymbolStkPop
 .tTrapBegin
 .tTrap
 oEmitTrapKind(trHalt)
 % value emitted 0
 >>
;Program
