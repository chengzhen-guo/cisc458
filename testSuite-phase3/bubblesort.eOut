@Program
 ?sProgram (sProgram)
 oSymbolStkPush(syProcedure)
 oSymbolTblPushScope
 oCountPush(three)
 [ (sIdentifier)
 | *:
 @ProgramParameter
  ?sIdentifier (sIdentifier)
  oSymbolStkPushLocalIdentifier
  [ oSymbolStkChooseKind (syUndefined)
  | syUndefined:
  [ oSymbolStkChooseStandardFile (stdOutput)
  | stdOutput:
  oSymbolStkSetKind(syVariable)
  oTypeStkPush(tpFile)
  oTypeStkLinkToStandardType(stdText)
  oSymbolStkEnterTypeReference
  oValuePush(two)
  ] or >
  @AllocateVar
   [ oSymbolStkChooseKind (syVariable)
   | *:
   [ oTypeStkChooseKind (tpFile)
   | tpFile:
   .tFileDescriptor
   oAllocateAlignOnWord
   oSymbolStkEnterDataAddress
   .tLiteralInteger
   oEmitValue
   % value emitted 2
   .tFileBind
   .tLiteralAddress
   oEmitDataAddress
   % value emitted 0
   .tStoreInteger
   oAllocateDescriptor
   ] or >
   >>
  ;AllocateVar
  oSymbolTblEnter
  ] or >
  oSymbolStkPop
  oTypeStkPop
  oValuePop
  >>
 ;ProgramParameter
 }
 [ (sParmEnd)
 | sParmEnd:
 ] or >
 oCountPop
 @Block
  ?sBegin (sBegin)
  [ (sConst)
  | sConst:
  @ConstantDefinitions
   [ (sIdentifier)
   | sIdentifier:
   oSymbolStkPushLocalIdentifier
   [ oSymbolStkChooseKind (syUndefined)
   | syUndefined:
   ] or >
   oSymbolStkSetKind(syConstant)
   @PublicDefinition
    [ (sInteger)
    | *:
    >>
   ;PublicDefinition
   @ConstantValue
    [ (sInteger)
    | sInteger:
    oTypeStkPush(tpInteger)
    oTypeStkLinkToStandardType(stdInteger)
    oValuePushInteger
    [ (sConst)
    | *:
    ] or >
    >>
   ;ConstantValue
   oSymbolStkEnterTypeReference
   oTypeStkPop
   oSymbolStkEnterValue
   oValuePop
   oSymbolTblEnter
   oSymbolStkPop
   ] or >
   }
   [ (sConst)
   | *:
   ] or >
   >>
  ;ConstantDefinitions
  ] or >
  }
  [ (sConst)
  | sConst:
  @ConstantDefinitions
   [ (sIdentifier)
   | sIdentifier:
   oSymbolStkPushLocalIdentifier
   [ oSymbolStkChooseKind (syUndefined)
   | syUndefined:
   ] or >
   oSymbolStkSetKind(syConstant)
   @PublicDefinition
    [ (sInteger)
    | *:
    >>
   ;PublicDefinition
   @ConstantValue
    [ (sInteger)
    | sInteger:
    oTypeStkPush(tpInteger)
    oTypeStkLinkToStandardType(stdInteger)
    oValuePushInteger
    [ (sVar)
    | *:
    ] or >
    >>
   ;ConstantValue
   oSymbolStkEnterTypeReference
   oTypeStkPop
   oSymbolStkEnterValue
   oValuePop
   oSymbolTblEnter
   oSymbolStkPop
   ] or >
   }
   [ (sVar)
   | *:
   ] or >
   >>
  ;ConstantDefinitions
  ] or >
  }
  [ (sVar)
  | sVar:
  @VariableDeclarations
   [ (sIdentifier)
   | sIdentifier:
   oSymbolStkPushLocalIdentifier
   [ oSymbolStkChooseKind (syUndefined)
   | syUndefined:
   ] or >
   @PublicDefinition
    [ (sArray)
    | *:
    >>
   ;PublicDefinition
   [ (sArray)
   | *:
   @TypeBody
    [ (sArray)
    | sArray:
    oTypeStkPush(tpArray)
    @IndexType
     oValuePush(one)
     @ConstantValue
      [ (sIdentifier)
      | sIdentifier:
      oSymbolStkPushIdentifier
      [ oSymbolStkChooseKind (syConstant)
      | *:
      [ oSymbolStkChooseKind (syConstant)
      | syConstant:
      oValuePushSymbol
      ] or >
      oTypeStkPushSymbol
      [ (sLike)
      | *:
      oSymbolStkPop
      ] or >
      >>
     ;ConstantValue
     [ oTypeStkChooseKind (tpInteger)
     | tpInteger:
     oValuePushTypeStkLowerBound
     oValuePushTypeStkUpperBound
     ] or >
     oTypeStkPop
     oTypeStkEnterBounds
     [ oTypeStkVerifyBounds (yes)
     | yes:
     oValuePop
     ] or >
     oValuePop
     oValuePop
     >>
    ;IndexType
    @ComponentType
     @SimpleType
      ?sLike (sLike)
      [ (sInteger)
      | sInteger:
      oTypeStkPush(tpInteger)
      oTypeStkLinkToStandardType(stdInteger)
      ] or >
      >>
     ;SimpleType
     [ oTypeStkChooseKind (tpInteger)
     | *:
     @TypeTblEnterIfNew
      [ oTypeStkChooseTypeReference (yes)
      | *:
      >>
     ;TypeTblEnterIfNew
     oTypeStkEnterComponentReference
     oTypeStkPop
     >>
    ;ComponentType
    oValuePop
    ] or >
    @TypeTblEnterIfNew
     [ oTypeStkChooseTypeReference (no)
     | no:
     oTypeTblEnter
     ] or >
     >>
    ;TypeTblEnterIfNew
    >>
   ;TypeBody
   @EnterVariableAttributes
    [ oSymbolStkChooseKind (syUndefined)
    | *:
    oSymbolStkSetKind(syVariable)
    [ oTypeStkChooseKind (tpArray)
    | *:
    @AllocateVar
     [ oSymbolStkChooseKind (syVariable)
     | *:
     [ oTypeStkChooseKind (tpArray)
     | tpArray:
     .tArrayDescriptor
     oAllocateAlignOnWord
     oSymbolStkEnterDataAddress
     .tLiteralInteger
     oValuePushTypeStkLowerBound
     oEmitValue
     % value emitted 0
     oValuePop
     .tLiteralAddress
     oEmitDataAddress
     % value emitted 4
     .tStoreInteger
     oAllocateDescriptor
     .tLiteralInteger
     oValuePushTypeStkUpperBound
     oEmitValue
     % value emitted 0
     oValuePop
     .tLiteralAddress
     oEmitDataAddress
     % value emitted 8
     .tStoreInteger
     oAllocateDescriptor
     oAllocateVariable
     ] or >
     >>
    ;AllocateVar
    oSymbolStkEnterTypeReference
    oSymbolTblEnter
    >>
   ;EnterVariableAttributes
   oTypeStkPop
   oSymbolStkPop
   ] or >
   >>
  ;VariableDeclarations
  ] or >
  }
  [ (sVar)
  | sVar:
  @VariableDeclarations
   [ (sIdentifier)
   | sIdentifier:
   oSymbolStkPushLocalIdentifier
   [ oSymbolStkChooseKind (syUndefined)
   | syUndefined:
   ] or >
   @PublicDefinition
    [ (sLike)
    | *:
    >>
   ;PublicDefinition
   [ (sLike)
   | *:
   @TypeBody
    [ (sLike)
    | *:
    @SimpleType
     ?sLike (sLike)
     [ (sInteger)
     | sInteger:
     oTypeStkPush(tpInteger)
     oTypeStkLinkToStandardType(stdInteger)
     ] or >
     >>
    ;SimpleType
    @TypeTblEnterIfNew
     [ oTypeStkChooseTypeReference (yes)
     | *:
     >>
    ;TypeTblEnterIfNew
    >>
   ;TypeBody
   @EnterVariableAttributes
    [ oSymbolStkChooseKind (syUndefined)
    | *:
    oSymbolStkSetKind(syVariable)
    [ oTypeStkChooseKind (tpInteger)
    | *:
    @AllocateVar
     [ oSymbolStkChooseKind (syVariable)
     | *:
     [ oTypeStkChooseKind (tpInteger)
     | tpInteger:
     oAllocateAlignOnWord
     oSymbolStkEnterDataAddress
     oAllocateVariable
     ] or >
     >>
    ;AllocateVar
    oSymbolStkEnterTypeReference
    oSymbolTblEnter
    >>
   ;EnterVariableAttributes
   oTypeStkPop
   oSymbolStkPop
   ] or >
   >>
  ;VariableDeclarations
  ] or >
  }
  [ (sProcedure)
  | sProcedure:
  @ProcedureDefinition
   ?sIdentifier (sIdentifier)
   oSymbolStkPushLocalIdentifier
   [ oSymbolStkChooseKind (syUndefined)
   | syUndefined:
   ] or >
   @PublicDefinition
    [ (sIdentifier)
    | *:
    >>
   ;PublicDefinition
   .tSkipProc
   oFixPushForwardBranch
   oEmitNullAddress
   % value emitted -32767
   oSymbolStkSetKind(syProcedure)
   oValuePushCodeAddress
   oSymbolStkEnterValue
   oValuePop
   oTypeStkPush(tpNull)
   oTypeStkSetRecursionFlag(yes)
   oTypeTblEnter
   oSymbolStkEnterTypeReference
   oSymbolTblEnter
   oSymbolTblPushScope
   @ProcedureHeading
    oCountPush(zero)
    [ (sIdentifier)
    | *:
    oCountIncrement
    ?sIdentifier (sIdentifier)
    oSymbolStkPushLocalIdentifier
    [ oSymbolStkChooseKind (syUndefined)
    | syUndefined:
    ] or >
    [ (sLike)
    | *:
    oSymbolStkSetKind(syVariable)
    @ProcedureParameterType
     @SimpleType
      ?sLike (sLike)
      [ (sInteger)
      | sInteger:
      oTypeStkPush(tpInteger)
      oTypeStkLinkToStandardType(stdInteger)
      ] or >
      >>
     ;SimpleType
     [ oSymbolStkChooseKind (syVariable)
     | syVariable:
     [ oTypeStkChooseKind (tpInteger)
     | *:
     ] or >
     oSymbolStkEnterTypeReference
     @AllocateVar
      [ oSymbolStkChooseKind (syVariable)
      | *:
      [ oTypeStkChooseKind (tpInteger)
      | tpInteger:
      oAllocateAlignOnWord
      oSymbolStkEnterDataAddress
      oAllocateVariable
      ] or >
      >>
     ;AllocateVar
     oSymbolTblEnter
     >>
    ;ProcedureParameterType
    }
    [ (sIdentifier)
    | *:
    oCountIncrement
    ?sIdentifier (sIdentifier)
    oSymbolStkPushLocalIdentifier
    [ oSymbolStkChooseKind (syUndefined)
    | syUndefined:
    ] or >
    [ (sLike)
    | *:
    oSymbolStkSetKind(syVariable)
    @ProcedureParameterType
     @SimpleType
      ?sLike (sLike)
      [ (sInteger)
      | sInteger:
      oTypeStkPush(tpInteger)
      oTypeStkLinkToStandardType(stdInteger)
      ] or >
      >>
     ;SimpleType
     [ oSymbolStkChooseKind (syVariable)
     | syVariable:
     [ oTypeStkChooseKind (tpInteger)
     | *:
     ] or >
     oSymbolStkEnterTypeReference
     @AllocateVar
      [ oSymbolStkChooseKind (syVariable)
      | *:
      [ oTypeStkChooseKind (tpInteger)
      | tpInteger:
      oAllocateAlignOnWord
      oSymbolStkEnterDataAddress
      oAllocateVariable
      ] or >
      >>
     ;AllocateVar
     oSymbolTblEnter
     >>
    ;ProcedureParameterType
    }
    [ (sIdentifier)
    | *:
    oCountIncrement
    ?sIdentifier (sIdentifier)
    oSymbolStkPushLocalIdentifier
    [ oSymbolStkChooseKind (syUndefined)
    | syUndefined:
    ] or >
    [ (sVar)
    | sVar:
    oSymbolStkSetKind(syVarParameter)
    ] or >
    @ProcedureParameterType
     @SimpleType
      ?sLike (sLike)
      [ (sIdentifier)
      | sIdentifier:
      oSymbolStkPushIdentifier
      [ oSymbolStkChooseKind (syConstant)
      | syConstant:
      oTypeStkPushSymbol
      ] or >
      oSymbolStkPop
      ] or >
      >>
     ;SimpleType
     [ oSymbolStkChooseKind (syVarParameter)
     | *:
     oSymbolStkEnterTypeReference
     @AllocateVar
      [ oSymbolStkChooseKind (syVarParameter)
      | syVarParameter:
      oAllocateAlignOnWord
      oSymbolStkEnterDataAddress
      oAllocateVarParameter
      ] or >
      >>
     ;AllocateVar
     oSymbolTblEnter
     >>
    ;ProcedureParameterType
    }
    [ (sParmEnd)
    | sParmEnd:
    ] or >
    @ProcedurePrologue
     @CountPushCopy
      oValuePushCount
      oCountPushValue
      oValuePop
      >>
     ;CountPushCopy
     [ oCountChoose (three)
     | *:
     .tLiteralAddress
     oValuePushSymbol
     oEmitValue
     % value emitted 28
     oValuePop
     [ oSymbolStkChooseKind (syVarParameter)
     | syVarParameter:
     .tStoreAddress
     ] or >
     oSymbolStkPop
     oTypeStkPop
     oCountDecrement
     }
     [ oCountChoose (two)
     | *:
     .tLiteralAddress
     oValuePushSymbol
     oEmitValue
     % value emitted 24
     oValuePop
     [ oSymbolStkChooseKind (syVariable)
     | syVariable:
     @EmitStore
      [ oTypeStkChooseKind (tpInteger)
      | tpInteger:
      .tStoreInteger
      ] or >
      >>
     ;EmitStore
     ] or >
     oSymbolStkPop
     oTypeStkPop
     oCountDecrement
     }
     [ oCountChoose (one)
     | *:
     .tLiteralAddress
     oValuePushSymbol
     oEmitValue
     % value emitted 20
     oValuePop
     [ oSymbolStkChooseKind (syVariable)
     | syVariable:
     @EmitStore
      [ oTypeStkChooseKind (tpInteger)
      | tpInteger:
      .tStoreInteger
      ] or >
      >>
     ;EmitStore
     ] or >
     oSymbolStkPop
     oTypeStkPop
     oCountDecrement
     }
     [ oCountChoose (zero)
     | zero:
     oCountPop
     .tParmEnd
     ] or >
     oTypeStkEnterParameterCount
     oCountPop
     >>
    ;ProcedurePrologue
    >>
   ;ProcedureHeading
   @Block
    ?sBegin (sBegin)
    [ (sAssignmentStmt)
    | sAssignmentStmt:
    @AssignmentStmt
     ?sIdentifier (sIdentifier)
     oSymbolStkPushIdentifier
     .tAssignBegin
     @Variable
      [ oSymbolStkChooseKind (syVariable)
      | syVariable:
      .tLiteralAddress
      oValuePushSymbol
      oEmitValue
      % value emitted 16
      oValuePop
      ] or >
      oTypeStkPushSymbol
      @VariableExtension
       [ (sIdentifier)
       | *:
       >>
      ;VariableExtension
      >>
     ;Variable
     [ oTypeStkChooseKind (tpInteger)
     | *:
     @Expression
      @Operand
       [ (sIdentifier)
       | sIdentifier:
       oSymbolStkPushIdentifier
       [ oSymbolStkChooseKind (syVariable)
       | *:
       [ oSymbolStkChooseKind (syVariable)
       | syVariable:
       @Variable
        [ oSymbolStkChooseKind (syVariable)
        | syVariable:
        .tLiteralAddress
        oValuePushSymbol
        oEmitValue
        % value emitted 20
        oValuePop
        ] or >
        oTypeStkPushSymbol
        @VariableExtension
         [ (sExpnEnd)
         | *:
         >>
        ;VariableExtension
        >>
       ;Variable
       @VariableOperand
        [ oTypeStkChooseKind (tpInteger)
        | tpInteger:
        .tFetchInteger
        ] or >
        >>
       ;VariableOperand
       ] or >
       ] or >
       >>
      ;Operand
      @UnaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;UnaryOperator
      @BinaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;BinaryOperator
      [ (sExpnEnd)
      | sExpnEnd:
      ] or >
      >>
     ;Expression
     @CompareAndSwapTypes
      [ oTypeStkChooseKind (tpInteger)
      | tpInteger:
      oTypeStkSwap
      [ oTypeStkChooseKind (tpInteger)
      | tpInteger:
      ] or >
      ] or >
      >>
     ;CompareAndSwapTypes
     @EmitAssign
      [ oTypeStkChooseKind (tpInteger)
      | tpInteger:
      .tAssignInteger
      ] or >
      >>
     ;EmitAssign
     oTypeStkPop
     oSymbolStkPop
     oTypeStkPop
     oSymbolStkPop
     >>
    ;AssignmentStmt
    ] or >
    }
    [ (sAssignmentStmt)
    | sAssignmentStmt:
    @AssignmentStmt
     ?sIdentifier (sIdentifier)
     oSymbolStkPushIdentifier
     .tAssignBegin
     @Variable
      [ oSymbolStkChooseKind (syVarParameter)
      | syVarParameter:
      .tLiteralAddress
      oValuePushSymbol
      oEmitValue
      % value emitted 28
      oValuePop
      .tFetchAddress
      ] or >
      oTypeStkPushSymbol
      @VariableExtension
       [ (sIdentifier)
       | *:
       >>
      ;VariableExtension
      >>
     ;Variable
     [ oTypeStkChooseKind (tpBoolean)
     | *:
     @Expression
      @Operand
       [ (sIdentifier)
       | sIdentifier:
       oSymbolStkPushIdentifier
       [ oSymbolStkChooseKind (syVariable)
       | *:
       [ oSymbolStkChooseKind (syVariable)
       | syVariable:
       @Variable
        [ oSymbolStkChooseKind (syVariable)
        | syVariable:
        .tLiteralAddress
        oValuePushSymbol
        oEmitValue
        % value emitted 4
        oValuePop
        ] or >
        oTypeStkPushSymbol
        @VariableExtension
         [ (sSubscript)
         | sSubscript:
         .tSubscriptBegin
         @Expression
          @Operand
           [ (sIdentifier)
           | sIdentifier:
           oSymbolStkPushIdentifier
           [ oSymbolStkChooseKind (syVariable)
           | *:
           [ oSymbolStkChooseKind (syVariable)
           | syVariable:
           @Variable
            [ oSymbolStkChooseKind (syVariable)
            | syVariable:
            .tLiteralAddress
            oValuePushSymbol
            oEmitValue
            % value emitted 20
            oValuePop
            ] or >
            oTypeStkPushSymbol
            @VariableExtension
             [ (sExpnEnd)
             | *:
             >>
            ;VariableExtension
            >>
           ;Variable
           @VariableOperand
            [ oTypeStkChooseKind (tpInteger)
            | tpInteger:
            .tFetchInteger
            ] or >
            >>
           ;VariableOperand
           ] or >
           ] or >
           >>
          ;Operand
          @UnaryOperator
           [ (sExpnEnd)
           | *:
           >>
          ;UnaryOperator
          @BinaryOperator
           [ (sExpnEnd)
           | *:
           >>
          ;BinaryOperator
          [ (sExpnEnd)
          | sExpnEnd:
          ] or >
          >>
         ;Expression
         [ oTypeStkChooseKind (tpInteger)
         | tpInteger:
         ] or >
         oSymbolStkPop
         oTypeStkPop
         [ oTypeStkChooseKind (tpArray)
         | tpArray:
         oTypeStkPushComponent
         oTypeStkSwap
         oTypeStkPop
         ] or >
         [ oTypeStkChooseKind (tpInteger)
         | tpInteger:
         .tSubscriptInteger
         ] or >
         ] or >
         >>
        ;VariableExtension
        >>
       ;Variable
       @VariableOperand
        [ oTypeStkChooseKind (tpInteger)
        | tpInteger:
        .tFetchInteger
        ] or >
        >>
       ;VariableOperand
       ] or >
       ] or >
       >>
      ;Operand
      @UnaryOperator
       [ (sIdentifier)
       | *:
       >>
      ;UnaryOperator
      @BinaryOperator
       [ (sIdentifier)
       | *:
       >>
      ;BinaryOperator
      [ (sIdentifier)
      | *:
      }
      @Operand
       [ (sIdentifier)
       | sIdentifier:
       oSymbolStkPushIdentifier
       [ oSymbolStkChooseKind (syVariable)
       | *:
       [ oSymbolStkChooseKind (syVariable)
       | syVariable:
       @Variable
        [ oSymbolStkChooseKind (syVariable)
        | syVariable:
        .tLiteralAddress
        oValuePushSymbol
        oEmitValue
        % value emitted 4
        oValuePop
        ] or >
        oTypeStkPushSymbol
        @VariableExtension
         [ (sSubscript)
         | sSubscript:
         .tSubscriptBegin
         @Expression
          @Operand
           [ (sIdentifier)
           | sIdentifier:
           oSymbolStkPushIdentifier
           [ oSymbolStkChooseKind (syVariable)
           | *:
           [ oSymbolStkChooseKind (syVariable)
           | syVariable:
           @Variable
            [ oSymbolStkChooseKind (syVariable)
            | syVariable:
            .tLiteralAddress
            oValuePushSymbol
            oEmitValue
            % value emitted 24
            oValuePop
            ] or >
            oTypeStkPushSymbol
            @VariableExtension
             [ (sExpnEnd)
             | *:
             >>
            ;VariableExtension
            >>
           ;Variable
           @VariableOperand
            [ oTypeStkChooseKind (tpInteger)
            | tpInteger:
            .tFetchInteger
            ] or >
            >>
           ;VariableOperand
           ] or >
           ] or >
           >>
          ;Operand
          @UnaryOperator
           [ (sExpnEnd)
           | *:
           >>
          ;UnaryOperator
          @BinaryOperator
           [ (sExpnEnd)
           | *:
           >>
          ;BinaryOperator
          [ (sExpnEnd)
          | sExpnEnd:
          ] or >
          >>
         ;Expression
         [ oTypeStkChooseKind (tpInteger)
         | tpInteger:
         ] or >
         oSymbolStkPop
         oTypeStkPop
         [ oTypeStkChooseKind (tpArray)
         | tpArray:
         oTypeStkPushComponent
         oTypeStkSwap
         oTypeStkPop
         ] or >
         [ oTypeStkChooseKind (tpInteger)
         | tpInteger:
         .tSubscriptInteger
         ] or >
         ] or >
         >>
        ;VariableExtension
        >>
       ;Variable
       @VariableOperand
        [ oTypeStkChooseKind (tpInteger)
        | tpInteger:
        .tFetchInteger
        ] or >
        >>
       ;VariableOperand
       ] or >
       ] or >
       >>
      ;Operand
      @UnaryOperator
       [ (sLT)
       | *:
       >>
      ;UnaryOperator
      @BinaryOperator
       [ (sLT)
       | sLT:
       .tLT
       @CompareRelationalOperandTypes
        [ oTypeStkChooseKind (tpInteger)
        | tpInteger:
        oTypeStkPop
        [ oTypeStkChooseKind (tpInteger)
        | tpInteger:
        ] or >
        ] or >
        oTypeStkPop
        oTypeStkPush(tpBoolean)
        oSymbolStkPop
        oSymbolStkSetKind(syExpression)
        >>
       ;CompareRelationalOperandTypes
       ] or >
       oSymbolStkSetKind(syExpression)
       >>
      ;BinaryOperator
      [ (sExpnEnd)
      | sExpnEnd:
      ] or >
      >>
     ;Expression
     @CompareAndSwapTypes
      [ oTypeStkChooseKind (tpBoolean)
      | tpBoolean:
      oTypeStkSwap
      [ oTypeStkChooseKind (tpBoolean)
      | tpBoolean:
      ] or >
      ] or >
      >>
     ;CompareAndSwapTypes
     @EmitAssign
      [ oTypeStkChooseKind (tpBoolean)
      | tpBoolean:
      .tAssignBoolean
      ] or >
      >>
     ;EmitAssign
     oTypeStkPop
     oSymbolStkPop
     oTypeStkPop
     oSymbolStkPop
     >>
    ;AssignmentStmt
    ] or >
    }
    [ (sEnd)
    | *:
    ] or >
    ?sEnd (sEnd)
    >>
   ;Block
   oTypeStkSetRecursionFlag(no)
   oTypeTblUpdate
   oTypeStkPop
   oSymbolTblUpdate
   oSymbolStkPop
   oSymbolTblPopScope
   oSymbolTblPreserveParameters
   .tProcedureEnd
   oFixPopForwardBranch
   >>
  ;ProcedureDefinition
  ] or >
  }
  [ (sProcedure)
  | sProcedure:
  @ProcedureDefinition
   ?sIdentifier (sIdentifier)
   oSymbolStkPushLocalIdentifier
   [ oSymbolStkChooseKind (syUndefined)
   | syUndefined:
   ] or >
   @PublicDefinition
    [ (sIdentifier)
    | *:
    >>
   ;PublicDefinition
   .tSkipProc
   oFixPushForwardBranch
   oEmitNullAddress
   % value emitted -32767
   oSymbolStkSetKind(syProcedure)
   oValuePushCodeAddress
   oSymbolStkEnterValue
   oValuePop
   oTypeStkPush(tpNull)
   oTypeStkSetRecursionFlag(yes)
   oTypeTblEnter
   oSymbolStkEnterTypeReference
   oSymbolTblEnter
   oSymbolTblPushScope
   @ProcedureHeading
    oCountPush(zero)
    [ (sIdentifier)
    | *:
    oCountIncrement
    ?sIdentifier (sIdentifier)
    oSymbolStkPushLocalIdentifier
    [ oSymbolStkChooseKind (syUndefined)
    | syUndefined:
    ] or >
    [ (sLike)
    | *:
    oSymbolStkSetKind(syVariable)
    @ProcedureParameterType
     @SimpleType
      ?sLike (sLike)
      [ (sInteger)
      | sInteger:
      oTypeStkPush(tpInteger)
      oTypeStkLinkToStandardType(stdInteger)
      ] or >
      >>
     ;SimpleType
     [ oSymbolStkChooseKind (syVariable)
     | syVariable:
     [ oTypeStkChooseKind (tpInteger)
     | *:
     ] or >
     oSymbolStkEnterTypeReference
     @AllocateVar
      [ oSymbolStkChooseKind (syVariable)
      | *:
      [ oTypeStkChooseKind (tpInteger)
      | tpInteger:
      oAllocateAlignOnWord
      oSymbolStkEnterDataAddress
      oAllocateVariable
      ] or >
      >>
     ;AllocateVar
     oSymbolTblEnter
     >>
    ;ProcedureParameterType
    }
    [ (sIdentifier)
    | *:
    oCountIncrement
    ?sIdentifier (sIdentifier)
    oSymbolStkPushLocalIdentifier
    [ oSymbolStkChooseKind (syUndefined)
    | syUndefined:
    ] or >
    [ (sLike)
    | *:
    oSymbolStkSetKind(syVariable)
    @ProcedureParameterType
     @SimpleType
      ?sLike (sLike)
      [ (sInteger)
      | sInteger:
      oTypeStkPush(tpInteger)
      oTypeStkLinkToStandardType(stdInteger)
      ] or >
      >>
     ;SimpleType
     [ oSymbolStkChooseKind (syVariable)
     | syVariable:
     [ oTypeStkChooseKind (tpInteger)
     | *:
     ] or >
     oSymbolStkEnterTypeReference
     @AllocateVar
      [ oSymbolStkChooseKind (syVariable)
      | *:
      [ oTypeStkChooseKind (tpInteger)
      | tpInteger:
      oAllocateAlignOnWord
      oSymbolStkEnterDataAddress
      oAllocateVariable
      ] or >
      >>
     ;AllocateVar
     oSymbolTblEnter
     >>
    ;ProcedureParameterType
    }
    [ (sParmEnd)
    | sParmEnd:
    ] or >
    @ProcedurePrologue
     @CountPushCopy
      oValuePushCount
      oCountPushValue
      oValuePop
      >>
     ;CountPushCopy
     [ oCountChoose (two)
     | *:
     .tLiteralAddress
     oValuePushSymbol
     oEmitValue
     % value emitted 36
     oValuePop
     [ oSymbolStkChooseKind (syVariable)
     | syVariable:
     @EmitStore
      [ oTypeStkChooseKind (tpInteger)
      | tpInteger:
      .tStoreInteger
      ] or >
      >>
     ;EmitStore
     ] or >
     oSymbolStkPop
     oTypeStkPop
     oCountDecrement
     }
     [ oCountChoose (one)
     | *:
     .tLiteralAddress
     oValuePushSymbol
     oEmitValue
     % value emitted 32
     oValuePop
     [ oSymbolStkChooseKind (syVariable)
     | syVariable:
     @EmitStore
      [ oTypeStkChooseKind (tpInteger)
      | tpInteger:
      .tStoreInteger
      ] or >
      >>
     ;EmitStore
     ] or >
     oSymbolStkPop
     oTypeStkPop
     oCountDecrement
     }
     [ oCountChoose (zero)
     | zero:
     oCountPop
     .tParmEnd
     ] or >
     oTypeStkEnterParameterCount
     oCountPop
     >>
    ;ProcedurePrologue
    >>
   ;ProcedureHeading
   @Block
    ?sBegin (sBegin)
    [ (sVar)
    | sVar:
    @VariableDeclarations
     [ (sIdentifier)
     | sIdentifier:
     oSymbolStkPushLocalIdentifier
     [ oSymbolStkChooseKind (syUndefined)
     | syUndefined:
     ] or >
     @PublicDefinition
      [ (sLike)
      | *:
      >>
     ;PublicDefinition
     [ (sLike)
     | *:
     @TypeBody
      [ (sLike)
      | *:
      @SimpleType
       ?sLike (sLike)
       [ (sInteger)
       | sInteger:
       oTypeStkPush(tpInteger)
       oTypeStkLinkToStandardType(stdInteger)
       ] or >
       >>
      ;SimpleType
      @TypeTblEnterIfNew
       [ oTypeStkChooseTypeReference (yes)
       | *:
       >>
      ;TypeTblEnterIfNew
      >>
     ;TypeBody
     @EnterVariableAttributes
      [ oSymbolStkChooseKind (syUndefined)
      | *:
      oSymbolStkSetKind(syVariable)
      [ oTypeStkChooseKind (tpInteger)
      | *:
      @AllocateVar
       [ oSymbolStkChooseKind (syVariable)
       | *:
       [ oTypeStkChooseKind (tpInteger)
       | tpInteger:
       oAllocateAlignOnWord
       oSymbolStkEnterDataAddress
       oAllocateVariable
       ] or >
       >>
      ;AllocateVar
      oSymbolStkEnterTypeReference
      oSymbolTblEnter
      >>
     ;EnterVariableAttributes
     oTypeStkPop
     oSymbolStkPop
     ] or >
     >>
    ;VariableDeclarations
    ] or >
    }
    [ (sAssignmentStmt)
    | sAssignmentStmt:
    @AssignmentStmt
     ?sIdentifier (sIdentifier)
     oSymbolStkPushIdentifier
     .tAssignBegin
     @Variable
      [ oSymbolStkChooseKind (syVariable)
      | syVariable:
      .tLiteralAddress
      oValuePushSymbol
      oEmitValue
      % value emitted 16
      oValuePop
      ] or >
      oTypeStkPushSymbol
      @VariableExtension
       [ (sIdentifier)
       | *:
       >>
      ;VariableExtension
      >>
     ;Variable
     [ oTypeStkChooseKind (tpInteger)
     | *:
     @Expression
      @Operand
       [ (sIdentifier)
       | sIdentifier:
       oSymbolStkPushIdentifier
       [ oSymbolStkChooseKind (syVariable)
       | *:
       [ oSymbolStkChooseKind (syVariable)
       | syVariable:
       @Variable
        [ oSymbolStkChooseKind (syVariable)
        | syVariable:
        .tLiteralAddress
        oValuePushSymbol
        oEmitValue
        % value emitted 36
        oValuePop
        ] or >
        oTypeStkPushSymbol
        @VariableExtension
         [ (sExpnEnd)
         | *:
         >>
        ;VariableExtension
        >>
       ;Variable
       @VariableOperand
        [ oTypeStkChooseKind (tpInteger)
        | tpInteger:
        .tFetchInteger
        ] or >
        >>
       ;VariableOperand
       ] or >
       ] or >
       >>
      ;Operand
      @UnaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;UnaryOperator
      @BinaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;BinaryOperator
      [ (sExpnEnd)
      | sExpnEnd:
      ] or >
      >>
     ;Expression
     @CompareAndSwapTypes
      [ oTypeStkChooseKind (tpInteger)
      | tpInteger:
      oTypeStkSwap
      [ oTypeStkChooseKind (tpInteger)
      | tpInteger:
      ] or >
      ] or >
      >>
     ;CompareAndSwapTypes
     @EmitAssign
      [ oTypeStkChooseKind (tpInteger)
      | tpInteger:
      .tAssignInteger
      ] or >
      >>
     ;EmitAssign
     oTypeStkPop
     oSymbolStkPop
     oTypeStkPop
     oSymbolStkPop
     >>
    ;AssignmentStmt
    ] or >
    }
    [ (sAssignmentStmt)
    | sAssignmentStmt:
    @AssignmentStmt
     ?sIdentifier (sIdentifier)
     oSymbolStkPushIdentifier
     .tAssignBegin
     @Variable
      [ oSymbolStkChooseKind (syVariable)
      | syVariable:
      .tLiteralAddress
      oValuePushSymbol
      oEmitValue
      % value emitted 40
      oValuePop
      ] or >
      oTypeStkPushSymbol
      @VariableExtension
       [ (sIdentifier)
       | *:
       >>
      ;VariableExtension
      >>
     ;Variable
     [ oTypeStkChooseKind (tpInteger)
     | *:
     @Expression
      @Operand
       [ (sIdentifier)
       | sIdentifier:
       oSymbolStkPushIdentifier
       [ oSymbolStkChooseKind (syVariable)
       | *:
       [ oSymbolStkChooseKind (syVariable)
       | syVariable:
       @Variable
        [ oSymbolStkChooseKind (syVariable)
        | syVariable:
        .tLiteralAddress
        oValuePushSymbol
        oEmitValue
        % value emitted 4
        oValuePop
        ] or >
        oTypeStkPushSymbol
        @VariableExtension
         [ (sSubscript)
         | sSubscript:
         .tSubscriptBegin
         @Expression
          @Operand
           [ (sIdentifier)
           | sIdentifier:
           oSymbolStkPushIdentifier
           [ oSymbolStkChooseKind (syVariable)
           | *:
           [ oSymbolStkChooseKind (syVariable)
           | syVariable:
           @Variable
            [ oSymbolStkChooseKind (syVariable)
            | syVariable:
            .tLiteralAddress
            oValuePushSymbol
            oEmitValue
            % value emitted 32
            oValuePop
            ] or >
            oTypeStkPushSymbol
            @VariableExtension
             [ (sExpnEnd)
             | *:
             >>
            ;VariableExtension
            >>
           ;Variable
           @VariableOperand
            [ oTypeStkChooseKind (tpInteger)
            | tpInteger:
            .tFetchInteger
            ] or >
            >>
           ;VariableOperand
           ] or >
           ] or >
           >>
          ;Operand
          @UnaryOperator
           [ (sExpnEnd)
           | *:
           >>
          ;UnaryOperator
          @BinaryOperator
           [ (sExpnEnd)
           | *:
           >>
          ;BinaryOperator
          [ (sExpnEnd)
          | sExpnEnd:
          ] or >
          >>
         ;Expression
         [ oTypeStkChooseKind (tpInteger)
         | tpInteger:
         ] or >
         oSymbolStkPop
         oTypeStkPop
         [ oTypeStkChooseKind (tpArray)
         | tpArray:
         oTypeStkPushComponent
         oTypeStkSwap
         oTypeStkPop
         ] or >
         [ oTypeStkChooseKind (tpInteger)
         | tpInteger:
         .tSubscriptInteger
         ] or >
         ] or >
         >>
        ;VariableExtension
        >>
       ;Variable
       @VariableOperand
        [ oTypeStkChooseKind (tpInteger)
        | tpInteger:
        .tFetchInteger
        ] or >
        >>
       ;VariableOperand
       ] or >
       ] or >
       >>
      ;Operand
      @UnaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;UnaryOperator
      @BinaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;BinaryOperator
      [ (sExpnEnd)
      | sExpnEnd:
      ] or >
      >>
     ;Expression
     @CompareAndSwapTypes
      [ oTypeStkChooseKind (tpInteger)
      | tpInteger:
      oTypeStkSwap
      [ oTypeStkChooseKind (tpInteger)
      | tpInteger:
      ] or >
      ] or >
      >>
     ;CompareAndSwapTypes
     @EmitAssign
      [ oTypeStkChooseKind (tpInteger)
      | tpInteger:
      .tAssignInteger
      ] or >
      >>
     ;EmitAssign
     oTypeStkPop
     oSymbolStkPop
     oTypeStkPop
     oSymbolStkPop
     >>
    ;AssignmentStmt
    ] or >
    }
    [ (sAssignmentStmt)
    | sAssignmentStmt:
    @AssignmentStmt
     ?sIdentifier (sIdentifier)
     oSymbolStkPushIdentifier
     .tAssignBegin
     @Variable
      [ oSymbolStkChooseKind (syVariable)
      | syVariable:
      .tLiteralAddress
      oValuePushSymbol
      oEmitValue
      % value emitted 4
      oValuePop
      ] or >
      oTypeStkPushSymbol
      @VariableExtension
       [ (sSubscript)
       | sSubscript:
       .tSubscriptBegin
       @Expression
        @Operand
         [ (sIdentifier)
         | sIdentifier:
         oSymbolStkPushIdentifier
         [ oSymbolStkChooseKind (syVariable)
         | *:
         [ oSymbolStkChooseKind (syVariable)
         | syVariable:
         @Variable
          [ oSymbolStkChooseKind (syVariable)
          | syVariable:
          .tLiteralAddress
          oValuePushSymbol
          oEmitValue
          % value emitted 32
          oValuePop
          ] or >
          oTypeStkPushSymbol
          @VariableExtension
           [ (sExpnEnd)
           | *:
           >>
          ;VariableExtension
          >>
         ;Variable
         @VariableOperand
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          .tFetchInteger
          ] or >
          >>
         ;VariableOperand
         ] or >
         ] or >
         >>
        ;Operand
        @UnaryOperator
         [ (sExpnEnd)
         | *:
         >>
        ;UnaryOperator
        @BinaryOperator
         [ (sExpnEnd)
         | *:
         >>
        ;BinaryOperator
        [ (sExpnEnd)
        | sExpnEnd:
        ] or >
        >>
       ;Expression
       [ oTypeStkChooseKind (tpInteger)
       | tpInteger:
       ] or >
       oSymbolStkPop
       oTypeStkPop
       [ oTypeStkChooseKind (tpArray)
       | tpArray:
       oTypeStkPushComponent
       oTypeStkSwap
       oTypeStkPop
       ] or >
       [ oTypeStkChooseKind (tpInteger)
       | tpInteger:
       .tSubscriptInteger
       ] or >
       ] or >
       >>
      ;VariableExtension
      >>
     ;Variable
     [ oTypeStkChooseKind (tpInteger)
     | *:
     @Expression
      @Operand
       [ (sIdentifier)
       | sIdentifier:
       oSymbolStkPushIdentifier
       [ oSymbolStkChooseKind (syVariable)
       | *:
       [ oSymbolStkChooseKind (syVariable)
       | syVariable:
       @Variable
        [ oSymbolStkChooseKind (syVariable)
        | syVariable:
        .tLiteralAddress
        oValuePushSymbol
        oEmitValue
        % value emitted 4
        oValuePop
        ] or >
        oTypeStkPushSymbol
        @VariableExtension
         [ (sSubscript)
         | sSubscript:
         .tSubscriptBegin
         @Expression
          @Operand
           [ (sIdentifier)
           | sIdentifier:
           oSymbolStkPushIdentifier
           [ oSymbolStkChooseKind (syVariable)
           | *:
           [ oSymbolStkChooseKind (syVariable)
           | syVariable:
           @Variable
            [ oSymbolStkChooseKind (syVariable)
            | syVariable:
            .tLiteralAddress
            oValuePushSymbol
            oEmitValue
            % value emitted 36
            oValuePop
            ] or >
            oTypeStkPushSymbol
            @VariableExtension
             [ (sExpnEnd)
             | *:
             >>
            ;VariableExtension
            >>
           ;Variable
           @VariableOperand
            [ oTypeStkChooseKind (tpInteger)
            | tpInteger:
            .tFetchInteger
            ] or >
            >>
           ;VariableOperand
           ] or >
           ] or >
           >>
          ;Operand
          @UnaryOperator
           [ (sExpnEnd)
           | *:
           >>
          ;UnaryOperator
          @BinaryOperator
           [ (sExpnEnd)
           | *:
           >>
          ;BinaryOperator
          [ (sExpnEnd)
          | sExpnEnd:
          ] or >
          >>
         ;Expression
         [ oTypeStkChooseKind (tpInteger)
         | tpInteger:
         ] or >
         oSymbolStkPop
         oTypeStkPop
         [ oTypeStkChooseKind (tpArray)
         | tpArray:
         oTypeStkPushComponent
         oTypeStkSwap
         oTypeStkPop
         ] or >
         [ oTypeStkChooseKind (tpInteger)
         | tpInteger:
         .tSubscriptInteger
         ] or >
         ] or >
         >>
        ;VariableExtension
        >>
       ;Variable
       @VariableOperand
        [ oTypeStkChooseKind (tpInteger)
        | tpInteger:
        .tFetchInteger
        ] or >
        >>
       ;VariableOperand
       ] or >
       ] or >
       >>
      ;Operand
      @UnaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;UnaryOperator
      @BinaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;BinaryOperator
      [ (sExpnEnd)
      | sExpnEnd:
      ] or >
      >>
     ;Expression
     @CompareAndSwapTypes
      [ oTypeStkChooseKind (tpInteger)
      | tpInteger:
      oTypeStkSwap
      [ oTypeStkChooseKind (tpInteger)
      | tpInteger:
      ] or >
      ] or >
      >>
     ;CompareAndSwapTypes
     @EmitAssign
      [ oTypeStkChooseKind (tpInteger)
      | tpInteger:
      .tAssignInteger
      ] or >
      >>
     ;EmitAssign
     oTypeStkPop
     oSymbolStkPop
     oTypeStkPop
     oSymbolStkPop
     >>
    ;AssignmentStmt
    ] or >
    }
    [ (sAssignmentStmt)
    | sAssignmentStmt:
    @AssignmentStmt
     ?sIdentifier (sIdentifier)
     oSymbolStkPushIdentifier
     .tAssignBegin
     @Variable
      [ oSymbolStkChooseKind (syVariable)
      | syVariable:
      .tLiteralAddress
      oValuePushSymbol
      oEmitValue
      % value emitted 4
      oValuePop
      ] or >
      oTypeStkPushSymbol
      @VariableExtension
       [ (sSubscript)
       | sSubscript:
       .tSubscriptBegin
       @Expression
        @Operand
         [ (sIdentifier)
         | sIdentifier:
         oSymbolStkPushIdentifier
         [ oSymbolStkChooseKind (syVariable)
         | *:
         [ oSymbolStkChooseKind (syVariable)
         | syVariable:
         @Variable
          [ oSymbolStkChooseKind (syVariable)
          | syVariable:
          .tLiteralAddress
          oValuePushSymbol
          oEmitValue
          % value emitted 36
          oValuePop
          ] or >
          oTypeStkPushSymbol
          @VariableExtension
           [ (sExpnEnd)
           | *:
           >>
          ;VariableExtension
          >>
         ;Variable
         @VariableOperand
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          .tFetchInteger
          ] or >
          >>
         ;VariableOperand
         ] or >
         ] or >
         >>
        ;Operand
        @UnaryOperator
         [ (sExpnEnd)
         | *:
         >>
        ;UnaryOperator
        @BinaryOperator
         [ (sExpnEnd)
         | *:
         >>
        ;BinaryOperator
        [ (sExpnEnd)
        | sExpnEnd:
        ] or >
        >>
       ;Expression
       [ oTypeStkChooseKind (tpInteger)
       | tpInteger:
       ] or >
       oSymbolStkPop
       oTypeStkPop
       [ oTypeStkChooseKind (tpArray)
       | tpArray:
       oTypeStkPushComponent
       oTypeStkSwap
       oTypeStkPop
       ] or >
       [ oTypeStkChooseKind (tpInteger)
       | tpInteger:
       .tSubscriptInteger
       ] or >
       ] or >
       >>
      ;VariableExtension
      >>
     ;Variable
     [ oTypeStkChooseKind (tpInteger)
     | *:
     @Expression
      @Operand
       [ (sIdentifier)
       | sIdentifier:
       oSymbolStkPushIdentifier
       [ oSymbolStkChooseKind (syVariable)
       | *:
       [ oSymbolStkChooseKind (syVariable)
       | syVariable:
       @Variable
        [ oSymbolStkChooseKind (syVariable)
        | syVariable:
        .tLiteralAddress
        oValuePushSymbol
        oEmitValue
        % value emitted 40
        oValuePop
        ] or >
        oTypeStkPushSymbol
        @VariableExtension
         [ (sExpnEnd)
         | *:
         >>
        ;VariableExtension
        >>
       ;Variable
       @VariableOperand
        [ oTypeStkChooseKind (tpInteger)
        | tpInteger:
        .tFetchInteger
        ] or >
        >>
       ;VariableOperand
       ] or >
       ] or >
       >>
      ;Operand
      @UnaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;UnaryOperator
      @BinaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;BinaryOperator
      [ (sExpnEnd)
      | sExpnEnd:
      ] or >
      >>
     ;Expression
     @CompareAndSwapTypes
      [ oTypeStkChooseKind (tpInteger)
      | tpInteger:
      oTypeStkSwap
      [ oTypeStkChooseKind (tpInteger)
      | tpInteger:
      ] or >
      ] or >
      >>
     ;CompareAndSwapTypes
     @EmitAssign
      [ oTypeStkChooseKind (tpInteger)
      | tpInteger:
      .tAssignInteger
      ] or >
      >>
     ;EmitAssign
     oTypeStkPop
     oSymbolStkPop
     oTypeStkPop
     oSymbolStkPop
     >>
    ;AssignmentStmt
    ] or >
    }
    [ (sEnd)
    | *:
    ] or >
    ?sEnd (sEnd)
    >>
   ;Block
   oTypeStkSetRecursionFlag(no)
   oTypeTblUpdate
   oTypeStkPop
   oSymbolTblUpdate
   oSymbolStkPop
   oSymbolTblPopScope
   oSymbolTblPreserveParameters
   .tProcedureEnd
   oFixPopForwardBranch
   >>
  ;ProcedureDefinition
  ] or >
  }
  [ (sProcedure)
  | sProcedure:
  @ProcedureDefinition
   ?sIdentifier (sIdentifier)
   oSymbolStkPushLocalIdentifier
   [ oSymbolStkChooseKind (syUndefined)
   | syUndefined:
   ] or >
   @PublicDefinition
    [ (sParmEnd)
    | *:
    >>
   ;PublicDefinition
   .tSkipProc
   oFixPushForwardBranch
   oEmitNullAddress
   % value emitted -32767
   oSymbolStkSetKind(syProcedure)
   oValuePushCodeAddress
   oSymbolStkEnterValue
   oValuePop
   oTypeStkPush(tpNull)
   oTypeStkSetRecursionFlag(yes)
   oTypeTblEnter
   oSymbolStkEnterTypeReference
   oSymbolTblEnter
   oSymbolTblPushScope
   @ProcedureHeading
    oCountPush(zero)
    [ (sParmEnd)
    | sParmEnd:
    ] or >
    @ProcedurePrologue
     @CountPushCopy
      oValuePushCount
      oCountPushValue
      oValuePop
      >>
     ;CountPushCopy
     [ oCountChoose (zero)
     | zero:
     oCountPop
     .tParmEnd
     ] or >
     oTypeStkEnterParameterCount
     oCountPop
     >>
    ;ProcedurePrologue
    >>
   ;ProcedureHeading
   @Block
    ?sBegin (sBegin)
    [ (sVar)
    | sVar:
    @VariableDeclarations
     [ (sIdentifier)
     | sIdentifier:
     oSymbolStkPushLocalIdentifier
     [ oSymbolStkChooseKind (syUndefined)
     | syUndefined:
     ] or >
     @PublicDefinition
      [ (sInitialValue)
      | *:
      >>
     ;PublicDefinition
     [ (sInitialValue)
     | sInitialValue:
     .tInitialValue
     @Expression
      @Operand
       [ (sInteger)
       | sInteger:
       oValuePushInteger
       oSymbolStkPush(syExpression)
       oTypeStkPush(tpInteger)
       oTypeStkLinkToStandardType(stdInteger)
       .tLiteralInteger
       oEmitValue
       % value emitted 1
       oValuePop
       ] or >
       >>
      ;Operand
      @UnaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;UnaryOperator
      @BinaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;BinaryOperator
      [ (sExpnEnd)
      | sExpnEnd:
      ] or >
      >>
     ;Expression
     @TypeTblEnterIfNew
      [ oTypeStkChooseTypeReference (yes)
      | *:
      >>
     ;TypeTblEnterIfNew
     .tInitEnd
     .tLiteralAddress
     @EmitStore
      [ oTypeStkChooseKind (tpInteger)
      | tpInteger:
      .tStoreInteger
      ] or >
      >>
     ;EmitStore
     oSymbolStkPop
     ] or >
     @EnterVariableAttributes
      [ oSymbolStkChooseKind (syUndefined)
      | *:
      oSymbolStkSetKind(syVariable)
      [ oTypeStkChooseKind (tpInteger)
      | *:
      @AllocateVar
       [ oSymbolStkChooseKind (syVariable)
       | *:
       [ oTypeStkChooseKind (tpInteger)
       | tpInteger:
       oAllocateAlignOnWord
       oSymbolStkEnterDataAddress
       oAllocateVariable
       ] or >
       >>
      ;AllocateVar
      oSymbolStkEnterTypeReference
      oSymbolTblEnter
      >>
     ;EnterVariableAttributes
     oTypeStkPop
     oSymbolStkPop
     ] or >
     >>
    ;VariableDeclarations
    ] or >
    }
    [ (sRepeatStmt)
    | sRepeatStmt:
    @RepeatStmt
     .tRepeatBegin
     oFixPushTargetAddress
     [ (sBegin)
     | *:
     @Statement
      oSymbolTblPushScope
      @Block
       ?sBegin (sBegin)
       [ (sCallStmt)
       | sCallStmt:
       @CallStmt
        ?sIdentifier (sIdentifier)
        oSymbolStkPushIdentifier
        [ oSymbolStkChooseKind (syProcedure)
        | *:
        [ oSymbolStkChooseKind (syProcedure)
        | syProcedure:
        [ oSymbolStkChooseStandardRoutine (rtWrite)
        | rtWrite:
        .tWriteBegin
        @WriteProcedure
         [ (sIdentifier)
         | sIdentifier:
         oSymbolStkPushIdentifier
         oTypeStkPushSymbol
         [ oTypeStkChooseKind (tpArray)
         | *:
         oTypeStkPop
         oSymbolStkPushStandardVariable(stdOutput)
         [ oSymbolStkChooseKind (syVariable)
         | *:
         oValuePushSymbol
         oSymbolStkPop
         .tTrapBegin
         .tLiteralAddress
         oEmitValue
         % value emitted 0
         .tVarParm
         .tParmEnd
         oValuePop
         [ oSymbolStkChooseKind (syVariable)
         | *:
         [ oSymbolStkChooseKind (syVariable)
         | syVariable:
         @Variable
          [ oSymbolStkChooseKind (syVariable)
          | syVariable:
          .tLiteralAddress
          oValuePushSymbol
          oEmitValue
          % value emitted 4
          oValuePop
          ] or >
          oTypeStkPushSymbol
          @VariableExtension
           [ (sSubscript)
           | sSubscript:
           .tSubscriptBegin
           @Expression
            @Operand
             [ (sIdentifier)
             | sIdentifier:
             oSymbolStkPushIdentifier
             [ oSymbolStkChooseKind (syVariable)
             | *:
             [ oSymbolStkChooseKind (syVariable)
             | syVariable:
             @Variable
              [ oSymbolStkChooseKind (syVariable)
              | syVariable:
              .tLiteralAddress
              oValuePushSymbol
              oEmitValue
              % value emitted 44
              oValuePop
              ] or >
              oTypeStkPushSymbol
              @VariableExtension
               [ (sExpnEnd)
               | *:
               >>
              ;VariableExtension
              >>
             ;Variable
             @VariableOperand
              [ oTypeStkChooseKind (tpInteger)
              | tpInteger:
              .tFetchInteger
              ] or >
              >>
             ;VariableOperand
             ] or >
             ] or >
             >>
            ;Operand
            @UnaryOperator
             [ (sExpnEnd)
             | *:
             >>
            ;UnaryOperator
            @BinaryOperator
             [ (sExpnEnd)
             | *:
             >>
            ;BinaryOperator
            [ (sExpnEnd)
            | sExpnEnd:
            ] or >
            >>
           ;Expression
           [ oTypeStkChooseKind (tpInteger)
           | tpInteger:
           ] or >
           oSymbolStkPop
           oTypeStkPop
           [ oTypeStkChooseKind (tpArray)
           | tpArray:
           oTypeStkPushComponent
           oTypeStkSwap
           oTypeStkPop
           ] or >
           [ oTypeStkChooseKind (tpInteger)
           | tpInteger:
           .tSubscriptInteger
           ] or >
           ] or >
           >>
          ;VariableExtension
          >>
         ;Variable
         @VariableOperand
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          .tFetchInteger
          ] or >
          >>
         ;VariableOperand
         ] or >
         @Expression
          @Operand
           [ (sExpnEnd)
           | *:
           >>
          ;Operand
          @UnaryOperator
           [ (sExpnEnd)
           | *:
           >>
          ;UnaryOperator
          @BinaryOperator
           [ (sExpnEnd)
           | *:
           >>
          ;BinaryOperator
          [ (sExpnEnd)
          | sExpnEnd:
          ] or >
          >>
         ;Expression
         .tParmEnd
         @WriteText
          [ (sFieldWidth)
          | sFieldWidth:
          @Expression
           @Operand
            [ (sInteger)
            | sInteger:
            oValuePushInteger
            oSymbolStkPush(syExpression)
            oTypeStkPush(tpInteger)
            oTypeStkLinkToStandardType(stdInteger)
            .tLiteralInteger
            oEmitValue
            % value emitted 4
            oValuePop
            ] or >
            >>
           ;Operand
           @UnaryOperator
            [ (sExpnEnd)
            | *:
            >>
           ;UnaryOperator
           @BinaryOperator
            [ (sExpnEnd)
            | *:
            >>
           ;BinaryOperator
           [ (sExpnEnd)
           | sExpnEnd:
           ] or >
           >>
          ;Expression
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          ] or >
          oSymbolStkPop
          oTypeStkPop
          ] or >
          .tParmEnd
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          .tTrap
          oEmitTrapKind(trWriteInteger)
          % value emitted 8
          ] or >
          oSymbolStkPop
          oTypeStkPop
          >>
         ;WriteText
         @WriteStandardExpnList
          oSymbolStkPushStandardVariable(stdOutput)
          [ oSymbolStkChooseKind (syVariable)
          | *:
          oValuePushSymbol
          oSymbolStkPop
          [ (sParmEnd)
          | sParmEnd:
          ] or >
          oValuePop
          >>
         ;WriteStandardExpnList
         ] or >
         .tWriteEnd
         >>
        ;WriteProcedure
        ] or >
        ] or >
        oSymbolStkPop
        >>
       ;CallStmt
       ] or >
       }
       [ (sAssignmentStmt)
       | sAssignmentStmt:
       @AssignmentStmt
        ?sIdentifier (sIdentifier)
        oSymbolStkPushIdentifier
        .tAssignBegin
        @Variable
         [ oSymbolStkChooseKind (syVariable)
         | syVariable:
         .tLiteralAddress
         oValuePushSymbol
         oEmitValue
         % value emitted 44
         oValuePop
         ] or >
         oTypeStkPushSymbol
         @VariableExtension
          [ (sIdentifier)
          | *:
          >>
         ;VariableExtension
         >>
        ;Variable
        [ oTypeStkChooseKind (tpInteger)
        | *:
        @Expression
         @Operand
          [ (sIdentifier)
          | sIdentifier:
          oSymbolStkPushIdentifier
          [ oSymbolStkChooseKind (syVariable)
          | *:
          [ oSymbolStkChooseKind (syVariable)
          | syVariable:
          @Variable
           [ oSymbolStkChooseKind (syVariable)
           | syVariable:
           .tLiteralAddress
           oValuePushSymbol
           oEmitValue
           % value emitted 44
           oValuePop
           ] or >
           oTypeStkPushSymbol
           @VariableExtension
            [ (sInteger)
            | *:
            >>
           ;VariableExtension
           >>
          ;Variable
          @VariableOperand
           [ oTypeStkChooseKind (tpInteger)
           | tpInteger:
           .tFetchInteger
           ] or >
           >>
          ;VariableOperand
          ] or >
          ] or >
          >>
         ;Operand
         @UnaryOperator
          [ (sInteger)
          | *:
          >>
         ;UnaryOperator
         @BinaryOperator
          [ (sInteger)
          | *:
          >>
         ;BinaryOperator
         [ (sInteger)
         | *:
         }
         @Operand
          [ (sInteger)
          | sInteger:
          oValuePushInteger
          oSymbolStkPush(syExpression)
          oTypeStkPush(tpInteger)
          oTypeStkLinkToStandardType(stdInteger)
          .tLiteralInteger
          oEmitValue
          % value emitted 1
          oValuePop
          ] or >
          >>
         ;Operand
         @UnaryOperator
          [ (sAdd)
          | *:
          >>
         ;UnaryOperator
         @BinaryOperator
          [ (sAdd)
          | sAdd:
          .tAdd
          oTypeStkPush(tpInteger)
          @CompareOperandAndResultTypes
           @CompareAndSwapTypes
            [ oTypeStkChooseKind (tpInteger)
            | tpInteger:
            oTypeStkSwap
            [ oTypeStkChooseKind (tpInteger)
            | tpInteger:
            ] or >
            ] or >
            >>
           ;CompareAndSwapTypes
           oTypeStkPop
           @CompareAndSwapTypes
            [ oTypeStkChooseKind (tpInteger)
            | tpInteger:
            oTypeStkSwap
            [ oTypeStkChooseKind (tpInteger)
            | tpInteger:
            ] or >
            ] or >
            >>
           ;CompareAndSwapTypes
           oTypeStkPop
           oSymbolStkPop
           oSymbolStkSetKind(syExpression)
           >>
          ;CompareOperandAndResultTypes
          ] or >
          oSymbolStkSetKind(syExpression)
          >>
         ;BinaryOperator
         [ (sExpnEnd)
         | sExpnEnd:
         ] or >
         >>
        ;Expression
        @CompareAndSwapTypes
         [ oTypeStkChooseKind (tpInteger)
         | tpInteger:
         oTypeStkSwap
         [ oTypeStkChooseKind (tpInteger)
         | tpInteger:
         ] or >
         ] or >
         >>
        ;CompareAndSwapTypes
        @EmitAssign
         [ oTypeStkChooseKind (tpInteger)
         | tpInteger:
         .tAssignInteger
         ] or >
         >>
        ;EmitAssign
        oTypeStkPop
        oSymbolStkPop
        oTypeStkPop
        oSymbolStkPop
        >>
       ;AssignmentStmt
       ] or >
       }
       [ (sEnd)
       | *:
       ] or >
       ?sEnd (sEnd)
       >>
      ;Block
      oSymbolTblPopScope
      >>
     ;Statement
     }
     [ (sRepeatEnd)
     | sRepeatEnd:
     ] or >
     .tRepeatControl
     @BooleanControlExpression
      @Expression
       @Operand
        [ (sIdentifier)
        | sIdentifier:
        oSymbolStkPushIdentifier
        [ oSymbolStkChooseKind (syVariable)
        | *:
        [ oSymbolStkChooseKind (syVariable)
        | syVariable:
        @Variable
         [ oSymbolStkChooseKind (syVariable)
         | syVariable:
         .tLiteralAddress
         oValuePushSymbol
         oEmitValue
         % value emitted 44
         oValuePop
         ] or >
         oTypeStkPushSymbol
         @VariableExtension
          [ (sIdentifier)
          | *:
          >>
         ;VariableExtension
         >>
        ;Variable
        @VariableOperand
         [ oTypeStkChooseKind (tpInteger)
         | tpInteger:
         .tFetchInteger
         ] or >
         >>
        ;VariableOperand
        ] or >
        ] or >
        >>
       ;Operand
       @UnaryOperator
        [ (sIdentifier)
        | *:
        >>
       ;UnaryOperator
       @BinaryOperator
        [ (sIdentifier)
        | *:
        >>
       ;BinaryOperator
       [ (sIdentifier)
       | *:
       }
       @Operand
        [ (sIdentifier)
        | sIdentifier:
        oSymbolStkPushIdentifier
        [ oSymbolStkChooseKind (syConstant)
        | *:
        [ oSymbolStkChooseKind (syConstant)
        | syConstant:
        @ConstantOperand
         oTypeStkPushSymbol
         oValuePushSymbol
         [ oTypeStkChooseKind (tpInteger)
         | tpInteger:
         .tLiteralInteger
         oEmitValue
         % value emitted 25
         ] or >
         oValuePop
         >>
        ;ConstantOperand
        ] or >
        ] or >
        >>
       ;Operand
       @UnaryOperator
        [ (sLE)
        | *:
        >>
       ;UnaryOperator
       @BinaryOperator
        [ (sLE)
        | sLE:
        .tLE
        @CompareRelationalOperandTypes
         [ oTypeStkChooseKind (tpInteger)
         | tpInteger:
         oTypeStkPop
         [ oTypeStkChooseKind (tpInteger)
         | tpInteger:
         ] or >
         ] or >
         oTypeStkPop
         oTypeStkPush(tpBoolean)
         oSymbolStkPop
         oSymbolStkSetKind(syExpression)
         >>
        ;CompareRelationalOperandTypes
        ] or >
        oSymbolStkSetKind(syExpression)
        >>
       ;BinaryOperator
       [ (sNot)
       | *:
       }
       @Operand
        [ (sNot)
        | *:
        >>
       ;Operand
       @UnaryOperator
        [ (sNot)
        | sNot:
        .tNot
        oTypeStkPush(tpBoolean)
        @CompareAndSwapTypes
         [ oTypeStkChooseKind (tpBoolean)
         | tpBoolean:
         oTypeStkSwap
         [ oTypeStkChooseKind (tpBoolean)
         | tpBoolean:
         ] or >
         ] or >
         >>
        ;CompareAndSwapTypes
        oTypeStkPop
        ] or >
        oSymbolStkSetKind(syExpression)
        >>
       ;UnaryOperator
       @BinaryOperator
        [ (sExpnEnd)
        | *:
        >>
       ;BinaryOperator
       [ (sExpnEnd)
       | sExpnEnd:
       ] or >
       >>
      ;Expression
      [ oTypeStkChooseKind (tpBoolean)
      | tpBoolean:
      ] or >
      oSymbolStkPop
      oTypeStkPop
      >>
     ;BooleanControlExpression
     .tRepeatTest
     oFixPopTargetAddress
     % value emitted 158
     >>
    ;RepeatStmt
    ] or >
    }
    [ (sCallStmt)
    | sCallStmt:
    @CallStmt
     ?sIdentifier (sIdentifier)
     oSymbolStkPushIdentifier
     [ oSymbolStkChooseKind (syProcedure)
     | *:
     [ oSymbolStkChooseKind (syProcedure)
     | syProcedure:
     [ oSymbolStkChooseStandardRoutine (rtWriteln)
     | rtWriteln:
     .tTrapBegin
     @WritelnProcedure
      [ (sParmEnd)
      | sParmEnd:
      oSymbolStkPushStandardVariable(stdOutput)
      [ oSymbolStkChooseKind (syVariable)
      | *:
      oValuePushSymbol
      .tLiteralAddress
      oEmitValue
      % value emitted 0
      oValuePop
      oSymbolStkPop
      .tVarParm
      .tParmEnd
      ] or >
      >>
     ;WritelnProcedure
     .tTrap
     oEmitTrapKind(trWriteln)
     % value emitted 6
     ] or >
     ] or >
     oSymbolStkPop
     >>
    ;CallStmt
    ] or >
    }
    [ (sEnd)
    | *:
    ] or >
    ?sEnd (sEnd)
    >>
   ;Block
   oTypeStkSetRecursionFlag(no)
   oTypeTblUpdate
   oTypeStkPop
   oSymbolTblUpdate
   oSymbolStkPop
   oSymbolTblPopScope
   oSymbolTblPreserveParameters
   .tProcedureEnd
   oFixPopForwardBranch
   >>
  ;ProcedureDefinition
  ] or >
  }
  [ (sProcedure)
  | sProcedure:
  @ProcedureDefinition
   ?sIdentifier (sIdentifier)
   oSymbolStkPushLocalIdentifier
   [ oSymbolStkChooseKind (syUndefined)
   | syUndefined:
   ] or >
   @PublicDefinition
    [ (sParmEnd)
    | *:
    >>
   ;PublicDefinition
   .tSkipProc
   oFixPushForwardBranch
   oEmitNullAddress
   % value emitted -32767
   oSymbolStkSetKind(syProcedure)
   oValuePushCodeAddress
   oSymbolStkEnterValue
   oValuePop
   oTypeStkPush(tpNull)
   oTypeStkSetRecursionFlag(yes)
   oTypeTblEnter
   oSymbolStkEnterTypeReference
   oSymbolTblEnter
   oSymbolTblPushScope
   @ProcedureHeading
    oCountPush(zero)
    [ (sParmEnd)
    | sParmEnd:
    ] or >
    @ProcedurePrologue
     @CountPushCopy
      oValuePushCount
      oCountPushValue
      oValuePop
      >>
     ;CountPushCopy
     [ oCountChoose (zero)
     | zero:
     oCountPop
     .tParmEnd
     ] or >
     oTypeStkEnterParameterCount
     oCountPop
     >>
    ;ProcedurePrologue
    >>
   ;ProcedureHeading
   @Block
    ?sBegin (sBegin)
    [ (sVar)
    | sVar:
    @VariableDeclarations
     [ (sIdentifier)
     | sIdentifier:
     oSymbolStkPushLocalIdentifier
     [ oSymbolStkChooseKind (syUndefined)
     | syUndefined:
     ] or >
     @PublicDefinition
      [ (sInitialValue)
      | *:
      >>
     ;PublicDefinition
     [ (sInitialValue)
     | sInitialValue:
     .tInitialValue
     @Expression
      @Operand
       [ (sIdentifier)
       | sIdentifier:
       oSymbolStkPushIdentifier
       [ oSymbolStkChooseKind (syConstant)
       | *:
       [ oSymbolStkChooseKind (syConstant)
       | syConstant:
       @ConstantOperand
        oTypeStkPushSymbol
        oValuePushSymbol
        [ oTypeStkChooseKind (tpInteger)
        | tpInteger:
        .tLiteralInteger
        oEmitValue
        % value emitted 25
        ] or >
        oValuePop
        >>
       ;ConstantOperand
       ] or >
       ] or >
       >>
      ;Operand
      @UnaryOperator
       [ (sInteger)
       | *:
       >>
      ;UnaryOperator
      @BinaryOperator
       [ (sInteger)
       | *:
       >>
      ;BinaryOperator
      [ (sInteger)
      | *:
      }
      @Operand
       [ (sInteger)
       | sInteger:
       oValuePushInteger
       oSymbolStkPush(syExpression)
       oTypeStkPush(tpInteger)
       oTypeStkLinkToStandardType(stdInteger)
       .tLiteralInteger
       oEmitValue
       % value emitted 1
       oValuePop
       ] or >
       >>
      ;Operand
      @UnaryOperator
       [ (sSubtract)
       | *:
       >>
      ;UnaryOperator
      @BinaryOperator
       [ (sSubtract)
       | sSubtract:
       .tSubtract
       oTypeStkPush(tpInteger)
       @CompareOperandAndResultTypes
        @CompareAndSwapTypes
         [ oTypeStkChooseKind (tpInteger)
         | tpInteger:
         oTypeStkSwap
         [ oTypeStkChooseKind (tpInteger)
         | tpInteger:
         ] or >
         ] or >
         >>
        ;CompareAndSwapTypes
        oTypeStkPop
        @CompareAndSwapTypes
         [ oTypeStkChooseKind (tpInteger)
         | tpInteger:
         oTypeStkSwap
         [ oTypeStkChooseKind (tpInteger)
         | tpInteger:
         ] or >
         ] or >
         >>
        ;CompareAndSwapTypes
        oTypeStkPop
        oSymbolStkPop
        oSymbolStkSetKind(syExpression)
        >>
       ;CompareOperandAndResultTypes
       ] or >
       oSymbolStkSetKind(syExpression)
       >>
      ;BinaryOperator
      [ (sExpnEnd)
      | sExpnEnd:
      ] or >
      >>
     ;Expression
     @TypeTblEnterIfNew
      [ oTypeStkChooseTypeReference (no)
      | no:
      oTypeTblEnter
      ] or >
      >>
     ;TypeTblEnterIfNew
     .tInitEnd
     .tLiteralAddress
     @EmitStore
      [ oTypeStkChooseKind (tpInteger)
      | tpInteger:
      .tStoreInteger
      ] or >
      >>
     ;EmitStore
     oSymbolStkPop
     ] or >
     @EnterVariableAttributes
      [ oSymbolStkChooseKind (syUndefined)
      | *:
      oSymbolStkSetKind(syVariable)
      [ oTypeStkChooseKind (tpInteger)
      | *:
      @AllocateVar
       [ oSymbolStkChooseKind (syVariable)
       | *:
       [ oTypeStkChooseKind (tpInteger)
       | tpInteger:
       oAllocateAlignOnWord
       oSymbolStkEnterDataAddress
       oAllocateVariable
       ] or >
       >>
      ;AllocateVar
      oSymbolStkEnterTypeReference
      oSymbolTblEnter
      >>
     ;EnterVariableAttributes
     oTypeStkPop
     oSymbolStkPop
     ] or >
     >>
    ;VariableDeclarations
    ] or >
    }
    [ (sWhileStmt)
    | sWhileStmt:
    @WhileStmt
     .tWhileBegin
     oFixPushTargetAddress
     @BooleanControlExpression
      @Expression
       @Operand
        [ (sIdentifier)
        | sIdentifier:
        oSymbolStkPushIdentifier
        [ oSymbolStkChooseKind (syVariable)
        | *:
        [ oSymbolStkChooseKind (syVariable)
        | syVariable:
        @Variable
         [ oSymbolStkChooseKind (syVariable)
         | syVariable:
         .tLiteralAddress
         oValuePushSymbol
         oEmitValue
         % value emitted 48
         oValuePop
         ] or >
         oTypeStkPushSymbol
         @VariableExtension
          [ (sInteger)
          | *:
          >>
         ;VariableExtension
         >>
        ;Variable
        @VariableOperand
         [ oTypeStkChooseKind (tpInteger)
         | tpInteger:
         .tFetchInteger
         ] or >
         >>
        ;VariableOperand
        ] or >
        ] or >
        >>
       ;Operand
       @UnaryOperator
        [ (sInteger)
        | *:
        >>
       ;UnaryOperator
       @BinaryOperator
        [ (sInteger)
        | *:
        >>
       ;BinaryOperator
       [ (sInteger)
       | *:
       }
       @Operand
        [ (sInteger)
        | sInteger:
        oValuePushInteger
        oSymbolStkPush(syExpression)
        oTypeStkPush(tpInteger)
        oTypeStkLinkToStandardType(stdInteger)
        .tLiteralInteger
        oEmitValue
        % value emitted 0
        oValuePop
        ] or >
        >>
       ;Operand
       @UnaryOperator
        [ (sGT)
        | *:
        >>
       ;UnaryOperator
       @BinaryOperator
        [ (sGT)
        | sGT:
        .tGT
        @CompareRelationalOperandTypes
         [ oTypeStkChooseKind (tpInteger)
         | tpInteger:
         oTypeStkPop
         [ oTypeStkChooseKind (tpInteger)
         | tpInteger:
         ] or >
         ] or >
         oTypeStkPop
         oTypeStkPush(tpBoolean)
         oSymbolStkPop
         oSymbolStkSetKind(syExpression)
         >>
        ;CompareRelationalOperandTypes
        ] or >
        oSymbolStkSetKind(syExpression)
        >>
       ;BinaryOperator
       [ (sExpnEnd)
       | sExpnEnd:
       ] or >
       >>
      ;Expression
      [ oTypeStkChooseKind (tpBoolean)
      | tpBoolean:
      ] or >
      oSymbolStkPop
      oTypeStkPop
      >>
     ;BooleanControlExpression
     .tWhileTest
     oFixPushForwardBranch
     oEmitNullAddress
     % value emitted -32767
     oFixSwap
     @Statement
      oSymbolTblPushScope
      @Block
       ?sBegin (sBegin)
       [ (sVar)
       | sVar:
       @VariableDeclarations
        [ (sIdentifier)
        | sIdentifier:
        oSymbolStkPushLocalIdentifier
        [ oSymbolStkChooseKind (syUndefined)
        | syUndefined:
        ] or >
        @PublicDefinition
         [ (sInitialValue)
         | *:
         >>
        ;PublicDefinition
        [ (sInitialValue)
        | sInitialValue:
        .tInitialValue
        @Expression
         @Operand
          [ (sInteger)
          | sInteger:
          oValuePushInteger
          oSymbolStkPush(syExpression)
          oTypeStkPush(tpInteger)
          oTypeStkLinkToStandardType(stdInteger)
          .tLiteralInteger
          oEmitValue
          % value emitted 1
          oValuePop
          ] or >
          >>
         ;Operand
         @UnaryOperator
          [ (sExpnEnd)
          | *:
          >>
         ;UnaryOperator
         @BinaryOperator
          [ (sExpnEnd)
          | *:
          >>
         ;BinaryOperator
         [ (sExpnEnd)
         | sExpnEnd:
         ] or >
         >>
        ;Expression
        @TypeTblEnterIfNew
         [ oTypeStkChooseTypeReference (yes)
         | *:
         >>
        ;TypeTblEnterIfNew
        .tInitEnd
        .tLiteralAddress
        @EmitStore
         [ oTypeStkChooseKind (tpInteger)
         | tpInteger:
         .tStoreInteger
         ] or >
         >>
        ;EmitStore
        oSymbolStkPop
        ] or >
        @EnterVariableAttributes
         [ oSymbolStkChooseKind (syUndefined)
         | *:
         oSymbolStkSetKind(syVariable)
         [ oTypeStkChooseKind (tpInteger)
         | *:
         @AllocateVar
          [ oSymbolStkChooseKind (syVariable)
          | *:
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          oAllocateAlignOnWord
          oSymbolStkEnterDataAddress
          oAllocateVariable
          ] or >
          >>
         ;AllocateVar
         oSymbolStkEnterTypeReference
         oSymbolTblEnter
         >>
        ;EnterVariableAttributes
        oTypeStkPop
        oSymbolStkPop
        ] or >
        >>
       ;VariableDeclarations
       ] or >
       }
       [ (sWhileStmt)
       | sWhileStmt:
       @WhileStmt
        .tWhileBegin
        oFixPushTargetAddress
        @BooleanControlExpression
         @Expression
          @Operand
           [ (sIdentifier)
           | sIdentifier:
           oSymbolStkPushIdentifier
           [ oSymbolStkChooseKind (syVariable)
           | *:
           [ oSymbolStkChooseKind (syVariable)
           | syVariable:
           @Variable
            [ oSymbolStkChooseKind (syVariable)
            | syVariable:
            .tLiteralAddress
            oValuePushSymbol
            oEmitValue
            % value emitted 52
            oValuePop
            ] or >
            oTypeStkPushSymbol
            @VariableExtension
             [ (sIdentifier)
             | *:
             >>
            ;VariableExtension
            >>
           ;Variable
           @VariableOperand
            [ oTypeStkChooseKind (tpInteger)
            | tpInteger:
            .tFetchInteger
            ] or >
            >>
           ;VariableOperand
           ] or >
           ] or >
           >>
          ;Operand
          @UnaryOperator
           [ (sIdentifier)
           | *:
           >>
          ;UnaryOperator
          @BinaryOperator
           [ (sIdentifier)
           | *:
           >>
          ;BinaryOperator
          [ (sIdentifier)
          | *:
          }
          @Operand
           [ (sIdentifier)
           | sIdentifier:
           oSymbolStkPushIdentifier
           [ oSymbolStkChooseKind (syConstant)
           | *:
           [ oSymbolStkChooseKind (syConstant)
           | syConstant:
           @ConstantOperand
            oTypeStkPushSymbol
            oValuePushSymbol
            [ oTypeStkChooseKind (tpInteger)
            | tpInteger:
            .tLiteralInteger
            oEmitValue
            % value emitted 25
            ] or >
            oValuePop
            >>
           ;ConstantOperand
           ] or >
           ] or >
           >>
          ;Operand
          @UnaryOperator
           [ (sLT)
           | *:
           >>
          ;UnaryOperator
          @BinaryOperator
           [ (sLT)
           | sLT:
           .tLT
           @CompareRelationalOperandTypes
            [ oTypeStkChooseKind (tpInteger)
            | tpInteger:
            oTypeStkPop
            [ oTypeStkChooseKind (tpInteger)
            | tpInteger:
            ] or >
            ] or >
            oTypeStkPop
            oTypeStkPush(tpBoolean)
            oSymbolStkPop
            oSymbolStkSetKind(syExpression)
            >>
           ;CompareRelationalOperandTypes
           ] or >
           oSymbolStkSetKind(syExpression)
           >>
          ;BinaryOperator
          [ (sExpnEnd)
          | sExpnEnd:
          ] or >
          >>
         ;Expression
         [ oTypeStkChooseKind (tpBoolean)
         | tpBoolean:
         ] or >
         oSymbolStkPop
         oTypeStkPop
         >>
        ;BooleanControlExpression
        .tWhileTest
        oFixPushForwardBranch
        oEmitNullAddress
        % value emitted -32767
        oFixSwap
        @Statement
         oSymbolTblPushScope
         @Block
          ?sBegin (sBegin)
          [ (sVar)
          | sVar:
          @VariableDeclarations
           [ (sIdentifier)
           | sIdentifier:
           oSymbolStkPushLocalIdentifier
           [ oSymbolStkChooseKind (syUndefined)
           | syUndefined:
           ] or >
           @PublicDefinition
            [ (sLike)
            | *:
            >>
           ;PublicDefinition
           [ (sLike)
           | *:
           @TypeBody
            [ (sLike)
            | *:
            @SimpleType
             ?sLike (sLike)
             [ (sIdentifier)
             | sIdentifier:
             oSymbolStkPushIdentifier
             [ oSymbolStkChooseKind (syConstant)
             | syConstant:
             oTypeStkPushSymbol
             ] or >
             oSymbolStkPop
             ] or >
             >>
            ;SimpleType
            @TypeTblEnterIfNew
             [ oTypeStkChooseTypeReference (yes)
             | *:
             >>
            ;TypeTblEnterIfNew
            >>
           ;TypeBody
           @EnterVariableAttributes
            [ oSymbolStkChooseKind (syUndefined)
            | *:
            oSymbolStkSetKind(syVariable)
            [ oTypeStkChooseKind (tpBoolean)
            | *:
            @AllocateVar
             [ oSymbolStkChooseKind (syVariable)
             | *:
             [ oTypeStkChooseKind (tpBoolean)
             | tpBoolean:
             oSymbolStkEnterDataAddress
             oAllocateVariable
             ] or >
             >>
            ;AllocateVar
            oSymbolStkEnterTypeReference
            oSymbolTblEnter
            >>
           ;EnterVariableAttributes
           oTypeStkPop
           oSymbolStkPop
           ] or >
           >>
          ;VariableDeclarations
          ] or >
          }
          [ (sCallStmt)
          | sCallStmt:
          @CallStmt
           ?sIdentifier (sIdentifier)
           oSymbolStkPushIdentifier
           [ oSymbolStkChooseKind (syProcedure)
           | *:
           [ oSymbolStkChooseKind (syProcedure)
           | syProcedure:
           [ oSymbolStkChooseStandardRoutine (rtNull)
           | *:
           .tCallBegin
           oTypeStkPushSymbol
           [ oTypeStkChooseRecursionFlag (no)
           | *:
           @ActualParameters
            oCountPush(zero)
            [ (sIdentifier)
            | *:
            [ oTypeStkCompareParameterCount (no)
            | *:
            oCountIncrement
            oSymbolStkPushFormalParameter
            oTypeStkPushSymbol
            [ oSymbolStkChooseKind (syVariable)
            | syVariable:
            @Expression
             @Operand
              [ (sIdentifier)
              | sIdentifier:
              oSymbolStkPushIdentifier
              [ oSymbolStkChooseKind (syVariable)
              | *:
              [ oSymbolStkChooseKind (syVariable)
              | syVariable:
              @Variable
               [ oSymbolStkChooseKind (syVariable)
               | syVariable:
               .tLiteralAddress
               oValuePushSymbol
               oEmitValue
               % value emitted 52
               oValuePop
               ] or >
               oTypeStkPushSymbol
               @VariableExtension
                [ (sExpnEnd)
                | *:
                >>
               ;VariableExtension
               >>
              ;Variable
              @VariableOperand
               [ oTypeStkChooseKind (tpInteger)
               | tpInteger:
               .tFetchInteger
               ] or >
               >>
              ;VariableOperand
              ] or >
              ] or >
              >>
             ;Operand
             @UnaryOperator
              [ (sExpnEnd)
              | *:
              >>
             ;UnaryOperator
             @BinaryOperator
              [ (sExpnEnd)
              | *:
              >>
             ;BinaryOperator
             [ (sExpnEnd)
             | sExpnEnd:
             ] or >
             >>
            ;Expression
            @CompareAndSwapTypes
             [ oTypeStkChooseKind (tpInteger)
             | tpInteger:
             oTypeStkSwap
             [ oTypeStkChooseKind (tpInteger)
             | tpInteger:
             ] or >
             ] or >
             >>
            ;CompareAndSwapTypes
            ] or >
            oSymbolStkPop
            oTypeStkPop
            oSymbolStkPop
            oTypeStkPop
            .tParmEnd
            }
            [ (sIdentifier)
            | *:
            [ oTypeStkCompareParameterCount (no)
            | *:
            oCountIncrement
            oSymbolStkPushFormalParameter
            oTypeStkPushSymbol
            [ oSymbolStkChooseKind (syVariable)
            | syVariable:
            @Expression
             @Operand
              [ (sIdentifier)
              | sIdentifier:
              oSymbolStkPushIdentifier
              [ oSymbolStkChooseKind (syVariable)
              | *:
              [ oSymbolStkChooseKind (syVariable)
              | syVariable:
              @Variable
               [ oSymbolStkChooseKind (syVariable)
               | syVariable:
               .tLiteralAddress
               oValuePushSymbol
               oEmitValue
               % value emitted 52
               oValuePop
               ] or >
               oTypeStkPushSymbol
               @VariableExtension
                [ (sInteger)
                | *:
                >>
               ;VariableExtension
               >>
              ;Variable
              @VariableOperand
               [ oTypeStkChooseKind (tpInteger)
               | tpInteger:
               .tFetchInteger
               ] or >
               >>
              ;VariableOperand
              ] or >
              ] or >
              >>
             ;Operand
             @UnaryOperator
              [ (sInteger)
              | *:
              >>
             ;UnaryOperator
             @BinaryOperator
              [ (sInteger)
              | *:
              >>
             ;BinaryOperator
             [ (sInteger)
             | *:
             }
             @Operand
              [ (sInteger)
              | sInteger:
              oValuePushInteger
              oSymbolStkPush(syExpression)
              oTypeStkPush(tpInteger)
              oTypeStkLinkToStandardType(stdInteger)
              .tLiteralInteger
              oEmitValue
              % value emitted 1
              oValuePop
              ] or >
              >>
             ;Operand
             @UnaryOperator
              [ (sAdd)
              | *:
              >>
             ;UnaryOperator
             @BinaryOperator
              [ (sAdd)
              | sAdd:
              .tAdd
              oTypeStkPush(tpInteger)
              @CompareOperandAndResultTypes
               @CompareAndSwapTypes
                [ oTypeStkChooseKind (tpInteger)
                | tpInteger:
                oTypeStkSwap
                [ oTypeStkChooseKind (tpInteger)
                | tpInteger:
                ] or >
                ] or >
                >>
               ;CompareAndSwapTypes
               oTypeStkPop
               @CompareAndSwapTypes
                [ oTypeStkChooseKind (tpInteger)
                | tpInteger:
                oTypeStkSwap
                [ oTypeStkChooseKind (tpInteger)
                | tpInteger:
                ] or >
                ] or >
                >>
               ;CompareAndSwapTypes
               oTypeStkPop
               oSymbolStkPop
               oSymbolStkSetKind(syExpression)
               >>
              ;CompareOperandAndResultTypes
              ] or >
              oSymbolStkSetKind(syExpression)
              >>
             ;BinaryOperator
             [ (sExpnEnd)
             | sExpnEnd:
             ] or >
             >>
            ;Expression
            @CompareAndSwapTypes
             [ oTypeStkChooseKind (tpInteger)
             | tpInteger:
             oTypeStkSwap
             [ oTypeStkChooseKind (tpInteger)
             | tpInteger:
             ] or >
             ] or >
             >>
            ;CompareAndSwapTypes
            ] or >
            oSymbolStkPop
            oTypeStkPop
            oSymbolStkPop
            oTypeStkPop
            .tParmEnd
            }
            [ (sIdentifier)
            | *:
            [ oTypeStkCompareParameterCount (no)
            | *:
            oCountIncrement
            oSymbolStkPushFormalParameter
            oTypeStkPushSymbol
            [ oSymbolStkChooseKind (syVarParameter)
            | syVarParameter:
            @VarActual
             [ (sIdentifier)
             | sIdentifier:
             oSymbolStkPushIdentifier
             @Variable
              [ oSymbolStkChooseKind (syVariable)
              | syVariable:
              .tLiteralAddress
              oValuePushSymbol
              oEmitValue
              % value emitted 56
              oValuePop
              ] or >
              oTypeStkPushSymbol
              @VariableExtension
               [ (sExpnEnd)
               | *:
               >>
              ;VariableExtension
              >>
             ;Variable
             .tVarParm
             [ oTypeStkCompareNames (yes)
             | yes:
             ] or >
             [ (sExpnEnd)
             | sExpnEnd:
             ] or >
             ] or >
             >>
            ;VarActual
            ] or >
            oSymbolStkPop
            oTypeStkPop
            oSymbolStkPop
            oTypeStkPop
            .tParmEnd
            }
            [ (sParmEnd)
            | sParmEnd:
            ] or >
            [ oTypeStkCompareParameterCount (yes)
            | yes:
            ] or >
            oCountPop
            >>
           ;ActualParameters
           .tCallEnd
           oValuePushSymbol
           oEmitValue
           % value emitted 26
           oValuePop
           oTypeStkPop
           ] or >
           oSymbolStkPop
           >>
          ;CallStmt
          ] or >
          }
          [ (sIfStmt)
          | sIfStmt:
          @IfStmt
           .tIfBegin
           @BooleanControlExpression
            @Expression
             @Operand
              [ (sIdentifier)
              | sIdentifier:
              oSymbolStkPushIdentifier
              [ oSymbolStkChooseKind (syVariable)
              | *:
              [ oSymbolStkChooseKind (syVariable)
              | syVariable:
              @Variable
               [ oSymbolStkChooseKind (syVariable)
               | syVariable:
               .tLiteralAddress
               oValuePushSymbol
               oEmitValue
               % value emitted 56
               oValuePop
               ] or >
               oTypeStkPushSymbol
               @VariableExtension
                [ (sNot)
                | *:
                >>
               ;VariableExtension
               >>
              ;Variable
              @VariableOperand
               [ oTypeStkChooseKind (tpBoolean)
               | tpBoolean:
               .tFetchBoolean
               ] or >
               >>
              ;VariableOperand
              ] or >
              ] or >
              >>
             ;Operand
             @UnaryOperator
              [ (sNot)
              | sNot:
              .tNot
              oTypeStkPush(tpBoolean)
              @CompareAndSwapTypes
               [ oTypeStkChooseKind (tpBoolean)
               | tpBoolean:
               oTypeStkSwap
               [ oTypeStkChooseKind (tpBoolean)
               | tpBoolean:
               ] or >
               ] or >
               >>
              ;CompareAndSwapTypes
              oTypeStkPop
              ] or >
              oSymbolStkSetKind(syExpression)
              >>
             ;UnaryOperator
             @BinaryOperator
              [ (sExpnEnd)
              | *:
              >>
             ;BinaryOperator
             [ (sExpnEnd)
             | sExpnEnd:
             ] or >
             >>
            ;Expression
            [ oTypeStkChooseKind (tpBoolean)
            | tpBoolean:
            ] or >
            oSymbolStkPop
            oTypeStkPop
            >>
           ;BooleanControlExpression
           ?sThen (sThen)
           .tIfThen
           oFixPushForwardBranch
           oEmitNullAddress
           % value emitted -32767
           @Statement
            oSymbolTblPushScope
            @Block
             ?sBegin (sBegin)
             [ (sCallStmt)
             | sCallStmt:
             @CallStmt
              ?sIdentifier (sIdentifier)
              oSymbolStkPushIdentifier
              [ oSymbolStkChooseKind (syProcedure)
              | *:
              [ oSymbolStkChooseKind (syProcedure)
              | syProcedure:
              [ oSymbolStkChooseStandardRoutine (rtNull)
              | *:
              .tCallBegin
              oTypeStkPushSymbol
              [ oTypeStkChooseRecursionFlag (no)
              | *:
              @ActualParameters
               oCountPush(zero)
               [ (sIdentifier)
               | *:
               [ oTypeStkCompareParameterCount (no)
               | *:
               oCountIncrement
               oSymbolStkPushFormalParameter
               oTypeStkPushSymbol
               [ oSymbolStkChooseKind (syVariable)
               | syVariable:
               @Expression
                @Operand
                 [ (sIdentifier)
                 | sIdentifier:
                 oSymbolStkPushIdentifier
                 [ oSymbolStkChooseKind (syVariable)
                 | *:
                 [ oSymbolStkChooseKind (syVariable)
                 | syVariable:
                 @Variable
                  [ oSymbolStkChooseKind (syVariable)
                  | syVariable:
                  .tLiteralAddress
                  oValuePushSymbol
                  oEmitValue
                  % value emitted 52
                  oValuePop
                  ] or >
                  oTypeStkPushSymbol
                  @VariableExtension
                   [ (sExpnEnd)
                   | *:
                   >>
                  ;VariableExtension
                  >>
                 ;Variable
                 @VariableOperand
                  [ oTypeStkChooseKind (tpInteger)
                  | tpInteger:
                  .tFetchInteger
                  ] or >
                  >>
                 ;VariableOperand
                 ] or >
                 ] or >
                 >>
                ;Operand
                @UnaryOperator
                 [ (sExpnEnd)
                 | *:
                 >>
                ;UnaryOperator
                @BinaryOperator
                 [ (sExpnEnd)
                 | *:
                 >>
                ;BinaryOperator
                [ (sExpnEnd)
                | sExpnEnd:
                ] or >
                >>
               ;Expression
               @CompareAndSwapTypes
                [ oTypeStkChooseKind (tpInteger)
                | tpInteger:
                oTypeStkSwap
                [ oTypeStkChooseKind (tpInteger)
                | tpInteger:
                ] or >
                ] or >
                >>
               ;CompareAndSwapTypes
               ] or >
               oSymbolStkPop
               oTypeStkPop
               oSymbolStkPop
               oTypeStkPop
               .tParmEnd
               }
               [ (sIdentifier)
               | *:
               [ oTypeStkCompareParameterCount (no)
               | *:
               oCountIncrement
               oSymbolStkPushFormalParameter
               oTypeStkPushSymbol
               [ oSymbolStkChooseKind (syVariable)
               | syVariable:
               @Expression
                @Operand
                 [ (sIdentifier)
                 | sIdentifier:
                 oSymbolStkPushIdentifier
                 [ oSymbolStkChooseKind (syVariable)
                 | *:
                 [ oSymbolStkChooseKind (syVariable)
                 | syVariable:
                 @Variable
                  [ oSymbolStkChooseKind (syVariable)
                  | syVariable:
                  .tLiteralAddress
                  oValuePushSymbol
                  oEmitValue
                  % value emitted 52
                  oValuePop
                  ] or >
                  oTypeStkPushSymbol
                  @VariableExtension
                   [ (sInteger)
                   | *:
                   >>
                  ;VariableExtension
                  >>
                 ;Variable
                 @VariableOperand
                  [ oTypeStkChooseKind (tpInteger)
                  | tpInteger:
                  .tFetchInteger
                  ] or >
                  >>
                 ;VariableOperand
                 ] or >
                 ] or >
                 >>
                ;Operand
                @UnaryOperator
                 [ (sInteger)
                 | *:
                 >>
                ;UnaryOperator
                @BinaryOperator
                 [ (sInteger)
                 | *:
                 >>
                ;BinaryOperator
                [ (sInteger)
                | *:
                }
                @Operand
                 [ (sInteger)
                 | sInteger:
                 oValuePushInteger
                 oSymbolStkPush(syExpression)
                 oTypeStkPush(tpInteger)
                 oTypeStkLinkToStandardType(stdInteger)
                 .tLiteralInteger
                 oEmitValue
                 % value emitted 1
                 oValuePop
                 ] or >
                 >>
                ;Operand
                @UnaryOperator
                 [ (sAdd)
                 | *:
                 >>
                ;UnaryOperator
                @BinaryOperator
                 [ (sAdd)
                 | sAdd:
                 .tAdd
                 oTypeStkPush(tpInteger)
                 @CompareOperandAndResultTypes
                  @CompareAndSwapTypes
                   [ oTypeStkChooseKind (tpInteger)
                   | tpInteger:
                   oTypeStkSwap
                   [ oTypeStkChooseKind (tpInteger)
                   | tpInteger:
                   ] or >
                   ] or >
                   >>
                  ;CompareAndSwapTypes
                  oTypeStkPop
                  @CompareAndSwapTypes
                   [ oTypeStkChooseKind (tpInteger)
                   | tpInteger:
                   oTypeStkSwap
                   [ oTypeStkChooseKind (tpInteger)
                   | tpInteger:
                   ] or >
                   ] or >
                   >>
                  ;CompareAndSwapTypes
                  oTypeStkPop
                  oSymbolStkPop
                  oSymbolStkSetKind(syExpression)
                  >>
                 ;CompareOperandAndResultTypes
                 ] or >
                 oSymbolStkSetKind(syExpression)
                 >>
                ;BinaryOperator
                [ (sExpnEnd)
                | sExpnEnd:
                ] or >
                >>
               ;Expression
               @CompareAndSwapTypes
                [ oTypeStkChooseKind (tpInteger)
                | tpInteger:
                oTypeStkSwap
                [ oTypeStkChooseKind (tpInteger)
                | tpInteger:
                ] or >
                ] or >
                >>
               ;CompareAndSwapTypes
               ] or >
               oSymbolStkPop
               oTypeStkPop
               oSymbolStkPop
               oTypeStkPop
               .tParmEnd
               }
               [ (sParmEnd)
               | sParmEnd:
               ] or >
               [ oTypeStkCompareParameterCount (yes)
               | yes:
               ] or >
               oCountPop
               >>
              ;ActualParameters
              .tCallEnd
              oValuePushSymbol
              oEmitValue
              % value emitted 76
              oValuePop
              oTypeStkPop
              ] or >
              oSymbolStkPop
              >>
             ;CallStmt
             ] or >
             }
             [ (sEnd)
             | *:
             ] or >
             ?sEnd (sEnd)
             >>
            ;Block
            oSymbolTblPopScope
            >>
           ;Statement
           [ (sAssignmentStmt)
           | *:
           .tIfEnd
           oFixPopForwardBranch
           >>
          ;IfStmt
          ] or >
          }
          [ (sAssignmentStmt)
          | sAssignmentStmt:
          @AssignmentStmt
           ?sIdentifier (sIdentifier)
           oSymbolStkPushIdentifier
           .tAssignBegin
           @Variable
            [ oSymbolStkChooseKind (syVariable)
            | syVariable:
            .tLiteralAddress
            oValuePushSymbol
            oEmitValue
            % value emitted 52
            oValuePop
            ] or >
            oTypeStkPushSymbol
            @VariableExtension
             [ (sIdentifier)
             | *:
             >>
            ;VariableExtension
            >>
           ;Variable
           [ oTypeStkChooseKind (tpInteger)
           | *:
           @Expression
            @Operand
             [ (sIdentifier)
             | sIdentifier:
             oSymbolStkPushIdentifier
             [ oSymbolStkChooseKind (syVariable)
             | *:
             [ oSymbolStkChooseKind (syVariable)
             | syVariable:
             @Variable
              [ oSymbolStkChooseKind (syVariable)
              | syVariable:
              .tLiteralAddress
              oValuePushSymbol
              oEmitValue
              % value emitted 52
              oValuePop
              ] or >
              oTypeStkPushSymbol
              @VariableExtension
               [ (sInteger)
               | *:
               >>
              ;VariableExtension
              >>
             ;Variable
             @VariableOperand
              [ oTypeStkChooseKind (tpInteger)
              | tpInteger:
              .tFetchInteger
              ] or >
              >>
             ;VariableOperand
             ] or >
             ] or >
             >>
            ;Operand
            @UnaryOperator
             [ (sInteger)
             | *:
             >>
            ;UnaryOperator
            @BinaryOperator
             [ (sInteger)
             | *:
             >>
            ;BinaryOperator
            [ (sInteger)
            | *:
            }
            @Operand
             [ (sInteger)
             | sInteger:
             oValuePushInteger
             oSymbolStkPush(syExpression)
             oTypeStkPush(tpInteger)
             oTypeStkLinkToStandardType(stdInteger)
             .tLiteralInteger
             oEmitValue
             % value emitted 1
             oValuePop
             ] or >
             >>
            ;Operand
            @UnaryOperator
             [ (sAdd)
             | *:
             >>
            ;UnaryOperator
            @BinaryOperator
             [ (sAdd)
             | sAdd:
             .tAdd
             oTypeStkPush(tpInteger)
             @CompareOperandAndResultTypes
              @CompareAndSwapTypes
               [ oTypeStkChooseKind (tpInteger)
               | tpInteger:
               oTypeStkSwap
               [ oTypeStkChooseKind (tpInteger)
               | tpInteger:
               ] or >
               ] or >
               >>
              ;CompareAndSwapTypes
              oTypeStkPop
              @CompareAndSwapTypes
               [ oTypeStkChooseKind (tpInteger)
               | tpInteger:
               oTypeStkSwap
               [ oTypeStkChooseKind (tpInteger)
               | tpInteger:
               ] or >
               ] or >
               >>
              ;CompareAndSwapTypes
              oTypeStkPop
              oSymbolStkPop
              oSymbolStkSetKind(syExpression)
              >>
             ;CompareOperandAndResultTypes
             ] or >
             oSymbolStkSetKind(syExpression)
             >>
            ;BinaryOperator
            [ (sExpnEnd)
            | sExpnEnd:
            ] or >
            >>
           ;Expression
           @CompareAndSwapTypes
            [ oTypeStkChooseKind (tpInteger)
            | tpInteger:
            oTypeStkSwap
            [ oTypeStkChooseKind (tpInteger)
            | tpInteger:
            ] or >
            ] or >
            >>
           ;CompareAndSwapTypes
           @EmitAssign
            [ oTypeStkChooseKind (tpInteger)
            | tpInteger:
            .tAssignInteger
            ] or >
            >>
           ;EmitAssign
           oTypeStkPop
           oSymbolStkPop
           oTypeStkPop
           oSymbolStkPop
           >>
          ;AssignmentStmt
          ] or >
          }
          [ (sEnd)
          | *:
          ] or >
          ?sEnd (sEnd)
          >>
         ;Block
         oSymbolTblPopScope
         >>
        ;Statement
        .tWhileEnd
        oFixPopTargetAddress
        % value emitted 253
        oFixPopForwardBranch
        >>
       ;WhileStmt
       ] or >
       }
       [ (sAssignmentStmt)
       | sAssignmentStmt:
       @AssignmentStmt
        ?sIdentifier (sIdentifier)
        oSymbolStkPushIdentifier
        .tAssignBegin
        @Variable
         [ oSymbolStkChooseKind (syVariable)
         | syVariable:
         .tLiteralAddress
         oValuePushSymbol
         oEmitValue
         % value emitted 48
         oValuePop
         ] or >
         oTypeStkPushSymbol
         @VariableExtension
          [ (sIdentifier)
          | *:
          >>
         ;VariableExtension
         >>
        ;Variable
        [ oTypeStkChooseKind (tpInteger)
        | *:
        @Expression
         @Operand
          [ (sIdentifier)
          | sIdentifier:
          oSymbolStkPushIdentifier
          [ oSymbolStkChooseKind (syVariable)
          | *:
          [ oSymbolStkChooseKind (syVariable)
          | syVariable:
          @Variable
           [ oSymbolStkChooseKind (syVariable)
           | syVariable:
           .tLiteralAddress
           oValuePushSymbol
           oEmitValue
           % value emitted 48
           oValuePop
           ] or >
           oTypeStkPushSymbol
           @VariableExtension
            [ (sInteger)
            | *:
            >>
           ;VariableExtension
           >>
          ;Variable
          @VariableOperand
           [ oTypeStkChooseKind (tpInteger)
           | tpInteger:
           .tFetchInteger
           ] or >
           >>
          ;VariableOperand
          ] or >
          ] or >
          >>
         ;Operand
         @UnaryOperator
          [ (sInteger)
          | *:
          >>
         ;UnaryOperator
         @BinaryOperator
          [ (sInteger)
          | *:
          >>
         ;BinaryOperator
         [ (sInteger)
         | *:
         }
         @Operand
          [ (sInteger)
          | sInteger:
          oValuePushInteger
          oSymbolStkPush(syExpression)
          oTypeStkPush(tpInteger)
          oTypeStkLinkToStandardType(stdInteger)
          .tLiteralInteger
          oEmitValue
          % value emitted 1
          oValuePop
          ] or >
          >>
         ;Operand
         @UnaryOperator
          [ (sSubtract)
          | *:
          >>
         ;UnaryOperator
         @BinaryOperator
          [ (sSubtract)
          | sSubtract:
          .tSubtract
          oTypeStkPush(tpInteger)
          @CompareOperandAndResultTypes
           @CompareAndSwapTypes
            [ oTypeStkChooseKind (tpInteger)
            | tpInteger:
            oTypeStkSwap
            [ oTypeStkChooseKind (tpInteger)
            | tpInteger:
            ] or >
            ] or >
            >>
           ;CompareAndSwapTypes
           oTypeStkPop
           @CompareAndSwapTypes
            [ oTypeStkChooseKind (tpInteger)
            | tpInteger:
            oTypeStkSwap
            [ oTypeStkChooseKind (tpInteger)
            | tpInteger:
            ] or >
            ] or >
            >>
           ;CompareAndSwapTypes
           oTypeStkPop
           oSymbolStkPop
           oSymbolStkSetKind(syExpression)
           >>
          ;CompareOperandAndResultTypes
          ] or >
          oSymbolStkSetKind(syExpression)
          >>
         ;BinaryOperator
         [ (sExpnEnd)
         | sExpnEnd:
         ] or >
         >>
        ;Expression
        @CompareAndSwapTypes
         [ oTypeStkChooseKind (tpInteger)
         | tpInteger:
         oTypeStkSwap
         [ oTypeStkChooseKind (tpInteger)
         | tpInteger:
         ] or >
         ] or >
         >>
        ;CompareAndSwapTypes
        @EmitAssign
         [ oTypeStkChooseKind (tpInteger)
         | tpInteger:
         .tAssignInteger
         ] or >
         >>
        ;EmitAssign
        oTypeStkPop
        oSymbolStkPop
        oTypeStkPop
        oSymbolStkPop
        >>
       ;AssignmentStmt
       ] or >
       }
       [ (sEnd)
       | *:
       ] or >
       ?sEnd (sEnd)
       >>
      ;Block
      oSymbolTblPopScope
      >>
     ;Statement
     .tWhileEnd
     oFixPopTargetAddress
     % value emitted 234
     oFixPopForwardBranch
     >>
    ;WhileStmt
    ] or >
    }
    [ (sEnd)
    | *:
    ] or >
    ?sEnd (sEnd)
    >>
   ;Block
   oTypeStkSetRecursionFlag(no)
   oTypeTblUpdate
   oTypeStkPop
   oSymbolTblUpdate
   oSymbolStkPop
   oSymbolTblPopScope
   oSymbolTblPreserveParameters
   .tProcedureEnd
   oFixPopForwardBranch
   >>
  ;ProcedureDefinition
  ] or >
  }
  [ (sAssignmentStmt)
  | sAssignmentStmt:
  @AssignmentStmt
   ?sIdentifier (sIdentifier)
   oSymbolStkPushIdentifier
   .tAssignBegin
   @Variable
    [ oSymbolStkChooseKind (syVariable)
    | syVariable:
    .tLiteralAddress
    oValuePushSymbol
    oEmitValue
    % value emitted 4
    oValuePop
    ] or >
    oTypeStkPushSymbol
    @VariableExtension
     [ (sSubscript)
     | sSubscript:
     .tSubscriptBegin
     @Expression
      @Operand
       [ (sInteger)
       | sInteger:
       oValuePushInteger
       oSymbolStkPush(syExpression)
       oTypeStkPush(tpInteger)
       oTypeStkLinkToStandardType(stdInteger)
       .tLiteralInteger
       oEmitValue
       % value emitted 1
       oValuePop
       ] or >
       >>
      ;Operand
      @UnaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;UnaryOperator
      @BinaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;BinaryOperator
      [ (sExpnEnd)
      | sExpnEnd:
      ] or >
      >>
     ;Expression
     [ oTypeStkChooseKind (tpInteger)
     | tpInteger:
     ] or >
     oSymbolStkPop
     oTypeStkPop
     [ oTypeStkChooseKind (tpArray)
     | tpArray:
     oTypeStkPushComponent
     oTypeStkSwap
     oTypeStkPop
     ] or >
     [ oTypeStkChooseKind (tpInteger)
     | tpInteger:
     .tSubscriptInteger
     ] or >
     ] or >
     >>
    ;VariableExtension
    >>
   ;Variable
   [ oTypeStkChooseKind (tpInteger)
   | *:
   @Expression
    @Operand
     [ (sInteger)
     | sInteger:
     oValuePushInteger
     oSymbolStkPush(syExpression)
     oTypeStkPush(tpInteger)
     oTypeStkLinkToStandardType(stdInteger)
     .tLiteralInteger
     oEmitValue
     % value emitted 61
     oValuePop
     ] or >
     >>
    ;Operand
    @UnaryOperator
     [ (sExpnEnd)
     | *:
     >>
    ;UnaryOperator
    @BinaryOperator
     [ (sExpnEnd)
     | *:
     >>
    ;BinaryOperator
    [ (sExpnEnd)
    | sExpnEnd:
    ] or >
    >>
   ;Expression
   @CompareAndSwapTypes
    [ oTypeStkChooseKind (tpInteger)
    | tpInteger:
    oTypeStkSwap
    [ oTypeStkChooseKind (tpInteger)
    | tpInteger:
    ] or >
    ] or >
    >>
   ;CompareAndSwapTypes
   @EmitAssign
    [ oTypeStkChooseKind (tpInteger)
    | tpInteger:
    .tAssignInteger
    ] or >
    >>
   ;EmitAssign
   oTypeStkPop
   oSymbolStkPop
   oTypeStkPop
   oSymbolStkPop
   >>
  ;AssignmentStmt
  ] or >
  }
  [ (sVar)
  | sVar:
  @VariableDeclarations
   [ (sIdentifier)
   | sIdentifier:
   oSymbolStkPushLocalIdentifier
   [ oSymbolStkChooseKind (syUndefined)
   | syUndefined:
   ] or >
   @PublicDefinition
    [ (sInitialValue)
    | *:
    >>
   ;PublicDefinition
   [ (sInitialValue)
   | sInitialValue:
   .tInitialValue
   @Expression
    @Operand
     [ (sInteger)
     | sInteger:
     oValuePushInteger
     oSymbolStkPush(syExpression)
     oTypeStkPush(tpInteger)
     oTypeStkLinkToStandardType(stdInteger)
     .tLiteralInteger
     oEmitValue
     % value emitted 1
     oValuePop
     ] or >
     >>
    ;Operand
    @UnaryOperator
     [ (sExpnEnd)
     | *:
     >>
    ;UnaryOperator
    @BinaryOperator
     [ (sExpnEnd)
     | *:
     >>
    ;BinaryOperator
    [ (sExpnEnd)
    | sExpnEnd:
    ] or >
    >>
   ;Expression
   @TypeTblEnterIfNew
    [ oTypeStkChooseTypeReference (yes)
    | *:
    >>
   ;TypeTblEnterIfNew
   .tInitEnd
   .tLiteralAddress
   @EmitStore
    [ oTypeStkChooseKind (tpInteger)
    | tpInteger:
    .tStoreInteger
    ] or >
    >>
   ;EmitStore
   oSymbolStkPop
   ] or >
   @EnterVariableAttributes
    [ oSymbolStkChooseKind (syUndefined)
    | *:
    oSymbolStkSetKind(syVariable)
    [ oTypeStkChooseKind (tpInteger)
    | *:
    @AllocateVar
     [ oSymbolStkChooseKind (syVariable)
     | *:
     [ oTypeStkChooseKind (tpInteger)
     | tpInteger:
     oAllocateAlignOnWord
     oSymbolStkEnterDataAddress
     oAllocateVariable
     ] or >
     >>
    ;AllocateVar
    oSymbolStkEnterTypeReference
    oSymbolTblEnter
    >>
   ;EnterVariableAttributes
   oTypeStkPop
   oSymbolStkPop
   ] or >
   >>
  ;VariableDeclarations
  ] or >
  }
  [ (sRepeatStmt)
  | sRepeatStmt:
  @RepeatStmt
   .tRepeatBegin
   oFixPushTargetAddress
   [ (sBegin)
   | *:
   @Statement
    oSymbolTblPushScope
    @Block
     ?sBegin (sBegin)
     [ (sAssignmentStmt)
     | sAssignmentStmt:
     @AssignmentStmt
      ?sIdentifier (sIdentifier)
      oSymbolStkPushIdentifier
      .tAssignBegin
      @Variable
       [ oSymbolStkChooseKind (syVariable)
       | syVariable:
       .tLiteralAddress
       oValuePushSymbol
       oEmitValue
       % value emitted 60
       oValuePop
       ] or >
       oTypeStkPushSymbol
       @VariableExtension
        [ (sIdentifier)
        | *:
        >>
       ;VariableExtension
       >>
      ;Variable
      [ oTypeStkChooseKind (tpInteger)
      | *:
      @Expression
       @Operand
        [ (sIdentifier)
        | sIdentifier:
        oSymbolStkPushIdentifier
        [ oSymbolStkChooseKind (syVariable)
        | *:
        [ oSymbolStkChooseKind (syVariable)
        | syVariable:
        @Variable
         [ oSymbolStkChooseKind (syVariable)
         | syVariable:
         .tLiteralAddress
         oValuePushSymbol
         oEmitValue
         % value emitted 60
         oValuePop
         ] or >
         oTypeStkPushSymbol
         @VariableExtension
          [ (sInteger)
          | *:
          >>
         ;VariableExtension
         >>
        ;Variable
        @VariableOperand
         [ oTypeStkChooseKind (tpInteger)
         | tpInteger:
         .tFetchInteger
         ] or >
         >>
        ;VariableOperand
        ] or >
        ] or >
        >>
       ;Operand
       @UnaryOperator
        [ (sInteger)
        | *:
        >>
       ;UnaryOperator
       @BinaryOperator
        [ (sInteger)
        | *:
        >>
       ;BinaryOperator
       [ (sInteger)
       | *:
       }
       @Operand
        [ (sInteger)
        | sInteger:
        oValuePushInteger
        oSymbolStkPush(syExpression)
        oTypeStkPush(tpInteger)
        oTypeStkLinkToStandardType(stdInteger)
        .tLiteralInteger
        oEmitValue
        % value emitted 1
        oValuePop
        ] or >
        >>
       ;Operand
       @UnaryOperator
        [ (sAdd)
        | *:
        >>
       ;UnaryOperator
       @BinaryOperator
        [ (sAdd)
        | sAdd:
        .tAdd
        oTypeStkPush(tpInteger)
        @CompareOperandAndResultTypes
         @CompareAndSwapTypes
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          oTypeStkSwap
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          ] or >
          ] or >
          >>
         ;CompareAndSwapTypes
         oTypeStkPop
         @CompareAndSwapTypes
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          oTypeStkSwap
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          ] or >
          ] or >
          >>
         ;CompareAndSwapTypes
         oTypeStkPop
         oSymbolStkPop
         oSymbolStkSetKind(syExpression)
         >>
        ;CompareOperandAndResultTypes
        ] or >
        oSymbolStkSetKind(syExpression)
        >>
       ;BinaryOperator
       [ (sExpnEnd)
       | sExpnEnd:
       ] or >
       >>
      ;Expression
      @CompareAndSwapTypes
       [ oTypeStkChooseKind (tpInteger)
       | tpInteger:
       oTypeStkSwap
       [ oTypeStkChooseKind (tpInteger)
       | tpInteger:
       ] or >
       ] or >
       >>
      ;CompareAndSwapTypes
      @EmitAssign
       [ oTypeStkChooseKind (tpInteger)
       | tpInteger:
       .tAssignInteger
       ] or >
       >>
      ;EmitAssign
      oTypeStkPop
      oSymbolStkPop
      oTypeStkPop
      oSymbolStkPop
      >>
     ;AssignmentStmt
     ] or >
     }
     [ (sVar)
     | sVar:
     @VariableDeclarations
      [ (sIdentifier)
      | sIdentifier:
      oSymbolStkPushLocalIdentifier
      [ oSymbolStkChooseKind (syUndefined)
      | syUndefined:
      ] or >
      @PublicDefinition
       [ (sInitialValue)
       | *:
       >>
      ;PublicDefinition
      [ (sInitialValue)
      | sInitialValue:
      .tInitialValue
      @Expression
       @Operand
        [ (sIdentifier)
        | sIdentifier:
        oSymbolStkPushIdentifier
        [ oSymbolStkChooseKind (syVariable)
        | *:
        [ oSymbolStkChooseKind (syVariable)
        | syVariable:
        @Variable
         [ oSymbolStkChooseKind (syVariable)
         | syVariable:
         .tLiteralAddress
         oValuePushSymbol
         oEmitValue
         % value emitted 4
         oValuePop
         ] or >
         oTypeStkPushSymbol
         @VariableExtension
          [ (sSubscript)
          | sSubscript:
          .tSubscriptBegin
          @Expression
           @Operand
            [ (sIdentifier)
            | sIdentifier:
            oSymbolStkPushIdentifier
            [ oSymbolStkChooseKind (syVariable)
            | *:
            [ oSymbolStkChooseKind (syVariable)
            | syVariable:
            @Variable
             [ oSymbolStkChooseKind (syVariable)
             | syVariable:
             .tLiteralAddress
             oValuePushSymbol
             oEmitValue
             % value emitted 60
             oValuePop
             ] or >
             oTypeStkPushSymbol
             @VariableExtension
              [ (sInteger)
              | *:
              >>
             ;VariableExtension
             >>
            ;Variable
            @VariableOperand
             [ oTypeStkChooseKind (tpInteger)
             | tpInteger:
             .tFetchInteger
             ] or >
             >>
            ;VariableOperand
            ] or >
            ] or >
            >>
           ;Operand
           @UnaryOperator
            [ (sInteger)
            | *:
            >>
           ;UnaryOperator
           @BinaryOperator
            [ (sInteger)
            | *:
            >>
           ;BinaryOperator
           [ (sInteger)
           | *:
           }
           @Operand
            [ (sInteger)
            | sInteger:
            oValuePushInteger
            oSymbolStkPush(syExpression)
            oTypeStkPush(tpInteger)
            oTypeStkLinkToStandardType(stdInteger)
            .tLiteralInteger
            oEmitValue
            % value emitted 1
            oValuePop
            ] or >
            >>
           ;Operand
           @UnaryOperator
            [ (sSubtract)
            | *:
            >>
           ;UnaryOperator
           @BinaryOperator
            [ (sSubtract)
            | sSubtract:
            .tSubtract
            oTypeStkPush(tpInteger)
            @CompareOperandAndResultTypes
             @CompareAndSwapTypes
              [ oTypeStkChooseKind (tpInteger)
              | tpInteger:
              oTypeStkSwap
              [ oTypeStkChooseKind (tpInteger)
              | tpInteger:
              ] or >
              ] or >
              >>
             ;CompareAndSwapTypes
             oTypeStkPop
             @CompareAndSwapTypes
              [ oTypeStkChooseKind (tpInteger)
              | tpInteger:
              oTypeStkSwap
              [ oTypeStkChooseKind (tpInteger)
              | tpInteger:
              ] or >
              ] or >
              >>
             ;CompareAndSwapTypes
             oTypeStkPop
             oSymbolStkPop
             oSymbolStkSetKind(syExpression)
             >>
            ;CompareOperandAndResultTypes
            ] or >
            oSymbolStkSetKind(syExpression)
            >>
           ;BinaryOperator
           [ (sExpnEnd)
           | sExpnEnd:
           ] or >
           >>
          ;Expression
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          ] or >
          oSymbolStkPop
          oTypeStkPop
          [ oTypeStkChooseKind (tpArray)
          | tpArray:
          oTypeStkPushComponent
          oTypeStkSwap
          oTypeStkPop
          ] or >
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          .tSubscriptInteger
          ] or >
          ] or >
          >>
         ;VariableExtension
         >>
        ;Variable
        @VariableOperand
         [ oTypeStkChooseKind (tpInteger)
         | tpInteger:
         .tFetchInteger
         ] or >
         >>
        ;VariableOperand
        ] or >
        ] or >
        >>
       ;Operand
       @UnaryOperator
        [ (sInteger)
        | *:
        >>
       ;UnaryOperator
       @BinaryOperator
        [ (sInteger)
        | *:
        >>
       ;BinaryOperator
       [ (sInteger)
       | *:
       }
       @Operand
        [ (sInteger)
        | sInteger:
        oValuePushInteger
        oSymbolStkPush(syExpression)
        oTypeStkPush(tpInteger)
        oTypeStkLinkToStandardType(stdInteger)
        .tLiteralInteger
        oEmitValue
        % value emitted 1271
        oValuePop
        ] or >
        >>
       ;Operand
       @UnaryOperator
        [ (sMultiply)
        | *:
        >>
       ;UnaryOperator
       @BinaryOperator
        [ (sMultiply)
        | sMultiply:
        .tMultiply
        oTypeStkPush(tpInteger)
        @CompareOperandAndResultTypes
         @CompareAndSwapTypes
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          oTypeStkSwap
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          ] or >
          ] or >
          >>
         ;CompareAndSwapTypes
         oTypeStkPop
         @CompareAndSwapTypes
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          oTypeStkSwap
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          ] or >
          ] or >
          >>
         ;CompareAndSwapTypes
         oTypeStkPop
         oSymbolStkPop
         oSymbolStkSetKind(syExpression)
         >>
        ;CompareOperandAndResultTypes
        ] or >
        oSymbolStkSetKind(syExpression)
        >>
       ;BinaryOperator
       [ (sExpnEnd)
       | sExpnEnd:
       ] or >
       >>
      ;Expression
      @TypeTblEnterIfNew
       [ oTypeStkChooseTypeReference (no)
       | no:
       oTypeTblEnter
       ] or >
       >>
      ;TypeTblEnterIfNew
      .tInitEnd
      .tLiteralAddress
      @EmitStore
       [ oTypeStkChooseKind (tpInteger)
       | tpInteger:
       .tStoreInteger
       ] or >
       >>
      ;EmitStore
      oSymbolStkPop
      ] or >
      @EnterVariableAttributes
       [ oSymbolStkChooseKind (syUndefined)
       | *:
       oSymbolStkSetKind(syVariable)
       [ oTypeStkChooseKind (tpInteger)
       | *:
       @AllocateVar
        [ oSymbolStkChooseKind (syVariable)
        | *:
        [ oTypeStkChooseKind (tpInteger)
        | tpInteger:
        oAllocateAlignOnWord
        oSymbolStkEnterDataAddress
        oAllocateVariable
        ] or >
        >>
       ;AllocateVar
       oSymbolStkEnterTypeReference
       oSymbolTblEnter
       >>
      ;EnterVariableAttributes
      oTypeStkPop
      oSymbolStkPop
      ] or >
      >>
     ;VariableDeclarations
     ] or >
     }
     [ (sAssignmentStmt)
     | sAssignmentStmt:
     @AssignmentStmt
      ?sIdentifier (sIdentifier)
      oSymbolStkPushIdentifier
      .tAssignBegin
      @Variable
       [ oSymbolStkChooseKind (syVariable)
       | syVariable:
       .tLiteralAddress
       oValuePushSymbol
       oEmitValue
       % value emitted 4
       oValuePop
       ] or >
       oTypeStkPushSymbol
       @VariableExtension
        [ (sSubscript)
        | sSubscript:
        .tSubscriptBegin
        @Expression
         @Operand
          [ (sIdentifier)
          | sIdentifier:
          oSymbolStkPushIdentifier
          [ oSymbolStkChooseKind (syVariable)
          | *:
          [ oSymbolStkChooseKind (syVariable)
          | syVariable:
          @Variable
           [ oSymbolStkChooseKind (syVariable)
           | syVariable:
           .tLiteralAddress
           oValuePushSymbol
           oEmitValue
           % value emitted 60
           oValuePop
           ] or >
           oTypeStkPushSymbol
           @VariableExtension
            [ (sExpnEnd)
            | *:
            >>
           ;VariableExtension
           >>
          ;Variable
          @VariableOperand
           [ oTypeStkChooseKind (tpInteger)
           | tpInteger:
           .tFetchInteger
           ] or >
           >>
          ;VariableOperand
          ] or >
          ] or >
          >>
         ;Operand
         @UnaryOperator
          [ (sExpnEnd)
          | *:
          >>
         ;UnaryOperator
         @BinaryOperator
          [ (sExpnEnd)
          | *:
          >>
         ;BinaryOperator
         [ (sExpnEnd)
         | sExpnEnd:
         ] or >
         >>
        ;Expression
        [ oTypeStkChooseKind (tpInteger)
        | tpInteger:
        ] or >
        oSymbolStkPop
        oTypeStkPop
        [ oTypeStkChooseKind (tpArray)
        | tpArray:
        oTypeStkPushComponent
        oTypeStkSwap
        oTypeStkPop
        ] or >
        [ oTypeStkChooseKind (tpInteger)
        | tpInteger:
        .tSubscriptInteger
        ] or >
        ] or >
        >>
       ;VariableExtension
       >>
      ;Variable
      [ oTypeStkChooseKind (tpInteger)
      | *:
      @Expression
       @Operand
        [ (sIdentifier)
        | sIdentifier:
        oSymbolStkPushIdentifier
        [ oSymbolStkChooseKind (syVariable)
        | *:
        [ oSymbolStkChooseKind (syVariable)
        | syVariable:
        @Variable
         [ oSymbolStkChooseKind (syVariable)
         | syVariable:
         .tLiteralAddress
         oValuePushSymbol
         oEmitValue
         % value emitted 64
         oValuePop
         ] or >
         oTypeStkPushSymbol
         @VariableExtension
          [ (sIdentifier)
          | *:
          >>
         ;VariableExtension
         >>
        ;Variable
        @VariableOperand
         [ oTypeStkChooseKind (tpInteger)
         | tpInteger:
         .tFetchInteger
         ] or >
         >>
        ;VariableOperand
        ] or >
        ] or >
        >>
       ;Operand
       @UnaryOperator
        [ (sIdentifier)
        | *:
        >>
       ;UnaryOperator
       @BinaryOperator
        [ (sIdentifier)
        | *:
        >>
       ;BinaryOperator
       [ (sIdentifier)
       | *:
       }
       @Operand
        [ (sIdentifier)
        | sIdentifier:
        oSymbolStkPushIdentifier
        [ oSymbolStkChooseKind (syConstant)
        | *:
        [ oSymbolStkChooseKind (syConstant)
        | syConstant:
        @ConstantOperand
         oTypeStkPushSymbol
         oValuePushSymbol
         [ oTypeStkChooseKind (tpInteger)
         | tpInteger:
         .tLiteralInteger
         oEmitValue
         % value emitted 99
         ] or >
         oValuePop
         >>
        ;ConstantOperand
        ] or >
        ] or >
        >>
       ;Operand
       @UnaryOperator
        [ (sModulus)
        | *:
        >>
       ;UnaryOperator
       @BinaryOperator
        [ (sModulus)
        | sModulus:
        .tModulus
        oTypeStkPush(tpInteger)
        @CompareOperandAndResultTypes
         @CompareAndSwapTypes
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          oTypeStkSwap
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          ] or >
          ] or >
          >>
         ;CompareAndSwapTypes
         oTypeStkPop
         @CompareAndSwapTypes
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          oTypeStkSwap
          [ oTypeStkChooseKind (tpInteger)
          | tpInteger:
          ] or >
          ] or >
          >>
         ;CompareAndSwapTypes
         oTypeStkPop
         oSymbolStkPop
         oSymbolStkSetKind(syExpression)
         >>
        ;CompareOperandAndResultTypes
        ] or >
        oSymbolStkSetKind(syExpression)
        >>
       ;BinaryOperator
       [ (sExpnEnd)
       | sExpnEnd:
       ] or >
       >>
      ;Expression
      @CompareAndSwapTypes
       [ oTypeStkChooseKind (tpInteger)
       | tpInteger:
       oTypeStkSwap
       [ oTypeStkChooseKind (tpInteger)
       | tpInteger:
       ] or >
       ] or >
       >>
      ;CompareAndSwapTypes
      @EmitAssign
       [ oTypeStkChooseKind (tpInteger)
       | tpInteger:
       .tAssignInteger
       ] or >
       >>
      ;EmitAssign
      oTypeStkPop
      oSymbolStkPop
      oTypeStkPop
      oSymbolStkPop
      >>
     ;AssignmentStmt
     ] or >
     }
     [ (sEnd)
     | *:
     ] or >
     ?sEnd (sEnd)
     >>
    ;Block
    oSymbolTblPopScope
    >>
   ;Statement
   }
   [ (sRepeatEnd)
   | sRepeatEnd:
   ] or >
   .tRepeatControl
   @BooleanControlExpression
    @Expression
     @Operand
      [ (sIdentifier)
      | sIdentifier:
      oSymbolStkPushIdentifier
      [ oSymbolStkChooseKind (syVariable)
      | *:
      [ oSymbolStkChooseKind (syVariable)
      | syVariable:
      @Variable
       [ oSymbolStkChooseKind (syVariable)
       | syVariable:
       .tLiteralAddress
       oValuePushSymbol
       oEmitValue
       % value emitted 60
       oValuePop
       ] or >
       oTypeStkPushSymbol
       @VariableExtension
        [ (sIdentifier)
        | *:
        >>
       ;VariableExtension
       >>
      ;Variable
      @VariableOperand
       [ oTypeStkChooseKind (tpInteger)
       | tpInteger:
       .tFetchInteger
       ] or >
       >>
      ;VariableOperand
      ] or >
      ] or >
      >>
     ;Operand
     @UnaryOperator
      [ (sIdentifier)
      | *:
      >>
     ;UnaryOperator
     @BinaryOperator
      [ (sIdentifier)
      | *:
      >>
     ;BinaryOperator
     [ (sIdentifier)
     | *:
     }
     @Operand
      [ (sIdentifier)
      | sIdentifier:
      oSymbolStkPushIdentifier
      [ oSymbolStkChooseKind (syConstant)
      | *:
      [ oSymbolStkChooseKind (syConstant)
      | syConstant:
      @ConstantOperand
       oTypeStkPushSymbol
       oValuePushSymbol
       [ oTypeStkChooseKind (tpInteger)
       | tpInteger:
       .tLiteralInteger
       oEmitValue
       % value emitted 25
       ] or >
       oValuePop
       >>
      ;ConstantOperand
      ] or >
      ] or >
      >>
     ;Operand
     @UnaryOperator
      [ (sNE)
      | *:
      >>
     ;UnaryOperator
     @BinaryOperator
      [ (sNE)
      | sNE:
      [ oTypeStkChooseKind (tpInteger)
      | *:
      .tNE
      @CompareEqualityOperandTypes
       [ oTypeStkChooseKind (tpInteger)
       | tpInteger:
       oTypeStkPop
       [ oTypeStkChooseKind (tpInteger)
       | tpInteger:
       ] or >
       ] or >
       oTypeStkPop
       oTypeStkPush(tpBoolean)
       oSymbolStkPop
       oSymbolStkSetKind(syExpression)
       >>
      ;CompareEqualityOperandTypes
      ] or >
      oSymbolStkSetKind(syExpression)
      >>
     ;BinaryOperator
     [ (sNot)
     | *:
     }
     @Operand
      [ (sNot)
      | *:
      >>
     ;Operand
     @UnaryOperator
      [ (sNot)
      | sNot:
      .tNot
      oTypeStkPush(tpBoolean)
      @CompareAndSwapTypes
       [ oTypeStkChooseKind (tpBoolean)
       | tpBoolean:
       oTypeStkSwap
       [ oTypeStkChooseKind (tpBoolean)
       | tpBoolean:
       ] or >
       ] or >
       >>
      ;CompareAndSwapTypes
      oTypeStkPop
      ] or >
      oSymbolStkSetKind(syExpression)
      >>
     ;UnaryOperator
     @BinaryOperator
      [ (sExpnEnd)
      | *:
      >>
     ;BinaryOperator
     [ (sExpnEnd)
     | sExpnEnd:
     ] or >
     >>
    ;Expression
    [ oTypeStkChooseKind (tpBoolean)
    | tpBoolean:
    ] or >
    oSymbolStkPop
    oTypeStkPop
    >>
   ;BooleanControlExpression
   .tRepeatTest
   oFixPopTargetAddress
   % value emitted 369
   >>
  ;RepeatStmt
  ] or >
  }
  [ (sAssignmentStmt)
  | sAssignmentStmt:
  @AssignmentStmt
   ?sIdentifier (sIdentifier)
   oSymbolStkPushIdentifier
   .tAssignBegin
   @Variable
    [ oSymbolStkChooseKind (syVariable)
    | syVariable:
    .tLiteralAddress
    oValuePushSymbol
    oEmitValue
    % value emitted 16
    oValuePop
    ] or >
    oTypeStkPushSymbol
    @VariableExtension
     [ (sInteger)
     | *:
     >>
    ;VariableExtension
    >>
   ;Variable
   [ oTypeStkChooseKind (tpInteger)
   | *:
   @Expression
    @Operand
     [ (sInteger)
     | sInteger:
     oValuePushInteger
     oSymbolStkPush(syExpression)
     oTypeStkPush(tpInteger)
     oTypeStkLinkToStandardType(stdInteger)
     .tLiteralInteger
     oEmitValue
     % value emitted 0
     oValuePop
     ] or >
     >>
    ;Operand
    @UnaryOperator
     [ (sExpnEnd)
     | *:
     >>
    ;UnaryOperator
    @BinaryOperator
     [ (sExpnEnd)
     | *:
     >>
    ;BinaryOperator
    [ (sExpnEnd)
    | sExpnEnd:
    ] or >
    >>
   ;Expression
   @CompareAndSwapTypes
    [ oTypeStkChooseKind (tpInteger)
    | tpInteger:
    oTypeStkSwap
    [ oTypeStkChooseKind (tpInteger)
    | tpInteger:
    ] or >
    ] or >
    >>
   ;CompareAndSwapTypes
   @EmitAssign
    [ oTypeStkChooseKind (tpInteger)
    | tpInteger:
    .tAssignInteger
    ] or >
    >>
   ;EmitAssign
   oTypeStkPop
   oSymbolStkPop
   oTypeStkPop
   oSymbolStkPop
   >>
  ;AssignmentStmt
  ] or >
  }
  [ (sCallStmt)
  | sCallStmt:
  @CallStmt
   ?sIdentifier (sIdentifier)
   oSymbolStkPushIdentifier
   [ oSymbolStkChooseKind (syProcedure)
   | *:
   [ oSymbolStkChooseKind (syProcedure)
   | syProcedure:
   [ oSymbolStkChooseStandardRoutine (rtNull)
   | *:
   .tCallBegin
   oTypeStkPushSymbol
   [ oTypeStkChooseRecursionFlag (no)
   | *:
   @ActualParameters
    oCountPush(zero)
    [ (sParmEnd)
    | sParmEnd:
    ] or >
    [ oTypeStkCompareParameterCount (yes)
    | yes:
    ] or >
    oCountPop
    >>
   ;ActualParameters
   .tCallEnd
   oValuePushSymbol
   oEmitValue
   % value emitted 146
   oValuePop
   oTypeStkPop
   ] or >
   oSymbolStkPop
   >>
  ;CallStmt
  ] or >
  }
  [ (sCallStmt)
  | sCallStmt:
  @CallStmt
   ?sIdentifier (sIdentifier)
   oSymbolStkPushIdentifier
   [ oSymbolStkChooseKind (syProcedure)
   | *:
   [ oSymbolStkChooseKind (syProcedure)
   | syProcedure:
   [ oSymbolStkChooseStandardRoutine (rtNull)
   | *:
   .tCallBegin
   oTypeStkPushSymbol
   [ oTypeStkChooseRecursionFlag (no)
   | *:
   @ActualParameters
    oCountPush(zero)
    [ (sParmEnd)
    | sParmEnd:
    ] or >
    [ oTypeStkCompareParameterCount (yes)
    | yes:
    ] or >
    oCountPop
    >>
   ;ActualParameters
   .tCallEnd
   oValuePushSymbol
   oEmitValue
   % value emitted 219
   oValuePop
   oTypeStkPop
   ] or >
   oSymbolStkPop
   >>
  ;CallStmt
  ] or >
  }
  [ (sCallStmt)
  | sCallStmt:
  @CallStmt
   ?sIdentifier (sIdentifier)
   oSymbolStkPushIdentifier
   [ oSymbolStkChooseKind (syProcedure)
   | *:
   [ oSymbolStkChooseKind (syProcedure)
   | syProcedure:
   [ oSymbolStkChooseStandardRoutine (rtNull)
   | *:
   .tCallBegin
   oTypeStkPushSymbol
   [ oTypeStkChooseRecursionFlag (no)
   | *:
   @ActualParameters
    oCountPush(zero)
    [ (sParmEnd)
    | sParmEnd:
    ] or >
    [ oTypeStkCompareParameterCount (yes)
    | yes:
    ] or >
    oCountPop
    >>
   ;ActualParameters
   .tCallEnd
   oValuePushSymbol
   oEmitValue
   % value emitted 146
   oValuePop
   oTypeStkPop
   ] or >
   oSymbolStkPop
   >>
  ;CallStmt
  ] or >
  }
  [ (sEnd)
  | *:
  ] or >
  ?sEnd (sEnd)
  >>
 ;Block
 [ oSymbolTblLookupExternal (no)
 | *:
 oSymbolTblPopScope
 oSymbolStkPop
 .tTrapBegin
 .tTrap
 oEmitTrapKind(trHalt)
 % value emitted 0
 >>
;Program
