@Program
 @EmitProgramPrologue
  oEmitNone(iData)
  oOperandPushMode(mWord)
  oOperandSetLength(two)
  oOperandEnterValueFromDataAreaSize
  oOperandPushMode(mGlobalBase)
  oEmitDouble(iSpace)
  oOperandPop
  oOperandPop
  oEmitProcLabel(mLineNum)
  oOperandPushMode(mWord)
  oOperandSetLength(two)
  oOperandSetValue(zero)
  oEmitSingle(iWord)
  oOperandPop
  oEmitNone(iText)
  oOperandPushMode(mMainProc)
  oEmitSingle(iGlobl)
  oEmitProcLabel(mMainProc)
  oOperandPop
  oEmitNone(iEnter)
  >>
 ;EmitProgramPrologue
 @Block
  [ (tFileDescriptor)
  | tFileDescriptor:
  ?tLiteralInteger (tLiteralInteger)
  oOperandPushInteger
  ?tFileBind (tFileBind)
  ?tLiteralAddress (tLiteralAddress)
  oOperandPushVariable
  ?tStoreInteger (tStoreInteger)
  oOperandSwap
  @OperandAssignIntegerPopPop
   [ oOperandCompareLeftAndRight (no)
   | no:
   @EmitMove
    @OperandLeftOrRightIsTemp
     [ oOperandChooseMode (mManifest)
     | *:
     oOperandSwap
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandSwap
     >>no
    ;OperandLeftOrRightIsTemp
    [@OperandLeftOrRightIsTemp (no)
    | *:
    [ oOperandChooseMode (mManifest)
    | mManifest:
    oEmitDouble(iMov)
    ] or >
    >>
   ;EmitMove
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mManifest)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStatic)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   ] or >
   >>
  ;OperandAssignIntegerPopPop
  ] or >
  }
  [ (tFileDescriptor)
  | tFileDescriptor:
  ?tLiteralInteger (tLiteralInteger)
  oOperandPushInteger
  ?tFileBind (tFileBind)
  ?tLiteralAddress (tLiteralAddress)
  oOperandPushVariable
  ?tStoreInteger (tStoreInteger)
  oOperandSwap
  @OperandAssignIntegerPopPop
   [ oOperandCompareLeftAndRight (no)
   | no:
   @EmitMove
    @OperandLeftOrRightIsTemp
     [ oOperandChooseMode (mManifest)
     | *:
     oOperandSwap
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandSwap
     >>no
    ;OperandLeftOrRightIsTemp
    [@OperandLeftOrRightIsTemp (no)
    | *:
    [ oOperandChooseMode (mManifest)
    | mManifest:
    oEmitDouble(iMov)
    ] or >
    >>
   ;EmitMove
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mManifest)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStatic)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   ] or >
   >>
  ;OperandAssignIntegerPopPop
  ] or >
  }
  [ (tRepeatBegin)
  | tRepeatBegin:
  @RepeatStmt
   oFixPushAddress
   oEmitMergeSourceCoordinate
   @Statements
    @Block
     [ (tWriteBegin)
     | tWriteBegin:
     @WriteProc
      oEmitSourceCoordinate
      [ (tTrapBegin)
      | *:
      @WriteParameter
       ?tTrapBegin (tTrapBegin)
       ?tLiteralAddress (tLiteralAddress)
       @OperandPushVariable
        oOperandPushVariable
        [ (tVarParm)
        | *:
        [ (tVarParm)
        | *:
        [ (tVarParm)
        | *:
        >>
       ;OperandPushVariable
       @OperandForceToStack
        [ oOperandChooseLength (two)
        | two:
        ] or >
        oEmitSingle(iPush)
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        oOperandPushMode(mStack)
        >>
       ;OperandForceToStack
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStack)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       ?tVarParm (tVarParm)
       ?tParmEnd (tParmEnd)
       @OperandPushExpression
        [ (tSkipString)
        | tSkipString:
        oEmitNone(iData)
        ?tStringData (tStringData)
        oEmitString
        oEmitNone(iText)
        ] or >
        }
        [ (tLiteralAddress)
        | tLiteralAddress:
        @OperandPushVariable
         oOperandPushVariable
         [ (tFetchChar)
         | *:
         [ (tFetchChar)
         | *:
         [ (tFetchChar)
         | tFetchChar:
         oOperandSetLength(regCX)
         ] or >
         >>
        ;OperandPushVariable
        ] or >
        }
        [ (tParmEnd)
        | *:
        ] or >
        >>
       ;OperandPushExpression
       [ (tParmEnd)
       | *:
       @OperandForceToStack
        [ oOperandChooseLength (regCX)
        | regCX:
        @OperandForceAddressIntoTemp
         [ oOperandChooseMode (mStatic)
         | mStatic:
         @OperandPushTempWord
          oTempAllocate
          oOperandPushTemp
          oOperandSetValue(zero)
          oOperandSetLength(two)
          >>
         ;OperandPushTempWord
         oOperandSwap
         oEmitDouble(iLoada)
         oOperandPop
         ] or >
         oOperandSetLength(two)
         >>
        ;OperandForceAddressIntoTemp
        ] or >
        oEmitSingle(iPush)
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mTemp)
         | mTemp:
         oTempFree
         ] or >
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        oOperandPushMode(mStack)
        >>
       ;OperandForceToStack
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStack)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       ?tParmEnd (tParmEnd)
       @OperandPushExpression
        [ (tLiteralInteger)
        | tLiteralInteger:
        oOperandPushInteger
        ] or >
        }
        [ (tParmEnd)
        | *:
        ] or >
        >>
       ;OperandPushExpression
       @OperandForceToStack
        [ oOperandChooseLength (two)
        | two:
        ] or >
        oEmitSingle(iPush)
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mManifest)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        oOperandPushMode(mStack)
        >>
       ;OperandForceToStack
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStack)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       ?tParmEnd (tParmEnd)
       ?tTrap (tTrap)
       oOperandPushTrap
       oEmitSingle(iCall)
       oOperandPop
       oOperandPushMode(mStackReg)
       oOperandSetLength(two)
       oOperandPushMode(mManifest)
       oOperandSetLength(two)
       oOperandSetValue(twelve)
       oEmitDouble(iAdd)
       oOperandPop
       oOperandPop
       >>
      ;WriteParameter
      }
      [ (tWriteEnd)
      | tWriteEnd:
      ] or >
      >>
     ;WriteProc
     ] or >
     }
     [ (tTrapBegin)
     | tTrapBegin:
     @TrapStmt
      oEmitSourceCoordinate
      [ (tLiteralAddress)
      | tLiteralAddress:
      @OperandPushVariable
       oOperandPushVariable
       [ (tVarParm)
       | *:
       [ (tVarParm)
       | *:
       [ (tVarParm)
       | *:
       >>
      ;OperandPushVariable
      oOperandPushCopy
      @OperandForceToStack
       [ oOperandChooseLength (two)
       | two:
       ] or >
       oEmitSingle(iPush)
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandPushMode(mStack)
       >>
      ;OperandForceToStack
      oOperandPop
      ?tVarParm (tVarParm)
      ?tParmEnd (tParmEnd)
      [ (tTrap)
      | tTrap:
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushTrap
      oEmitSingle(iCall)
      oOperandPop
      oOperandPushMode(mStackReg)
      oOperandSetLength(two)
      oOperandPushMode(mManifest)
      oOperandSetLength(two)
      oOperandSetValue(four)
      oEmitDouble(iAdd)
      oOperandPop
      oOperandPop
      ] or >
      ] or >
      >>
     ;TrapStmt
     ] or >
     }
     [ (tReadBegin)
     | tReadBegin:
     @ReadProc
      oEmitSourceCoordinate
      [ (tTrapBegin)
      | *:
      @ReadParameter
       ?tTrapBegin (tTrapBegin)
       ?tLiteralAddress (tLiteralAddress)
       @OperandPushVariable
        oOperandPushVariable
        [ (tVarParm)
        | *:
        [ (tVarParm)
        | *:
        [ (tVarParm)
        | *:
        >>
       ;OperandPushVariable
       @OperandForceToStack
        [ oOperandChooseLength (two)
        | two:
        ] or >
        oEmitSingle(iPush)
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        oOperandPushMode(mStack)
        >>
       ;OperandForceToStack
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStack)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       ?tVarParm (tVarParm)
       ?tParmEnd (tParmEnd)
       ?tLiteralAddress (tLiteralAddress)
       @OperandPushVariable
        oOperandPushVariable
        [ (tVarParm)
        | *:
        [ (tVarParm)
        | *:
        [ (tVarParm)
        | *:
        >>
       ;OperandPushVariable
       @OperandForceAddressIntoTemp
        [ oOperandChooseMode (mStatic)
        | mStatic:
        @OperandPushTempWord
         oTempAllocate
         oOperandPushTemp
         oOperandSetValue(zero)
         oOperandSetLength(two)
         >>
        ;OperandPushTempWord
        oOperandSwap
        oEmitDouble(iLoada)
        oOperandPop
        ] or >
        oOperandSetLength(two)
        >>
       ;OperandForceAddressIntoTemp
       @OperandForceToStack
        [ oOperandChooseLength (two)
        | two:
        ] or >
        oEmitSingle(iPush)
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mTemp)
         | mTemp:
         oTempFree
         ] or >
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        oOperandPushMode(mStack)
        >>
       ;OperandForceToStack
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStack)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       ?tVarParm (tVarParm)
       ?tParmEnd (tParmEnd)
       oOperandPushMode(mManifest)
       oOperandSetLength(two)
       oOperandSetValue(eight)
       [ (tTrap)
       | tTrap:
       ] or >
       oOperandPushTrap
       oEmitSingle(iCall)
       oOperandPop
       oOperandPushMode(mStackReg)
       oOperandSetLength(two)
       oOperandSwap
       oEmitDouble(iAdd)
       oOperandPop
       oOperandPop
       >>
      ;ReadParameter
      }
      [ (tReadEnd)
      | tReadEnd:
      ] or >
      >>
     ;ReadProc
     ] or >
     }
     [ (tTrapBegin)
     | tTrapBegin:
     @TrapStmt
      oEmitSourceCoordinate
      [ (tLiteralAddress)
      | tLiteralAddress:
      @OperandPushVariable
       oOperandPushVariable
       [ (tVarParm)
       | *:
       [ (tVarParm)
       | *:
       [ (tVarParm)
       | *:
       >>
      ;OperandPushVariable
      oOperandPushCopy
      @OperandForceToStack
       [ oOperandChooseLength (two)
       | two:
       ] or >
       oEmitSingle(iPush)
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandPushMode(mStack)
       >>
      ;OperandForceToStack
      oOperandPop
      ?tVarParm (tVarParm)
      ?tParmEnd (tParmEnd)
      [ (tTrap)
      | tTrap:
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushTrap
      oEmitSingle(iCall)
      oOperandPop
      oOperandPushMode(mStackReg)
      oOperandSetLength(two)
      oOperandPushMode(mManifest)
      oOperandSetLength(two)
      oOperandSetValue(four)
      oEmitDouble(iAdd)
      oOperandPop
      oOperandPop
      ] or >
      ] or >
      >>
     ;TrapStmt
     ] or >
     }
     [ (tWriteBegin)
     | tWriteBegin:
     @WriteProc
      oEmitSourceCoordinate
      [ (tTrapBegin)
      | *:
      @WriteParameter
       ?tTrapBegin (tTrapBegin)
       ?tLiteralAddress (tLiteralAddress)
       @OperandPushVariable
        oOperandPushVariable
        [ (tVarParm)
        | *:
        [ (tVarParm)
        | *:
        [ (tVarParm)
        | *:
        >>
       ;OperandPushVariable
       @OperandForceToStack
        [ oOperandChooseLength (two)
        | two:
        ] or >
        oEmitSingle(iPush)
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        oOperandPushMode(mStack)
        >>
       ;OperandForceToStack
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStack)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       ?tVarParm (tVarParm)
       ?tParmEnd (tParmEnd)
       @OperandPushExpression
        [ (tSkipString)
        | tSkipString:
        oEmitNone(iData)
        ?tStringData (tStringData)
        oEmitString
        oEmitNone(iText)
        ] or >
        }
        [ (tLiteralAddress)
        | tLiteralAddress:
        @OperandPushVariable
         oOperandPushVariable
         [ (tFetchChar)
         | *:
         [ (tFetchChar)
         | *:
         [ (tFetchChar)
         | tFetchChar:
         oOperandSetLength(regCX)
         ] or >
         >>
        ;OperandPushVariable
        ] or >
        }
        [ (tParmEnd)
        | *:
        ] or >
        >>
       ;OperandPushExpression
       [ (tParmEnd)
       | *:
       @OperandForceToStack
        [ oOperandChooseLength (regCX)
        | regCX:
        @OperandForceAddressIntoTemp
         [ oOperandChooseMode (mStatic)
         | mStatic:
         @OperandPushTempWord
          oTempAllocate
          oOperandPushTemp
          oOperandSetValue(zero)
          oOperandSetLength(two)
          >>
         ;OperandPushTempWord
         oOperandSwap
         oEmitDouble(iLoada)
         oOperandPop
         ] or >
         oOperandSetLength(two)
         >>
        ;OperandForceAddressIntoTemp
        ] or >
        oEmitSingle(iPush)
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mTemp)
         | mTemp:
         oTempFree
         ] or >
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        oOperandPushMode(mStack)
        >>
       ;OperandForceToStack
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStack)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       ?tParmEnd (tParmEnd)
       @OperandPushExpression
        [ (tLiteralInteger)
        | tLiteralInteger:
        oOperandPushInteger
        ] or >
        }
        [ (tParmEnd)
        | *:
        ] or >
        >>
       ;OperandPushExpression
       @OperandForceToStack
        [ oOperandChooseLength (two)
        | two:
        ] or >
        oEmitSingle(iPush)
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mManifest)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        oOperandPushMode(mStack)
        >>
       ;OperandForceToStack
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStack)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       ?tParmEnd (tParmEnd)
       ?tTrap (tTrap)
       oOperandPushTrap
       oEmitSingle(iCall)
       oOperandPop
       oOperandPushMode(mStackReg)
       oOperandSetLength(two)
       oOperandPushMode(mManifest)
       oOperandSetLength(two)
       oOperandSetValue(twelve)
       oEmitDouble(iAdd)
       oOperandPop
       oOperandPop
       >>
      ;WriteParameter
      }
      [ (tWriteEnd)
      | tWriteEnd:
      ] or >
      >>
     ;WriteProc
     ] or >
     }
     [ (tTrapBegin)
     | tTrapBegin:
     @TrapStmt
      oEmitSourceCoordinate
      [ (tLiteralAddress)
      | tLiteralAddress:
      @OperandPushVariable
       oOperandPushVariable
       [ (tVarParm)
       | *:
       [ (tVarParm)
       | *:
       [ (tVarParm)
       | *:
       >>
      ;OperandPushVariable
      oOperandPushCopy
      @OperandForceToStack
       [ oOperandChooseLength (two)
       | two:
       ] or >
       oEmitSingle(iPush)
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandPushMode(mStack)
       >>
      ;OperandForceToStack
      oOperandPop
      ?tVarParm (tVarParm)
      ?tParmEnd (tParmEnd)
      [ (tTrap)
      | tTrap:
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushTrap
      oEmitSingle(iCall)
      oOperandPop
      oOperandPushMode(mStackReg)
      oOperandSetLength(two)
      oOperandPushMode(mManifest)
      oOperandSetLength(two)
      oOperandSetValue(four)
      oEmitDouble(iAdd)
      oOperandPop
      oOperandPop
      ] or >
      ] or >
      >>
     ;TrapStmt
     ] or >
     }
     [ (tInitialValue)
     | tInitialValue:
     @OperandPushExpression
      [ (tLiteralAddress)
      | tLiteralAddress:
      @OperandPushVariable
       oOperandPushVariable
       [ (tFetchChar)
       | *:
       [ (tFetchChar)
       | *:
       [ (tFetchChar)
       | tFetchChar:
       oOperandSetLength(regCX)
       ] or >
       >>
      ;OperandPushVariable
      ] or >
      }
      [ (tLiteralInteger)
      | tLiteralInteger:
      oOperandPushInteger
      ] or >
      }
      [ (tLiteralAddress)
      | tLiteralAddress:
      @OperandPushVariable
       oOperandPushVariable
       [ (tFetchChar)
       | *:
       [ (tFetchChar)
       | *:
       [ (tFetchChar)
       | tFetchChar:
       oOperandSetLength(regCX)
       ] or >
       >>
      ;OperandPushVariable
      ] or >
      }
      [ (tLength)
      | tLength:
      @OperandLength
       @SaveTempRegsToStack
        oOperandPushMode(mTemp)
        oOperandSetLength(two)
        oOperandSetRegnum(one)
        oEmitSingle(iPush)
        oOperandSetRegnum(two)
        oEmitSingle(iPush)
        oOperandSetRegnum(regCX)
        oEmitSingle(iPush)
        oOperandSetRegnum(four)
        oEmitSingle(iPush)
        oOperandPop
        >>
       ;SaveTempRegsToStack
       @OperandForceAddressIntoTemp
        [ oOperandChooseMode (mStatic)
        | mStatic:
        @OperandPushTempWord
         oTempAllocate
         oOperandPushTemp
         oOperandSetValue(zero)
         oOperandSetLength(two)
         >>
        ;OperandPushTempWord
        oOperandSwap
        oEmitDouble(iLoada)
        oOperandPop
        ] or >
        oOperandSetLength(two)
        >>
       ;OperandForceAddressIntoTemp
       @OperandForceToStack
        [ oOperandChooseLength (two)
        | two:
        ] or >
        oEmitSingle(iPush)
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mTemp)
         | mTemp:
         oTempFree
         ] or >
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        oOperandPushMode(mStack)
        >>
       ;OperandForceToStack
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStack)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandPushMode(mTrap)
       oOperandSetValue(trLength)
       oOperandSetLength(two)
       oEmitSingle(iCall)
       oOperandPop
       oOperandPushMode(mStackReg)
       oOperandSetLength(two)
       oOperandPushMode(mManifest)
       oOperandSetLength(two)
       oOperandSetValue(four)
       oEmitDouble(iAdd)
       oOperandPop
       oOperandPop
       oOperandPushMode(mScratchReg1)
       oOperandSetLength(two)
       oOperandPushMode(mResultReg)
       oOperandSetLength(two)
       oEmitDouble(iMov)
       oOperandPop
       @RestoreTempRegsFromStack
        oOperandPushMode(mTemp)
        oOperandSetLength(two)
        oOperandSetRegnum(four)
        oEmitSingle(iPop)
        oOperandSetRegnum(regCX)
        oEmitSingle(iPop)
        oOperandSetRegnum(two)
        oEmitSingle(iPop)
        oOperandSetRegnum(one)
        oEmitSingle(iPop)
        oOperandPop
        >>
       ;RestoreTempRegsFromStack
       @OperandForceIntoTemp
        [ oOperandChooseMode (mScratchReg1)
        | *:
        [ oOperandChooseLength (two)
        | two:
        @OperandPushTempWord
         oTempAllocate
         oOperandPushTemp
         oOperandSetValue(zero)
         oOperandSetLength(two)
         >>
        ;OperandPushTempWord
        oOperandSwap
        oEmitDouble(iMov)
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mScratchReg1)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        oOperandSetMode(mTemp)
        ] or >
        >>
       ;OperandForceIntoTemp
       oOperandSetLength(two)
       >>
      ;OperandLength
      ] or >
      }
      [ (tLiteralInteger)
      | tLiteralInteger:
      oOperandPushInteger
      ] or >
      }
      [ (tSubtract)
      | tSubtract:
      @OperandSubtractPop
       @OperandAreLeftAndRightManifest
        [ oOperandChooseMode (mManifest)
        | mManifest:
        oOperandSwap
        [ oOperandChooseMode (mTemp)
        | *:
        oOperandSwap
        >>no
       ;OperandAreLeftAndRightManifest
       [@OperandAreLeftAndRightManifest (no)
       | no:
       [ oOperandChooseManifestValue (two)
       | *:
       @OperandForceLeftIntoTemp
        oOperandSwap
        [ oOperandChooseMode (mTemp)
        | mTemp:
        oOperandSwap
        ] or >
        >>
       ;OperandForceLeftIntoTemp
       oEmitDouble(iSub)
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mManifest)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       ] or >
       >>
      ;OperandSubtractPop
      ] or >
      }
      [ (tSubstring)
      | tSubstring:
      @OperandSubstringPopPop
       @SaveTempRegsToStack
        oOperandPushMode(mTemp)
        oOperandSetLength(two)
        oOperandSetRegnum(one)
        oEmitSingle(iPush)
        oOperandSetRegnum(two)
        oEmitSingle(iPush)
        oOperandSetRegnum(regCX)
        oEmitSingle(iPush)
        oOperandSetRegnum(four)
        oEmitSingle(iPush)
        oOperandPop
        >>
       ;SaveTempRegsToStack
       @OperandForceToStack
        [ oOperandChooseLength (two)
        | two:
        ] or >
        oEmitSingle(iPush)
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mTemp)
         | mTemp:
         oTempFree
         ] or >
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        oOperandPushMode(mStack)
        >>
       ;OperandForceToStack
       @OperandForceToStack
        [ oOperandChooseLength ()
        | *:
### Coder S/SL program failure: Semantic choice failed
while processing line         14
Table index 4253;  Operation 11;  Argument 12
### Coder assertion 8 failed: while processing line         14

