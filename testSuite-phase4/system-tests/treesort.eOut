@Program
 @EmitProgramPrologue
  oEmitNone(iData)
  oOperandPushMode(mWord)
  oOperandSetLength(two)
  oOperandEnterValueFromDataAreaSize
  oOperandPushMode(mGlobalBase)
  oEmitDouble(iSpace)
  oOperandPop
  oOperandPop
  oEmitProcLabel(mLineNum)
  oOperandPushMode(mWord)
  oOperandSetLength(two)
  oOperandSetValue(zero)
  oEmitSingle(iWord)
  oOperandPop
  oEmitNone(iText)
  oOperandPushMode(mMainProc)
  oEmitSingle(iGlobl)
  oEmitProcLabel(mMainProc)
  oOperandPop
  oEmitNone(iEnter)
  >>
 ;EmitProgramPrologue
 @Block
  [ (tFileDescriptor)
  | tFileDescriptor:
  ?tLiteralInteger (tLiteralInteger)
  oOperandPushInteger
  ?tFileBind (tFileBind)
  ?tLiteralAddress (tLiteralAddress)
  oOperandPushVariable
  ?tStoreInteger (tStoreInteger)
  oOperandSwap
  @OperandAssignIntegerPopPop
   [ oOperandCompareLeftAndRight (no)
   | no:
   @EmitMove
    @OperandLeftOrRightIsTemp
     [ oOperandChooseMode (mManifest)
     | *:
     oOperandSwap
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandSwap
     >>no
    ;OperandLeftOrRightIsTemp
    [@OperandLeftOrRightIsTemp (no)
    | *:
    [ oOperandChooseMode (mManifest)
    | mManifest:
    oEmitDouble(iMov)
    ] or >
    >>
   ;EmitMove
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mManifest)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStatic)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   ] or >
   >>
  ;OperandAssignIntegerPopPop
  ] or >
  }
  [ (tFileDescriptor)
  | tFileDescriptor:
  ?tLiteralInteger (tLiteralInteger)
  oOperandPushInteger
  ?tFileBind (tFileBind)
  ?tLiteralAddress (tLiteralAddress)
  oOperandPushVariable
  ?tStoreInteger (tStoreInteger)
  oOperandSwap
  @OperandAssignIntegerPopPop
   [ oOperandCompareLeftAndRight (no)
   | no:
   @EmitMove
    @OperandLeftOrRightIsTemp
     [ oOperandChooseMode (mManifest)
     | *:
     oOperandSwap
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandSwap
     >>no
    ;OperandLeftOrRightIsTemp
    [@OperandLeftOrRightIsTemp (no)
    | *:
    [ oOperandChooseMode (mManifest)
    | mManifest:
    oEmitDouble(iMov)
    ] or >
    >>
   ;EmitMove
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mManifest)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStatic)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   ] or >
   >>
  ;OperandAssignIntegerPopPop
  ] or >
  }
  [ (tArrayDescriptor)
  | tArrayDescriptor:
  ?tLiteralInteger (tLiteralInteger)
  oOperandPushInteger
  ?tLiteralAddress (tLiteralAddress)
  oOperandPushVariable
  ?tStoreInteger (tStoreInteger)
  oOperandSwap
  oArrayEnterLowerBound
  @OperandAssignIntegerPopPop
   [ oOperandCompareLeftAndRight (no)
   | no:
   @EmitMove
    @OperandLeftOrRightIsTemp
     [ oOperandChooseMode (mManifest)
     | *:
     oOperandSwap
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandSwap
     >>no
    ;OperandLeftOrRightIsTemp
    [@OperandLeftOrRightIsTemp (no)
    | *:
    [ oOperandChooseMode (mManifest)
    | mManifest:
    oEmitDouble(iMov)
    ] or >
    >>
   ;EmitMove
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mManifest)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStatic)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   ] or >
   >>
  ;OperandAssignIntegerPopPop
  ?tLiteralInteger (tLiteralInteger)
  oOperandPushInteger
  ?tLiteralAddress (tLiteralAddress)
  oOperandPushVariable
  ?tStoreInteger (tStoreInteger)
  oOperandSwap
  oArrayEnterUpperBound
  @OperandAssignIntegerPopPop
   [ oOperandCompareLeftAndRight (no)
   | no:
   @EmitMove
    @OperandLeftOrRightIsTemp
     [ oOperandChooseMode (mManifest)
     | *:
     oOperandSwap
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandSwap
     >>no
    ;OperandLeftOrRightIsTemp
    [@OperandLeftOrRightIsTemp (no)
    | *:
    [ oOperandChooseMode (mManifest)
    | mManifest:
    oEmitDouble(iMov)
    ] or >
    >>
   ;EmitMove
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mManifest)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStatic)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   ] or >
   >>
  ;OperandAssignIntegerPopPop
  ] or >
  }
  [ (tArrayDescriptor)
  | tArrayDescriptor:
  ?tLiteralInteger (tLiteralInteger)
  oOperandPushInteger
  ?tLiteralAddress (tLiteralAddress)
  oOperandPushVariable
  ?tStoreInteger (tStoreInteger)
  oOperandSwap
  oArrayEnterLowerBound
  @OperandAssignIntegerPopPop
   [ oOperandCompareLeftAndRight (no)
   | no:
   @EmitMove
    @OperandLeftOrRightIsTemp
     [ oOperandChooseMode (mManifest)
     | *:
     oOperandSwap
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandSwap
     >>no
    ;OperandLeftOrRightIsTemp
    [@OperandLeftOrRightIsTemp (no)
    | *:
    [ oOperandChooseMode (mManifest)
    | mManifest:
    oEmitDouble(iMov)
    ] or >
    >>
   ;EmitMove
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mManifest)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStatic)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   ] or >
   >>
  ;OperandAssignIntegerPopPop
  ?tLiteralInteger (tLiteralInteger)
  oOperandPushInteger
  ?tLiteralAddress (tLiteralAddress)
  oOperandPushVariable
  ?tStoreInteger (tStoreInteger)
  oOperandSwap
  oArrayEnterUpperBound
  @OperandAssignIntegerPopPop
   [ oOperandCompareLeftAndRight (no)
   | no:
   @EmitMove
    @OperandLeftOrRightIsTemp
     [ oOperandChooseMode (mManifest)
     | *:
     oOperandSwap
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandSwap
     >>no
    ;OperandLeftOrRightIsTemp
    [@OperandLeftOrRightIsTemp (no)
    | *:
    [ oOperandChooseMode (mManifest)
    | mManifest:
    oEmitDouble(iMov)
    ] or >
    >>
   ;EmitMove
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mManifest)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStatic)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   ] or >
   >>
  ;OperandAssignIntegerPopPop
  ] or >
  }
  [ (tArrayDescriptor)
  | tArrayDescriptor:
  ?tLiteralInteger (tLiteralInteger)
  oOperandPushInteger
  ?tLiteralAddress (tLiteralAddress)
  oOperandPushVariable
  ?tStoreInteger (tStoreInteger)
  oOperandSwap
  oArrayEnterLowerBound
  @OperandAssignIntegerPopPop
   [ oOperandCompareLeftAndRight (no)
   | no:
   @EmitMove
    @OperandLeftOrRightIsTemp
     [ oOperandChooseMode (mManifest)
     | *:
     oOperandSwap
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandSwap
     >>no
    ;OperandLeftOrRightIsTemp
    [@OperandLeftOrRightIsTemp (no)
    | *:
    [ oOperandChooseMode (mManifest)
    | mManifest:
    oEmitDouble(iMov)
    ] or >
    >>
   ;EmitMove
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mManifest)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStatic)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   ] or >
   >>
  ;OperandAssignIntegerPopPop
  ?tLiteralInteger (tLiteralInteger)
  oOperandPushInteger
  ?tLiteralAddress (tLiteralAddress)
  oOperandPushVariable
  ?tStoreInteger (tStoreInteger)
  oOperandSwap
  oArrayEnterUpperBound
  @OperandAssignIntegerPopPop
   [ oOperandCompareLeftAndRight (no)
   | no:
   @EmitMove
    @OperandLeftOrRightIsTemp
     [ oOperandChooseMode (mManifest)
     | *:
     oOperandSwap
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandSwap
     >>no
    ;OperandLeftOrRightIsTemp
    [@OperandLeftOrRightIsTemp (no)
    | *:
    [ oOperandChooseMode (mManifest)
    | mManifest:
    oEmitDouble(iMov)
    ] or >
    >>
   ;EmitMove
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mManifest)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStatic)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   ] or >
   >>
  ;OperandAssignIntegerPopPop
  ] or >
  }
  [ (tSkipProc)
  | tSkipProc:
  oEmitUnconditionalForwardBranch
  oFixPushLastAddress
  @Routine
   oEmitProcLabel(mProc)
   oEmitNone(iEnter)
   [ (tLiteralAddress)
   | *:
   oOperandPushMode(mArgument)
   oOperandSetValue(four)
   [ (tLiteralAddress)
   | tLiteralAddress:
   @OperandNextArgument
    oOperandSetMode(mManifest)
    oOperandPushMode(mManifest)
    oOperandSetValue(four)
    oOperandAddManifestValues
    oOperandPop
    oOperandSetMode(mArgument)
    >>
   ;OperandNextArgument
   oOperandPushCopy
   oOperandPushVariable
   oOperandSwap
   [ (tStoreInteger)
   | tStoreInteger:
   oOperandSetLength(two)
   @OperandAssignIntegerPopPop
    [ oOperandCompareLeftAndRight (no)
    | no:
    @EmitMove
     @OperandLeftOrRightIsTemp
      [ oOperandChooseMode (mArgument)
      | *:
      oOperandSwap
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandSwap
      >>no
     ;OperandLeftOrRightIsTemp
     [@OperandLeftOrRightIsTemp (no)
     | *:
     [ oOperandChooseMode (mArgument)
     | *:
     oOperandPushCopy
     @OperandForceIntoTemp
      [ oOperandChooseMode (mArgument)
      | *:
      [ oOperandChooseLength (two)
      | two:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iMov)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mArgument)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandSetMode(mTemp)
      ] or >
      >>
     ;OperandForceIntoTemp
     oOperandSwapLeftAndDest
     oEmitDouble(iMov)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mTemp)
      | mTemp:
      oTempFree
      ] or >
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandSwap
     >>
    ;EmitMove
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mArgument)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ] or >
    >>
   ;OperandAssignIntegerPopPop
   ] or >
   ] or >
   }
   [ (tParmEnd)
   | tParmEnd:
   ] or >
   oOperandPop
   @Block
    [ (tAssignBegin)
    | tAssignBegin:
    @AssignStmt
     oEmitSourceCoordinate
     ?tLiteralAddress (tLiteralAddress)
     @OperandPushVariable
      oOperandPushVariable
      [ (tSubscriptBegin)
      | *:
      [ (tSubscriptBegin)
      | tSubscriptBegin:
      @OperandPushExpression
       [ (tLiteralAddress)
       | tLiteralAddress:
       @OperandPushVariable
        oOperandPushVariable
        [ (tFetchInteger)
        | *:
        [ (tFetchInteger)
        | *:
        [ (tFetchInteger)
        | tFetchInteger:
        ] or >
        >>
       ;OperandPushVariable
       ] or >
       }
       [ (tSubscriptInteger)
       | *:
       ] or >
       >>
      ;OperandPushExpression
      [ (tSubscriptInteger)
      | tSubscriptInteger:
      @OperandSubscriptIntegerPop
       [ oOperandChooseMode (mStatic)
       | *:
       @OperandSubscriptNonManifestIntegerPop
        [ oOptionTestChecking (yes)
        | yes:
        @OperandCheckedSubscriptNonManifestIntegerPop
         @OperandForceIntoTemp
          [ oOperandChooseMode (mStatic)
          | *:
          [ oOperandChooseLength (two)
          | two:
          @OperandPushTempWord
           oTempAllocate
           oOperandPushTemp
           oOperandSetValue(zero)
           oOperandSetLength(two)
           >>
          ;OperandPushTempWord
          oOperandSwap
          oEmitDouble(iMov)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandSetMode(mTemp)
          ] or >
          >>
         ;OperandForceIntoTemp
         [ oOptionTestChecking (yes)
         | yes:
         @EmitSubscriptRangeCheck
          oOperandSwap
          @OperandPushArrayUpperBound
           [ oOperandChooseMode (mStatic)
           | mStatic:
           oOperandPushArrayUpperBound
           ] or >
           >>
          ;OperandPushArrayUpperBound
          oOperandSwapLeftAndDest
          @EmitCmp
           oOperandSwap
           [ oOperandChooseMode (mTemp)
           | *:
           oOperandSwap
           @OperandLeftOrRightIsTemp
            [ oOperandChooseMode (mManifest)
            | *:
            oOperandSwap
            [ oOperandChooseMode (mTemp)
            | mTemp:
            oOperandSwap
            >>yes
           ;OperandLeftOrRightIsTemp
           [@OperandLeftOrRightIsTemp (yes)
           | yes:
           oEmitDouble(iCmp)
           ] or >
           >>
          ;EmitCmp
          oOperandPushJumpCondition(iJgt)
          oEmitConditionalForwardBranch
          oFixPushLastAddress
          oOperandPop
          oOperandPop
          oOperandSwap
          @OperandPushArrayLowerBound
           [ oOperandChooseMode (mStatic)
           | mStatic:
           oOperandPushArrayLowerBound
           ] or >
           >>
          ;OperandPushArrayLowerBound
          oOperandSwapLeftAndDest
          @EmitCmp
           oOperandSwap
           [ oOperandChooseMode (mTemp)
           | *:
           oOperandSwap
           @OperandLeftOrRightIsTemp
            [ oOperandChooseMode (mManifest)
            | *:
            oOperandSwap
            [ oOperandChooseMode (mTemp)
            | mTemp:
            oOperandSwap
            >>yes
           ;OperandLeftOrRightIsTemp
           [@OperandLeftOrRightIsTemp (yes)
           | yes:
           oEmitDouble(iCmp)
           ] or >
           >>
          ;EmitCmp
          oOperandPushJumpCondition(iJge)
          oEmitConditionalForwardBranch
          oFixPushLastAddress
          oOperandPop
          oOperandPop
          oFixSwapAddresses
          oFixForwardBranch
          oFixPopAddress
          @EmitSubscriptAbort
           oOperandPushMode(mLineNum)
           oOperandSetLength(two)
           oEmitSingle(iPush)
           oOperandPop
           oOperandPushMode(mTrap)
           oOperandSetValue(trSubscriptAbort)
           oEmitSingle(iCall)
           oOperandPop
           >>
          ;EmitSubscriptAbort
          oFixForwardBranch
          oFixPopAddress
          >>
         ;EmitSubscriptRangeCheck
         ] or >
         oOperandSwap
         @OperandPushArrayLowerBound
          [ oOperandChooseMode (mStatic)
          | mStatic:
          oOperandPushArrayLowerBound
          ] or >
          >>
         ;OperandPushArrayLowerBound
         oOperandSwapLeftAndDest
         @OperandSubtractPop
          @OperandAreLeftAndRightManifest
           [ oOperandChooseMode (mManifest)
           | mManifest:
           oOperandSwap
           [ oOperandChooseMode (mTemp)
           | *:
           oOperandSwap
           >>no
          ;OperandAreLeftAndRightManifest
          [@OperandAreLeftAndRightManifest (no)
          | no:
          [ oOperandChooseManifestValue (one)
          | one:
          oOperandPop
          @OperandForceIntoTemp
           [ oOperandChooseMode (mTemp)
           | mTemp:
           ] or >
           >>
          ;OperandForceIntoTemp
          oEmitSingle(iDec)
          ] or >
          ] or >
          >>
         ;OperandSubtractPop
         oOperandPushMode(mManifest)
         oOperandSetLength(two)
         oOperandSetValue(two)
         oEmitDouble(iShl)
         oOperandPop
         oOperandSwap
         [ oOperandChooseMode (mStatic)
         | mStatic:
         oOperandPushMode(mManifest)
         oOperandSetLength(two)
         oOperandSetValue(eight)
         oOperandAddManifestValues
         oOperandPop
         @OperandForceAddressIntoTemp
          [ oOperandChooseMode (mStatic)
          | mStatic:
          @OperandPushTempWord
           oTempAllocate
           oOperandPushTemp
           oOperandSetValue(zero)
           oOperandSetLength(two)
           >>
          ;OperandPushTempWord
          oOperandSwap
          oEmitDouble(iLoada)
          oOperandPop
          ] or >
          oOperandSetLength(two)
          >>
         ;OperandForceAddressIntoTemp
         oEmitDouble(iAdd)
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mTemp)
          | mTemp:
          oTempFree
          ] or >
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ] or >
         oOperandSetMode(mTempIndirect)
         oOperandSetLength(two)
         >>
        ;OperandCheckedSubscriptNonManifestIntegerPop
        ] or >
        >>
       ;OperandSubscriptNonManifestIntegerPop
       oOperandSetLength(two)
       >>
      ;OperandSubscriptIntegerPop
      ] or >
      ] or >
      [ (tLiteralAddress)
      | *:
      >>
     ;OperandPushVariable
     @OperandPushExpressionAssignPopPop
      [ (tLiteralAddress)
      | tLiteralAddress:
      @OperandPushVariable
       oOperandPushVariable
       [ (tFetchInteger)
       | *:
       [ (tFetchInteger)
       | *:
       [ (tFetchInteger)
       | tFetchInteger:
       ] or >
       >>
      ;OperandPushVariable
      ] or >
      }
      [ (tAssignInteger)
      | tAssignInteger:
      @OperandAssignIntegerPopPop
       [ oOperandCompareLeftAndRight (no)
       | no:
       @EmitMove
        @OperandLeftOrRightIsTemp
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandSwap
         [ oOperandChooseMode (mTempIndirect)
         | *:
         oOperandSwap
         >>no
        ;OperandLeftOrRightIsTemp
        [@OperandLeftOrRightIsTemp (no)
        | *:
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandPushCopy
        @OperandForceIntoTemp
         [ oOperandChooseMode (mStatic)
         | *:
         [ oOperandChooseLength (two)
         | two:
         @OperandPushTempWord
          oTempAllocate
          oOperandPushTemp
          oOperandSetValue(zero)
          oOperandSetLength(two)
          >>
         ;OperandPushTempWord
         oOperandSwap
         oEmitDouble(iMov)
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStatic)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         oOperandSetMode(mTemp)
         ] or >
         >>
        ;OperandForceIntoTemp
        oOperandSwapLeftAndDest
        oEmitDouble(iMov)
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mTemp)
         | mTemp:
         oTempFree
         ] or >
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        oOperandSwap
        >>
       ;EmitMove
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mTempIndirect)
        | mTempIndirect:
        oTempFree
        ] or >
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       ] or >
       >>
      ;OperandAssignIntegerPopPop
      ] or >
      >>
     ;OperandPushExpressionAssignPopPop
     >>
    ;AssignStmt
    ] or >
    }
    [ (tAssignBegin)
    | tAssignBegin:
    @AssignStmt
     oEmitSourceCoordinate
     ?tLiteralAddress (tLiteralAddress)
     @OperandPushVariable
      oOperandPushVariable
      [ (tSubscriptBegin)
      | *:
      [ (tSubscriptBegin)
      | tSubscriptBegin:
      @OperandPushExpression
       [ (tLiteralAddress)
       | tLiteralAddress:
       @OperandPushVariable
        oOperandPushVariable
        [ (tFetchInteger)
        | *:
        [ (tFetchInteger)
        | *:
        [ (tFetchInteger)
        | tFetchInteger:
        ] or >
        >>
       ;OperandPushVariable
       ] or >
       }
       [ (tSubscriptInteger)
       | *:
       ] or >
       >>
      ;OperandPushExpression
      [ (tSubscriptInteger)
      | tSubscriptInteger:
      @OperandSubscriptIntegerPop
       [ oOperandChooseMode (mStatic)
       | *:
       @OperandSubscriptNonManifestIntegerPop
        [ oOptionTestChecking (yes)
        | yes:
        @OperandCheckedSubscriptNonManifestIntegerPop
         @OperandForceIntoTemp
          [ oOperandChooseMode (mStatic)
          | *:
          [ oOperandChooseLength (two)
          | two:
          @OperandPushTempWord
           oTempAllocate
           oOperandPushTemp
           oOperandSetValue(zero)
           oOperandSetLength(two)
           >>
          ;OperandPushTempWord
          oOperandSwap
          oEmitDouble(iMov)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandSetMode(mTemp)
          ] or >
          >>
         ;OperandForceIntoTemp
         [ oOptionTestChecking (yes)
         | yes:
         @EmitSubscriptRangeCheck
          oOperandSwap
          @OperandPushArrayUpperBound
           [ oOperandChooseMode (mStatic)
           | mStatic:
           oOperandPushArrayUpperBound
           ] or >
           >>
          ;OperandPushArrayUpperBound
          oOperandSwapLeftAndDest
          @EmitCmp
           oOperandSwap
           [ oOperandChooseMode (mTemp)
           | *:
           oOperandSwap
           @OperandLeftOrRightIsTemp
            [ oOperandChooseMode (mManifest)
            | *:
            oOperandSwap
            [ oOperandChooseMode (mTemp)
            | mTemp:
            oOperandSwap
            >>yes
           ;OperandLeftOrRightIsTemp
           [@OperandLeftOrRightIsTemp (yes)
           | yes:
           oEmitDouble(iCmp)
           ] or >
           >>
          ;EmitCmp
          oOperandPushJumpCondition(iJgt)
          oEmitConditionalForwardBranch
          oFixPushLastAddress
          oOperandPop
          oOperandPop
          oOperandSwap
          @OperandPushArrayLowerBound
           [ oOperandChooseMode (mStatic)
           | mStatic:
           oOperandPushArrayLowerBound
           ] or >
           >>
          ;OperandPushArrayLowerBound
          oOperandSwapLeftAndDest
          @EmitCmp
           oOperandSwap
           [ oOperandChooseMode (mTemp)
           | *:
           oOperandSwap
           @OperandLeftOrRightIsTemp
            [ oOperandChooseMode (mManifest)
            | *:
            oOperandSwap
            [ oOperandChooseMode (mTemp)
            | mTemp:
            oOperandSwap
            >>yes
           ;OperandLeftOrRightIsTemp
           [@OperandLeftOrRightIsTemp (yes)
           | yes:
           oEmitDouble(iCmp)
           ] or >
           >>
          ;EmitCmp
          oOperandPushJumpCondition(iJge)
          oEmitConditionalForwardBranch
          oFixPushLastAddress
          oOperandPop
          oOperandPop
          oFixSwapAddresses
          oFixForwardBranch
          oFixPopAddress
          @EmitSubscriptAbort
           oOperandPushMode(mLineNum)
           oOperandSetLength(two)
           oEmitSingle(iPush)
           oOperandPop
           oOperandPushMode(mTrap)
           oOperandSetValue(trSubscriptAbort)
           oEmitSingle(iCall)
           oOperandPop
           >>
          ;EmitSubscriptAbort
          oFixForwardBranch
          oFixPopAddress
          >>
         ;EmitSubscriptRangeCheck
         ] or >
         oOperandSwap
         @OperandPushArrayLowerBound
          [ oOperandChooseMode (mStatic)
          | mStatic:
          oOperandPushArrayLowerBound
          ] or >
          >>
         ;OperandPushArrayLowerBound
         oOperandSwapLeftAndDest
         @OperandSubtractPop
          @OperandAreLeftAndRightManifest
           [ oOperandChooseMode (mManifest)
           | mManifest:
           oOperandSwap
           [ oOperandChooseMode (mTemp)
           | *:
           oOperandSwap
           >>no
          ;OperandAreLeftAndRightManifest
          [@OperandAreLeftAndRightManifest (no)
          | no:
          [ oOperandChooseManifestValue (one)
          | one:
          oOperandPop
          @OperandForceIntoTemp
           [ oOperandChooseMode (mTemp)
           | mTemp:
           ] or >
           >>
          ;OperandForceIntoTemp
          oEmitSingle(iDec)
          ] or >
          ] or >
          >>
         ;OperandSubtractPop
         oOperandPushMode(mManifest)
         oOperandSetLength(two)
         oOperandSetValue(two)
         oEmitDouble(iShl)
         oOperandPop
         oOperandSwap
         [ oOperandChooseMode (mStatic)
         | mStatic:
         oOperandPushMode(mManifest)
         oOperandSetLength(two)
         oOperandSetValue(eight)
         oOperandAddManifestValues
         oOperandPop
         @OperandForceAddressIntoTemp
          [ oOperandChooseMode (mStatic)
          | mStatic:
          @OperandPushTempWord
           oTempAllocate
           oOperandPushTemp
           oOperandSetValue(zero)
           oOperandSetLength(two)
           >>
          ;OperandPushTempWord
          oOperandSwap
          oEmitDouble(iLoada)
          oOperandPop
          ] or >
          oOperandSetLength(two)
          >>
         ;OperandForceAddressIntoTemp
         oEmitDouble(iAdd)
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mTemp)
          | mTemp:
          oTempFree
          ] or >
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ] or >
         oOperandSetMode(mTempIndirect)
         oOperandSetLength(two)
         >>
        ;OperandCheckedSubscriptNonManifestIntegerPop
        ] or >
        >>
       ;OperandSubscriptNonManifestIntegerPop
       oOperandSetLength(two)
       >>
      ;OperandSubscriptIntegerPop
      ] or >
      ] or >
      [ (tLiteralInteger)
      | *:
      >>
     ;OperandPushVariable
     @OperandPushExpressionAssignPopPop
      [ (tLiteralInteger)
      | tLiteralInteger:
      oOperandPushInteger
      ] or >
      }
      [ (tAssignInteger)
      | tAssignInteger:
      @OperandAssignIntegerPopPop
       [ oOperandCompareLeftAndRight (no)
       | no:
       @EmitMove
        @OperandLeftOrRightIsTemp
         [ oOperandChooseMode (mManifest)
         | *:
         oOperandSwap
         [ oOperandChooseMode (mTempIndirect)
         | *:
         oOperandSwap
         >>no
        ;OperandLeftOrRightIsTemp
        [@OperandLeftOrRightIsTemp (no)
        | *:
        [ oOperandChooseMode (mManifest)
        | mManifest:
        oEmitDouble(iMov)
        ] or >
        >>
       ;EmitMove
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mManifest)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mTempIndirect)
        | mTempIndirect:
        oTempFree
        ] or >
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       ] or >
       >>
      ;OperandAssignIntegerPopPop
      ] or >
      >>
     ;OperandPushExpressionAssignPopPop
     >>
    ;AssignStmt
    ] or >
    }
    [ (tAssignBegin)
    | tAssignBegin:
    @AssignStmt
     oEmitSourceCoordinate
     ?tLiteralAddress (tLiteralAddress)
     @OperandPushVariable
      oOperandPushVariable
      [ (tSubscriptBegin)
      | *:
      [ (tSubscriptBegin)
      | tSubscriptBegin:
      @OperandPushExpression
       [ (tLiteralAddress)
       | tLiteralAddress:
       @OperandPushVariable
        oOperandPushVariable
        [ (tFetchInteger)
        | *:
        [ (tFetchInteger)
        | *:
        [ (tFetchInteger)
        | tFetchInteger:
        ] or >
        >>
       ;OperandPushVariable
       ] or >
       }
       [ (tSubscriptInteger)
       | *:
       ] or >
       >>
      ;OperandPushExpression
      [ (tSubscriptInteger)
      | tSubscriptInteger:
      @OperandSubscriptIntegerPop
       [ oOperandChooseMode (mStatic)
       | *:
       @OperandSubscriptNonManifestIntegerPop
        [ oOptionTestChecking (yes)
        | yes:
        @OperandCheckedSubscriptNonManifestIntegerPop
         @OperandForceIntoTemp
          [ oOperandChooseMode (mStatic)
          | *:
          [ oOperandChooseLength (two)
          | two:
          @OperandPushTempWord
           oTempAllocate
           oOperandPushTemp
           oOperandSetValue(zero)
           oOperandSetLength(two)
           >>
          ;OperandPushTempWord
          oOperandSwap
          oEmitDouble(iMov)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandSetMode(mTemp)
          ] or >
          >>
         ;OperandForceIntoTemp
         [ oOptionTestChecking (yes)
         | yes:
         @EmitSubscriptRangeCheck
          oOperandSwap
          @OperandPushArrayUpperBound
           [ oOperandChooseMode (mStatic)
           | mStatic:
           oOperandPushArrayUpperBound
           ] or >
           >>
          ;OperandPushArrayUpperBound
          oOperandSwapLeftAndDest
          @EmitCmp
           oOperandSwap
           [ oOperandChooseMode (mTemp)
           | *:
           oOperandSwap
           @OperandLeftOrRightIsTemp
            [ oOperandChooseMode (mManifest)
            | *:
            oOperandSwap
            [ oOperandChooseMode (mTemp)
            | mTemp:
            oOperandSwap
            >>yes
           ;OperandLeftOrRightIsTemp
           [@OperandLeftOrRightIsTemp (yes)
           | yes:
           oEmitDouble(iCmp)
           ] or >
           >>
          ;EmitCmp
          oOperandPushJumpCondition(iJgt)
          oEmitConditionalForwardBranch
          oFixPushLastAddress
          oOperandPop
          oOperandPop
          oOperandSwap
          @OperandPushArrayLowerBound
           [ oOperandChooseMode (mStatic)
           | mStatic:
           oOperandPushArrayLowerBound
           ] or >
           >>
          ;OperandPushArrayLowerBound
          oOperandSwapLeftAndDest
          @EmitCmp
           oOperandSwap
           [ oOperandChooseMode (mTemp)
           | *:
           oOperandSwap
           @OperandLeftOrRightIsTemp
            [ oOperandChooseMode (mManifest)
            | *:
            oOperandSwap
            [ oOperandChooseMode (mTemp)
            | mTemp:
            oOperandSwap
            >>yes
           ;OperandLeftOrRightIsTemp
           [@OperandLeftOrRightIsTemp (yes)
           | yes:
           oEmitDouble(iCmp)
           ] or >
           >>
          ;EmitCmp
          oOperandPushJumpCondition(iJge)
          oEmitConditionalForwardBranch
          oFixPushLastAddress
          oOperandPop
          oOperandPop
          oFixSwapAddresses
          oFixForwardBranch
          oFixPopAddress
          @EmitSubscriptAbort
           oOperandPushMode(mLineNum)
           oOperandSetLength(two)
           oEmitSingle(iPush)
           oOperandPop
           oOperandPushMode(mTrap)
           oOperandSetValue(trSubscriptAbort)
           oEmitSingle(iCall)
           oOperandPop
           >>
          ;EmitSubscriptAbort
          oFixForwardBranch
          oFixPopAddress
          >>
         ;EmitSubscriptRangeCheck
         ] or >
         oOperandSwap
         @OperandPushArrayLowerBound
          [ oOperandChooseMode (mStatic)
          | mStatic:
          oOperandPushArrayLowerBound
          ] or >
          >>
         ;OperandPushArrayLowerBound
         oOperandSwapLeftAndDest
         @OperandSubtractPop
          @OperandAreLeftAndRightManifest
           [ oOperandChooseMode (mManifest)
           | mManifest:
           oOperandSwap
           [ oOperandChooseMode (mTemp)
           | *:
           oOperandSwap
           >>no
          ;OperandAreLeftAndRightManifest
          [@OperandAreLeftAndRightManifest (no)
          | no:
          [ oOperandChooseManifestValue (one)
          | one:
          oOperandPop
          @OperandForceIntoTemp
           [ oOperandChooseMode (mTemp)
           | mTemp:
           ] or >
           >>
          ;OperandForceIntoTemp
          oEmitSingle(iDec)
          ] or >
          ] or >
          >>
         ;OperandSubtractPop
         oOperandPushMode(mManifest)
         oOperandSetLength(two)
         oOperandSetValue(two)
         oEmitDouble(iShl)
         oOperandPop
         oOperandSwap
         [ oOperandChooseMode (mStatic)
         | mStatic:
         oOperandPushMode(mManifest)
         oOperandSetLength(two)
         oOperandSetValue(eight)
         oOperandAddManifestValues
         oOperandPop
         @OperandForceAddressIntoTemp
          [ oOperandChooseMode (mStatic)
          | mStatic:
          @OperandPushTempWord
           oTempAllocate
           oOperandPushTemp
           oOperandSetValue(zero)
           oOperandSetLength(two)
           >>
          ;OperandPushTempWord
          oOperandSwap
          oEmitDouble(iLoada)
          oOperandPop
          ] or >
          oOperandSetLength(two)
          >>
         ;OperandForceAddressIntoTemp
         oEmitDouble(iAdd)
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mTemp)
          | mTemp:
          oTempFree
          ] or >
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ] or >
         oOperandSetMode(mTempIndirect)
         oOperandSetLength(two)
         >>
        ;OperandCheckedSubscriptNonManifestIntegerPop
        ] or >
        >>
       ;OperandSubscriptNonManifestIntegerPop
       oOperandSetLength(two)
       >>
      ;OperandSubscriptIntegerPop
      ] or >
      ] or >
      [ (tLiteralInteger)
      | *:
      >>
     ;OperandPushVariable
     @OperandPushExpressionAssignPopPop
      [ (tLiteralInteger)
      | tLiteralInteger:
      oOperandPushInteger
      ] or >
      }
      [ (tAssignInteger)
      | tAssignInteger:
      @OperandAssignIntegerPopPop
       [ oOperandCompareLeftAndRight (no)
       | no:
       @EmitMove
        @OperandLeftOrRightIsTemp
         [ oOperandChooseMode (mManifest)
         | *:
         oOperandSwap
         [ oOperandChooseMode (mTempIndirect)
         | *:
         oOperandSwap
         >>no
        ;OperandLeftOrRightIsTemp
        [@OperandLeftOrRightIsTemp (no)
        | *:
        [ oOperandChooseMode (mManifest)
        | mManifest:
        oEmitDouble(iMov)
        ] or >
        >>
       ;EmitMove
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mManifest)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mTempIndirect)
        | mTempIndirect:
        oTempFree
        ] or >
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       ] or >
       >>
      ;OperandAssignIntegerPopPop
      ] or >
      >>
     ;OperandPushExpressionAssignPopPop
     >>
    ;AssignStmt
    ] or >
    }
    [ (tIfBegin)
    | tIfBegin:
    @IfStmt
     oEmitSourceCoordinate
     @OperandPushBooleanControlExpression
      @OperandPushExpression
       [ (tLiteralAddress)
       | tLiteralAddress:
       @OperandPushVariable
        oOperandPushVariable
        [ (tFetchInteger)
        | *:
        [ (tFetchInteger)
        | *:
        [ (tFetchInteger)
        | tFetchInteger:
        ] or >
        >>
       ;OperandPushVariable
       ] or >
       }
       [ (tLiteralInteger)
       | tLiteralInteger:
       oOperandPushInteger
       ] or >
       }
       [ (tEQ)
       | tEQ:
       @OperandEqualPop
        [ oOperandCompareLeftAndRight (no)
        | no:
        [ oOperandChooseManifestValue (zero)
        | zero:
        oOperandPop
        @EmitTst
         [ oOperandChooseLength (two)
         | two:
         oOperandPushMode(mManifest)
         oOperandSetValue(zero)
         oOperandSetLength(two)
         ] or >
         @EmitCmp
          oOperandSwap
          [ oOperandChooseMode (mStatic)
          | *:
          oOperandSwap
          @OperandLeftOrRightIsTemp
           [ oOperandChooseMode (mManifest)
           | *:
           oOperandSwap
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandSwap
           >>no
          ;OperandLeftOrRightIsTemp
          [@OperandLeftOrRightIsTemp (no)
          | *:
          [ oOperandChooseMode (mManifest)
          | mManifest:
          oEmitDouble(iCmp)
          ] or >
          >>
         ;EmitCmp
         oOperandPop
         >>
        ;EmitTst
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        oOperandPushJumpCondition(iJeq)
        ] or >
        ] or >
        >>
       ;OperandEqualPop
       ] or >
       }
       [ (tIfThen)
       | *:
       ] or >
       >>
      ;OperandPushExpression
      @OperandForceToJumpCondition
       [ oOperandIsJumpCondition (yes)
       | yes:
       ] or >
       >>
      ;OperandForceToJumpCondition
      >>
     ;OperandPushBooleanControlExpression
     ?tIfThen (tIfThen)
     [ oOperandChooseJumpCondition (iJeq)
     | *:
     @OperandComplementJumpCondition
      [ oOperandChooseJumpCondition (iJeq)
      | *:
      oOperandComplementJumpCondition
      >>
     ;OperandComplementJumpCondition
     @OperandInfixOr
      @OperandForceToJumpCondition
       [ oOperandIsJumpCondition (yes)
       | yes:
       ] or >
       >>
      ;OperandForceToJumpCondition
      [ oOperandChooseJumpCondition (iJne)
      | *:
      oEmitConditionalForwardBranch
      oFixAndFreeFalseBranches
      oFixPushLastAddress
      oOperandMergeShuntsWithAddress
      oFixPopAddress
      >>
     ;OperandInfixOr
     @Statements
      @Block
       [ (tAssignBegin)
       | tAssignBegin:
       @AssignStmt
        oEmitSourceCoordinate
        ?tLiteralAddress (tLiteralAddress)
        @OperandPushVariable
         oOperandPushVariable
         [ (tLiteralAddress)
         | *:
         [ (tLiteralAddress)
         | *:
         [ (tLiteralAddress)
         | *:
         >>
        ;OperandPushVariable
        @OperandPushExpressionAssignPopPop
         [ (tLiteralAddress)
         | tLiteralAddress:
         @OperandPushVariable
          oOperandPushVariable
          [ (tFetchInteger)
          | *:
          [ (tFetchInteger)
          | *:
          [ (tFetchInteger)
          | tFetchInteger:
          ] or >
          >>
         ;OperandPushVariable
         ] or >
         }
         [ (tAssignInteger)
         | tAssignInteger:
         @OperandAssignIntegerPopPop
          [ oOperandCompareLeftAndRight (no)
          | no:
          @EmitMove
           @OperandLeftOrRightIsTemp
            [ oOperandChooseMode (mStatic)
            | *:
            oOperandSwap
            [ oOperandChooseMode (mStatic)
            | *:
            oOperandSwap
            >>no
           ;OperandLeftOrRightIsTemp
           [@OperandLeftOrRightIsTemp (no)
           | *:
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPushCopy
           @OperandForceIntoTemp
            [ oOperandChooseMode (mStatic)
            | *:
            [ oOperandChooseLength (two)
            | two:
            @OperandPushTempWord
             oTempAllocate
             oOperandPushTemp
             oOperandSetValue(zero)
             oOperandSetLength(two)
             >>
            ;OperandPushTempWord
            oOperandSwap
            oEmitDouble(iMov)
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStatic)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            oOperandSetMode(mTemp)
            ] or >
            >>
           ;OperandForceIntoTemp
           oOperandSwapLeftAndDest
           oEmitDouble(iMov)
           @OperandPopAndFreeTemp
            [ oOperandChooseMode (mTemp)
            | mTemp:
            oTempFree
            ] or >
            oOperandPop
            >>
           ;OperandPopAndFreeTemp
           oOperandSwap
           >>
          ;EmitMove
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          ] or >
          >>
         ;OperandAssignIntegerPopPop
         ] or >
         >>
        ;OperandPushExpressionAssignPopPop
        >>
       ;AssignStmt
       ] or >
       }
       [ (tIfMerge)
       | *:
       ] or >
       >>
      ;Block
      >>
     ;Statements
     [ (tIfMerge)
     | tIfMerge:
     oEmitUnconditionalForwardBranch
     oFixAndFreeShuntList
     oOperandPop
     oFixPushLastAddress
     oEmitMergeSourceCoordinate
     @Statements
      @Block
       [ (tInitialValue)
       | tInitialValue:
       @OperandPushExpression
        [ (tLiteralAddress)
        | tLiteralAddress:
        @OperandPushVariable
         oOperandPushVariable
         [ (tFetchInteger)
         | *:
         [ (tFetchInteger)
         | *:
         [ (tFetchInteger)
         | tFetchInteger:
         ] or >
         >>
        ;OperandPushVariable
        ] or >
        }
        [ (tInitEnd)
        | *:
        ] or >
        >>
       ;OperandPushExpression
       ?tInitEnd (tInitEnd)
       ?tLiteralAddress (tLiteralAddress)
       oOperandPushVariable
       oOperandSwap
       [ (tStoreInteger)
       | tStoreInteger:
       oOperandSetLength(two)
       @OperandAssignIntegerPopPop
        [ oOperandCompareLeftAndRight (no)
        | no:
        @EmitMove
         @OperandLeftOrRightIsTemp
          [ oOperandChooseMode (mStatic)
          | *:
          oOperandSwap
          [ oOperandChooseMode (mStatic)
          | *:
          oOperandSwap
          >>no
         ;OperandLeftOrRightIsTemp
         [@OperandLeftOrRightIsTemp (no)
         | *:
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandPushCopy
         @OperandForceIntoTemp
          [ oOperandChooseMode (mStatic)
          | *:
          [ oOperandChooseLength (two)
          | two:
          @OperandPushTempWord
           oTempAllocate
           oOperandPushTemp
           oOperandSetValue(zero)
           oOperandSetLength(two)
           >>
          ;OperandPushTempWord
          oOperandSwap
          oEmitDouble(iMov)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandSetMode(mTemp)
          ] or >
          >>
         ;OperandForceIntoTemp
         oOperandSwapLeftAndDest
         oEmitDouble(iMov)
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mTemp)
          | mTemp:
          oTempFree
          ] or >
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         oOperandSwap
         >>
        ;EmitMove
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        ] or >
        >>
       ;OperandAssignIntegerPopPop
       ] or >
       ] or >
       }
       [ (tRepeatBegin)
       | tRepeatBegin:
       @RepeatStmt
        oFixPushAddress
        oEmitMergeSourceCoordinate
        @Statements
         @Block
          [ (tIfBegin)
          | tIfBegin:
          @IfStmt
           oEmitSourceCoordinate
           @OperandPushBooleanControlExpression
            @OperandPushExpression
             [ (tLiteralAddress)
             | tLiteralAddress:
             @OperandPushVariable
              oOperandPushVariable
              [ (tFetchInteger)
              | *:
              [ (tFetchInteger)
              | *:
              [ (tFetchInteger)
              | tFetchInteger:
              ] or >
              >>
             ;OperandPushVariable
             ] or >
             }
             [ (tLiteralAddress)
             | tLiteralAddress:
             @OperandPushVariable
              oOperandPushVariable
              [ (tSubscriptBegin)
              | *:
              [ (tSubscriptBegin)
              | tSubscriptBegin:
              @OperandPushExpression
               [ (tLiteralAddress)
               | tLiteralAddress:
               @OperandPushVariable
                oOperandPushVariable
                [ (tFetchInteger)
                | *:
                [ (tFetchInteger)
                | *:
                [ (tFetchInteger)
                | tFetchInteger:
                ] or >
                >>
               ;OperandPushVariable
               ] or >
               }
               [ (tSubscriptInteger)
               | *:
               ] or >
               >>
              ;OperandPushExpression
              [ (tSubscriptInteger)
              | tSubscriptInteger:
              @OperandSubscriptIntegerPop
               [ oOperandChooseMode (mStatic)
               | *:
               @OperandSubscriptNonManifestIntegerPop
                [ oOptionTestChecking (yes)
                | yes:
                @OperandCheckedSubscriptNonManifestIntegerPop
                 @OperandForceIntoTemp
                  [ oOperandChooseMode (mStatic)
                  | *:
                  [ oOperandChooseLength (two)
                  | two:
                  @OperandPushTempWord
                   oTempAllocate
                   oOperandPushTemp
                   oOperandSetValue(zero)
                   oOperandSetLength(two)
                   >>
                  ;OperandPushTempWord
                  oOperandSwap
                  oEmitDouble(iMov)
                  @OperandPopAndFreeTemp
                   [ oOperandChooseMode (mStatic)
                   | *:
                   oOperandPop
                   >>
                  ;OperandPopAndFreeTemp
                  oOperandSetMode(mTemp)
                  ] or >
                  >>
                 ;OperandForceIntoTemp
                 [ oOptionTestChecking (yes)
                 | yes:
                 @EmitSubscriptRangeCheck
                  oOperandSwap
                  @OperandPushArrayUpperBound
                   [ oOperandChooseMode (mStatic)
                   | mStatic:
                   oOperandPushArrayUpperBound
                   ] or >
                   >>
                  ;OperandPushArrayUpperBound
                  oOperandSwapLeftAndDest
                  @EmitCmp
                   oOperandSwap
                   [ oOperandChooseMode (mTemp)
                   | *:
                   oOperandSwap
                   @OperandLeftOrRightIsTemp
                    [ oOperandChooseMode (mManifest)
                    | *:
                    oOperandSwap
                    [ oOperandChooseMode (mTemp)
                    | mTemp:
                    oOperandSwap
                    >>yes
                   ;OperandLeftOrRightIsTemp
                   [@OperandLeftOrRightIsTemp (yes)
                   | yes:
                   oEmitDouble(iCmp)
                   ] or >
                   >>
                  ;EmitCmp
                  oOperandPushJumpCondition(iJgt)
                  oEmitConditionalForwardBranch
                  oFixPushLastAddress
                  oOperandPop
                  oOperandPop
                  oOperandSwap
                  @OperandPushArrayLowerBound
                   [ oOperandChooseMode (mStatic)
                   | mStatic:
                   oOperandPushArrayLowerBound
                   ] or >
                   >>
                  ;OperandPushArrayLowerBound
                  oOperandSwapLeftAndDest
                  @EmitCmp
                   oOperandSwap
                   [ oOperandChooseMode (mTemp)
                   | *:
                   oOperandSwap
                   @OperandLeftOrRightIsTemp
                    [ oOperandChooseMode (mManifest)
                    | *:
                    oOperandSwap
                    [ oOperandChooseMode (mTemp)
                    | mTemp:
                    oOperandSwap
                    >>yes
                   ;OperandLeftOrRightIsTemp
                   [@OperandLeftOrRightIsTemp (yes)
                   | yes:
                   oEmitDouble(iCmp)
                   ] or >
                   >>
                  ;EmitCmp
                  oOperandPushJumpCondition(iJge)
                  oEmitConditionalForwardBranch
                  oFixPushLastAddress
                  oOperandPop
                  oOperandPop
                  oFixSwapAddresses
                  oFixForwardBranch
                  oFixPopAddress
                  @EmitSubscriptAbort
                   oOperandPushMode(mLineNum)
                   oOperandSetLength(two)
                   oEmitSingle(iPush)
                   oOperandPop
                   oOperandPushMode(mTrap)
                   oOperandSetValue(trSubscriptAbort)
                   oEmitSingle(iCall)
                   oOperandPop
                   >>
                  ;EmitSubscriptAbort
                  oFixForwardBranch
                  oFixPopAddress
                  >>
                 ;EmitSubscriptRangeCheck
                 ] or >
                 oOperandSwap
                 @OperandPushArrayLowerBound
                  [ oOperandChooseMode (mStatic)
                  | mStatic:
                  oOperandPushArrayLowerBound
                  ] or >
                  >>
                 ;OperandPushArrayLowerBound
                 oOperandSwapLeftAndDest
                 @OperandSubtractPop
                  @OperandAreLeftAndRightManifest
                   [ oOperandChooseMode (mManifest)
                   | mManifest:
                   oOperandSwap
                   [ oOperandChooseMode (mTemp)
                   | *:
                   oOperandSwap
                   >>no
                  ;OperandAreLeftAndRightManifest
                  [@OperandAreLeftAndRightManifest (no)
                  | no:
                  [ oOperandChooseManifestValue (one)
                  | one:
                  oOperandPop
                  @OperandForceIntoTemp
                   [ oOperandChooseMode (mTemp)
                   | mTemp:
                   ] or >
                   >>
                  ;OperandForceIntoTemp
                  oEmitSingle(iDec)
                  ] or >
                  ] or >
                  >>
                 ;OperandSubtractPop
                 oOperandPushMode(mManifest)
                 oOperandSetLength(two)
                 oOperandSetValue(two)
                 oEmitDouble(iShl)
                 oOperandPop
                 oOperandSwap
                 [ oOperandChooseMode (mStatic)
                 | mStatic:
                 oOperandPushMode(mManifest)
                 oOperandSetLength(two)
                 oOperandSetValue(eight)
                 oOperandAddManifestValues
                 oOperandPop
                 @OperandForceAddressIntoTemp
                  [ oOperandChooseMode (mStatic)
                  | mStatic:
                  @OperandPushTempWord
                   oTempAllocate
                   oOperandPushTemp
                   oOperandSetValue(zero)
                   oOperandSetLength(two)
                   >>
                  ;OperandPushTempWord
                  oOperandSwap
                  oEmitDouble(iLoada)
                  oOperandPop
                  ] or >
                  oOperandSetLength(two)
                  >>
                 ;OperandForceAddressIntoTemp
                 oEmitDouble(iAdd)
                 @OperandPopAndFreeTemp
                  [ oOperandChooseMode (mTemp)
                  | mTemp:
                  oTempFree
                  ] or >
                  oOperandPop
                  >>
                 ;OperandPopAndFreeTemp
                 ] or >
                 oOperandSetMode(mTempIndirect)
                 oOperandSetLength(two)
                 >>
                ;OperandCheckedSubscriptNonManifestIntegerPop
                ] or >
                >>
               ;OperandSubscriptNonManifestIntegerPop
               oOperandSetLength(two)
               >>
              ;OperandSubscriptIntegerPop
              ] or >
              ] or >
              [ (tFetchInteger)
              | tFetchInteger:
              ] or >
              >>
             ;OperandPushVariable
             ] or >
             }
             [ (tLT)
             | tLT:
             @OperandLessPop
              oOperandSwap
              @OperandGreaterPop
               [ oOperandCompareLeftAndRight (no)
               | no:
               [ oOperandChooseManifestValue ()
               | *:
               oOperandSwap
               [ oOperandChooseManifestValue ()
               | *:
               oOperandSwap
               @EmitCmp
                oOperandSwap
                [ oOperandChooseMode (mTempIndirect)
                | *:
                oOperandSwap
                @OperandLeftOrRightIsTemp
                 [ oOperandChooseMode (mStatic)
                 | *:
                 oOperandSwap
                 [ oOperandChooseMode (mTempIndirect)
                 | *:
                 oOperandSwap
                 >>no
                ;OperandLeftOrRightIsTemp
                [@OperandLeftOrRightIsTemp (no)
                | *:
                [ oOperandChooseMode (mStatic)
                | *:
                oOperandPushCopy
                @OperandForceIntoTemp
                 [ oOperandChooseMode (mStatic)
                 | *:
                 [ oOperandChooseLength (two)
                 | two:
                 @OperandPushTempWord
                  oTempAllocate
                  oOperandPushTemp
                  oOperandSetValue(zero)
                  oOperandSetLength(two)
                  >>
                 ;OperandPushTempWord
                 oOperandSwap
                 oEmitDouble(iMov)
                 @OperandPopAndFreeTemp
                  [ oOperandChooseMode (mStatic)
                  | *:
                  oOperandPop
                  >>
                 ;OperandPopAndFreeTemp
                 oOperandSetMode(mTemp)
                 ] or >
                 >>
                ;OperandForceIntoTemp
                oOperandSwapLeftAndDest
                oEmitDouble(iCmp)
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mTemp)
                 | mTemp:
                 oTempFree
                 ] or >
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                oOperandSwap
                >>
               ;EmitCmp
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mStatic)
                | *:
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mTempIndirect)
                | mTempIndirect:
                oTempFree
                ] or >
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               oOperandPushJumpCondition(iJgt)
               ] or >
               >>
              ;OperandGreaterPop
              >>
             ;OperandLessPop
             ] or >
             }
             [ (tIfThen)
             | *:
             ] or >
             >>
            ;OperandPushExpression
            @OperandForceToJumpCondition
             [ oOperandIsJumpCondition (yes)
             | yes:
             ] or >
             >>
            ;OperandForceToJumpCondition
            >>
           ;OperandPushBooleanControlExpression
           ?tIfThen (tIfThen)
           [ oOperandChooseJumpCondition (iJgt)
           | *:
           @OperandComplementJumpCondition
            [ oOperandChooseJumpCondition (iJgt)
            | *:
            oOperandComplementJumpCondition
            >>
           ;OperandComplementJumpCondition
           @OperandInfixOr
            @OperandForceToJumpCondition
             [ oOperandIsJumpCondition (yes)
             | yes:
             ] or >
             >>
            ;OperandForceToJumpCondition
            [ oOperandChooseJumpCondition (iJle)
            | *:
            oEmitConditionalForwardBranch
            oFixAndFreeFalseBranches
            oFixPushLastAddress
            oOperandMergeShuntsWithAddress
            oFixPopAddress
            >>
           ;OperandInfixOr
           @Statements
            @Block
             [ (tIfBegin)
             | tIfBegin:
             @IfStmt
              oEmitSourceCoordinate
              @OperandPushBooleanControlExpression
               @OperandPushExpression
                [ (tLiteralAddress)
                | tLiteralAddress:
                @OperandPushVariable
                 oOperandPushVariable
                 [ (tSubscriptBegin)
                 | *:
                 [ (tSubscriptBegin)
                 | tSubscriptBegin:
                 @OperandPushExpression
                  [ (tLiteralAddress)
                  | tLiteralAddress:
                  @OperandPushVariable
                   oOperandPushVariable
                   [ (tFetchInteger)
                   | *:
                   [ (tFetchInteger)
                   | *:
                   [ (tFetchInteger)
                   | tFetchInteger:
                   ] or >
                   >>
                  ;OperandPushVariable
                  ] or >
                  }
                  [ (tSubscriptInteger)
                  | *:
                  ] or >
                  >>
                 ;OperandPushExpression
                 [ (tSubscriptInteger)
                 | tSubscriptInteger:
                 @OperandSubscriptIntegerPop
                  [ oOperandChooseMode (mStatic)
                  | *:
                  @OperandSubscriptNonManifestIntegerPop
                   [ oOptionTestChecking (yes)
                   | yes:
                   @OperandCheckedSubscriptNonManifestIntegerPop
                    @OperandForceIntoTemp
                     [ oOperandChooseMode (mStatic)
                     | *:
                     [ oOperandChooseLength (two)
                     | two:
                     @OperandPushTempWord
                      oTempAllocate
                      oOperandPushTemp
                      oOperandSetValue(zero)
                      oOperandSetLength(two)
                      >>
                     ;OperandPushTempWord
                     oOperandSwap
                     oEmitDouble(iMov)
                     @OperandPopAndFreeTemp
                      [ oOperandChooseMode (mStatic)
                      | *:
                      oOperandPop
                      >>
                     ;OperandPopAndFreeTemp
                     oOperandSetMode(mTemp)
                     ] or >
                     >>
                    ;OperandForceIntoTemp
                    [ oOptionTestChecking (yes)
                    | yes:
                    @EmitSubscriptRangeCheck
                     oOperandSwap
                     @OperandPushArrayUpperBound
                      [ oOperandChooseMode (mStatic)
                      | mStatic:
                      oOperandPushArrayUpperBound
                      ] or >
                      >>
                     ;OperandPushArrayUpperBound
                     oOperandSwapLeftAndDest
                     @EmitCmp
                      oOperandSwap
                      [ oOperandChooseMode (mTemp)
                      | *:
                      oOperandSwap
                      @OperandLeftOrRightIsTemp
                       [ oOperandChooseMode (mManifest)
                       | *:
                       oOperandSwap
                       [ oOperandChooseMode (mTemp)
                       | mTemp:
                       oOperandSwap
                       >>yes
                      ;OperandLeftOrRightIsTemp
                      [@OperandLeftOrRightIsTemp (yes)
                      | yes:
                      oEmitDouble(iCmp)
                      ] or >
                      >>
                     ;EmitCmp
                     oOperandPushJumpCondition(iJgt)
                     oEmitConditionalForwardBranch
                     oFixPushLastAddress
                     oOperandPop
                     oOperandPop
                     oOperandSwap
                     @OperandPushArrayLowerBound
                      [ oOperandChooseMode (mStatic)
                      | mStatic:
                      oOperandPushArrayLowerBound
                      ] or >
                      >>
                     ;OperandPushArrayLowerBound
                     oOperandSwapLeftAndDest
                     @EmitCmp
                      oOperandSwap
                      [ oOperandChooseMode (mTemp)
                      | *:
                      oOperandSwap
                      @OperandLeftOrRightIsTemp
                       [ oOperandChooseMode (mManifest)
                       | *:
                       oOperandSwap
                       [ oOperandChooseMode (mTemp)
                       | mTemp:
                       oOperandSwap
                       >>yes
                      ;OperandLeftOrRightIsTemp
                      [@OperandLeftOrRightIsTemp (yes)
                      | yes:
                      oEmitDouble(iCmp)
                      ] or >
                      >>
                     ;EmitCmp
                     oOperandPushJumpCondition(iJge)
                     oEmitConditionalForwardBranch
                     oFixPushLastAddress
                     oOperandPop
                     oOperandPop
                     oFixSwapAddresses
                     oFixForwardBranch
                     oFixPopAddress
                     @EmitSubscriptAbort
                      oOperandPushMode(mLineNum)
                      oOperandSetLength(two)
                      oEmitSingle(iPush)
                      oOperandPop
                      oOperandPushMode(mTrap)
                      oOperandSetValue(trSubscriptAbort)
                      oEmitSingle(iCall)
                      oOperandPop
                      >>
                     ;EmitSubscriptAbort
                     oFixForwardBranch
                     oFixPopAddress
                     >>
                    ;EmitSubscriptRangeCheck
                    ] or >
                    oOperandSwap
                    @OperandPushArrayLowerBound
                     [ oOperandChooseMode (mStatic)
                     | mStatic:
                     oOperandPushArrayLowerBound
                     ] or >
                     >>
                    ;OperandPushArrayLowerBound
                    oOperandSwapLeftAndDest
                    @OperandSubtractPop
                     @OperandAreLeftAndRightManifest
                      [ oOperandChooseMode (mManifest)
                      | mManifest:
                      oOperandSwap
                      [ oOperandChooseMode (mTemp)
                      | *:
                      oOperandSwap
                      >>no
                     ;OperandAreLeftAndRightManifest
                     [@OperandAreLeftAndRightManifest (no)
                     | no:
                     [ oOperandChooseManifestValue (one)
                     | one:
                     oOperandPop
                     @OperandForceIntoTemp
                      [ oOperandChooseMode (mTemp)
                      | mTemp:
                      ] or >
                      >>
                     ;OperandForceIntoTemp
                     oEmitSingle(iDec)
                     ] or >
                     ] or >
                     >>
                    ;OperandSubtractPop
                    oOperandPushMode(mManifest)
                    oOperandSetLength(two)
                    oOperandSetValue(two)
                    oEmitDouble(iShl)
                    oOperandPop
                    oOperandSwap
                    [ oOperandChooseMode (mStatic)
                    | mStatic:
                    oOperandPushMode(mManifest)
                    oOperandSetLength(two)
                    oOperandSetValue(eight)
                    oOperandAddManifestValues
                    oOperandPop
                    @OperandForceAddressIntoTemp
                     [ oOperandChooseMode (mStatic)
                     | mStatic:
                     @OperandPushTempWord
                      oTempAllocate
                      oOperandPushTemp
                      oOperandSetValue(zero)
                      oOperandSetLength(two)
                      >>
                     ;OperandPushTempWord
                     oOperandSwap
                     oEmitDouble(iLoada)
                     oOperandPop
                     ] or >
                     oOperandSetLength(two)
                     >>
                    ;OperandForceAddressIntoTemp
                    oEmitDouble(iAdd)
                    @OperandPopAndFreeTemp
                     [ oOperandChooseMode (mTemp)
                     | mTemp:
                     oTempFree
                     ] or >
                     oOperandPop
                     >>
                    ;OperandPopAndFreeTemp
                    ] or >
                    oOperandSetMode(mTempIndirect)
                    oOperandSetLength(two)
                    >>
                   ;OperandCheckedSubscriptNonManifestIntegerPop
                   ] or >
                   >>
                  ;OperandSubscriptNonManifestIntegerPop
                  oOperandSetLength(two)
                  >>
                 ;OperandSubscriptIntegerPop
                 ] or >
                 ] or >
                 [ (tFetchInteger)
                 | tFetchInteger:
                 ] or >
                 >>
                ;OperandPushVariable
                ] or >
                }
                [ (tLiteralInteger)
                | tLiteralInteger:
                oOperandPushInteger
                ] or >
                }
                [ (tEQ)
                | tEQ:
                @OperandEqualPop
                 [ oOperandCompareLeftAndRight (no)
                 | no:
                 [ oOperandChooseManifestValue (zero)
                 | zero:
                 oOperandPop
                 @EmitTst
                  [ oOperandChooseLength (two)
                  | two:
                  oOperandPushMode(mManifest)
                  oOperandSetValue(zero)
                  oOperandSetLength(two)
                  ] or >
                  @EmitCmp
                   oOperandSwap
                   [ oOperandChooseMode (mTempIndirect)
                   | *:
                   oOperandSwap
                   @OperandLeftOrRightIsTemp
                    [ oOperandChooseMode (mManifest)
                    | *:
                    oOperandSwap
                    [ oOperandChooseMode (mTempIndirect)
                    | *:
                    oOperandSwap
                    >>no
                   ;OperandLeftOrRightIsTemp
                   [@OperandLeftOrRightIsTemp (no)
                   | *:
                   [ oOperandChooseMode (mManifest)
                   | mManifest:
                   oEmitDouble(iCmp)
                   ] or >
                   >>
                  ;EmitCmp
                  oOperandPop
                  >>
                 ;EmitTst
                 @OperandPopAndFreeTemp
                  [ oOperandChooseMode (mTempIndirect)
                  | mTempIndirect:
                  oTempFree
                  ] or >
                  oOperandPop
                  >>
                 ;OperandPopAndFreeTemp
                 oOperandPushJumpCondition(iJeq)
                 ] or >
                 ] or >
                 >>
                ;OperandEqualPop
                ] or >
                }
                [ (tIfThen)
                | *:
                ] or >
                >>
               ;OperandPushExpression
               @OperandForceToJumpCondition
                [ oOperandIsJumpCondition (yes)
                | yes:
                ] or >
                >>
               ;OperandForceToJumpCondition
               >>
              ;OperandPushBooleanControlExpression
              ?tIfThen (tIfThen)
              [ oOperandChooseJumpCondition (iJeq)
              | *:
              @OperandComplementJumpCondition
               [ oOperandChooseJumpCondition (iJeq)
               | *:
               oOperandComplementJumpCondition
               >>
              ;OperandComplementJumpCondition
              @OperandInfixOr
               @OperandForceToJumpCondition
                [ oOperandIsJumpCondition (yes)
                | yes:
                ] or >
                >>
               ;OperandForceToJumpCondition
               [ oOperandChooseJumpCondition (iJne)
               | *:
               oEmitConditionalForwardBranch
               oFixAndFreeFalseBranches
               oFixPushLastAddress
               oOperandMergeShuntsWithAddress
               oFixPopAddress
               >>
              ;OperandInfixOr
              @Statements
               @Block
                [ (tAssignBegin)
                | tAssignBegin:
                @AssignStmt
                 oEmitSourceCoordinate
                 ?tLiteralAddress (tLiteralAddress)
                 @OperandPushVariable
                  oOperandPushVariable
                  [ (tSubscriptBegin)
                  | *:
                  [ (tSubscriptBegin)
                  | tSubscriptBegin:
                  @OperandPushExpression
                   [ (tLiteralAddress)
                   | tLiteralAddress:
                   @OperandPushVariable
                    oOperandPushVariable
                    [ (tFetchInteger)
                    | *:
                    [ (tFetchInteger)
                    | *:
                    [ (tFetchInteger)
                    | tFetchInteger:
                    ] or >
                    >>
                   ;OperandPushVariable
                   ] or >
                   }
                   [ (tSubscriptInteger)
                   | *:
                   ] or >
                   >>
                  ;OperandPushExpression
                  [ (tSubscriptInteger)
                  | tSubscriptInteger:
                  @OperandSubscriptIntegerPop
                   [ oOperandChooseMode (mStatic)
                   | *:
                   @OperandSubscriptNonManifestIntegerPop
                    [ oOptionTestChecking (yes)
                    | yes:
                    @OperandCheckedSubscriptNonManifestIntegerPop
                     @OperandForceIntoTemp
                      [ oOperandChooseMode (mStatic)
                      | *:
                      [ oOperandChooseLength (two)
                      | two:
                      @OperandPushTempWord
                       oTempAllocate
                       oOperandPushTemp
                       oOperandSetValue(zero)
                       oOperandSetLength(two)
                       >>
                      ;OperandPushTempWord
                      oOperandSwap
                      oEmitDouble(iMov)
                      @OperandPopAndFreeTemp
                       [ oOperandChooseMode (mStatic)
                       | *:
                       oOperandPop
                       >>
                      ;OperandPopAndFreeTemp
                      oOperandSetMode(mTemp)
                      ] or >
                      >>
                     ;OperandForceIntoTemp
                     [ oOptionTestChecking (yes)
                     | yes:
                     @EmitSubscriptRangeCheck
                      oOperandSwap
                      @OperandPushArrayUpperBound
                       [ oOperandChooseMode (mStatic)
                       | mStatic:
                       oOperandPushArrayUpperBound
                       ] or >
                       >>
                      ;OperandPushArrayUpperBound
                      oOperandSwapLeftAndDest
                      @EmitCmp
                       oOperandSwap
                       [ oOperandChooseMode (mTemp)
                       | *:
                       oOperandSwap
                       @OperandLeftOrRightIsTemp
                        [ oOperandChooseMode (mManifest)
                        | *:
                        oOperandSwap
                        [ oOperandChooseMode (mTemp)
                        | mTemp:
                        oOperandSwap
                        >>yes
                       ;OperandLeftOrRightIsTemp
                       [@OperandLeftOrRightIsTemp (yes)
                       | yes:
                       oEmitDouble(iCmp)
                       ] or >
                       >>
                      ;EmitCmp
                      oOperandPushJumpCondition(iJgt)
                      oEmitConditionalForwardBranch
                      oFixPushLastAddress
                      oOperandPop
                      oOperandPop
                      oOperandSwap
                      @OperandPushArrayLowerBound
                       [ oOperandChooseMode (mStatic)
                       | mStatic:
                       oOperandPushArrayLowerBound
                       ] or >
                       >>
                      ;OperandPushArrayLowerBound
                      oOperandSwapLeftAndDest
                      @EmitCmp
                       oOperandSwap
                       [ oOperandChooseMode (mTemp)
                       | *:
                       oOperandSwap
                       @OperandLeftOrRightIsTemp
                        [ oOperandChooseMode (mManifest)
                        | *:
                        oOperandSwap
                        [ oOperandChooseMode (mTemp)
                        | mTemp:
                        oOperandSwap
                        >>yes
                       ;OperandLeftOrRightIsTemp
                       [@OperandLeftOrRightIsTemp (yes)
                       | yes:
                       oEmitDouble(iCmp)
                       ] or >
                       >>
                      ;EmitCmp
                      oOperandPushJumpCondition(iJge)
                      oEmitConditionalForwardBranch
                      oFixPushLastAddress
                      oOperandPop
                      oOperandPop
                      oFixSwapAddresses
                      oFixForwardBranch
                      oFixPopAddress
                      @EmitSubscriptAbort
                       oOperandPushMode(mLineNum)
                       oOperandSetLength(two)
                       oEmitSingle(iPush)
                       oOperandPop
                       oOperandPushMode(mTrap)
                       oOperandSetValue(trSubscriptAbort)
                       oEmitSingle(iCall)
                       oOperandPop
                       >>
                      ;EmitSubscriptAbort
                      oFixForwardBranch
                      oFixPopAddress
                      >>
                     ;EmitSubscriptRangeCheck
                     ] or >
                     oOperandSwap
                     @OperandPushArrayLowerBound
                      [ oOperandChooseMode (mStatic)
                      | mStatic:
                      oOperandPushArrayLowerBound
                      ] or >
                      >>
                     ;OperandPushArrayLowerBound
                     oOperandSwapLeftAndDest
                     @OperandSubtractPop
                      @OperandAreLeftAndRightManifest
                       [ oOperandChooseMode (mManifest)
                       | mManifest:
                       oOperandSwap
                       [ oOperandChooseMode (mTemp)
                       | *:
                       oOperandSwap
                       >>no
                      ;OperandAreLeftAndRightManifest
                      [@OperandAreLeftAndRightManifest (no)
                      | no:
                      [ oOperandChooseManifestValue (one)
                      | one:
                      oOperandPop
                      @OperandForceIntoTemp
                       [ oOperandChooseMode (mTemp)
                       | mTemp:
                       ] or >
                       >>
                      ;OperandForceIntoTemp
                      oEmitSingle(iDec)
                      ] or >
                      ] or >
                      >>
                     ;OperandSubtractPop
                     oOperandPushMode(mManifest)
                     oOperandSetLength(two)
                     oOperandSetValue(two)
                     oEmitDouble(iShl)
                     oOperandPop
                     oOperandSwap
                     [ oOperandChooseMode (mStatic)
                     | mStatic:
                     oOperandPushMode(mManifest)
                     oOperandSetLength(two)
                     oOperandSetValue(eight)
                     oOperandAddManifestValues
                     oOperandPop
                     @OperandForceAddressIntoTemp
                      [ oOperandChooseMode (mStatic)
                      | mStatic:
                      @OperandPushTempWord
                       oTempAllocate
                       oOperandPushTemp
                       oOperandSetValue(zero)
                       oOperandSetLength(two)
                       >>
                      ;OperandPushTempWord
                      oOperandSwap
                      oEmitDouble(iLoada)
                      oOperandPop
                      ] or >
                      oOperandSetLength(two)
                      >>
                     ;OperandForceAddressIntoTemp
                     oEmitDouble(iAdd)
                     @OperandPopAndFreeTemp
                      [ oOperandChooseMode (mTemp)
                      | mTemp:
                      oTempFree
                      ] or >
                      oOperandPop
                      >>
                     ;OperandPopAndFreeTemp
                     ] or >
                     oOperandSetMode(mTempIndirect)
                     oOperandSetLength(two)
                     >>
                    ;OperandCheckedSubscriptNonManifestIntegerPop
                    ] or >
                    >>
                   ;OperandSubscriptNonManifestIntegerPop
                   oOperandSetLength(two)
                   >>
                  ;OperandSubscriptIntegerPop
                  ] or >
                  ] or >
                  [ (tLiteralAddress)
                  | *:
                  >>
                 ;OperandPushVariable
                 @OperandPushExpressionAssignPopPop
                  [ (tLiteralAddress)
                  | tLiteralAddress:
                  @OperandPushVariable
                   oOperandPushVariable
                   [ (tFetchInteger)
                   | *:
                   [ (tFetchInteger)
                   | *:
                   [ (tFetchInteger)
                   | tFetchInteger:
                   ] or >
                   >>
                  ;OperandPushVariable
                  ] or >
                  }
                  [ (tAssignInteger)
                  | tAssignInteger:
                  @OperandAssignIntegerPopPop
                   [ oOperandCompareLeftAndRight (no)
                   | no:
                   @EmitMove
                    @OperandLeftOrRightIsTemp
                     [ oOperandChooseMode (mStatic)
                     | *:
                     oOperandSwap
                     [ oOperandChooseMode (mTempIndirect)
                     | *:
                     oOperandSwap
                     >>no
                    ;OperandLeftOrRightIsTemp
                    [@OperandLeftOrRightIsTemp (no)
                    | *:
                    [ oOperandChooseMode (mStatic)
                    | *:
                    oOperandPushCopy
                    @OperandForceIntoTemp
                     [ oOperandChooseMode (mStatic)
                     | *:
                     [ oOperandChooseLength (two)
                     | two:
                     @OperandPushTempWord
                      oTempAllocate
                      oOperandPushTemp
                      oOperandSetValue(zero)
                      oOperandSetLength(two)
                      >>
                     ;OperandPushTempWord
                     oOperandSwap
                     oEmitDouble(iMov)
                     @OperandPopAndFreeTemp
                      [ oOperandChooseMode (mStatic)
                      | *:
                      oOperandPop
                      >>
                     ;OperandPopAndFreeTemp
                     oOperandSetMode(mTemp)
                     ] or >
                     >>
                    ;OperandForceIntoTemp
                    oOperandSwapLeftAndDest
                    oEmitDouble(iMov)
                    @OperandPopAndFreeTemp
                     [ oOperandChooseMode (mTemp)
                     | mTemp:
                     oTempFree
                     ] or >
                     oOperandPop
                     >>
                    ;OperandPopAndFreeTemp
                    oOperandSwap
                    >>
                   ;EmitMove
                   @OperandPopAndFreeTemp
                    [ oOperandChooseMode (mStatic)
                    | *:
                    oOperandPop
                    >>
                   ;OperandPopAndFreeTemp
                   @OperandPopAndFreeTemp
                    [ oOperandChooseMode (mTempIndirect)
                    | mTempIndirect:
                    oTempFree
                    ] or >
                    oOperandPop
                    >>
                   ;OperandPopAndFreeTemp
                   ] or >
                   >>
                  ;OperandAssignIntegerPopPop
                  ] or >
                  >>
                 ;OperandPushExpressionAssignPopPop
                 >>
                ;AssignStmt
                ] or >
                }
                [ (tAssignBegin)
                | tAssignBegin:
                @AssignStmt
                 oEmitSourceCoordinate
                 ?tLiteralAddress (tLiteralAddress)
                 @OperandPushVariable
                  oOperandPushVariable
                  [ (tLiteralAddress)
                  | *:
                  [ (tLiteralAddress)
                  | *:
                  [ (tLiteralAddress)
                  | *:
                  >>
                 ;OperandPushVariable
                 @OperandPushExpressionAssignPopPop
                  [ (tLiteralAddress)
                  | tLiteralAddress:
                  @OperandPushVariable
                   oOperandPushVariable
                   [ (tFetchInteger)
                   | *:
                   [ (tFetchInteger)
                   | *:
                   [ (tFetchInteger)
                   | tFetchInteger:
                   ] or >
                   >>
                  ;OperandPushVariable
                  ] or >
                  }
                  [ (tAssignInteger)
                  | tAssignInteger:
                  @OperandAssignIntegerPopPop
                   [ oOperandCompareLeftAndRight (no)
                   | no:
                   @EmitMove
                    @OperandLeftOrRightIsTemp
                     [ oOperandChooseMode (mStatic)
                     | *:
                     oOperandSwap
                     [ oOperandChooseMode (mStatic)
                     | *:
                     oOperandSwap
                     >>no
                    ;OperandLeftOrRightIsTemp
                    [@OperandLeftOrRightIsTemp (no)
                    | *:
                    [ oOperandChooseMode (mStatic)
                    | *:
                    oOperandPushCopy
                    @OperandForceIntoTemp
                     [ oOperandChooseMode (mStatic)
                     | *:
                     [ oOperandChooseLength (two)
                     | two:
                     @OperandPushTempWord
                      oTempAllocate
                      oOperandPushTemp
                      oOperandSetValue(zero)
                      oOperandSetLength(two)
                      >>
                     ;OperandPushTempWord
                     oOperandSwap
                     oEmitDouble(iMov)
                     @OperandPopAndFreeTemp
                      [ oOperandChooseMode (mStatic)
                      | *:
                      oOperandPop
                      >>
                     ;OperandPopAndFreeTemp
                     oOperandSetMode(mTemp)
                     ] or >
                     >>
                    ;OperandForceIntoTemp
                    oOperandSwapLeftAndDest
                    oEmitDouble(iMov)
                    @OperandPopAndFreeTemp
                     [ oOperandChooseMode (mTemp)
                     | mTemp:
                     oTempFree
                     ] or >
                     oOperandPop
                     >>
                    ;OperandPopAndFreeTemp
                    oOperandSwap
                    >>
                   ;EmitMove
                   @OperandPopAndFreeTemp
                    [ oOperandChooseMode (mStatic)
                    | *:
                    oOperandPop
                    >>
                   ;OperandPopAndFreeTemp
                   @OperandPopAndFreeTemp
                    [ oOperandChooseMode (mStatic)
                    | *:
                    oOperandPop
                    >>
                   ;OperandPopAndFreeTemp
                   ] or >
                   >>
                  ;OperandAssignIntegerPopPop
                  ] or >
                  >>
                 ;OperandPushExpressionAssignPopPop
                 >>
                ;AssignStmt
                ] or >
                }
                [ (tIfMerge)
                | *:
                ] or >
                >>
               ;Block
               >>
              ;Statements
              [ (tIfMerge)
              | tIfMerge:
              oEmitUnconditionalForwardBranch
              oFixAndFreeShuntList
              oOperandPop
              oFixPushLastAddress
              oEmitMergeSourceCoordinate
              @Statements
               @Block
                [ (tAssignBegin)
                | tAssignBegin:
                @AssignStmt
                 oEmitSourceCoordinate
                 ?tLiteralAddress (tLiteralAddress)
                 @OperandPushVariable
                  oOperandPushVariable
                  [ (tLiteralAddress)
                  | *:
                  [ (tLiteralAddress)
                  | *:
                  [ (tLiteralAddress)
                  | *:
                  >>
                 ;OperandPushVariable
                 @OperandPushExpressionAssignPopPop
                  [ (tLiteralAddress)
                  | tLiteralAddress:
                  @OperandPushVariable
                   oOperandPushVariable
                   [ (tSubscriptBegin)
                   | *:
                   [ (tSubscriptBegin)
                   | tSubscriptBegin:
                   @OperandPushExpression
                    [ (tLiteralAddress)
                    | tLiteralAddress:
                    @OperandPushVariable
                     oOperandPushVariable
                     [ (tFetchInteger)
                     | *:
                     [ (tFetchInteger)
                     | *:
                     [ (tFetchInteger)
                     | tFetchInteger:
                     ] or >
                     >>
                    ;OperandPushVariable
                    ] or >
                    }
                    [ (tSubscriptInteger)
                    | *:
                    ] or >
                    >>
                   ;OperandPushExpression
                   [ (tSubscriptInteger)
                   | tSubscriptInteger:
                   @OperandSubscriptIntegerPop
                    [ oOperandChooseMode (mStatic)
                    | *:
                    @OperandSubscriptNonManifestIntegerPop
                     [ oOptionTestChecking (yes)
                     | yes:
                     @OperandCheckedSubscriptNonManifestIntegerPop
                      @OperandForceIntoTemp
                       [ oOperandChooseMode (mStatic)
                       | *:
                       [ oOperandChooseLength (two)
                       | two:
                       @OperandPushTempWord
                        oTempAllocate
                        oOperandPushTemp
                        oOperandSetValue(zero)
                        oOperandSetLength(two)
                        >>
                       ;OperandPushTempWord
                       oOperandSwap
                       oEmitDouble(iMov)
                       @OperandPopAndFreeTemp
                        [ oOperandChooseMode (mStatic)
                        | *:
                        oOperandPop
                        >>
                       ;OperandPopAndFreeTemp
                       oOperandSetMode(mTemp)
                       ] or >
                       >>
                      ;OperandForceIntoTemp
                      [ oOptionTestChecking (yes)
                      | yes:
                      @EmitSubscriptRangeCheck
                       oOperandSwap
                       @OperandPushArrayUpperBound
                        [ oOperandChooseMode (mStatic)
                        | mStatic:
                        oOperandPushArrayUpperBound
                        ] or >
                        >>
                       ;OperandPushArrayUpperBound
                       oOperandSwapLeftAndDest
                       @EmitCmp
                        oOperandSwap
                        [ oOperandChooseMode (mTemp)
                        | *:
                        oOperandSwap
                        @OperandLeftOrRightIsTemp
                         [ oOperandChooseMode (mManifest)
                         | *:
                         oOperandSwap
                         [ oOperandChooseMode (mTemp)
                         | mTemp:
                         oOperandSwap
                         >>yes
                        ;OperandLeftOrRightIsTemp
                        [@OperandLeftOrRightIsTemp (yes)
                        | yes:
                        oEmitDouble(iCmp)
                        ] or >
                        >>
                       ;EmitCmp
                       oOperandPushJumpCondition(iJgt)
                       oEmitConditionalForwardBranch
                       oFixPushLastAddress
                       oOperandPop
                       oOperandPop
                       oOperandSwap
                       @OperandPushArrayLowerBound
                        [ oOperandChooseMode (mStatic)
                        | mStatic:
                        oOperandPushArrayLowerBound
                        ] or >
                        >>
                       ;OperandPushArrayLowerBound
                       oOperandSwapLeftAndDest
                       @EmitCmp
                        oOperandSwap
                        [ oOperandChooseMode (mTemp)
                        | *:
                        oOperandSwap
                        @OperandLeftOrRightIsTemp
                         [ oOperandChooseMode (mManifest)
                         | *:
                         oOperandSwap
                         [ oOperandChooseMode (mTemp)
                         | mTemp:
                         oOperandSwap
                         >>yes
                        ;OperandLeftOrRightIsTemp
                        [@OperandLeftOrRightIsTemp (yes)
                        | yes:
                        oEmitDouble(iCmp)
                        ] or >
                        >>
                       ;EmitCmp
                       oOperandPushJumpCondition(iJge)
                       oEmitConditionalForwardBranch
                       oFixPushLastAddress
                       oOperandPop
                       oOperandPop
                       oFixSwapAddresses
                       oFixForwardBranch
                       oFixPopAddress
                       @EmitSubscriptAbort
                        oOperandPushMode(mLineNum)
                        oOperandSetLength(two)
                        oEmitSingle(iPush)
                        oOperandPop
                        oOperandPushMode(mTrap)
                        oOperandSetValue(trSubscriptAbort)
                        oEmitSingle(iCall)
                        oOperandPop
                        >>
                       ;EmitSubscriptAbort
                       oFixForwardBranch
                       oFixPopAddress
                       >>
                      ;EmitSubscriptRangeCheck
                      ] or >
                      oOperandSwap
                      @OperandPushArrayLowerBound
                       [ oOperandChooseMode (mStatic)
                       | mStatic:
                       oOperandPushArrayLowerBound
                       ] or >
                       >>
                      ;OperandPushArrayLowerBound
                      oOperandSwapLeftAndDest
                      @OperandSubtractPop
                       @OperandAreLeftAndRightManifest
                        [ oOperandChooseMode (mManifest)
                        | mManifest:
                        oOperandSwap
                        [ oOperandChooseMode (mTemp)
                        | *:
                        oOperandSwap
                        >>no
                       ;OperandAreLeftAndRightManifest
                       [@OperandAreLeftAndRightManifest (no)
                       | no:
                       [ oOperandChooseManifestValue (one)
                       | one:
                       oOperandPop
                       @OperandForceIntoTemp
                        [ oOperandChooseMode (mTemp)
                        | mTemp:
                        ] or >
                        >>
                       ;OperandForceIntoTemp
                       oEmitSingle(iDec)
                       ] or >
                       ] or >
                       >>
                      ;OperandSubtractPop
                      oOperandPushMode(mManifest)
                      oOperandSetLength(two)
                      oOperandSetValue(two)
                      oEmitDouble(iShl)
                      oOperandPop
                      oOperandSwap
                      [ oOperandChooseMode (mStatic)
                      | mStatic:
                      oOperandPushMode(mManifest)
                      oOperandSetLength(two)
                      oOperandSetValue(eight)
                      oOperandAddManifestValues
                      oOperandPop
                      @OperandForceAddressIntoTemp
                       [ oOperandChooseMode (mStatic)
                       | mStatic:
                       @OperandPushTempWord
                        oTempAllocate
                        oOperandPushTemp
                        oOperandSetValue(zero)
                        oOperandSetLength(two)
                        >>
                       ;OperandPushTempWord
                       oOperandSwap
                       oEmitDouble(iLoada)
                       oOperandPop
                       ] or >
                       oOperandSetLength(two)
                       >>
                      ;OperandForceAddressIntoTemp
                      oEmitDouble(iAdd)
                      @OperandPopAndFreeTemp
                       [ oOperandChooseMode (mTemp)
                       | mTemp:
                       oTempFree
                       ] or >
                       oOperandPop
                       >>
                      ;OperandPopAndFreeTemp
                      ] or >
                      oOperandSetMode(mTempIndirect)
                      oOperandSetLength(two)
                      >>
                     ;OperandCheckedSubscriptNonManifestIntegerPop
                     ] or >
                     >>
                    ;OperandSubscriptNonManifestIntegerPop
                    oOperandSetLength(two)
                    >>
                   ;OperandSubscriptIntegerPop
                   ] or >
                   ] or >
                   [ (tFetchInteger)
                   | tFetchInteger:
                   ] or >
                   >>
                  ;OperandPushVariable
                  ] or >
                  }
                  [ (tAssignInteger)
                  | tAssignInteger:
                  @OperandAssignIntegerPopPop
                   [ oOperandCompareLeftAndRight (no)
                   | no:
                   @EmitMove
                    @OperandLeftOrRightIsTemp
                     [ oOperandChooseMode (mTempIndirect)
                     | *:
                     oOperandSwap
                     [ oOperandChooseMode (mStatic)
                     | *:
                     oOperandSwap
                     >>no
                    ;OperandLeftOrRightIsTemp
                    [@OperandLeftOrRightIsTemp (no)
                    | *:
                    [ oOperandChooseMode (mTempIndirect)
                    | *:
                    oOperandPushCopy
                    @OperandForceIntoTemp
                     [ oOperandChooseMode (mTempIndirect)
                     | mTempIndirect:
                     oOperandPushCopy
                     oOperandSetMode(mTemp)
                     oOperandSwap
                     oEmitDouble(iMov)
                     oOperandPop
                     ] or >
                     >>
                    ;OperandForceIntoTemp
                    oOperandSwapLeftAndDest
                    oEmitDouble(iMov)
                    @OperandPopAndFreeTemp
                     [ oOperandChooseMode (mTemp)
                     | mTemp:
                     oTempFree
                     ] or >
                     oOperandPop
                     >>
                    ;OperandPopAndFreeTemp
                    oOperandSwap
                    >>
                   ;EmitMove
                   @OperandPopAndFreeTemp
                    [ oOperandChooseMode (mTempIndirect)
                    | mTempIndirect:
                    oTempFree
                    ] or >
                    oOperandPop
                    >>
                   ;OperandPopAndFreeTemp
                   @OperandPopAndFreeTemp
                    [ oOperandChooseMode (mStatic)
                    | *:
                    oOperandPop
                    >>
                   ;OperandPopAndFreeTemp
                   ] or >
                   >>
                  ;OperandAssignIntegerPopPop
                  ] or >
                  >>
                 ;OperandPushExpressionAssignPopPop
                 >>
                ;AssignStmt
                ] or >
                }
                [ (tIfEnd)
                | *:
                ] or >
                >>
               ;Block
               >>
              ;Statements
              oFixForwardBranch
              oFixPopAddress
              ?tIfEnd (tIfEnd)
              ] or >
              >>
             ;IfStmt
             ] or >
             }
             [ (tIfMerge)
             | *:
             ] or >
             >>
            ;Block
            >>
           ;Statements
           [ (tIfMerge)
           | tIfMerge:
           oEmitUnconditionalForwardBranch
           oFixAndFreeShuntList
           oOperandPop
           oFixPushLastAddress
           oEmitMergeSourceCoordinate
           @Statements
            @Block
             [ (tIfBegin)
             | tIfBegin:
             @IfStmt
              oEmitSourceCoordinate
              @OperandPushBooleanControlExpression
               @OperandPushExpression
                [ (tLiteralAddress)
                | tLiteralAddress:
                @OperandPushVariable
                 oOperandPushVariable
                 [ (tFetchInteger)
                 | *:
                 [ (tFetchInteger)
                 | *:
                 [ (tFetchInteger)
                 | tFetchInteger:
                 ] or >
                 >>
                ;OperandPushVariable
                ] or >
                }
                [ (tLiteralAddress)
                | tLiteralAddress:
                @OperandPushVariable
                 oOperandPushVariable
                 [ (tSubscriptBegin)
                 | *:
                 [ (tSubscriptBegin)
                 | tSubscriptBegin:
                 @OperandPushExpression
                  [ (tLiteralAddress)
                  | tLiteralAddress:
                  @OperandPushVariable
                   oOperandPushVariable
                   [ (tFetchInteger)
                   | *:
                   [ (tFetchInteger)
                   | *:
                   [ (tFetchInteger)
                   | tFetchInteger:
                   ] or >
                   >>
                  ;OperandPushVariable
                  ] or >
                  }
                  [ (tSubscriptInteger)
                  | *:
                  ] or >
                  >>
                 ;OperandPushExpression
                 [ (tSubscriptInteger)
                 | tSubscriptInteger:
                 @OperandSubscriptIntegerPop
                  [ oOperandChooseMode (mStatic)
                  | *:
                  @OperandSubscriptNonManifestIntegerPop
                   [ oOptionTestChecking (yes)
                   | yes:
                   @OperandCheckedSubscriptNonManifestIntegerPop
                    @OperandForceIntoTemp
                     [ oOperandChooseMode (mStatic)
                     | *:
                     [ oOperandChooseLength (two)
                     | two:
                     @OperandPushTempWord
                      oTempAllocate
                      oOperandPushTemp
                      oOperandSetValue(zero)
                      oOperandSetLength(two)
                      >>
                     ;OperandPushTempWord
                     oOperandSwap
                     oEmitDouble(iMov)
                     @OperandPopAndFreeTemp
                      [ oOperandChooseMode (mStatic)
                      | *:
                      oOperandPop
                      >>
                     ;OperandPopAndFreeTemp
                     oOperandSetMode(mTemp)
                     ] or >
                     >>
                    ;OperandForceIntoTemp
                    [ oOptionTestChecking (yes)
                    | yes:
                    @EmitSubscriptRangeCheck
                     oOperandSwap
                     @OperandPushArrayUpperBound
                      [ oOperandChooseMode (mStatic)
                      | mStatic:
                      oOperandPushArrayUpperBound
                      ] or >
                      >>
                     ;OperandPushArrayUpperBound
                     oOperandSwapLeftAndDest
                     @EmitCmp
                      oOperandSwap
                      [ oOperandChooseMode (mTemp)
                      | *:
                      oOperandSwap
                      @OperandLeftOrRightIsTemp
                       [ oOperandChooseMode (mManifest)
                       | *:
                       oOperandSwap
                       [ oOperandChooseMode (mTemp)
                       | mTemp:
                       oOperandSwap
                       >>yes
                      ;OperandLeftOrRightIsTemp
                      [@OperandLeftOrRightIsTemp (yes)
                      | yes:
                      oEmitDouble(iCmp)
                      ] or >
                      >>
                     ;EmitCmp
                     oOperandPushJumpCondition(iJgt)
                     oEmitConditionalForwardBranch
                     oFixPushLastAddress
                     oOperandPop
                     oOperandPop
                     oOperandSwap
                     @OperandPushArrayLowerBound
                      [ oOperandChooseMode (mStatic)
                      | mStatic:
                      oOperandPushArrayLowerBound
                      ] or >
                      >>
                     ;OperandPushArrayLowerBound
                     oOperandSwapLeftAndDest
                     @EmitCmp
                      oOperandSwap
                      [ oOperandChooseMode (mTemp)
                      | *:
                      oOperandSwap
                      @OperandLeftOrRightIsTemp
                       [ oOperandChooseMode (mManifest)
                       | *:
                       oOperandSwap
                       [ oOperandChooseMode (mTemp)
                       | mTemp:
                       oOperandSwap
                       >>yes
                      ;OperandLeftOrRightIsTemp
                      [@OperandLeftOrRightIsTemp (yes)
                      | yes:
                      oEmitDouble(iCmp)
                      ] or >
                      >>
                     ;EmitCmp
                     oOperandPushJumpCondition(iJge)
                     oEmitConditionalForwardBranch
                     oFixPushLastAddress
                     oOperandPop
                     oOperandPop
                     oFixSwapAddresses
                     oFixForwardBranch
                     oFixPopAddress
                     @EmitSubscriptAbort
                      oOperandPushMode(mLineNum)
                      oOperandSetLength(two)
                      oEmitSingle(iPush)
                      oOperandPop
                      oOperandPushMode(mTrap)
                      oOperandSetValue(trSubscriptAbort)
                      oEmitSingle(iCall)
                      oOperandPop
                      >>
                     ;EmitSubscriptAbort
                     oFixForwardBranch
                     oFixPopAddress
                     >>
                    ;EmitSubscriptRangeCheck
                    ] or >
                    oOperandSwap
                    @OperandPushArrayLowerBound
                     [ oOperandChooseMode (mStatic)
                     | mStatic:
                     oOperandPushArrayLowerBound
                     ] or >
                     >>
                    ;OperandPushArrayLowerBound
                    oOperandSwapLeftAndDest
                    @OperandSubtractPop
                     @OperandAreLeftAndRightManifest
                      [ oOperandChooseMode (mManifest)
                      | mManifest:
                      oOperandSwap
                      [ oOperandChooseMode (mTemp)
                      | *:
                      oOperandSwap
                      >>no
                     ;OperandAreLeftAndRightManifest
                     [@OperandAreLeftAndRightManifest (no)
                     | no:
                     [ oOperandChooseManifestValue (one)
                     | one:
                     oOperandPop
                     @OperandForceIntoTemp
                      [ oOperandChooseMode (mTemp)
                      | mTemp:
                      ] or >
                      >>
                     ;OperandForceIntoTemp
                     oEmitSingle(iDec)
                     ] or >
                     ] or >
                     >>
                    ;OperandSubtractPop
                    oOperandPushMode(mManifest)
                    oOperandSetLength(two)
                    oOperandSetValue(two)
                    oEmitDouble(iShl)
                    oOperandPop
                    oOperandSwap
                    [ oOperandChooseMode (mStatic)
                    | mStatic:
                    oOperandPushMode(mManifest)
                    oOperandSetLength(two)
                    oOperandSetValue(eight)
                    oOperandAddManifestValues
                    oOperandPop
                    @OperandForceAddressIntoTemp
                     [ oOperandChooseMode (mStatic)
                     | mStatic:
                     @OperandPushTempWord
                      oTempAllocate
                      oOperandPushTemp
                      oOperandSetValue(zero)
                      oOperandSetLength(two)
                      >>
                     ;OperandPushTempWord
                     oOperandSwap
                     oEmitDouble(iLoada)
                     oOperandPop
                     ] or >
                     oOperandSetLength(two)
                     >>
                    ;OperandForceAddressIntoTemp
                    oEmitDouble(iAdd)
                    @OperandPopAndFreeTemp
                     [ oOperandChooseMode (mTemp)
                     | mTemp:
                     oTempFree
                     ] or >
                     oOperandPop
                     >>
                    ;OperandPopAndFreeTemp
                    ] or >
                    oOperandSetMode(mTempIndirect)
                    oOperandSetLength(two)
                    >>
                   ;OperandCheckedSubscriptNonManifestIntegerPop
                   ] or >
                   >>
                  ;OperandSubscriptNonManifestIntegerPop
                  oOperandSetLength(two)
                  >>
                 ;OperandSubscriptIntegerPop
                 ] or >
                 ] or >
                 [ (tFetchInteger)
                 | tFetchInteger:
                 ] or >
                 >>
                ;OperandPushVariable
                ] or >
                }
                [ (tGT)
                | tGT:
                @OperandGreaterPop
                 [ oOperandCompareLeftAndRight (no)
                 | no:
                 [ oOperandChooseManifestValue ()
                 | *:
                 oOperandSwap
                 [ oOperandChooseManifestValue ()
                 | *:
                 oOperandSwap
                 @EmitCmp
                  oOperandSwap
                  [ oOperandChooseMode (mStatic)
                  | *:
                  oOperandSwap
                  @OperandLeftOrRightIsTemp
                   [ oOperandChooseMode (mTempIndirect)
                   | *:
                   oOperandSwap
                   [ oOperandChooseMode (mStatic)
                   | *:
                   oOperandSwap
                   >>no
                  ;OperandLeftOrRightIsTemp
                  [@OperandLeftOrRightIsTemp (no)
                  | *:
                  [ oOperandChooseMode (mTempIndirect)
                  | *:
                  oOperandPushCopy
                  @OperandForceIntoTemp
                   [ oOperandChooseMode (mTempIndirect)
                   | mTempIndirect:
                   oOperandPushCopy
                   oOperandSetMode(mTemp)
                   oOperandSwap
                   oEmitDouble(iMov)
                   oOperandPop
                   ] or >
                   >>
                  ;OperandForceIntoTemp
                  oOperandSwapLeftAndDest
                  oEmitDouble(iCmp)
                  @OperandPopAndFreeTemp
                   [ oOperandChooseMode (mTemp)
                   | mTemp:
                   oTempFree
                   ] or >
                   oOperandPop
                   >>
                  ;OperandPopAndFreeTemp
                  oOperandSwap
                  >>
                 ;EmitCmp
                 @OperandPopAndFreeTemp
                  [ oOperandChooseMode (mTempIndirect)
                  | mTempIndirect:
                  oTempFree
                  ] or >
                  oOperandPop
                  >>
                 ;OperandPopAndFreeTemp
                 @OperandPopAndFreeTemp
                  [ oOperandChooseMode (mStatic)
                  | *:
                  oOperandPop
                  >>
                 ;OperandPopAndFreeTemp
                 oOperandPushJumpCondition(iJgt)
                 ] or >
                 >>
                ;OperandGreaterPop
                ] or >
                }
                [ (tIfThen)
                | *:
                ] or >
                >>
               ;OperandPushExpression
               @OperandForceToJumpCondition
                [ oOperandIsJumpCondition (yes)
                | yes:
                ] or >
                >>
               ;OperandForceToJumpCondition
               >>
              ;OperandPushBooleanControlExpression
              ?tIfThen (tIfThen)
              [ oOperandChooseJumpCondition (iJgt)
              | *:
              @OperandComplementJumpCondition
               [ oOperandChooseJumpCondition (iJgt)
               | *:
               oOperandComplementJumpCondition
               >>
              ;OperandComplementJumpCondition
              @OperandInfixOr
               @OperandForceToJumpCondition
                [ oOperandIsJumpCondition (yes)
                | yes:
                ] or >
                >>
               ;OperandForceToJumpCondition
               [ oOperandChooseJumpCondition (iJle)
               | *:
               oEmitConditionalForwardBranch
               oFixAndFreeFalseBranches
               oFixPushLastAddress
               oOperandMergeShuntsWithAddress
               oFixPopAddress
               >>
              ;OperandInfixOr
              @Statements
               @Block
                [ (tIfBegin)
                | tIfBegin:
                @IfStmt
                 oEmitSourceCoordinate
                 @OperandPushBooleanControlExpression
                  @OperandPushExpression
                   [ (tLiteralAddress)
                   | tLiteralAddress:
                   @OperandPushVariable
                    oOperandPushVariable
                    [ (tSubscriptBegin)
                    | *:
                    [ (tSubscriptBegin)
                    | tSubscriptBegin:
                    @OperandPushExpression
                     [ (tLiteralAddress)
                     | tLiteralAddress:
                     @OperandPushVariable
                      oOperandPushVariable
                      [ (tFetchInteger)
                      | *:
                      [ (tFetchInteger)
                      | *:
                      [ (tFetchInteger)
                      | tFetchInteger:
                      ] or >
                      >>
                     ;OperandPushVariable
                     ] or >
                     }
                     [ (tSubscriptInteger)
                     | *:
                     ] or >
                     >>
                    ;OperandPushExpression
                    [ (tSubscriptInteger)
                    | tSubscriptInteger:
                    @OperandSubscriptIntegerPop
                     [ oOperandChooseMode (mStatic)
                     | *:
                     @OperandSubscriptNonManifestIntegerPop
                      [ oOptionTestChecking (yes)
                      | yes:
                      @OperandCheckedSubscriptNonManifestIntegerPop
                       @OperandForceIntoTemp
                        [ oOperandChooseMode (mStatic)
                        | *:
                        [ oOperandChooseLength (two)
                        | two:
                        @OperandPushTempWord
                         oTempAllocate
                         oOperandPushTemp
                         oOperandSetValue(zero)
                         oOperandSetLength(two)
                         >>
                        ;OperandPushTempWord
                        oOperandSwap
                        oEmitDouble(iMov)
                        @OperandPopAndFreeTemp
                         [ oOperandChooseMode (mStatic)
                         | *:
                         oOperandPop
                         >>
                        ;OperandPopAndFreeTemp
                        oOperandSetMode(mTemp)
                        ] or >
                        >>
                       ;OperandForceIntoTemp
                       [ oOptionTestChecking (yes)
                       | yes:
                       @EmitSubscriptRangeCheck
                        oOperandSwap
                        @OperandPushArrayUpperBound
                         [ oOperandChooseMode (mStatic)
                         | mStatic:
                         oOperandPushArrayUpperBound
                         ] or >
                         >>
                        ;OperandPushArrayUpperBound
                        oOperandSwapLeftAndDest
                        @EmitCmp
                         oOperandSwap
                         [ oOperandChooseMode (mTemp)
                         | *:
                         oOperandSwap
                         @OperandLeftOrRightIsTemp
                          [ oOperandChooseMode (mManifest)
                          | *:
                          oOperandSwap
                          [ oOperandChooseMode (mTemp)
                          | mTemp:
                          oOperandSwap
                          >>yes
                         ;OperandLeftOrRightIsTemp
                         [@OperandLeftOrRightIsTemp (yes)
                         | yes:
                         oEmitDouble(iCmp)
                         ] or >
                         >>
                        ;EmitCmp
                        oOperandPushJumpCondition(iJgt)
                        oEmitConditionalForwardBranch
                        oFixPushLastAddress
                        oOperandPop
                        oOperandPop
                        oOperandSwap
                        @OperandPushArrayLowerBound
                         [ oOperandChooseMode (mStatic)
                         | mStatic:
                         oOperandPushArrayLowerBound
                         ] or >
                         >>
                        ;OperandPushArrayLowerBound
                        oOperandSwapLeftAndDest
                        @EmitCmp
                         oOperandSwap
                         [ oOperandChooseMode (mTemp)
                         | *:
                         oOperandSwap
                         @OperandLeftOrRightIsTemp
                          [ oOperandChooseMode (mManifest)
                          | *:
                          oOperandSwap
                          [ oOperandChooseMode (mTemp)
                          | mTemp:
                          oOperandSwap
                          >>yes
                         ;OperandLeftOrRightIsTemp
                         [@OperandLeftOrRightIsTemp (yes)
                         | yes:
                         oEmitDouble(iCmp)
                         ] or >
                         >>
                        ;EmitCmp
                        oOperandPushJumpCondition(iJge)
                        oEmitConditionalForwardBranch
                        oFixPushLastAddress
                        oOperandPop
                        oOperandPop
                        oFixSwapAddresses
                        oFixForwardBranch
                        oFixPopAddress
                        @EmitSubscriptAbort
                         oOperandPushMode(mLineNum)
                         oOperandSetLength(two)
                         oEmitSingle(iPush)
                         oOperandPop
                         oOperandPushMode(mTrap)
                         oOperandSetValue(trSubscriptAbort)
                         oEmitSingle(iCall)
                         oOperandPop
                         >>
                        ;EmitSubscriptAbort
                        oFixForwardBranch
                        oFixPopAddress
                        >>
                       ;EmitSubscriptRangeCheck
                       ] or >
                       oOperandSwap
                       @OperandPushArrayLowerBound
                        [ oOperandChooseMode (mStatic)
                        | mStatic:
                        oOperandPushArrayLowerBound
                        ] or >
                        >>
                       ;OperandPushArrayLowerBound
                       oOperandSwapLeftAndDest
                       @OperandSubtractPop
                        @OperandAreLeftAndRightManifest
                         [ oOperandChooseMode (mManifest)
                         | mManifest:
                         oOperandSwap
                         [ oOperandChooseMode (mTemp)
                         | *:
                         oOperandSwap
                         >>no
                        ;OperandAreLeftAndRightManifest
                        [@OperandAreLeftAndRightManifest (no)
                        | no:
                        [ oOperandChooseManifestValue (one)
                        | one:
                        oOperandPop
                        @OperandForceIntoTemp
                         [ oOperandChooseMode (mTemp)
                         | mTemp:
                         ] or >
                         >>
                        ;OperandForceIntoTemp
                        oEmitSingle(iDec)
                        ] or >
                        ] or >
                        >>
                       ;OperandSubtractPop
                       oOperandPushMode(mManifest)
                       oOperandSetLength(two)
                       oOperandSetValue(two)
                       oEmitDouble(iShl)
                       oOperandPop
                       oOperandSwap
                       [ oOperandChooseMode (mStatic)
                       | mStatic:
                       oOperandPushMode(mManifest)
                       oOperandSetLength(two)
                       oOperandSetValue(eight)
                       oOperandAddManifestValues
                       oOperandPop
                       @OperandForceAddressIntoTemp
                        [ oOperandChooseMode (mStatic)
                        | mStatic:
                        @OperandPushTempWord
                         oTempAllocate
                         oOperandPushTemp
                         oOperandSetValue(zero)
                         oOperandSetLength(two)
                         >>
                        ;OperandPushTempWord
                        oOperandSwap
                        oEmitDouble(iLoada)
                        oOperandPop
                        ] or >
                        oOperandSetLength(two)
                        >>
                       ;OperandForceAddressIntoTemp
                       oEmitDouble(iAdd)
                       @OperandPopAndFreeTemp
                        [ oOperandChooseMode (mTemp)
                        | mTemp:
                        oTempFree
                        ] or >
                        oOperandPop
                        >>
                       ;OperandPopAndFreeTemp
                       ] or >
                       oOperandSetMode(mTempIndirect)
                       oOperandSetLength(two)
                       >>
                      ;OperandCheckedSubscriptNonManifestIntegerPop
                      ] or >
                      >>
                     ;OperandSubscriptNonManifestIntegerPop
                     oOperandSetLength(two)
                     >>
                    ;OperandSubscriptIntegerPop
                    ] or >
                    ] or >
                    [ (tFetchInteger)
                    | tFetchInteger:
                    ] or >
                    >>
                   ;OperandPushVariable
                   ] or >
                   }
                   [ (tLiteralInteger)
                   | tLiteralInteger:
                   oOperandPushInteger
                   ] or >
                   }
                   [ (tEQ)
                   | tEQ:
                   @OperandEqualPop
                    [ oOperandCompareLeftAndRight (no)
                    | no:
                    [ oOperandChooseManifestValue (zero)
                    | zero:
                    oOperandPop
                    @EmitTst
                     [ oOperandChooseLength (two)
                     | two:
                     oOperandPushMode(mManifest)
                     oOperandSetValue(zero)
                     oOperandSetLength(two)
                     ] or >
                     @EmitCmp
                      oOperandSwap
                      [ oOperandChooseMode (mTempIndirect)
                      | *:
                      oOperandSwap
                      @OperandLeftOrRightIsTemp
                       [ oOperandChooseMode (mManifest)
                       | *:
                       oOperandSwap
                       [ oOperandChooseMode (mTempIndirect)
                       | *:
                       oOperandSwap
                       >>no
                      ;OperandLeftOrRightIsTemp
                      [@OperandLeftOrRightIsTemp (no)
                      | *:
                      [ oOperandChooseMode (mManifest)
                      | mManifest:
                      oEmitDouble(iCmp)
                      ] or >
                      >>
                     ;EmitCmp
                     oOperandPop
                     >>
                    ;EmitTst
                    @OperandPopAndFreeTemp
                     [ oOperandChooseMode (mTempIndirect)
                     | mTempIndirect:
                     oTempFree
                     ] or >
                     oOperandPop
                     >>
                    ;OperandPopAndFreeTemp
                    oOperandPushJumpCondition(iJeq)
                    ] or >
                    ] or >
                    >>
                   ;OperandEqualPop
                   ] or >
                   }
                   [ (tIfThen)
                   | *:
                   ] or >
                   >>
                  ;OperandPushExpression
                  @OperandForceToJumpCondition
                   [ oOperandIsJumpCondition (yes)
                   | yes:
                   ] or >
                   >>
                  ;OperandForceToJumpCondition
                  >>
                 ;OperandPushBooleanControlExpression
                 ?tIfThen (tIfThen)
                 [ oOperandChooseJumpCondition (iJeq)
                 | *:
                 @OperandComplementJumpCondition
                  [ oOperandChooseJumpCondition (iJeq)
                  | *:
                  oOperandComplementJumpCondition
                  >>
                 ;OperandComplementJumpCondition
                 @OperandInfixOr
                  @OperandForceToJumpCondition
                   [ oOperandIsJumpCondition (yes)
                   | yes:
                   ] or >
                   >>
                  ;OperandForceToJumpCondition
                  [ oOperandChooseJumpCondition (iJne)
                  | *:
                  oEmitConditionalForwardBranch
                  oFixAndFreeFalseBranches
                  oFixPushLastAddress
                  oOperandMergeShuntsWithAddress
                  oFixPopAddress
                  >>
                 ;OperandInfixOr
                 @Statements
                  @Block
                   [ (tAssignBegin)
                   | tAssignBegin:
                   @AssignStmt
                    oEmitSourceCoordinate
                    ?tLiteralAddress (tLiteralAddress)
                    @OperandPushVariable
                     oOperandPushVariable
                     [ (tSubscriptBegin)
                     | *:
                     [ (tSubscriptBegin)
                     | tSubscriptBegin:
                     @OperandPushExpression
                      [ (tLiteralAddress)
                      | tLiteralAddress:
                      @OperandPushVariable
                       oOperandPushVariable
                       [ (tFetchInteger)
                       | *:
                       [ (tFetchInteger)
                       | *:
                       [ (tFetchInteger)
                       | tFetchInteger:
                       ] or >
                       >>
                      ;OperandPushVariable
                      ] or >
                      }
                      [ (tSubscriptInteger)
                      | *:
                      ] or >
                      >>
                     ;OperandPushExpression
                     [ (tSubscriptInteger)
                     | tSubscriptInteger:
                     @OperandSubscriptIntegerPop
                      [ oOperandChooseMode (mStatic)
                      | *:
                      @OperandSubscriptNonManifestIntegerPop
                       [ oOptionTestChecking (yes)
                       | yes:
                       @OperandCheckedSubscriptNonManifestIntegerPop
                        @OperandForceIntoTemp
                         [ oOperandChooseMode (mStatic)
                         | *:
                         [ oOperandChooseLength (two)
                         | two:
                         @OperandPushTempWord
                          oTempAllocate
                          oOperandPushTemp
                          oOperandSetValue(zero)
                          oOperandSetLength(two)
                          >>
                         ;OperandPushTempWord
                         oOperandSwap
                         oEmitDouble(iMov)
                         @OperandPopAndFreeTemp
                          [ oOperandChooseMode (mStatic)
                          | *:
                          oOperandPop
                          >>
                         ;OperandPopAndFreeTemp
                         oOperandSetMode(mTemp)
                         ] or >
                         >>
                        ;OperandForceIntoTemp
                        [ oOptionTestChecking (yes)
                        | yes:
                        @EmitSubscriptRangeCheck
                         oOperandSwap
                         @OperandPushArrayUpperBound
                          [ oOperandChooseMode (mStatic)
                          | mStatic:
                          oOperandPushArrayUpperBound
                          ] or >
                          >>
                         ;OperandPushArrayUpperBound
                         oOperandSwapLeftAndDest
                         @EmitCmp
                          oOperandSwap
                          [ oOperandChooseMode (mTemp)
                          | *:
                          oOperandSwap
                          @OperandLeftOrRightIsTemp
                           [ oOperandChooseMode (mManifest)
                           | *:
                           oOperandSwap
                           [ oOperandChooseMode (mTemp)
                           | mTemp:
                           oOperandSwap
                           >>yes
                          ;OperandLeftOrRightIsTemp
                          [@OperandLeftOrRightIsTemp (yes)
                          | yes:
                          oEmitDouble(iCmp)
                          ] or >
                          >>
                         ;EmitCmp
                         oOperandPushJumpCondition(iJgt)
                         oEmitConditionalForwardBranch
                         oFixPushLastAddress
                         oOperandPop
                         oOperandPop
                         oOperandSwap
                         @OperandPushArrayLowerBound
                          [ oOperandChooseMode (mStatic)
                          | mStatic:
                          oOperandPushArrayLowerBound
                          ] or >
                          >>
                         ;OperandPushArrayLowerBound
                         oOperandSwapLeftAndDest
                         @EmitCmp
                          oOperandSwap
                          [ oOperandChooseMode (mTemp)
                          | *:
                          oOperandSwap
                          @OperandLeftOrRightIsTemp
                           [ oOperandChooseMode (mManifest)
                           | *:
                           oOperandSwap
                           [ oOperandChooseMode (mTemp)
                           | mTemp:
                           oOperandSwap
                           >>yes
                          ;OperandLeftOrRightIsTemp
                          [@OperandLeftOrRightIsTemp (yes)
                          | yes:
                          oEmitDouble(iCmp)
                          ] or >
                          >>
                         ;EmitCmp
                         oOperandPushJumpCondition(iJge)
                         oEmitConditionalForwardBranch
                         oFixPushLastAddress
                         oOperandPop
                         oOperandPop
                         oFixSwapAddresses
                         oFixForwardBranch
                         oFixPopAddress
                         @EmitSubscriptAbort
                          oOperandPushMode(mLineNum)
                          oOperandSetLength(two)
                          oEmitSingle(iPush)
                          oOperandPop
                          oOperandPushMode(mTrap)
                          oOperandSetValue(trSubscriptAbort)
                          oEmitSingle(iCall)
                          oOperandPop
                          >>
                         ;EmitSubscriptAbort
                         oFixForwardBranch
                         oFixPopAddress
                         >>
                        ;EmitSubscriptRangeCheck
                        ] or >
                        oOperandSwap
                        @OperandPushArrayLowerBound
                         [ oOperandChooseMode (mStatic)
                         | mStatic:
                         oOperandPushArrayLowerBound
                         ] or >
                         >>
                        ;OperandPushArrayLowerBound
                        oOperandSwapLeftAndDest
                        @OperandSubtractPop
                         @OperandAreLeftAndRightManifest
                          [ oOperandChooseMode (mManifest)
                          | mManifest:
                          oOperandSwap
                          [ oOperandChooseMode (mTemp)
                          | *:
                          oOperandSwap
                          >>no
                         ;OperandAreLeftAndRightManifest
                         [@OperandAreLeftAndRightManifest (no)
                         | no:
                         [ oOperandChooseManifestValue (one)
                         | one:
                         oOperandPop
                         @OperandForceIntoTemp
                          [ oOperandChooseMode (mTemp)
                          | mTemp:
                          ] or >
                          >>
                         ;OperandForceIntoTemp
                         oEmitSingle(iDec)
                         ] or >
                         ] or >
                         >>
                        ;OperandSubtractPop
                        oOperandPushMode(mManifest)
                        oOperandSetLength(two)
                        oOperandSetValue(two)
                        oEmitDouble(iShl)
                        oOperandPop
                        oOperandSwap
                        [ oOperandChooseMode (mStatic)
                        | mStatic:
                        oOperandPushMode(mManifest)
                        oOperandSetLength(two)
                        oOperandSetValue(eight)
                        oOperandAddManifestValues
                        oOperandPop
                        @OperandForceAddressIntoTemp
                         [ oOperandChooseMode (mStatic)
                         | mStatic:
                         @OperandPushTempWord
                          oTempAllocate
                          oOperandPushTemp
                          oOperandSetValue(zero)
                          oOperandSetLength(two)
                          >>
                         ;OperandPushTempWord
                         oOperandSwap
                         oEmitDouble(iLoada)
                         oOperandPop
                         ] or >
                         oOperandSetLength(two)
                         >>
                        ;OperandForceAddressIntoTemp
                        oEmitDouble(iAdd)
                        @OperandPopAndFreeTemp
                         [ oOperandChooseMode (mTemp)
                         | mTemp:
                         oTempFree
                         ] or >
                         oOperandPop
                         >>
                        ;OperandPopAndFreeTemp
                        ] or >
                        oOperandSetMode(mTempIndirect)
                        oOperandSetLength(two)
                        >>
                       ;OperandCheckedSubscriptNonManifestIntegerPop
                       ] or >
                       >>
                      ;OperandSubscriptNonManifestIntegerPop
                      oOperandSetLength(two)
                      >>
                     ;OperandSubscriptIntegerPop
                     ] or >
                     ] or >
                     [ (tLiteralAddress)
                     | *:
                     >>
                    ;OperandPushVariable
                    @OperandPushExpressionAssignPopPop
                     [ (tLiteralAddress)
                     | tLiteralAddress:
                     @OperandPushVariable
                      oOperandPushVariable
                      [ (tFetchInteger)
                      | *:
                      [ (tFetchInteger)
                      | *:
                      [ (tFetchInteger)
                      | tFetchInteger:
                      ] or >
                      >>
                     ;OperandPushVariable
                     ] or >
                     }
                     [ (tAssignInteger)
                     | tAssignInteger:
                     @OperandAssignIntegerPopPop
                      [ oOperandCompareLeftAndRight (no)
                      | no:
                      @EmitMove
                       @OperandLeftOrRightIsTemp
                        [ oOperandChooseMode (mStatic)
                        | *:
                        oOperandSwap
                        [ oOperandChooseMode (mTempIndirect)
                        | *:
                        oOperandSwap
                        >>no
                       ;OperandLeftOrRightIsTemp
                       [@OperandLeftOrRightIsTemp (no)
                       | *:
                       [ oOperandChooseMode (mStatic)
                       | *:
                       oOperandPushCopy
                       @OperandForceIntoTemp
                        [ oOperandChooseMode (mStatic)
                        | *:
                        [ oOperandChooseLength (two)
                        | two:
                        @OperandPushTempWord
                         oTempAllocate
                         oOperandPushTemp
                         oOperandSetValue(zero)
                         oOperandSetLength(two)
                         >>
                        ;OperandPushTempWord
                        oOperandSwap
                        oEmitDouble(iMov)
                        @OperandPopAndFreeTemp
                         [ oOperandChooseMode (mStatic)
                         | *:
                         oOperandPop
                         >>
                        ;OperandPopAndFreeTemp
                        oOperandSetMode(mTemp)
                        ] or >
                        >>
                       ;OperandForceIntoTemp
                       oOperandSwapLeftAndDest
                       oEmitDouble(iMov)
                       @OperandPopAndFreeTemp
                        [ oOperandChooseMode (mTemp)
                        | mTemp:
                        oTempFree
                        ] or >
                        oOperandPop
                        >>
                       ;OperandPopAndFreeTemp
                       oOperandSwap
                       >>
                      ;EmitMove
                      @OperandPopAndFreeTemp
                       [ oOperandChooseMode (mStatic)
                       | *:
                       oOperandPop
                       >>
                      ;OperandPopAndFreeTemp
                      @OperandPopAndFreeTemp
                       [ oOperandChooseMode (mTempIndirect)
                       | mTempIndirect:
                       oTempFree
                       ] or >
                       oOperandPop
                       >>
                      ;OperandPopAndFreeTemp
                      ] or >
                      >>
                     ;OperandAssignIntegerPopPop
                     ] or >
                     >>
                    ;OperandPushExpressionAssignPopPop
                    >>
                   ;AssignStmt
                   ] or >
                   }
                   [ (tAssignBegin)
                   | tAssignBegin:
                   @AssignStmt
                    oEmitSourceCoordinate
                    ?tLiteralAddress (tLiteralAddress)
                    @OperandPushVariable
                     oOperandPushVariable
                     [ (tLiteralAddress)
                     | *:
                     [ (tLiteralAddress)
                     | *:
                     [ (tLiteralAddress)
                     | *:
                     >>
                    ;OperandPushVariable
                    @OperandPushExpressionAssignPopPop
                     [ (tLiteralAddress)
                     | tLiteralAddress:
                     @OperandPushVariable
                      oOperandPushVariable
                      [ (tFetchInteger)
                      | *:
                      [ (tFetchInteger)
                      | *:
                      [ (tFetchInteger)
                      | tFetchInteger:
                      ] or >
                      >>
                     ;OperandPushVariable
                     ] or >
                     }
                     [ (tAssignInteger)
                     | tAssignInteger:
                     @OperandAssignIntegerPopPop
                      [ oOperandCompareLeftAndRight (no)
                      | no:
                      @EmitMove
                       @OperandLeftOrRightIsTemp
                        [ oOperandChooseMode (mStatic)
                        | *:
                        oOperandSwap
                        [ oOperandChooseMode (mStatic)
                        | *:
                        oOperandSwap
                        >>no
                       ;OperandLeftOrRightIsTemp
                       [@OperandLeftOrRightIsTemp (no)
                       | *:
                       [ oOperandChooseMode (mStatic)
                       | *:
                       oOperandPushCopy
                       @OperandForceIntoTemp
                        [ oOperandChooseMode (mStatic)
                        | *:
                        [ oOperandChooseLength (two)
                        | two:
                        @OperandPushTempWord
                         oTempAllocate
                         oOperandPushTemp
                         oOperandSetValue(zero)
                         oOperandSetLength(two)
                         >>
                        ;OperandPushTempWord
                        oOperandSwap
                        oEmitDouble(iMov)
                        @OperandPopAndFreeTemp
                         [ oOperandChooseMode (mStatic)
                         | *:
                         oOperandPop
                         >>
                        ;OperandPopAndFreeTemp
                        oOperandSetMode(mTemp)
                        ] or >
                        >>
                       ;OperandForceIntoTemp
                       oOperandSwapLeftAndDest
                       oEmitDouble(iMov)
                       @OperandPopAndFreeTemp
                        [ oOperandChooseMode (mTemp)
                        | mTemp:
                        oTempFree
                        ] or >
                        oOperandPop
                        >>
                       ;OperandPopAndFreeTemp
                       oOperandSwap
                       >>
                      ;EmitMove
                      @OperandPopAndFreeTemp
                       [ oOperandChooseMode (mStatic)
                       | *:
                       oOperandPop
                       >>
                      ;OperandPopAndFreeTemp
                      @OperandPopAndFreeTemp
                       [ oOperandChooseMode (mStatic)
                       | *:
                       oOperandPop
                       >>
                      ;OperandPopAndFreeTemp
                      ] or >
                      >>
                     ;OperandAssignIntegerPopPop
                     ] or >
                     >>
                    ;OperandPushExpressionAssignPopPop
                    >>
                   ;AssignStmt
                   ] or >
                   }
                   [ (tIfMerge)
                   | *:
                   ] or >
                   >>
                  ;Block
                  >>
                 ;Statements
                 [ (tIfMerge)
                 | tIfMerge:
                 oEmitUnconditionalForwardBranch
                 oFixAndFreeShuntList
                 oOperandPop
                 oFixPushLastAddress
                 oEmitMergeSourceCoordinate
                 @Statements
                  @Block
                   [ (tAssignBegin)
                   | tAssignBegin:
                   @AssignStmt
                    oEmitSourceCoordinate
                    ?tLiteralAddress (tLiteralAddress)
                    @OperandPushVariable
                     oOperandPushVariable
                     [ (tLiteralAddress)
                     | *:
                     [ (tLiteralAddress)
                     | *:
                     [ (tLiteralAddress)
                     | *:
                     >>
                    ;OperandPushVariable
                    @OperandPushExpressionAssignPopPop
                     [ (tLiteralAddress)
                     | tLiteralAddress:
                     @OperandPushVariable
                      oOperandPushVariable
                      [ (tSubscriptBegin)
                      | *:
                      [ (tSubscriptBegin)
                      | tSubscriptBegin:
                      @OperandPushExpression
                       [ (tLiteralAddress)
                       | tLiteralAddress:
                       @OperandPushVariable
                        oOperandPushVariable
                        [ (tFetchInteger)
                        | *:
                        [ (tFetchInteger)
                        | *:
                        [ (tFetchInteger)
                        | tFetchInteger:
                        ] or >
                        >>
                       ;OperandPushVariable
                       ] or >
                       }
                       [ (tSubscriptInteger)
                       | *:
                       ] or >
                       >>
                      ;OperandPushExpression
                      [ (tSubscriptInteger)
                      | tSubscriptInteger:
                      @OperandSubscriptIntegerPop
                       [ oOperandChooseMode (mStatic)
                       | *:
                       @OperandSubscriptNonManifestIntegerPop
                        [ oOptionTestChecking (yes)
                        | yes:
                        @OperandCheckedSubscriptNonManifestIntegerPop
                         @OperandForceIntoTemp
                          [ oOperandChooseMode (mStatic)
                          | *:
                          [ oOperandChooseLength (two)
                          | two:
                          @OperandPushTempWord
                           oTempAllocate
                           oOperandPushTemp
                           oOperandSetValue(zero)
                           oOperandSetLength(two)
                           >>
                          ;OperandPushTempWord
                          oOperandSwap
                          oEmitDouble(iMov)
                          @OperandPopAndFreeTemp
                           [ oOperandChooseMode (mStatic)
                           | *:
                           oOperandPop
                           >>
                          ;OperandPopAndFreeTemp
                          oOperandSetMode(mTemp)
                          ] or >
                          >>
                         ;OperandForceIntoTemp
                         [ oOptionTestChecking (yes)
                         | yes:
                         @EmitSubscriptRangeCheck
                          oOperandSwap
                          @OperandPushArrayUpperBound
                           [ oOperandChooseMode (mStatic)
                           | mStatic:
                           oOperandPushArrayUpperBound
                           ] or >
                           >>
                          ;OperandPushArrayUpperBound
                          oOperandSwapLeftAndDest
                          @EmitCmp
                           oOperandSwap
                           [ oOperandChooseMode (mTemp)
                           | *:
                           oOperandSwap
                           @OperandLeftOrRightIsTemp
                            [ oOperandChooseMode (mManifest)
                            | *:
                            oOperandSwap
                            [ oOperandChooseMode (mTemp)
                            | mTemp:
                            oOperandSwap
                            >>yes
                           ;OperandLeftOrRightIsTemp
                           [@OperandLeftOrRightIsTemp (yes)
                           | yes:
                           oEmitDouble(iCmp)
                           ] or >
                           >>
                          ;EmitCmp
                          oOperandPushJumpCondition(iJgt)
                          oEmitConditionalForwardBranch
                          oFixPushLastAddress
                          oOperandPop
                          oOperandPop
                          oOperandSwap
                          @OperandPushArrayLowerBound
                           [ oOperandChooseMode (mStatic)
                           | mStatic:
                           oOperandPushArrayLowerBound
                           ] or >
                           >>
                          ;OperandPushArrayLowerBound
                          oOperandSwapLeftAndDest
                          @EmitCmp
                           oOperandSwap
                           [ oOperandChooseMode (mTemp)
                           | *:
                           oOperandSwap
                           @OperandLeftOrRightIsTemp
                            [ oOperandChooseMode (mManifest)
                            | *:
                            oOperandSwap
                            [ oOperandChooseMode (mTemp)
                            | mTemp:
                            oOperandSwap
                            >>yes
                           ;OperandLeftOrRightIsTemp
                           [@OperandLeftOrRightIsTemp (yes)
                           | yes:
                           oEmitDouble(iCmp)
                           ] or >
                           >>
                          ;EmitCmp
                          oOperandPushJumpCondition(iJge)
                          oEmitConditionalForwardBranch
                          oFixPushLastAddress
                          oOperandPop
                          oOperandPop
                          oFixSwapAddresses
                          oFixForwardBranch
                          oFixPopAddress
                          @EmitSubscriptAbort
                           oOperandPushMode(mLineNum)
                           oOperandSetLength(two)
                           oEmitSingle(iPush)
                           oOperandPop
                           oOperandPushMode(mTrap)
                           oOperandSetValue(trSubscriptAbort)
                           oEmitSingle(iCall)
                           oOperandPop
                           >>
                          ;EmitSubscriptAbort
                          oFixForwardBranch
                          oFixPopAddress
                          >>
                         ;EmitSubscriptRangeCheck
                         ] or >
                         oOperandSwap
                         @OperandPushArrayLowerBound
                          [ oOperandChooseMode (mStatic)
                          | mStatic:
                          oOperandPushArrayLowerBound
                          ] or >
                          >>
                         ;OperandPushArrayLowerBound
                         oOperandSwapLeftAndDest
                         @OperandSubtractPop
                          @OperandAreLeftAndRightManifest
                           [ oOperandChooseMode (mManifest)
                           | mManifest:
                           oOperandSwap
                           [ oOperandChooseMode (mTemp)
                           | *:
                           oOperandSwap
                           >>no
                          ;OperandAreLeftAndRightManifest
                          [@OperandAreLeftAndRightManifest (no)
                          | no:
                          [ oOperandChooseManifestValue (one)
                          | one:
                          oOperandPop
                          @OperandForceIntoTemp
                           [ oOperandChooseMode (mTemp)
                           | mTemp:
                           ] or >
                           >>
                          ;OperandForceIntoTemp
                          oEmitSingle(iDec)
                          ] or >
                          ] or >
                          >>
                         ;OperandSubtractPop
                         oOperandPushMode(mManifest)
                         oOperandSetLength(two)
                         oOperandSetValue(two)
                         oEmitDouble(iShl)
                         oOperandPop
                         oOperandSwap
                         [ oOperandChooseMode (mStatic)
                         | mStatic:
                         oOperandPushMode(mManifest)
                         oOperandSetLength(two)
                         oOperandSetValue(eight)
                         oOperandAddManifestValues
                         oOperandPop
                         @OperandForceAddressIntoTemp
                          [ oOperandChooseMode (mStatic)
                          | mStatic:
                          @OperandPushTempWord
                           oTempAllocate
                           oOperandPushTemp
                           oOperandSetValue(zero)
                           oOperandSetLength(two)
                           >>
                          ;OperandPushTempWord
                          oOperandSwap
                          oEmitDouble(iLoada)
                          oOperandPop
                          ] or >
                          oOperandSetLength(two)
                          >>
                         ;OperandForceAddressIntoTemp
                         oEmitDouble(iAdd)
                         @OperandPopAndFreeTemp
                          [ oOperandChooseMode (mTemp)
                          | mTemp:
                          oTempFree
                          ] or >
                          oOperandPop
                          >>
                         ;OperandPopAndFreeTemp
                         ] or >
                         oOperandSetMode(mTempIndirect)
                         oOperandSetLength(two)
                         >>
                        ;OperandCheckedSubscriptNonManifestIntegerPop
                        ] or >
                        >>
                       ;OperandSubscriptNonManifestIntegerPop
                       oOperandSetLength(two)
                       >>
                      ;OperandSubscriptIntegerPop
                      ] or >
                      ] or >
                      [ (tFetchInteger)
                      | tFetchInteger:
                      ] or >
                      >>
                     ;OperandPushVariable
                     ] or >
                     }
                     [ (tAssignInteger)
                     | tAssignInteger:
                     @OperandAssignIntegerPopPop
                      [ oOperandCompareLeftAndRight (no)
                      | no:
                      @EmitMove
                       @OperandLeftOrRightIsTemp
                        [ oOperandChooseMode (mTempIndirect)
                        | *:
                        oOperandSwap
                        [ oOperandChooseMode (mStatic)
                        | *:
                        oOperandSwap
                        >>no
                       ;OperandLeftOrRightIsTemp
                       [@OperandLeftOrRightIsTemp (no)
                       | *:
                       [ oOperandChooseMode (mTempIndirect)
                       | *:
                       oOperandPushCopy
                       @OperandForceIntoTemp
                        [ oOperandChooseMode (mTempIndirect)
                        | mTempIndirect:
                        oOperandPushCopy
                        oOperandSetMode(mTemp)
                        oOperandSwap
                        oEmitDouble(iMov)
                        oOperandPop
                        ] or >
                        >>
                       ;OperandForceIntoTemp
                       oOperandSwapLeftAndDest
                       oEmitDouble(iMov)
                       @OperandPopAndFreeTemp
                        [ oOperandChooseMode (mTemp)
                        | mTemp:
                        oTempFree
                        ] or >
                        oOperandPop
                        >>
                       ;OperandPopAndFreeTemp
                       oOperandSwap
                       >>
                      ;EmitMove
                      @OperandPopAndFreeTemp
                       [ oOperandChooseMode (mTempIndirect)
                       | mTempIndirect:
                       oTempFree
                       ] or >
                       oOperandPop
                       >>
                      ;OperandPopAndFreeTemp
                      @OperandPopAndFreeTemp
                       [ oOperandChooseMode (mStatic)
                       | *:
                       oOperandPop
                       >>
                      ;OperandPopAndFreeTemp
                      ] or >
                      >>
                     ;OperandAssignIntegerPopPop
                     ] or >
                     >>
                    ;OperandPushExpressionAssignPopPop
                    >>
                   ;AssignStmt
                   ] or >
                   }
                   [ (tIfEnd)
                   | *:
                   ] or >
                   >>
                  ;Block
                  >>
                 ;Statements
                 oFixForwardBranch
                 oFixPopAddress
                 ?tIfEnd (tIfEnd)
                 ] or >
                 >>
                ;IfStmt
                ] or >
                }
                [ (tIfEnd)
                | *:
                ] or >
                >>
               ;Block
               >>
              ;Statements
              [ (tIfEnd)
              | tIfEnd:
              oFixAndFreeShuntList
              oOperandPop
              oEmitMergeSourceCoordinate
              ] or >
              >>
             ;IfStmt
             ] or >
             }
             [ (tIfEnd)
             | *:
             ] or >
             >>
            ;Block
            >>
           ;Statements
           oFixForwardBranch
           oFixPopAddress
           ?tIfEnd (tIfEnd)
           ] or >
           >>
          ;IfStmt
          ] or >
          }
          [ (tRepeatControl)
          | *:
          ] or >
          >>
         ;Block
         >>
        ;Statements
        ?tRepeatControl (tRepeatControl)
        @OperandPushBooleanControlExpression
         @OperandPushExpression
          [ (tLiteralAddress)
          | tLiteralAddress:
          @OperandPushVariable
           oOperandPushVariable
           [ (tSubscriptBegin)
           | *:
           [ (tSubscriptBegin)
           | tSubscriptBegin:
           @OperandPushExpression
            [ (tLiteralAddress)
            | tLiteralAddress:
            @OperandPushVariable
             oOperandPushVariable
             [ (tFetchInteger)
             | *:
             [ (tFetchInteger)
             | *:
             [ (tFetchInteger)
             | tFetchInteger:
             ] or >
             >>
            ;OperandPushVariable
            ] or >
            }
            [ (tSubscriptInteger)
            | *:
            ] or >
            >>
           ;OperandPushExpression
           [ (tSubscriptInteger)
           | tSubscriptInteger:
           @OperandSubscriptIntegerPop
            [ oOperandChooseMode (mStatic)
            | *:
            @OperandSubscriptNonManifestIntegerPop
             [ oOptionTestChecking (yes)
             | yes:
             @OperandCheckedSubscriptNonManifestIntegerPop
              @OperandForceIntoTemp
               [ oOperandChooseMode (mStatic)
               | *:
               [ oOperandChooseLength (two)
               | two:
               @OperandPushTempWord
                oTempAllocate
                oOperandPushTemp
                oOperandSetValue(zero)
                oOperandSetLength(two)
                >>
               ;OperandPushTempWord
               oOperandSwap
               oEmitDouble(iMov)
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mStatic)
                | *:
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               oOperandSetMode(mTemp)
               ] or >
               >>
              ;OperandForceIntoTemp
              [ oOptionTestChecking (yes)
              | yes:
              @EmitSubscriptRangeCheck
               oOperandSwap
               @OperandPushArrayUpperBound
                [ oOperandChooseMode (mStatic)
                | mStatic:
                oOperandPushArrayUpperBound
                ] or >
                >>
               ;OperandPushArrayUpperBound
               oOperandSwapLeftAndDest
               @EmitCmp
                oOperandSwap
                [ oOperandChooseMode (mTemp)
                | *:
                oOperandSwap
                @OperandLeftOrRightIsTemp
                 [ oOperandChooseMode (mManifest)
                 | *:
                 oOperandSwap
                 [ oOperandChooseMode (mTemp)
                 | mTemp:
                 oOperandSwap
                 >>yes
                ;OperandLeftOrRightIsTemp
                [@OperandLeftOrRightIsTemp (yes)
                | yes:
                oEmitDouble(iCmp)
                ] or >
                >>
               ;EmitCmp
               oOperandPushJumpCondition(iJgt)
               oEmitConditionalForwardBranch
               oFixPushLastAddress
               oOperandPop
               oOperandPop
               oOperandSwap
               @OperandPushArrayLowerBound
                [ oOperandChooseMode (mStatic)
                | mStatic:
                oOperandPushArrayLowerBound
                ] or >
                >>
               ;OperandPushArrayLowerBound
               oOperandSwapLeftAndDest
               @EmitCmp
                oOperandSwap
                [ oOperandChooseMode (mTemp)
                | *:
                oOperandSwap
                @OperandLeftOrRightIsTemp
                 [ oOperandChooseMode (mManifest)
                 | *:
                 oOperandSwap
                 [ oOperandChooseMode (mTemp)
                 | mTemp:
                 oOperandSwap
                 >>yes
                ;OperandLeftOrRightIsTemp
                [@OperandLeftOrRightIsTemp (yes)
                | yes:
                oEmitDouble(iCmp)
                ] or >
                >>
               ;EmitCmp
               oOperandPushJumpCondition(iJge)
               oEmitConditionalForwardBranch
               oFixPushLastAddress
               oOperandPop
               oOperandPop
               oFixSwapAddresses
               oFixForwardBranch
               oFixPopAddress
               @EmitSubscriptAbort
                oOperandPushMode(mLineNum)
                oOperandSetLength(two)
                oEmitSingle(iPush)
                oOperandPop
                oOperandPushMode(mTrap)
                oOperandSetValue(trSubscriptAbort)
                oEmitSingle(iCall)
                oOperandPop
                >>
               ;EmitSubscriptAbort
               oFixForwardBranch
               oFixPopAddress
               >>
              ;EmitSubscriptRangeCheck
              ] or >
              oOperandSwap
              @OperandPushArrayLowerBound
               [ oOperandChooseMode (mStatic)
               | mStatic:
               oOperandPushArrayLowerBound
               ] or >
               >>
              ;OperandPushArrayLowerBound
              oOperandSwapLeftAndDest
              @OperandSubtractPop
               @OperandAreLeftAndRightManifest
                [ oOperandChooseMode (mManifest)
                | mManifest:
                oOperandSwap
                [ oOperandChooseMode (mTemp)
                | *:
                oOperandSwap
                >>no
               ;OperandAreLeftAndRightManifest
               [@OperandAreLeftAndRightManifest (no)
               | no:
               [ oOperandChooseManifestValue (one)
               | one:
               oOperandPop
               @OperandForceIntoTemp
                [ oOperandChooseMode (mTemp)
                | mTemp:
                ] or >
                >>
               ;OperandForceIntoTemp
               oEmitSingle(iDec)
               ] or >
               ] or >
               >>
              ;OperandSubtractPop
              oOperandPushMode(mManifest)
              oOperandSetLength(two)
              oOperandSetValue(two)
              oEmitDouble(iShl)
              oOperandPop
              oOperandSwap
              [ oOperandChooseMode (mStatic)
              | mStatic:
              oOperandPushMode(mManifest)
              oOperandSetLength(two)
              oOperandSetValue(eight)
              oOperandAddManifestValues
              oOperandPop
              @OperandForceAddressIntoTemp
               [ oOperandChooseMode (mStatic)
               | mStatic:
               @OperandPushTempWord
                oTempAllocate
                oOperandPushTemp
                oOperandSetValue(zero)
                oOperandSetLength(two)
                >>
               ;OperandPushTempWord
               oOperandSwap
               oEmitDouble(iLoada)
               oOperandPop
               ] or >
               oOperandSetLength(two)
               >>
              ;OperandForceAddressIntoTemp
              oEmitDouble(iAdd)
              @OperandPopAndFreeTemp
               [ oOperandChooseMode (mTemp)
               | mTemp:
               oTempFree
               ] or >
               oOperandPop
               >>
              ;OperandPopAndFreeTemp
              ] or >
              oOperandSetMode(mTempIndirect)
              oOperandSetLength(two)
              >>
             ;OperandCheckedSubscriptNonManifestIntegerPop
             ] or >
             >>
            ;OperandSubscriptNonManifestIntegerPop
            oOperandSetLength(two)
            >>
           ;OperandSubscriptIntegerPop
           ] or >
           ] or >
           [ (tFetchInteger)
           | tFetchInteger:
           ] or >
           >>
          ;OperandPushVariable
          ] or >
          }
          [ (tLiteralAddress)
          | tLiteralAddress:
          @OperandPushVariable
           oOperandPushVariable
           [ (tFetchInteger)
           | *:
           [ (tFetchInteger)
           | *:
           [ (tFetchInteger)
           | tFetchInteger:
           ] or >
           >>
          ;OperandPushVariable
          ] or >
          }
          [ (tNE)
          | tNE:
          @OperandEqualPop
           [ oOperandCompareLeftAndRight (no)
           | no:
           [ oOperandChooseManifestValue ()
           | *:
           oOperandSwap
           [ oOperandChooseManifestValue ()
           | *:
           oOperandSwap
           @OperandAreLeftAndRightManifest
            [ oOperandChooseMode (mStatic)
            | *:
            >>no
           ;OperandAreLeftAndRightManifest
           [@OperandAreLeftAndRightManifest (no)
           | *:
           @EmitCmp
            oOperandSwap
            [ oOperandChooseMode (mTempIndirect)
            | *:
            oOperandSwap
            @OperandLeftOrRightIsTemp
             [ oOperandChooseMode (mStatic)
             | *:
             oOperandSwap
             [ oOperandChooseMode (mTempIndirect)
             | *:
             oOperandSwap
             >>no
            ;OperandLeftOrRightIsTemp
            [@OperandLeftOrRightIsTemp (no)
            | *:
            [ oOperandChooseMode (mStatic)
            | *:
            oOperandPushCopy
            @OperandForceIntoTemp
             [ oOperandChooseMode (mStatic)
             | *:
             [ oOperandChooseLength (two)
             | two:
             @OperandPushTempWord
              oTempAllocate
              oOperandPushTemp
              oOperandSetValue(zero)
              oOperandSetLength(two)
              >>
             ;OperandPushTempWord
             oOperandSwap
             oEmitDouble(iMov)
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mStatic)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandSetMode(mTemp)
             ] or >
             >>
            ;OperandForceIntoTemp
            oOperandSwapLeftAndDest
            oEmitDouble(iCmp)
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mTemp)
             | mTemp:
             oTempFree
             ] or >
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            oOperandSwap
            >>
           ;EmitCmp
           @OperandPopAndFreeTemp
            [ oOperandChooseMode (mStatic)
            | *:
            oOperandPop
            >>
           ;OperandPopAndFreeTemp
           @OperandPopAndFreeTemp
            [ oOperandChooseMode (mTempIndirect)
            | mTempIndirect:
            oTempFree
            ] or >
            oOperandPop
            >>
           ;OperandPopAndFreeTemp
           oOperandPushJumpCondition(iJeq)
           ] or >
           >>
          ;OperandEqualPop
          @OperandNot
           @OperandForceToJumpCondition
            [ oOperandIsJumpCondition (yes)
            | yes:
            ] or >
            >>
           ;OperandForceToJumpCondition
           @OperandComplementJumpCondition
            [ oOperandChooseJumpCondition (iJeq)
            | *:
            oOperandComplementJumpCondition
            >>
           ;OperandComplementJumpCondition
           >>
          ;OperandNot
          ] or >
          }
          [ (tNot)
          | tNot:
          @OperandNot
           @OperandForceToJumpCondition
            [ oOperandIsJumpCondition (yes)
            | yes:
            ] or >
            >>
           ;OperandForceToJumpCondition
           @OperandComplementJumpCondition
            [ oOperandChooseJumpCondition (iJne)
            | *:
            oOperandComplementJumpCondition
            >>
           ;OperandComplementJumpCondition
           >>
          ;OperandNot
          ] or >
          }
          [ (tRepeatTest)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         @OperandForceToJumpCondition
          [ oOperandIsJumpCondition (yes)
          | yes:
          ] or >
          >>
         ;OperandForceToJumpCondition
         >>
        ;OperandPushBooleanControlExpression
        ?tRepeatTest (tRepeatTest)
        [ oOperandChooseJumpCondition (iJeq)
        | *:
        @OperandInfixOr
         @OperandForceToJumpCondition
          [ oOperandIsJumpCondition (yes)
          | yes:
          ] or >
          >>
         ;OperandForceToJumpCondition
         [ oOperandChooseJumpCondition (iJeq)
         | *:
         oEmitConditionalForwardBranch
         oFixAndFreeFalseBranches
         oFixPushLastAddress
         oOperandMergeShuntsWithAddress
         oFixPopAddress
         >>
        ;OperandInfixOr
        oEmitUnconditionalBackwardBranch
        oFixPopAddress
        oFixAndFreeShuntList
        oOperandPop
        >>
       ;RepeatStmt
       ] or >
       }
       [ (tIfEnd)
       | *:
       ] or >
       >>
      ;Block
      >>
     ;Statements
     oFixForwardBranch
     oFixPopAddress
     ?tIfEnd (tIfEnd)
     ] or >
     >>
    ;IfStmt
    ] or >
    }
    [ (tAssignBegin)
    | tAssignBegin:
    @AssignStmt
     oEmitSourceCoordinate
     ?tLiteralAddress (tLiteralAddress)
     @OperandPushVariable
      oOperandPushVariable
      [ (tLiteralAddress)
      | *:
      [ (tLiteralAddress)
      | *:
      [ (tLiteralAddress)
      | *:
      >>
     ;OperandPushVariable
     @OperandPushExpressionAssignPopPop
      [ (tLiteralAddress)
      | tLiteralAddress:
      @OperandPushVariable
       oOperandPushVariable
       [ (tFetchInteger)
       | *:
       [ (tFetchInteger)
       | *:
       [ (tFetchInteger)
       | tFetchInteger:
       ] or >
       >>
      ;OperandPushVariable
      ] or >
      }
      [ (tLiteralInteger)
      | tLiteralInteger:
      oOperandPushInteger
      ] or >
      }
      [ (tAdd)
      | tAdd:
      [ (tAssignInteger)
      | tAssignInteger:
      @OperandAddAssignPopPopPop
       [ oOperandCompareRightAndDest (no)
       | *:
       oOperandSwap
       [ oOperandCompareRightAndDest (yes)
       | yes:
       oOperandPop
       @OperandAddRightToLeftPop
        [ oOperandChooseManifestValue (one)
        | one:
        oOperandPop
        oEmitSingle(iInc)
        ] or >
        >>
       ;OperandAddRightToLeftPop
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       ] or >
       >>
      ;OperandAddAssignPopPopPop
      ] or >
      >>
     ;OperandPushExpressionAssignPopPop
     >>
    ;AssignStmt
    ] or >
    }
    [ (tProcedureEnd)
    | *:
    ] or >
    >>
   ;Block
   ?tProcedureEnd (tProcedureEnd)
   oEmitNone(iLeave)
   oEmitNone(iReturn)
   >>
  ;Routine
  oFixForwardBranch
  oFixPopAddress
  ] or >
  }
  [ (tSkipProc)
  | tSkipProc:
  oEmitUnconditionalForwardBranch
  oFixPushLastAddress
  @Routine
   oEmitProcLabel(mProc)
   oEmitNone(iEnter)
   [ (tParmEnd)
   | tParmEnd:
   ] or >
   @Block
    [ (tArrayDescriptor)
    | tArrayDescriptor:
    ?tLiteralInteger (tLiteralInteger)
    oOperandPushInteger
    ?tLiteralAddress (tLiteralAddress)
    oOperandPushVariable
    ?tStoreInteger (tStoreInteger)
    oOperandSwap
    oArrayEnterLowerBound
    @OperandAssignIntegerPopPop
     [ oOperandCompareLeftAndRight (no)
     | no:
     @EmitMove
      @OperandLeftOrRightIsTemp
       [ oOperandChooseMode (mManifest)
       | *:
       oOperandSwap
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandSwap
       >>no
      ;OperandLeftOrRightIsTemp
      [@OperandLeftOrRightIsTemp (no)
      | *:
      [ oOperandChooseMode (mManifest)
      | mManifest:
      oEmitDouble(iMov)
      ] or >
      >>
     ;EmitMove
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mManifest)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     ] or >
     >>
    ;OperandAssignIntegerPopPop
    ?tLiteralInteger (tLiteralInteger)
    oOperandPushInteger
    ?tLiteralAddress (tLiteralAddress)
    oOperandPushVariable
    ?tStoreInteger (tStoreInteger)
    oOperandSwap
    oArrayEnterUpperBound
    @OperandAssignIntegerPopPop
     [ oOperandCompareLeftAndRight (no)
     | no:
     @EmitMove
      @OperandLeftOrRightIsTemp
       [ oOperandChooseMode (mManifest)
       | *:
       oOperandSwap
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandSwap
       >>no
      ;OperandLeftOrRightIsTemp
      [@OperandLeftOrRightIsTemp (no)
      | *:
      [ oOperandChooseMode (mManifest)
      | mManifest:
      oEmitDouble(iMov)
      ] or >
      >>
     ;EmitMove
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mManifest)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     ] or >
     >>
    ;OperandAssignIntegerPopPop
    ] or >
    }
    [ (tInitialValue)
    | tInitialValue:
    @OperandPushExpression
     [ (tLiteralInteger)
     | tLiteralInteger:
     oOperandPushInteger
     ] or >
     }
     [ (tInitEnd)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    ?tInitEnd (tInitEnd)
    ?tLiteralAddress (tLiteralAddress)
    oOperandPushVariable
    oOperandSwap
    [ (tStoreInteger)
    | tStoreInteger:
    oOperandSetLength(two)
    @OperandAssignIntegerPopPop
     [ oOperandCompareLeftAndRight (no)
     | no:
     @EmitMove
      @OperandLeftOrRightIsTemp
       [ oOperandChooseMode (mManifest)
       | *:
       oOperandSwap
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandSwap
       >>no
      ;OperandLeftOrRightIsTemp
      [@OperandLeftOrRightIsTemp (no)
      | *:
      [ oOperandChooseMode (mManifest)
      | mManifest:
      oEmitDouble(iMov)
      ] or >
      >>
     ;EmitMove
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mManifest)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     ] or >
     >>
    ;OperandAssignIntegerPopPop
    ] or >
    ] or >
    }
    [ (tInitialValue)
    | tInitialValue:
    @OperandPushExpression
     [ (tLiteralAddress)
     | tLiteralAddress:
     @OperandPushVariable
      oOperandPushVariable
      [ (tFetchInteger)
      | *:
      [ (tFetchInteger)
      | *:
      [ (tFetchInteger)
      | tFetchInteger:
      ] or >
      >>
     ;OperandPushVariable
     ] or >
     }
     [ (tInitEnd)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    ?tInitEnd (tInitEnd)
    ?tLiteralAddress (tLiteralAddress)
    oOperandPushVariable
    oOperandSwap
    [ (tStoreInteger)
    | tStoreInteger:
    oOperandSetLength(two)
    @OperandAssignIntegerPopPop
     [ oOperandCompareLeftAndRight (no)
     | no:
     @EmitMove
      @OperandLeftOrRightIsTemp
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandSwap
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandSwap
       >>no
      ;OperandLeftOrRightIsTemp
      [@OperandLeftOrRightIsTemp (no)
      | *:
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPushCopy
      @OperandForceIntoTemp
       [ oOperandChooseMode (mStatic)
       | *:
       [ oOperandChooseLength (two)
       | two:
       @OperandPushTempWord
        oTempAllocate
        oOperandPushTemp
        oOperandSetValue(zero)
        oOperandSetLength(two)
        >>
       ;OperandPushTempWord
       oOperandSwap
       oEmitDouble(iMov)
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandSetMode(mTemp)
       ] or >
       >>
      ;OperandForceIntoTemp
      oOperandSwapLeftAndDest
      oEmitDouble(iMov)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mTemp)
       | mTemp:
       oTempFree
       ] or >
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandSwap
      >>
     ;EmitMove
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     ] or >
     >>
    ;OperandAssignIntegerPopPop
    ] or >
    ] or >
    }
    [ (tInitialValue)
    | tInitialValue:
    @OperandPushExpression
     [ (tLiteralBoolean)
     | tLiteralBoolean:
     oOperandPushBoolean
     ] or >
     }
     [ (tInitEnd)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    ?tInitEnd (tInitEnd)
    ?tLiteralAddress (tLiteralAddress)
    oOperandPushVariable
    oOperandSwap
    [ (tStoreBoolean)
    | tStoreBoolean:
    oOperandSetLength(one)
    @OperandAssignBooleanPopPop
     @OperandConvertJumpConditionToData
      [ oOperandIsJumpCondition (no)
      | no:
      ] or >
      >>
     ;OperandConvertJumpConditionToData
     oOperandSetLength(one)
     @EmitMove
      @OperandLeftOrRightIsTemp
       [ oOperandChooseMode (mManifest)
       | *:
       oOperandSwap
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandSwap
       >>no
      ;OperandLeftOrRightIsTemp
      [@OperandLeftOrRightIsTemp (no)
      | *:
      [ oOperandChooseMode (mManifest)
      | mManifest:
      oEmitDouble(iMov)
      ] or >
      >>
     ;EmitMove
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mManifest)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     >>
    ;OperandAssignBooleanPopPop
    ] or >
    ] or >
    }
    [ (tRepeatBegin)
    | tRepeatBegin:
    @RepeatStmt
     oFixPushAddress
     oEmitMergeSourceCoordinate
     @Statements
      @Block
       [ (tIfBegin)
       | tIfBegin:
       @IfStmt
        oEmitSourceCoordinate
        @OperandPushBooleanControlExpression
         @OperandPushExpression
          [ (tLiteralAddress)
          | tLiteralAddress:
          @OperandPushVariable
           oOperandPushVariable
           [ (tFetchInteger)
           | *:
           [ (tFetchInteger)
           | *:
           [ (tFetchInteger)
           | tFetchInteger:
           ] or >
           >>
          ;OperandPushVariable
          ] or >
          }
          [ (tLiteralInteger)
          | tLiteralInteger:
          oOperandPushInteger
          ] or >
          }
          [ (tNE)
          | tNE:
          @OperandEqualPop
           [ oOperandCompareLeftAndRight (no)
           | no:
           [ oOperandChooseManifestValue (zero)
           | zero:
           oOperandPop
           @EmitTst
            [ oOperandChooseLength (two)
            | two:
            oOperandPushMode(mManifest)
            oOperandSetValue(zero)
            oOperandSetLength(two)
            ] or >
            @EmitCmp
             oOperandSwap
             [ oOperandChooseMode (mStatic)
             | *:
             oOperandSwap
             @OperandLeftOrRightIsTemp
              [ oOperandChooseMode (mManifest)
              | *:
              oOperandSwap
              [ oOperandChooseMode (mStatic)
              | *:
              oOperandSwap
              >>no
             ;OperandLeftOrRightIsTemp
             [@OperandLeftOrRightIsTemp (no)
             | *:
             [ oOperandChooseMode (mManifest)
             | mManifest:
             oEmitDouble(iCmp)
             ] or >
             >>
            ;EmitCmp
            oOperandPop
            >>
           ;EmitTst
           @OperandPopAndFreeTemp
            [ oOperandChooseMode (mStatic)
            | *:
            oOperandPop
            >>
           ;OperandPopAndFreeTemp
           oOperandPushJumpCondition(iJeq)
           ] or >
           ] or >
           >>
          ;OperandEqualPop
          @OperandNot
           @OperandForceToJumpCondition
            [ oOperandIsJumpCondition (yes)
            | yes:
            ] or >
            >>
           ;OperandForceToJumpCondition
           @OperandComplementJumpCondition
            [ oOperandChooseJumpCondition (iJeq)
            | *:
            oOperandComplementJumpCondition
            >>
           ;OperandComplementJumpCondition
           >>
          ;OperandNot
          ] or >
          }
          [ (tIfThen)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         @OperandForceToJumpCondition
          [ oOperandIsJumpCondition (yes)
          | yes:
          ] or >
          >>
         ;OperandForceToJumpCondition
         >>
        ;OperandPushBooleanControlExpression
        ?tIfThen (tIfThen)
        [ oOperandChooseJumpCondition (iJne)
        | *:
        @OperandComplementJumpCondition
         [ oOperandChooseJumpCondition (iJne)
         | *:
         oOperandComplementJumpCondition
         >>
        ;OperandComplementJumpCondition
        @OperandInfixOr
         @OperandForceToJumpCondition
          [ oOperandIsJumpCondition (yes)
          | yes:
          ] or >
          >>
         ;OperandForceToJumpCondition
         [ oOperandChooseJumpCondition (iJeq)
         | *:
         oEmitConditionalForwardBranch
         oFixAndFreeFalseBranches
         oFixPushLastAddress
         oOperandMergeShuntsWithAddress
         oFixPopAddress
         >>
        ;OperandInfixOr
        @Statements
         @Block
          [ (tAssignBegin)
          | tAssignBegin:
          @AssignStmt
           oEmitSourceCoordinate
           ?tLiteralAddress (tLiteralAddress)
           @OperandPushVariable
            oOperandPushVariable
            [ (tLiteralAddress)
            | *:
            [ (tLiteralAddress)
            | *:
            [ (tLiteralAddress)
            | *:
            >>
           ;OperandPushVariable
           @OperandPushExpressionAssignPopPop
            [ (tLiteralAddress)
            | tLiteralAddress:
            @OperandPushVariable
             oOperandPushVariable
             [ (tFetchInteger)
             | *:
             [ (tFetchInteger)
             | *:
             [ (tFetchInteger)
             | tFetchInteger:
             ] or >
             >>
            ;OperandPushVariable
            ] or >
            }
            [ (tLiteralInteger)
            | tLiteralInteger:
            oOperandPushInteger
            ] or >
            }
            [ (tAdd)
            | tAdd:
            [ (tAssignInteger)
            | tAssignInteger:
            @OperandAddAssignPopPopPop
             [ oOperandCompareRightAndDest (no)
             | *:
             oOperandSwap
             [ oOperandCompareRightAndDest (yes)
             | yes:
             oOperandPop
             @OperandAddRightToLeftPop
              [ oOperandChooseManifestValue (one)
              | one:
              oOperandPop
              oEmitSingle(iInc)
              ] or >
              >>
             ;OperandAddRightToLeftPop
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mStatic)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             ] or >
             >>
            ;OperandAddAssignPopPopPop
            ] or >
            >>
           ;OperandPushExpressionAssignPopPop
           >>
          ;AssignStmt
          ] or >
          }
          [ (tAssignBegin)
          | tAssignBegin:
          @AssignStmt
           oEmitSourceCoordinate
           ?tLiteralAddress (tLiteralAddress)
           @OperandPushVariable
            oOperandPushVariable
            [ (tSubscriptBegin)
            | *:
            [ (tSubscriptBegin)
            | tSubscriptBegin:
            @OperandPushExpression
             [ (tLiteralAddress)
             | tLiteralAddress:
             @OperandPushVariable
              oOperandPushVariable
              [ (tFetchInteger)
              | *:
              [ (tFetchInteger)
              | *:
              [ (tFetchInteger)
              | tFetchInteger:
              ] or >
              >>
             ;OperandPushVariable
             ] or >
             }
             [ (tSubscriptInteger)
             | *:
             ] or >
             >>
            ;OperandPushExpression
            [ (tSubscriptInteger)
            | tSubscriptInteger:
            @OperandSubscriptIntegerPop
             [ oOperandChooseMode (mStatic)
             | *:
             @OperandSubscriptNonManifestIntegerPop
              [ oOptionTestChecking (yes)
              | yes:
              @OperandCheckedSubscriptNonManifestIntegerPop
               @OperandForceIntoTemp
                [ oOperandChooseMode (mStatic)
                | *:
                [ oOperandChooseLength (two)
                | two:
                @OperandPushTempWord
                 oTempAllocate
                 oOperandPushTemp
                 oOperandSetValue(zero)
                 oOperandSetLength(two)
                 >>
                ;OperandPushTempWord
                oOperandSwap
                oEmitDouble(iMov)
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mStatic)
                 | *:
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                oOperandSetMode(mTemp)
                ] or >
                >>
               ;OperandForceIntoTemp
               [ oOptionTestChecking (yes)
               | yes:
               @EmitSubscriptRangeCheck
                oOperandSwap
                @OperandPushArrayUpperBound
                 [ oOperandChooseMode (mStatic)
                 | mStatic:
                 oOperandPushArrayUpperBound
                 ] or >
                 >>
                ;OperandPushArrayUpperBound
                oOperandSwapLeftAndDest
                @EmitCmp
                 oOperandSwap
                 [ oOperandChooseMode (mTemp)
                 | *:
                 oOperandSwap
                 @OperandLeftOrRightIsTemp
                  [ oOperandChooseMode (mManifest)
                  | *:
                  oOperandSwap
                  [ oOperandChooseMode (mTemp)
                  | mTemp:
                  oOperandSwap
                  >>yes
                 ;OperandLeftOrRightIsTemp
                 [@OperandLeftOrRightIsTemp (yes)
                 | yes:
                 oEmitDouble(iCmp)
                 ] or >
                 >>
                ;EmitCmp
                oOperandPushJumpCondition(iJgt)
                oEmitConditionalForwardBranch
                oFixPushLastAddress
                oOperandPop
                oOperandPop
                oOperandSwap
                @OperandPushArrayLowerBound
                 [ oOperandChooseMode (mStatic)
                 | mStatic:
                 oOperandPushArrayLowerBound
                 ] or >
                 >>
                ;OperandPushArrayLowerBound
                oOperandSwapLeftAndDest
                @EmitCmp
                 oOperandSwap
                 [ oOperandChooseMode (mTemp)
                 | *:
                 oOperandSwap
                 @OperandLeftOrRightIsTemp
                  [ oOperandChooseMode (mManifest)
                  | *:
                  oOperandSwap
                  [ oOperandChooseMode (mTemp)
                  | mTemp:
                  oOperandSwap
                  >>yes
                 ;OperandLeftOrRightIsTemp
                 [@OperandLeftOrRightIsTemp (yes)
                 | yes:
                 oEmitDouble(iCmp)
                 ] or >
                 >>
                ;EmitCmp
                oOperandPushJumpCondition(iJge)
                oEmitConditionalForwardBranch
                oFixPushLastAddress
                oOperandPop
                oOperandPop
                oFixSwapAddresses
                oFixForwardBranch
                oFixPopAddress
                @EmitSubscriptAbort
                 oOperandPushMode(mLineNum)
                 oOperandSetLength(two)
                 oEmitSingle(iPush)
                 oOperandPop
                 oOperandPushMode(mTrap)
                 oOperandSetValue(trSubscriptAbort)
                 oEmitSingle(iCall)
                 oOperandPop
                 >>
                ;EmitSubscriptAbort
                oFixForwardBranch
                oFixPopAddress
                >>
               ;EmitSubscriptRangeCheck
               ] or >
               oOperandSwap
               @OperandPushArrayLowerBound
                [ oOperandChooseMode (mStatic)
                | mStatic:
                oOperandPushArrayLowerBound
                ] or >
                >>
               ;OperandPushArrayLowerBound
               oOperandSwapLeftAndDest
               @OperandSubtractPop
                @OperandAreLeftAndRightManifest
                 [ oOperandChooseMode (mManifest)
                 | mManifest:
                 oOperandSwap
                 [ oOperandChooseMode (mTemp)
                 | *:
                 oOperandSwap
                 >>no
                ;OperandAreLeftAndRightManifest
                [@OperandAreLeftAndRightManifest (no)
                | no:
                [ oOperandChooseManifestValue (one)
                | one:
                oOperandPop
                @OperandForceIntoTemp
                 [ oOperandChooseMode (mTemp)
                 | mTemp:
                 ] or >
                 >>
                ;OperandForceIntoTemp
                oEmitSingle(iDec)
                ] or >
                ] or >
                >>
               ;OperandSubtractPop
               oOperandPushMode(mManifest)
               oOperandSetLength(two)
               oOperandSetValue(two)
               oEmitDouble(iShl)
               oOperandPop
               oOperandSwap
               [ oOperandChooseMode (mStatic)
               | mStatic:
               oOperandPushMode(mManifest)
               oOperandSetLength(two)
               oOperandSetValue(eight)
               oOperandAddManifestValues
               oOperandPop
               @OperandForceAddressIntoTemp
                [ oOperandChooseMode (mStatic)
                | mStatic:
                @OperandPushTempWord
                 oTempAllocate
                 oOperandPushTemp
                 oOperandSetValue(zero)
                 oOperandSetLength(two)
                 >>
                ;OperandPushTempWord
                oOperandSwap
                oEmitDouble(iLoada)
                oOperandPop
                ] or >
                oOperandSetLength(two)
                >>
               ;OperandForceAddressIntoTemp
               oEmitDouble(iAdd)
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mTemp)
                | mTemp:
                oTempFree
                ] or >
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               ] or >
               oOperandSetMode(mTempIndirect)
               oOperandSetLength(two)
               >>
              ;OperandCheckedSubscriptNonManifestIntegerPop
              ] or >
              >>
             ;OperandSubscriptNonManifestIntegerPop
             oOperandSetLength(two)
             >>
            ;OperandSubscriptIntegerPop
            ] or >
            ] or >
            [ (tLiteralAddress)
            | *:
            >>
           ;OperandPushVariable
           @OperandPushExpressionAssignPopPop
            [ (tLiteralAddress)
            | tLiteralAddress:
            @OperandPushVariable
             oOperandPushVariable
             [ (tFetchInteger)
             | *:
             [ (tFetchInteger)
             | *:
             [ (tFetchInteger)
             | tFetchInteger:
             ] or >
             >>
            ;OperandPushVariable
            ] or >
            }
            [ (tAssignInteger)
            | tAssignInteger:
            @OperandAssignIntegerPopPop
             [ oOperandCompareLeftAndRight (no)
             | no:
             @EmitMove
              @OperandLeftOrRightIsTemp
               [ oOperandChooseMode (mStatic)
               | *:
               oOperandSwap
               [ oOperandChooseMode (mTempIndirect)
               | *:
               oOperandSwap
               >>no
              ;OperandLeftOrRightIsTemp
              [@OperandLeftOrRightIsTemp (no)
              | *:
              [ oOperandChooseMode (mStatic)
              | *:
              oOperandPushCopy
              @OperandForceIntoTemp
               [ oOperandChooseMode (mStatic)
               | *:
               [ oOperandChooseLength (two)
               | two:
               @OperandPushTempWord
                oTempAllocate
                oOperandPushTemp
                oOperandSetValue(zero)
                oOperandSetLength(two)
                >>
               ;OperandPushTempWord
               oOperandSwap
               oEmitDouble(iMov)
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mStatic)
                | *:
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               oOperandSetMode(mTemp)
               ] or >
               >>
              ;OperandForceIntoTemp
              oOperandSwapLeftAndDest
              oEmitDouble(iMov)
              @OperandPopAndFreeTemp
               [ oOperandChooseMode (mTemp)
               | mTemp:
               oTempFree
               ] or >
               oOperandPop
               >>
              ;OperandPopAndFreeTemp
              oOperandSwap
              >>
             ;EmitMove
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mStatic)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mTempIndirect)
              | mTempIndirect:
              oTempFree
              ] or >
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             ] or >
             >>
            ;OperandAssignIntegerPopPop
            ] or >
            >>
           ;OperandPushExpressionAssignPopPop
           >>
          ;AssignStmt
          ] or >
          }
          [ (tAssignBegin)
          | tAssignBegin:
          @AssignStmt
           oEmitSourceCoordinate
           ?tLiteralAddress (tLiteralAddress)
           @OperandPushVariable
            oOperandPushVariable
            [ (tLiteralAddress)
            | *:
            [ (tLiteralAddress)
            | *:
            [ (tLiteralAddress)
            | *:
            >>
           ;OperandPushVariable
           @OperandPushExpressionAssignPopPop
            [ (tLiteralAddress)
            | tLiteralAddress:
            @OperandPushVariable
             oOperandPushVariable
             [ (tSubscriptBegin)
             | *:
             [ (tSubscriptBegin)
             | tSubscriptBegin:
             @OperandPushExpression
              [ (tLiteralAddress)
              | tLiteralAddress:
              @OperandPushVariable
               oOperandPushVariable
               [ (tFetchInteger)
               | *:
               [ (tFetchInteger)
               | *:
               [ (tFetchInteger)
               | tFetchInteger:
               ] or >
               >>
              ;OperandPushVariable
              ] or >
              }
              [ (tSubscriptInteger)
              | *:
              ] or >
              >>
             ;OperandPushExpression
             [ (tSubscriptInteger)
             | tSubscriptInteger:
             @OperandSubscriptIntegerPop
              [ oOperandChooseMode (mStatic)
              | *:
              @OperandSubscriptNonManifestIntegerPop
               [ oOptionTestChecking (yes)
               | yes:
               @OperandCheckedSubscriptNonManifestIntegerPop
                @OperandForceIntoTemp
                 [ oOperandChooseMode (mStatic)
                 | *:
                 [ oOperandChooseLength (two)
                 | two:
                 @OperandPushTempWord
                  oTempAllocate
                  oOperandPushTemp
                  oOperandSetValue(zero)
                  oOperandSetLength(two)
                  >>
                 ;OperandPushTempWord
                 oOperandSwap
                 oEmitDouble(iMov)
                 @OperandPopAndFreeTemp
                  [ oOperandChooseMode (mStatic)
                  | *:
                  oOperandPop
                  >>
                 ;OperandPopAndFreeTemp
                 oOperandSetMode(mTemp)
                 ] or >
                 >>
                ;OperandForceIntoTemp
                [ oOptionTestChecking (yes)
                | yes:
                @EmitSubscriptRangeCheck
                 oOperandSwap
                 @OperandPushArrayUpperBound
                  [ oOperandChooseMode (mStatic)
                  | mStatic:
                  oOperandPushArrayUpperBound
                  ] or >
                  >>
                 ;OperandPushArrayUpperBound
                 oOperandSwapLeftAndDest
                 @EmitCmp
                  oOperandSwap
                  [ oOperandChooseMode (mTemp)
                  | *:
                  oOperandSwap
                  @OperandLeftOrRightIsTemp
                   [ oOperandChooseMode (mManifest)
                   | *:
                   oOperandSwap
                   [ oOperandChooseMode (mTemp)
                   | mTemp:
                   oOperandSwap
                   >>yes
                  ;OperandLeftOrRightIsTemp
                  [@OperandLeftOrRightIsTemp (yes)
                  | yes:
                  oEmitDouble(iCmp)
                  ] or >
                  >>
                 ;EmitCmp
                 oOperandPushJumpCondition(iJgt)
                 oEmitConditionalForwardBranch
                 oFixPushLastAddress
                 oOperandPop
                 oOperandPop
                 oOperandSwap
                 @OperandPushArrayLowerBound
                  [ oOperandChooseMode (mStatic)
                  | mStatic:
                  oOperandPushArrayLowerBound
                  ] or >
                  >>
                 ;OperandPushArrayLowerBound
                 oOperandSwapLeftAndDest
                 @EmitCmp
                  oOperandSwap
                  [ oOperandChooseMode (mTemp)
                  | *:
                  oOperandSwap
                  @OperandLeftOrRightIsTemp
                   [ oOperandChooseMode (mManifest)
                   | *:
                   oOperandSwap
                   [ oOperandChooseMode (mTemp)
                   | mTemp:
                   oOperandSwap
                   >>yes
                  ;OperandLeftOrRightIsTemp
                  [@OperandLeftOrRightIsTemp (yes)
                  | yes:
                  oEmitDouble(iCmp)
                  ] or >
                  >>
                 ;EmitCmp
                 oOperandPushJumpCondition(iJge)
                 oEmitConditionalForwardBranch
                 oFixPushLastAddress
                 oOperandPop
                 oOperandPop
                 oFixSwapAddresses
                 oFixForwardBranch
                 oFixPopAddress
                 @EmitSubscriptAbort
                  oOperandPushMode(mLineNum)
                  oOperandSetLength(two)
                  oEmitSingle(iPush)
                  oOperandPop
                  oOperandPushMode(mTrap)
                  oOperandSetValue(trSubscriptAbort)
                  oEmitSingle(iCall)
                  oOperandPop
                  >>
                 ;EmitSubscriptAbort
                 oFixForwardBranch
                 oFixPopAddress
                 >>
                ;EmitSubscriptRangeCheck
                ] or >
                oOperandSwap
                @OperandPushArrayLowerBound
                 [ oOperandChooseMode (mStatic)
                 | mStatic:
                 oOperandPushArrayLowerBound
                 ] or >
                 >>
                ;OperandPushArrayLowerBound
                oOperandSwapLeftAndDest
                @OperandSubtractPop
                 @OperandAreLeftAndRightManifest
                  [ oOperandChooseMode (mManifest)
                  | mManifest:
                  oOperandSwap
                  [ oOperandChooseMode (mTemp)
                  | *:
                  oOperandSwap
                  >>no
                 ;OperandAreLeftAndRightManifest
                 [@OperandAreLeftAndRightManifest (no)
                 | no:
                 [ oOperandChooseManifestValue (one)
                 | one:
                 oOperandPop
                 @OperandForceIntoTemp
                  [ oOperandChooseMode (mTemp)
                  | mTemp:
                  ] or >
                  >>
                 ;OperandForceIntoTemp
                 oEmitSingle(iDec)
                 ] or >
                 ] or >
                 >>
                ;OperandSubtractPop
                oOperandPushMode(mManifest)
                oOperandSetLength(two)
                oOperandSetValue(two)
                oEmitDouble(iShl)
                oOperandPop
                oOperandSwap
                [ oOperandChooseMode (mStatic)
                | mStatic:
                oOperandPushMode(mManifest)
                oOperandSetLength(two)
                oOperandSetValue(eight)
                oOperandAddManifestValues
                oOperandPop
                @OperandForceAddressIntoTemp
                 [ oOperandChooseMode (mStatic)
                 | mStatic:
                 @OperandPushTempWord
                  oTempAllocate
                  oOperandPushTemp
                  oOperandSetValue(zero)
                  oOperandSetLength(two)
                  >>
                 ;OperandPushTempWord
                 oOperandSwap
                 oEmitDouble(iLoada)
                 oOperandPop
                 ] or >
                 oOperandSetLength(two)
                 >>
                ;OperandForceAddressIntoTemp
                oEmitDouble(iAdd)
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mTemp)
                 | mTemp:
                 oTempFree
                 ] or >
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                ] or >
                oOperandSetMode(mTempIndirect)
                oOperandSetLength(two)
                >>
               ;OperandCheckedSubscriptNonManifestIntegerPop
               ] or >
               >>
              ;OperandSubscriptNonManifestIntegerPop
              oOperandSetLength(two)
              >>
             ;OperandSubscriptIntegerPop
             ] or >
             ] or >
             [ (tFetchInteger)
             | tFetchInteger:
             ] or >
             >>
            ;OperandPushVariable
            ] or >
            }
            [ (tAssignInteger)
            | tAssignInteger:
            @OperandAssignIntegerPopPop
             [ oOperandCompareLeftAndRight (no)
             | no:
             @EmitMove
              @OperandLeftOrRightIsTemp
               [ oOperandChooseMode (mTempIndirect)
               | *:
               oOperandSwap
               [ oOperandChooseMode (mStatic)
               | *:
               oOperandSwap
               >>no
              ;OperandLeftOrRightIsTemp
              [@OperandLeftOrRightIsTemp (no)
              | *:
              [ oOperandChooseMode (mTempIndirect)
              | *:
              oOperandPushCopy
              @OperandForceIntoTemp
               [ oOperandChooseMode (mTempIndirect)
               | mTempIndirect:
               oOperandPushCopy
               oOperandSetMode(mTemp)
               oOperandSwap
               oEmitDouble(iMov)
               oOperandPop
               ] or >
               >>
              ;OperandForceIntoTemp
              oOperandSwapLeftAndDest
              oEmitDouble(iMov)
              @OperandPopAndFreeTemp
               [ oOperandChooseMode (mTemp)
               | mTemp:
               oTempFree
               ] or >
               oOperandPop
               >>
              ;OperandPopAndFreeTemp
              oOperandSwap
              >>
             ;EmitMove
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mTempIndirect)
              | mTempIndirect:
              oTempFree
              ] or >
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mStatic)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             ] or >
             >>
            ;OperandAssignIntegerPopPop
            ] or >
            >>
           ;OperandPushExpressionAssignPopPop
           >>
          ;AssignStmt
          ] or >
          }
          [ (tIfMerge)
          | *:
          ] or >
          >>
         ;Block
         >>
        ;Statements
        [ (tIfMerge)
        | tIfMerge:
        oEmitUnconditionalForwardBranch
        oFixAndFreeShuntList
        oOperandPop
        oFixPushLastAddress
        oEmitMergeSourceCoordinate
        @Statements
         @Block
          [ (tIfBegin)
          | tIfBegin:
          @IfStmt
           oEmitSourceCoordinate
           @OperandPushBooleanControlExpression
            @OperandPushExpression
             [ (tLiteralAddress)
             | tLiteralAddress:
             @OperandPushVariable
              oOperandPushVariable
              [ (tFetchInteger)
              | *:
              [ (tFetchInteger)
              | *:
              [ (tFetchInteger)
              | tFetchInteger:
              ] or >
              >>
             ;OperandPushVariable
             ] or >
             }
             [ (tLiteralInteger)
             | tLiteralInteger:
             oOperandPushInteger
             ] or >
             }
             [ (tGT)
             | tGT:
             @OperandGreaterPop
              [ oOperandCompareLeftAndRight (no)
              | no:
              [ oOperandChooseManifestValue (zero)
              | zero:
              oOperandPop
              @EmitTst
               [ oOperandChooseLength (two)
               | two:
               oOperandPushMode(mManifest)
               oOperandSetValue(zero)
               oOperandSetLength(two)
               ] or >
               @EmitCmp
                oOperandSwap
                [ oOperandChooseMode (mStatic)
                | *:
                oOperandSwap
                @OperandLeftOrRightIsTemp
                 [ oOperandChooseMode (mManifest)
                 | *:
                 oOperandSwap
                 [ oOperandChooseMode (mStatic)
                 | *:
                 oOperandSwap
                 >>no
                ;OperandLeftOrRightIsTemp
                [@OperandLeftOrRightIsTemp (no)
                | *:
                [ oOperandChooseMode (mManifest)
                | mManifest:
                oEmitDouble(iCmp)
                ] or >
                >>
               ;EmitCmp
               oOperandPop
               >>
              ;EmitTst
              @OperandPopAndFreeTemp
               [ oOperandChooseMode (mStatic)
               | *:
               oOperandPop
               >>
              ;OperandPopAndFreeTemp
              oOperandPushJumpCondition(iJgt)
              ] or >
              ] or >
              >>
             ;OperandGreaterPop
             ] or >
             }
             [ (tIfThen)
             | *:
             ] or >
             >>
            ;OperandPushExpression
            @OperandForceToJumpCondition
             [ oOperandIsJumpCondition (yes)
             | yes:
             ] or >
             >>
            ;OperandForceToJumpCondition
            >>
           ;OperandPushBooleanControlExpression
           ?tIfThen (tIfThen)
           [ oOperandChooseJumpCondition (iJgt)
           | *:
           @OperandComplementJumpCondition
            [ oOperandChooseJumpCondition (iJgt)
            | *:
            oOperandComplementJumpCondition
            >>
           ;OperandComplementJumpCondition
           @OperandInfixOr
            @OperandForceToJumpCondition
             [ oOperandIsJumpCondition (yes)
             | yes:
             ] or >
             >>
            ;OperandForceToJumpCondition
            [ oOperandChooseJumpCondition (iJle)
            | *:
            oEmitConditionalForwardBranch
            oFixAndFreeFalseBranches
            oFixPushLastAddress
            oOperandMergeShuntsWithAddress
            oFixPopAddress
            >>
           ;OperandInfixOr
           @Statements
            @Block
             [ (tAssignBegin)
             | tAssignBegin:
             @AssignStmt
              oEmitSourceCoordinate
              ?tLiteralAddress (tLiteralAddress)
              @OperandPushVariable
               oOperandPushVariable
               [ (tLiteralAddress)
               | *:
               [ (tLiteralAddress)
               | *:
               [ (tLiteralAddress)
               | *:
               >>
              ;OperandPushVariable
              @OperandPushExpressionAssignPopPop
               [ (tLiteralAddress)
               | tLiteralAddress:
               @OperandPushVariable
                oOperandPushVariable
                [ (tSubscriptBegin)
                | *:
                [ (tSubscriptBegin)
                | tSubscriptBegin:
                @OperandPushExpression
                 [ (tLiteralAddress)
                 | tLiteralAddress:
                 @OperandPushVariable
                  oOperandPushVariable
                  [ (tFetchInteger)
                  | *:
                  [ (tFetchInteger)
                  | *:
                  [ (tFetchInteger)
                  | tFetchInteger:
                  ] or >
                  >>
                 ;OperandPushVariable
                 ] or >
                 }
                 [ (tSubscriptInteger)
                 | *:
                 ] or >
                 >>
                ;OperandPushExpression
                [ (tSubscriptInteger)
                | tSubscriptInteger:
                @OperandSubscriptIntegerPop
                 [ oOperandChooseMode (mStatic)
                 | *:
                 @OperandSubscriptNonManifestIntegerPop
                  [ oOptionTestChecking (yes)
                  | yes:
                  @OperandCheckedSubscriptNonManifestIntegerPop
                   @OperandForceIntoTemp
                    [ oOperandChooseMode (mStatic)
                    | *:
                    [ oOperandChooseLength (two)
                    | two:
                    @OperandPushTempWord
                     oTempAllocate
                     oOperandPushTemp
                     oOperandSetValue(zero)
                     oOperandSetLength(two)
                     >>
                    ;OperandPushTempWord
                    oOperandSwap
                    oEmitDouble(iMov)
                    @OperandPopAndFreeTemp
                     [ oOperandChooseMode (mStatic)
                     | *:
                     oOperandPop
                     >>
                    ;OperandPopAndFreeTemp
                    oOperandSetMode(mTemp)
                    ] or >
                    >>
                   ;OperandForceIntoTemp
                   [ oOptionTestChecking (yes)
                   | yes:
                   @EmitSubscriptRangeCheck
                    oOperandSwap
                    @OperandPushArrayUpperBound
                     [ oOperandChooseMode (mStatic)
                     | mStatic:
                     oOperandPushArrayUpperBound
                     ] or >
                     >>
                    ;OperandPushArrayUpperBound
                    oOperandSwapLeftAndDest
                    @EmitCmp
                     oOperandSwap
                     [ oOperandChooseMode (mTemp)
                     | *:
                     oOperandSwap
                     @OperandLeftOrRightIsTemp
                      [ oOperandChooseMode (mManifest)
                      | *:
                      oOperandSwap
                      [ oOperandChooseMode (mTemp)
                      | mTemp:
                      oOperandSwap
                      >>yes
                     ;OperandLeftOrRightIsTemp
                     [@OperandLeftOrRightIsTemp (yes)
                     | yes:
                     oEmitDouble(iCmp)
                     ] or >
                     >>
                    ;EmitCmp
                    oOperandPushJumpCondition(iJgt)
                    oEmitConditionalForwardBranch
                    oFixPushLastAddress
                    oOperandPop
                    oOperandPop
                    oOperandSwap
                    @OperandPushArrayLowerBound
                     [ oOperandChooseMode (mStatic)
                     | mStatic:
                     oOperandPushArrayLowerBound
                     ] or >
                     >>
                    ;OperandPushArrayLowerBound
                    oOperandSwapLeftAndDest
                    @EmitCmp
                     oOperandSwap
                     [ oOperandChooseMode (mTemp)
                     | *:
                     oOperandSwap
                     @OperandLeftOrRightIsTemp
                      [ oOperandChooseMode (mManifest)
                      | *:
                      oOperandSwap
                      [ oOperandChooseMode (mTemp)
                      | mTemp:
                      oOperandSwap
                      >>yes
                     ;OperandLeftOrRightIsTemp
                     [@OperandLeftOrRightIsTemp (yes)
                     | yes:
                     oEmitDouble(iCmp)
                     ] or >
                     >>
                    ;EmitCmp
                    oOperandPushJumpCondition(iJge)
                    oEmitConditionalForwardBranch
                    oFixPushLastAddress
                    oOperandPop
                    oOperandPop
                    oFixSwapAddresses
                    oFixForwardBranch
                    oFixPopAddress
                    @EmitSubscriptAbort
                     oOperandPushMode(mLineNum)
                     oOperandSetLength(two)
                     oEmitSingle(iPush)
                     oOperandPop
                     oOperandPushMode(mTrap)
                     oOperandSetValue(trSubscriptAbort)
                     oEmitSingle(iCall)
                     oOperandPop
                     >>
                    ;EmitSubscriptAbort
                    oFixForwardBranch
                    oFixPopAddress
                    >>
                   ;EmitSubscriptRangeCheck
                   ] or >
                   oOperandSwap
                   @OperandPushArrayLowerBound
                    [ oOperandChooseMode (mStatic)
                    | mStatic:
                    oOperandPushArrayLowerBound
                    ] or >
                    >>
                   ;OperandPushArrayLowerBound
                   oOperandSwapLeftAndDest
                   @OperandSubtractPop
                    @OperandAreLeftAndRightManifest
                     [ oOperandChooseMode (mManifest)
                     | mManifest:
                     oOperandSwap
                     [ oOperandChooseMode (mTemp)
                     | *:
                     oOperandSwap
                     >>no
                    ;OperandAreLeftAndRightManifest
                    [@OperandAreLeftAndRightManifest (no)
                    | no:
                    [ oOperandChooseManifestValue (one)
                    | one:
                    oOperandPop
                    @OperandForceIntoTemp
                     [ oOperandChooseMode (mTemp)
                     | mTemp:
                     ] or >
                     >>
                    ;OperandForceIntoTemp
                    oEmitSingle(iDec)
                    ] or >
                    ] or >
                    >>
                   ;OperandSubtractPop
                   oOperandPushMode(mManifest)
                   oOperandSetLength(two)
                   oOperandSetValue(two)
                   oEmitDouble(iShl)
                   oOperandPop
                   oOperandSwap
                   [ oOperandChooseMode (mStatic)
                   | mStatic:
                   oOperandPushMode(mManifest)
                   oOperandSetLength(two)
                   oOperandSetValue(eight)
                   oOperandAddManifestValues
                   oOperandPop
                   @OperandForceAddressIntoTemp
                    [ oOperandChooseMode (mStatic)
                    | mStatic:
                    @OperandPushTempWord
                     oTempAllocate
                     oOperandPushTemp
                     oOperandSetValue(zero)
                     oOperandSetLength(two)
                     >>
                    ;OperandPushTempWord
                    oOperandSwap
                    oEmitDouble(iLoada)
                    oOperandPop
                    ] or >
                    oOperandSetLength(two)
                    >>
                   ;OperandForceAddressIntoTemp
                   oEmitDouble(iAdd)
                   @OperandPopAndFreeTemp
                    [ oOperandChooseMode (mTemp)
                    | mTemp:
                    oTempFree
                    ] or >
                    oOperandPop
                    >>
                   ;OperandPopAndFreeTemp
                   ] or >
                   oOperandSetMode(mTempIndirect)
                   oOperandSetLength(two)
                   >>
                  ;OperandCheckedSubscriptNonManifestIntegerPop
                  ] or >
                  >>
                 ;OperandSubscriptNonManifestIntegerPop
                 oOperandSetLength(two)
                 >>
                ;OperandSubscriptIntegerPop
                ] or >
                ] or >
                [ (tFetchInteger)
                | tFetchInteger:
                ] or >
                >>
               ;OperandPushVariable
               ] or >
               }
               [ (tAssignInteger)
               | tAssignInteger:
               @OperandAssignIntegerPopPop
                [ oOperandCompareLeftAndRight (no)
                | no:
                @EmitMove
                 @OperandLeftOrRightIsTemp
                  [ oOperandChooseMode (mTempIndirect)
                  | *:
                  oOperandSwap
                  [ oOperandChooseMode (mStatic)
                  | *:
                  oOperandSwap
                  >>no
                 ;OperandLeftOrRightIsTemp
                 [@OperandLeftOrRightIsTemp (no)
                 | *:
                 [ oOperandChooseMode (mTempIndirect)
                 | *:
                 oOperandPushCopy
                 @OperandForceIntoTemp
                  [ oOperandChooseMode (mTempIndirect)
                  | mTempIndirect:
                  oOperandPushCopy
                  oOperandSetMode(mTemp)
                  oOperandSwap
                  oEmitDouble(iMov)
                  oOperandPop
                  ] or >
                  >>
                 ;OperandForceIntoTemp
                 oOperandSwapLeftAndDest
                 oEmitDouble(iMov)
                 @OperandPopAndFreeTemp
                  [ oOperandChooseMode (mTemp)
                  | mTemp:
                  oTempFree
                  ] or >
                  oOperandPop
                  >>
                 ;OperandPopAndFreeTemp
                 oOperandSwap
                 >>
                ;EmitMove
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mTempIndirect)
                 | mTempIndirect:
                 oTempFree
                 ] or >
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mStatic)
                 | *:
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                ] or >
                >>
               ;OperandAssignIntegerPopPop
               ] or >
               >>
              ;OperandPushExpressionAssignPopPop
              >>
             ;AssignStmt
             ] or >
             }
             [ (tAssignBegin)
             | tAssignBegin:
             @AssignStmt
              oEmitSourceCoordinate
              ?tLiteralAddress (tLiteralAddress)
              @OperandPushVariable
               oOperandPushVariable
               [ (tLiteralAddress)
               | *:
               [ (tLiteralAddress)
               | *:
               [ (tLiteralAddress)
               | *:
               >>
              ;OperandPushVariable
              @OperandPushExpressionAssignPopPop
               [ (tLiteralAddress)
               | tLiteralAddress:
               @OperandPushVariable
                oOperandPushVariable
                [ (tFetchInteger)
                | *:
                [ (tFetchInteger)
                | *:
                [ (tFetchInteger)
                | tFetchInteger:
                ] or >
                >>
               ;OperandPushVariable
               ] or >
               }
               [ (tLiteralInteger)
               | tLiteralInteger:
               oOperandPushInteger
               ] or >
               }
               [ (tSubtract)
               | tSubtract:
               [ (tAssignInteger)
               | tAssignInteger:
               @OperandSubtractAssignPopPopPop
                oOperandSwap
                [ oOperandCompareRightAndDest (yes)
                | yes:
                oOperandPop
                @OperandSubtractRightFromLeftPop
                 [ oOperandChooseManifestValue (one)
                 | one:
                 oOperandPop
                 oEmitSingle(iDec)
                 ] or >
                 >>
                ;OperandSubtractRightFromLeftPop
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mStatic)
                 | *:
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                ] or >
                >>
               ;OperandSubtractAssignPopPopPop
               ] or >
               >>
              ;OperandPushExpressionAssignPopPop
              >>
             ;AssignStmt
             ] or >
             }
             [ (tWriteBegin)
             | tWriteBegin:
             @WriteProc
              oEmitSourceCoordinate
              [ (tTrapBegin)
              | *:
              @WriteParameter
               ?tTrapBegin (tTrapBegin)
               ?tLiteralAddress (tLiteralAddress)
               @OperandPushVariable
                oOperandPushVariable
                [ (tVarParm)
                | *:
                [ (tVarParm)
                | *:
                [ (tVarParm)
                | *:
                >>
               ;OperandPushVariable
               @OperandForceToStack
                [ oOperandChooseLength (two)
                | two:
                ] or >
                oEmitSingle(iPush)
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mStatic)
                 | *:
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                oOperandPushMode(mStack)
                >>
               ;OperandForceToStack
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mStack)
                | *:
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               ?tVarParm (tVarParm)
               ?tParmEnd (tParmEnd)
               @OperandPushExpression
                [ (tLiteralAddress)
                | tLiteralAddress:
                @OperandPushVariable
                 oOperandPushVariable
                 [ (tSubscriptBegin)
                 | *:
                 [ (tSubscriptBegin)
                 | tSubscriptBegin:
                 @OperandPushExpression
                  [ (tLiteralAddress)
                  | tLiteralAddress:
                  @OperandPushVariable
                   oOperandPushVariable
                   [ (tFetchInteger)
                   | *:
                   [ (tFetchInteger)
                   | *:
                   [ (tFetchInteger)
                   | tFetchInteger:
                   ] or >
                   >>
                  ;OperandPushVariable
                  ] or >
                  }
                  [ (tSubscriptInteger)
                  | *:
                  ] or >
                  >>
                 ;OperandPushExpression
                 [ (tSubscriptInteger)
                 | tSubscriptInteger:
                 @OperandSubscriptIntegerPop
                  [ oOperandChooseMode (mStatic)
                  | *:
                  @OperandSubscriptNonManifestIntegerPop
                   [ oOptionTestChecking (yes)
                   | yes:
                   @OperandCheckedSubscriptNonManifestIntegerPop
                    @OperandForceIntoTemp
                     [ oOperandChooseMode (mStatic)
                     | *:
                     [ oOperandChooseLength (two)
                     | two:
                     @OperandPushTempWord
                      oTempAllocate
                      oOperandPushTemp
                      oOperandSetValue(zero)
                      oOperandSetLength(two)
                      >>
                     ;OperandPushTempWord
                     oOperandSwap
                     oEmitDouble(iMov)
                     @OperandPopAndFreeTemp
                      [ oOperandChooseMode (mStatic)
                      | *:
                      oOperandPop
                      >>
                     ;OperandPopAndFreeTemp
                     oOperandSetMode(mTemp)
                     ] or >
                     >>
                    ;OperandForceIntoTemp
                    [ oOptionTestChecking (yes)
                    | yes:
                    @EmitSubscriptRangeCheck
                     oOperandSwap
                     @OperandPushArrayUpperBound
                      [ oOperandChooseMode (mStatic)
                      | mStatic:
                      oOperandPushArrayUpperBound
                      ] or >
                      >>
                     ;OperandPushArrayUpperBound
                     oOperandSwapLeftAndDest
                     @EmitCmp
                      oOperandSwap
                      [ oOperandChooseMode (mTemp)
                      | *:
                      oOperandSwap
                      @OperandLeftOrRightIsTemp
                       [ oOperandChooseMode (mManifest)
                       | *:
                       oOperandSwap
                       [ oOperandChooseMode (mTemp)
                       | mTemp:
                       oOperandSwap
                       >>yes
                      ;OperandLeftOrRightIsTemp
                      [@OperandLeftOrRightIsTemp (yes)
                      | yes:
                      oEmitDouble(iCmp)
                      ] or >
                      >>
                     ;EmitCmp
                     oOperandPushJumpCondition(iJgt)
                     oEmitConditionalForwardBranch
                     oFixPushLastAddress
                     oOperandPop
                     oOperandPop
                     oOperandSwap
                     @OperandPushArrayLowerBound
                      [ oOperandChooseMode (mStatic)
                      | mStatic:
                      oOperandPushArrayLowerBound
                      ] or >
                      >>
                     ;OperandPushArrayLowerBound
                     oOperandSwapLeftAndDest
                     @EmitCmp
                      oOperandSwap
                      [ oOperandChooseMode (mTemp)
                      | *:
                      oOperandSwap
                      @OperandLeftOrRightIsTemp
                       [ oOperandChooseMode (mManifest)
                       | *:
                       oOperandSwap
                       [ oOperandChooseMode (mTemp)
                       | mTemp:
                       oOperandSwap
                       >>yes
                      ;OperandLeftOrRightIsTemp
                      [@OperandLeftOrRightIsTemp (yes)
                      | yes:
                      oEmitDouble(iCmp)
                      ] or >
                      >>
                     ;EmitCmp
                     oOperandPushJumpCondition(iJge)
                     oEmitConditionalForwardBranch
                     oFixPushLastAddress
                     oOperandPop
                     oOperandPop
                     oFixSwapAddresses
                     oFixForwardBranch
                     oFixPopAddress
                     @EmitSubscriptAbort
                      oOperandPushMode(mLineNum)
                      oOperandSetLength(two)
                      oEmitSingle(iPush)
                      oOperandPop
                      oOperandPushMode(mTrap)
                      oOperandSetValue(trSubscriptAbort)
                      oEmitSingle(iCall)
                      oOperandPop
                      >>
                     ;EmitSubscriptAbort
                     oFixForwardBranch
                     oFixPopAddress
                     >>
                    ;EmitSubscriptRangeCheck
                    ] or >
                    oOperandSwap
                    @OperandPushArrayLowerBound
                     [ oOperandChooseMode (mStatic)
                     | mStatic:
                     oOperandPushArrayLowerBound
                     ] or >
                     >>
                    ;OperandPushArrayLowerBound
                    oOperandSwapLeftAndDest
                    @OperandSubtractPop
                     @OperandAreLeftAndRightManifest
                      [ oOperandChooseMode (mManifest)
                      | mManifest:
                      oOperandSwap
                      [ oOperandChooseMode (mTemp)
                      | *:
                      oOperandSwap
                      >>no
                     ;OperandAreLeftAndRightManifest
                     [@OperandAreLeftAndRightManifest (no)
                     | no:
                     [ oOperandChooseManifestValue (one)
                     | one:
                     oOperandPop
                     @OperandForceIntoTemp
                      [ oOperandChooseMode (mTemp)
                      | mTemp:
                      ] or >
                      >>
                     ;OperandForceIntoTemp
                     oEmitSingle(iDec)
                     ] or >
                     ] or >
                     >>
                    ;OperandSubtractPop
                    oOperandPushMode(mManifest)
                    oOperandSetLength(two)
                    oOperandSetValue(two)
                    oEmitDouble(iShl)
                    oOperandPop
                    oOperandSwap
                    [ oOperandChooseMode (mStatic)
                    | mStatic:
                    oOperandPushMode(mManifest)
                    oOperandSetLength(two)
                    oOperandSetValue(eight)
                    oOperandAddManifestValues
                    oOperandPop
                    @OperandForceAddressIntoTemp
                     [ oOperandChooseMode (mStatic)
                     | mStatic:
                     @OperandPushTempWord
                      oTempAllocate
                      oOperandPushTemp
                      oOperandSetValue(zero)
                      oOperandSetLength(two)
                      >>
                     ;OperandPushTempWord
                     oOperandSwap
                     oEmitDouble(iLoada)
                     oOperandPop
                     ] or >
                     oOperandSetLength(two)
                     >>
                    ;OperandForceAddressIntoTemp
                    oEmitDouble(iAdd)
                    @OperandPopAndFreeTemp
                     [ oOperandChooseMode (mTemp)
                     | mTemp:
                     oTempFree
                     ] or >
                     oOperandPop
                     >>
                    ;OperandPopAndFreeTemp
                    ] or >
                    oOperandSetMode(mTempIndirect)
                    oOperandSetLength(two)
                    >>
                   ;OperandCheckedSubscriptNonManifestIntegerPop
                   ] or >
                   >>
                  ;OperandSubscriptNonManifestIntegerPop
                  oOperandSetLength(two)
                  >>
                 ;OperandSubscriptIntegerPop
                 ] or >
                 ] or >
                 [ (tFetchInteger)
                 | tFetchInteger:
                 ] or >
                 >>
                ;OperandPushVariable
                ] or >
                }
                [ (tParmEnd)
                | *:
                ] or >
                >>
               ;OperandPushExpression
               [ (tParmEnd)
               | *:
               @OperandForceToStack
                [ oOperandChooseLength (two)
                | two:
                ] or >
                oEmitSingle(iPush)
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mTempIndirect)
                 | mTempIndirect:
                 oTempFree
                 ] or >
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                oOperandPushMode(mStack)
                >>
               ;OperandForceToStack
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mStack)
                | *:
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               ?tParmEnd (tParmEnd)
               @OperandPushExpression
                [ (tLiteralInteger)
                | tLiteralInteger:
                oOperandPushInteger
                ] or >
                }
                [ (tParmEnd)
                | *:
                ] or >
                >>
               ;OperandPushExpression
               @OperandForceToStack
                [ oOperandChooseLength (two)
                | two:
                ] or >
                oEmitSingle(iPush)
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mManifest)
                 | *:
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                oOperandPushMode(mStack)
                >>
               ;OperandForceToStack
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mStack)
                | *:
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               ?tParmEnd (tParmEnd)
               ?tTrap (tTrap)
               oOperandPushTrap
               oEmitSingle(iCall)
               oOperandPop
               oOperandPushMode(mStackReg)
               oOperandSetLength(two)
               oOperandPushMode(mManifest)
               oOperandSetLength(two)
               oOperandSetValue(twelve)
               oEmitDouble(iAdd)
               oOperandPop
               oOperandPop
               >>
              ;WriteParameter
              }
              [ (tTrapBegin)
              | *:
              @WriteParameter
               ?tTrapBegin (tTrapBegin)
               ?tLiteralAddress (tLiteralAddress)
               @OperandPushVariable
                oOperandPushVariable
                [ (tVarParm)
                | *:
                [ (tVarParm)
                | *:
                [ (tVarParm)
                | *:
                >>
               ;OperandPushVariable
               @OperandForceToStack
                [ oOperandChooseLength (two)
                | two:
                ] or >
                oEmitSingle(iPush)
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mStatic)
                 | *:
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                oOperandPushMode(mStack)
                >>
               ;OperandForceToStack
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mStack)
                | *:
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               ?tVarParm (tVarParm)
               ?tParmEnd (tParmEnd)
               @OperandPushExpression
                [ (tSkipString)
                | tSkipString:
                oEmitNone(iData)
                ?tStringData (tStringData)
                oEmitString
                oEmitNone(iText)
                ] or >
                }
                [ (tLiteralAddress)
                | tLiteralAddress:
                @OperandPushVariable
                 oOperandPushVariable
                 [ (tFetchChar)
                 | *:
                 [ (tFetchChar)
                 | *:
                 [ (tFetchChar)
                 | tFetchChar:
                 oOperandSetLength(regCX)
                 ] or >
                 >>
                ;OperandPushVariable
                ] or >
                }
                [ (tParmEnd)
                | *:
                ] or >
                >>
               ;OperandPushExpression
               [ (tParmEnd)
               | *:
               @OperandForceToStack
                [ oOperandChooseLength (regCX)
                | regCX:
                @OperandForceAddressIntoTemp
                 [ oOperandChooseMode (mStatic)
                 | mStatic:
                 @OperandPushTempWord
                  oTempAllocate
                  oOperandPushTemp
                  oOperandSetValue(zero)
                  oOperandSetLength(two)
                  >>
                 ;OperandPushTempWord
                 oOperandSwap
                 oEmitDouble(iLoada)
                 oOperandPop
                 ] or >
                 oOperandSetLength(two)
                 >>
                ;OperandForceAddressIntoTemp
                ] or >
                oEmitSingle(iPush)
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mTemp)
                 | mTemp:
                 oTempFree
                 ] or >
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                oOperandPushMode(mStack)
                >>
               ;OperandForceToStack
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mStack)
                | *:
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               ?tParmEnd (tParmEnd)
               @OperandPushExpression
                [ (tLiteralInteger)
                | tLiteralInteger:
                oOperandPushInteger
                ] or >
                }
                [ (tParmEnd)
                | *:
                ] or >
                >>
               ;OperandPushExpression
               @OperandForceToStack
                [ oOperandChooseLength (two)
                | two:
                ] or >
                oEmitSingle(iPush)
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mManifest)
                 | *:
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                oOperandPushMode(mStack)
                >>
               ;OperandForceToStack
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mStack)
                | *:
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               ?tParmEnd (tParmEnd)
               ?tTrap (tTrap)
               oOperandPushTrap
               oEmitSingle(iCall)
               oOperandPop
               oOperandPushMode(mStackReg)
               oOperandSetLength(two)
               oOperandPushMode(mManifest)
               oOperandSetLength(two)
               oOperandSetValue(twelve)
               oEmitDouble(iAdd)
               oOperandPop
               oOperandPop
               >>
              ;WriteParameter
              }
              [ (tWriteEnd)
              | tWriteEnd:
              ] or >
              >>
             ;WriteProc
             ] or >
             }
             [ (tAssignBegin)
             | tAssignBegin:
             @AssignStmt
              oEmitSourceCoordinate
              ?tLiteralAddress (tLiteralAddress)
              @OperandPushVariable
               oOperandPushVariable
               [ (tLiteralAddress)
               | *:
               [ (tLiteralAddress)
               | *:
               [ (tLiteralAddress)
               | *:
               >>
              ;OperandPushVariable
              @OperandPushExpressionAssignPopPop
               [ (tLiteralAddress)
               | tLiteralAddress:
               @OperandPushVariable
                oOperandPushVariable
                [ (tSubscriptBegin)
                | *:
                [ (tSubscriptBegin)
                | tSubscriptBegin:
                @OperandPushExpression
                 [ (tLiteralAddress)
                 | tLiteralAddress:
                 @OperandPushVariable
                  oOperandPushVariable
                  [ (tFetchInteger)
                  | *:
                  [ (tFetchInteger)
                  | *:
                  [ (tFetchInteger)
                  | tFetchInteger:
                  ] or >
                  >>
                 ;OperandPushVariable
                 ] or >
                 }
                 [ (tSubscriptInteger)
                 | *:
                 ] or >
                 >>
                ;OperandPushExpression
                [ (tSubscriptInteger)
                | tSubscriptInteger:
                @OperandSubscriptIntegerPop
                 [ oOperandChooseMode (mStatic)
                 | *:
                 @OperandSubscriptNonManifestIntegerPop
                  [ oOptionTestChecking (yes)
                  | yes:
                  @OperandCheckedSubscriptNonManifestIntegerPop
                   @OperandForceIntoTemp
                    [ oOperandChooseMode (mStatic)
                    | *:
                    [ oOperandChooseLength (two)
                    | two:
                    @OperandPushTempWord
                     oTempAllocate
                     oOperandPushTemp
                     oOperandSetValue(zero)
                     oOperandSetLength(two)
                     >>
                    ;OperandPushTempWord
                    oOperandSwap
                    oEmitDouble(iMov)
                    @OperandPopAndFreeTemp
                     [ oOperandChooseMode (mStatic)
                     | *:
                     oOperandPop
                     >>
                    ;OperandPopAndFreeTemp
                    oOperandSetMode(mTemp)
                    ] or >
                    >>
                   ;OperandForceIntoTemp
                   [ oOptionTestChecking (yes)
                   | yes:
                   @EmitSubscriptRangeCheck
                    oOperandSwap
                    @OperandPushArrayUpperBound
                     [ oOperandChooseMode (mStatic)
                     | mStatic:
                     oOperandPushArrayUpperBound
                     ] or >
                     >>
                    ;OperandPushArrayUpperBound
                    oOperandSwapLeftAndDest
                    @EmitCmp
                     oOperandSwap
                     [ oOperandChooseMode (mTemp)
                     | *:
                     oOperandSwap
                     @OperandLeftOrRightIsTemp
                      [ oOperandChooseMode (mManifest)
                      | *:
                      oOperandSwap
                      [ oOperandChooseMode (mTemp)
                      | mTemp:
                      oOperandSwap
                      >>yes
                     ;OperandLeftOrRightIsTemp
                     [@OperandLeftOrRightIsTemp (yes)
                     | yes:
                     oEmitDouble(iCmp)
                     ] or >
                     >>
                    ;EmitCmp
                    oOperandPushJumpCondition(iJgt)
                    oEmitConditionalForwardBranch
                    oFixPushLastAddress
                    oOperandPop
                    oOperandPop
                    oOperandSwap
                    @OperandPushArrayLowerBound
                     [ oOperandChooseMode (mStatic)
                     | mStatic:
                     oOperandPushArrayLowerBound
                     ] or >
                     >>
                    ;OperandPushArrayLowerBound
                    oOperandSwapLeftAndDest
                    @EmitCmp
                     oOperandSwap
                     [ oOperandChooseMode (mTemp)
                     | *:
                     oOperandSwap
                     @OperandLeftOrRightIsTemp
                      [ oOperandChooseMode (mManifest)
                      | *:
                      oOperandSwap
                      [ oOperandChooseMode (mTemp)
                      | mTemp:
                      oOperandSwap
                      >>yes
                     ;OperandLeftOrRightIsTemp
                     [@OperandLeftOrRightIsTemp (yes)
                     | yes:
                     oEmitDouble(iCmp)
                     ] or >
                     >>
                    ;EmitCmp
                    oOperandPushJumpCondition(iJge)
                    oEmitConditionalForwardBranch
                    oFixPushLastAddress
                    oOperandPop
                    oOperandPop
                    oFixSwapAddresses
                    oFixForwardBranch
                    oFixPopAddress
                    @EmitSubscriptAbort
                     oOperandPushMode(mLineNum)
                     oOperandSetLength(two)
                     oEmitSingle(iPush)
                     oOperandPop
                     oOperandPushMode(mTrap)
                     oOperandSetValue(trSubscriptAbort)
                     oEmitSingle(iCall)
                     oOperandPop
                     >>
                    ;EmitSubscriptAbort
                    oFixForwardBranch
                    oFixPopAddress
                    >>
                   ;EmitSubscriptRangeCheck
                   ] or >
                   oOperandSwap
                   @OperandPushArrayLowerBound
                    [ oOperandChooseMode (mStatic)
                    | mStatic:
                    oOperandPushArrayLowerBound
                    ] or >
                    >>
                   ;OperandPushArrayLowerBound
                   oOperandSwapLeftAndDest
                   @OperandSubtractPop
                    @OperandAreLeftAndRightManifest
                     [ oOperandChooseMode (mManifest)
                     | mManifest:
                     oOperandSwap
                     [ oOperandChooseMode (mTemp)
                     | *:
                     oOperandSwap
                     >>no
                    ;OperandAreLeftAndRightManifest
                    [@OperandAreLeftAndRightManifest (no)
                    | no:
                    [ oOperandChooseManifestValue (one)
                    | one:
                    oOperandPop
                    @OperandForceIntoTemp
                     [ oOperandChooseMode (mTemp)
                     | mTemp:
                     ] or >
                     >>
                    ;OperandForceIntoTemp
                    oEmitSingle(iDec)
                    ] or >
                    ] or >
                    >>
                   ;OperandSubtractPop
                   oOperandPushMode(mManifest)
                   oOperandSetLength(two)
                   oOperandSetValue(two)
                   oEmitDouble(iShl)
                   oOperandPop
                   oOperandSwap
                   [ oOperandChooseMode (mStatic)
                   | mStatic:
                   oOperandPushMode(mManifest)
                   oOperandSetLength(two)
                   oOperandSetValue(eight)
                   oOperandAddManifestValues
                   oOperandPop
                   @OperandForceAddressIntoTemp
                    [ oOperandChooseMode (mStatic)
                    | mStatic:
                    @OperandPushTempWord
                     oTempAllocate
                     oOperandPushTemp
                     oOperandSetValue(zero)
                     oOperandSetLength(two)
                     >>
                    ;OperandPushTempWord
                    oOperandSwap
                    oEmitDouble(iLoada)
                    oOperandPop
                    ] or >
                    oOperandSetLength(two)
                    >>
                   ;OperandForceAddressIntoTemp
                   oEmitDouble(iAdd)
                   @OperandPopAndFreeTemp
                    [ oOperandChooseMode (mTemp)
                    | mTemp:
                    oTempFree
                    ] or >
                    oOperandPop
                    >>
                   ;OperandPopAndFreeTemp
                   ] or >
                   oOperandSetMode(mTempIndirect)
                   oOperandSetLength(two)
                   >>
                  ;OperandCheckedSubscriptNonManifestIntegerPop
                  ] or >
                  >>
                 ;OperandSubscriptNonManifestIntegerPop
                 oOperandSetLength(two)
                 >>
                ;OperandSubscriptIntegerPop
                ] or >
                ] or >
                [ (tFetchInteger)
                | tFetchInteger:
                ] or >
                >>
               ;OperandPushVariable
               ] or >
               }
               [ (tAssignInteger)
               | tAssignInteger:
               @OperandAssignIntegerPopPop
                [ oOperandCompareLeftAndRight (no)
                | no:
                @EmitMove
                 @OperandLeftOrRightIsTemp
                  [ oOperandChooseMode (mTempIndirect)
                  | *:
                  oOperandSwap
                  [ oOperandChooseMode (mStatic)
                  | *:
                  oOperandSwap
                  >>no
                 ;OperandLeftOrRightIsTemp
                 [@OperandLeftOrRightIsTemp (no)
                 | *:
                 [ oOperandChooseMode (mTempIndirect)
                 | *:
                 oOperandPushCopy
                 @OperandForceIntoTemp
                  [ oOperandChooseMode (mTempIndirect)
                  | mTempIndirect:
                  oOperandPushCopy
                  oOperandSetMode(mTemp)
                  oOperandSwap
                  oEmitDouble(iMov)
                  oOperandPop
                  ] or >
                  >>
                 ;OperandForceIntoTemp
                 oOperandSwapLeftAndDest
                 oEmitDouble(iMov)
                 @OperandPopAndFreeTemp
                  [ oOperandChooseMode (mTemp)
                  | mTemp:
                  oTempFree
                  ] or >
                  oOperandPop
                  >>
                 ;OperandPopAndFreeTemp
                 oOperandSwap
                 >>
                ;EmitMove
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mTempIndirect)
                 | mTempIndirect:
                 oTempFree
                 ] or >
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mStatic)
                 | *:
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                ] or >
                >>
               ;OperandAssignIntegerPopPop
               ] or >
               >>
              ;OperandPushExpressionAssignPopPop
              >>
             ;AssignStmt
             ] or >
             }
             [ (tIfMerge)
             | *:
             ] or >
             >>
            ;Block
            >>
           ;Statements
           [ (tIfMerge)
           | tIfMerge:
           oEmitUnconditionalForwardBranch
           oFixAndFreeShuntList
           oOperandPop
           oFixPushLastAddress
           oEmitMergeSourceCoordinate
           @Statements
            @Block
             [ (tAssignBegin)
             | tAssignBegin:
             @AssignStmt
              oEmitSourceCoordinate
              ?tLiteralAddress (tLiteralAddress)
              @OperandPushVariable
               oOperandPushVariable
               [ (tLiteralBoolean)
               | *:
               [ (tLiteralBoolean)
               | *:
               [ (tLiteralBoolean)
               | *:
               >>
              ;OperandPushVariable
              @OperandPushExpressionAssignPopPop
               [ (tLiteralBoolean)
               | tLiteralBoolean:
               oOperandPushBoolean
               ] or >
               }
               [ (tAssignBoolean)
               | tAssignBoolean:
               @OperandAssignBooleanPopPop
                @OperandConvertJumpConditionToData
                 [ oOperandIsJumpCondition (no)
                 | no:
                 ] or >
                 >>
                ;OperandConvertJumpConditionToData
                oOperandSetLength(one)
                @EmitMove
                 @OperandLeftOrRightIsTemp
                  [ oOperandChooseMode (mManifest)
                  | *:
                  oOperandSwap
                  [ oOperandChooseMode (mStatic)
                  | *:
                  oOperandSwap
                  >>no
                 ;OperandLeftOrRightIsTemp
                 [@OperandLeftOrRightIsTemp (no)
                 | *:
                 [ oOperandChooseMode (mManifest)
                 | mManifest:
                 oEmitDouble(iMov)
                 ] or >
                 >>
                ;EmitMove
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mManifest)
                 | *:
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mStatic)
                 | *:
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                >>
               ;OperandAssignBooleanPopPop
               ] or >
               >>
              ;OperandPushExpressionAssignPopPop
              >>
             ;AssignStmt
             ] or >
             }
             [ (tIfEnd)
             | *:
             ] or >
             >>
            ;Block
            >>
           ;Statements
           oFixForwardBranch
           oFixPopAddress
           ?tIfEnd (tIfEnd)
           ] or >
           >>
          ;IfStmt
          ] or >
          }
          [ (tIfEnd)
          | *:
          ] or >
          >>
         ;Block
         >>
        ;Statements
        oFixForwardBranch
        oFixPopAddress
        ?tIfEnd (tIfEnd)
        ] or >
        >>
       ;IfStmt
       ] or >
       }
       [ (tRepeatControl)
       | *:
       ] or >
       >>
      ;Block
      >>
     ;Statements
     ?tRepeatControl (tRepeatControl)
     @OperandPushBooleanControlExpression
      @OperandPushExpression
       [ (tLiteralAddress)
       | tLiteralAddress:
       @OperandPushVariable
        oOperandPushVariable
        [ (tFetchBoolean)
        | *:
        [ (tFetchBoolean)
        | *:
        [ (tFetchBoolean)
        | tFetchBoolean:
        oOperandSetLength(one)
        ] or >
        >>
       ;OperandPushVariable
       ] or >
       }
       [ (tNot)
       | tNot:
       @OperandNot
        @OperandForceToJumpCondition
         [ oOperandIsJumpCondition (no)
         | *:
         [ oOperandChooseManifestValue ()
         | *:
         @EmitTst
          [ oOperandChooseLength (one)
          | one:
          oOperandPushMode(mManifest)
          oOperandSetValue(zero)
          oOperandSetLength(one)
          ] or >
          @EmitCmp
           oOperandSwap
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandSwap
           @OperandLeftOrRightIsTemp
            [ oOperandChooseMode (mManifest)
            | *:
            oOperandSwap
            [ oOperandChooseMode (mStatic)
            | *:
            oOperandSwap
            >>no
           ;OperandLeftOrRightIsTemp
           [@OperandLeftOrRightIsTemp (no)
           | *:
           [ oOperandChooseMode (mManifest)
           | mManifest:
           oEmitDouble(iCmp)
           ] or >
           >>
          ;EmitCmp
          oOperandPop
          >>
         ;EmitTst
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStatic)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         oOperandPushJumpCondition(iJne)
         >>
        ;OperandForceToJumpCondition
        @OperandComplementJumpCondition
         [ oOperandChooseJumpCondition (iJne)
         | *:
         oOperandComplementJumpCondition
         >>
        ;OperandComplementJumpCondition
        >>
       ;OperandNot
       ] or >
       }
       [ (tNot)
       | tNot:
       @OperandNot
        @OperandForceToJumpCondition
         [ oOperandIsJumpCondition (yes)
         | yes:
         ] or >
         >>
        ;OperandForceToJumpCondition
        @OperandComplementJumpCondition
         [ oOperandChooseJumpCondition (iJeq)
         | *:
         oOperandComplementJumpCondition
         >>
        ;OperandComplementJumpCondition
        >>
       ;OperandNot
       ] or >
       }
       [ (tRepeatTest)
       | *:
       ] or >
       >>
      ;OperandPushExpression
      @OperandForceToJumpCondition
       [ oOperandIsJumpCondition (yes)
       | yes:
       ] or >
       >>
      ;OperandForceToJumpCondition
      >>
     ;OperandPushBooleanControlExpression
     ?tRepeatTest (tRepeatTest)
     [ oOperandChooseJumpCondition (iJne)
     | *:
     @OperandInfixOr
      @OperandForceToJumpCondition
       [ oOperandIsJumpCondition (yes)
       | yes:
       ] or >
       >>
      ;OperandForceToJumpCondition
      [ oOperandChooseJumpCondition (iJne)
      | *:
      oEmitConditionalForwardBranch
      oFixAndFreeFalseBranches
      oFixPushLastAddress
      oOperandMergeShuntsWithAddress
      oFixPopAddress
      >>
     ;OperandInfixOr
     oEmitUnconditionalBackwardBranch
     oFixPopAddress
     oFixAndFreeShuntList
     oOperandPop
     >>
    ;RepeatStmt
    ] or >
    }
    [ (tTrapBegin)
    | tTrapBegin:
    @TrapStmt
     oEmitSourceCoordinate
     [ (tLiteralAddress)
     | tLiteralAddress:
     @OperandPushVariable
      oOperandPushVariable
      [ (tVarParm)
      | *:
      [ (tVarParm)
      | *:
      [ (tVarParm)
      | *:
      >>
     ;OperandPushVariable
     oOperandPushCopy
     @OperandForceToStack
      [ oOperandChooseLength (two)
      | two:
      ] or >
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mStack)
      >>
     ;OperandForceToStack
     oOperandPop
     ?tVarParm (tVarParm)
     ?tParmEnd (tParmEnd)
     [ (tTrap)
     | tTrap:
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushTrap
     oEmitSingle(iCall)
     oOperandPop
     oOperandPushMode(mStackReg)
     oOperandSetLength(two)
     oOperandPushMode(mManifest)
     oOperandSetLength(two)
     oOperandSetValue(four)
     oEmitDouble(iAdd)
     oOperandPop
     oOperandPop
     ] or >
     ] or >
     >>
    ;TrapStmt
    ] or >
    }
    [ (tProcedureEnd)
    | *:
    ] or >
    >>
   ;Block
   ?tProcedureEnd (tProcedureEnd)
   oEmitNone(iLeave)
   oEmitNone(iReturn)
   >>
  ;Routine
  oFixForwardBranch
  oFixPopAddress
  ] or >
  }
  [ (tAssignBegin)
  | tAssignBegin:
  @AssignStmt
   oEmitSourceCoordinate
   ?tLiteralAddress (tLiteralAddress)
   @OperandPushVariable
    oOperandPushVariable
    [ (tLiteralInteger)
    | *:
    [ (tLiteralInteger)
    | *:
    [ (tLiteralInteger)
    | *:
    >>
   ;OperandPushVariable
   @OperandPushExpressionAssignPopPop
    [ (tLiteralInteger)
    | tLiteralInteger:
    oOperandPushInteger
    ] or >
    }
    [ (tAssignInteger)
    | tAssignInteger:
    @OperandAssignIntegerPopPop
     [ oOperandCompareLeftAndRight (no)
     | no:
     @EmitMove
      @OperandLeftOrRightIsTemp
       [ oOperandChooseMode (mManifest)
       | *:
       oOperandSwap
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandSwap
       >>no
      ;OperandLeftOrRightIsTemp
      [@OperandLeftOrRightIsTemp (no)
      | *:
      [ oOperandChooseMode (mManifest)
      | mManifest:
      oEmitDouble(iMov)
      ] or >
      >>
     ;EmitMove
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mManifest)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     ] or >
     >>
    ;OperandAssignIntegerPopPop
    ] or >
    >>
   ;OperandPushExpressionAssignPopPop
   >>
  ;AssignStmt
  ] or >
  }
  [ (tWhileBegin)
  | tWhileBegin:
  @WhileStmt
   oFixPushAddress
   oEmitMergeSourceCoordinate
   @OperandPushBooleanControlExpression
    @OperandPushExpression
     [ (tLiteralAddress)
     | tLiteralAddress:
     @OperandPushVariable
      oOperandPushVariable
      [ (tFetchInteger)
      | *:
      [ (tFetchInteger)
      | *:
      [ (tFetchInteger)
      | tFetchInteger:
      ] or >
      >>
     ;OperandPushVariable
     ] or >
     }
     [ (tLiteralInteger)
     | tLiteralInteger:
     oOperandPushInteger
     ] or >
     }
     [ (tLE)
     | tLE:
     @OperandGreaterPop
      [ oOperandCompareLeftAndRight (no)
      | no:
      [ oOperandChooseManifestValue ()
      | *:
      oOperandSwap
      [ oOperandChooseManifestValue ()
      | *:
      oOperandSwap
      @EmitCmp
       oOperandSwap
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandSwap
       @OperandLeftOrRightIsTemp
        [ oOperandChooseMode (mManifest)
        | *:
        oOperandSwap
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandSwap
        >>no
       ;OperandLeftOrRightIsTemp
       [@OperandLeftOrRightIsTemp (no)
       | *:
       [ oOperandChooseMode (mManifest)
       | mManifest:
       oEmitDouble(iCmp)
       ] or >
       >>
      ;EmitCmp
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mManifest)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushJumpCondition(iJgt)
      ] or >
      >>
     ;OperandGreaterPop
     @OperandNot
      @OperandForceToJumpCondition
       [ oOperandIsJumpCondition (yes)
       | yes:
       ] or >
       >>
      ;OperandForceToJumpCondition
      @OperandComplementJumpCondition
       [ oOperandChooseJumpCondition (iJgt)
       | *:
       oOperandComplementJumpCondition
       >>
      ;OperandComplementJumpCondition
      >>
     ;OperandNot
     ] or >
     }
     [ (tWhileTest)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    @OperandForceToJumpCondition
     [ oOperandIsJumpCondition (yes)
     | yes:
     ] or >
     >>
    ;OperandForceToJumpCondition
    >>
   ;OperandPushBooleanControlExpression
   ?tWhileTest (tWhileTest)
   @OperandComplementJumpCondition
    [ oOperandChooseJumpCondition (iJle)
    | *:
    oOperandComplementJumpCondition
    >>
   ;OperandComplementJumpCondition
   [ oOperandChooseJumpCondition (iJgt)
   | *:
   @OperandInfixOr
    @OperandForceToJumpCondition
     [ oOperandIsJumpCondition (yes)
     | yes:
     ] or >
     >>
    ;OperandForceToJumpCondition
    [ oOperandChooseJumpCondition (iJgt)
    | *:
    oEmitConditionalForwardBranch
    oFixAndFreeFalseBranches
    oFixPushLastAddress
    oOperandMergeShuntsWithAddress
    oFixPopAddress
    >>
   ;OperandInfixOr
   @Statements
    @Block
     [ (tAssignBegin)
     | tAssignBegin:
     @AssignStmt
      oEmitSourceCoordinate
      ?tLiteralAddress (tLiteralAddress)
      @OperandPushVariable
       oOperandPushVariable
       [ (tSubscriptBegin)
       | *:
       [ (tSubscriptBegin)
       | tSubscriptBegin:
       @OperandPushExpression
        [ (tLiteralAddress)
        | tLiteralAddress:
        @OperandPushVariable
         oOperandPushVariable
         [ (tFetchInteger)
         | *:
         [ (tFetchInteger)
         | *:
         [ (tFetchInteger)
         | tFetchInteger:
         ] or >
         >>
        ;OperandPushVariable
        ] or >
        }
        [ (tSubscriptInteger)
        | *:
        ] or >
        >>
       ;OperandPushExpression
       [ (tSubscriptInteger)
       | tSubscriptInteger:
       @OperandSubscriptIntegerPop
        [ oOperandChooseMode (mStatic)
        | *:
        @OperandSubscriptNonManifestIntegerPop
         [ oOptionTestChecking (yes)
         | yes:
         @OperandCheckedSubscriptNonManifestIntegerPop
          @OperandForceIntoTemp
           [ oOperandChooseMode (mStatic)
           | *:
           [ oOperandChooseLength (two)
           | two:
           @OperandPushTempWord
            oTempAllocate
            oOperandPushTemp
            oOperandSetValue(zero)
            oOperandSetLength(two)
            >>
           ;OperandPushTempWord
           oOperandSwap
           oEmitDouble(iMov)
           @OperandPopAndFreeTemp
            [ oOperandChooseMode (mStatic)
            | *:
            oOperandPop
            >>
           ;OperandPopAndFreeTemp
           oOperandSetMode(mTemp)
           ] or >
           >>
          ;OperandForceIntoTemp
          [ oOptionTestChecking (yes)
          | yes:
          @EmitSubscriptRangeCheck
           oOperandSwap
           @OperandPushArrayUpperBound
            [ oOperandChooseMode (mStatic)
            | mStatic:
            oOperandPushArrayUpperBound
            ] or >
            >>
           ;OperandPushArrayUpperBound
           oOperandSwapLeftAndDest
           @EmitCmp
            oOperandSwap
            [ oOperandChooseMode (mTemp)
            | *:
            oOperandSwap
            @OperandLeftOrRightIsTemp
             [ oOperandChooseMode (mManifest)
             | *:
             oOperandSwap
             [ oOperandChooseMode (mTemp)
             | mTemp:
             oOperandSwap
             >>yes
            ;OperandLeftOrRightIsTemp
            [@OperandLeftOrRightIsTemp (yes)
            | yes:
            oEmitDouble(iCmp)
            ] or >
            >>
           ;EmitCmp
           oOperandPushJumpCondition(iJgt)
           oEmitConditionalForwardBranch
           oFixPushLastAddress
           oOperandPop
           oOperandPop
           oOperandSwap
           @OperandPushArrayLowerBound
            [ oOperandChooseMode (mStatic)
            | mStatic:
            oOperandPushArrayLowerBound
            ] or >
            >>
           ;OperandPushArrayLowerBound
           oOperandSwapLeftAndDest
           @EmitCmp
            oOperandSwap
            [ oOperandChooseMode (mTemp)
            | *:
            oOperandSwap
            @OperandLeftOrRightIsTemp
             [ oOperandChooseMode (mManifest)
             | *:
             oOperandSwap
             [ oOperandChooseMode (mTemp)
             | mTemp:
             oOperandSwap
             >>yes
            ;OperandLeftOrRightIsTemp
            [@OperandLeftOrRightIsTemp (yes)
            | yes:
            oEmitDouble(iCmp)
            ] or >
            >>
           ;EmitCmp
           oOperandPushJumpCondition(iJge)
           oEmitConditionalForwardBranch
           oFixPushLastAddress
           oOperandPop
           oOperandPop
           oFixSwapAddresses
           oFixForwardBranch
           oFixPopAddress
           @EmitSubscriptAbort
            oOperandPushMode(mLineNum)
            oOperandSetLength(two)
            oEmitSingle(iPush)
            oOperandPop
            oOperandPushMode(mTrap)
            oOperandSetValue(trSubscriptAbort)
            oEmitSingle(iCall)
            oOperandPop
            >>
           ;EmitSubscriptAbort
           oFixForwardBranch
           oFixPopAddress
           >>
          ;EmitSubscriptRangeCheck
          ] or >
          oOperandSwap
          @OperandPushArrayLowerBound
           [ oOperandChooseMode (mStatic)
           | mStatic:
           oOperandPushArrayLowerBound
           ] or >
           >>
          ;OperandPushArrayLowerBound
          oOperandSwapLeftAndDest
          @OperandSubtractPop
           @OperandAreLeftAndRightManifest
            [ oOperandChooseMode (mManifest)
            | mManifest:
            oOperandSwap
            [ oOperandChooseMode (mTemp)
            | *:
            oOperandSwap
            >>no
           ;OperandAreLeftAndRightManifest
           [@OperandAreLeftAndRightManifest (no)
           | no:
           [ oOperandChooseManifestValue (one)
           | one:
           oOperandPop
           @OperandForceIntoTemp
            [ oOperandChooseMode (mTemp)
            | mTemp:
            ] or >
            >>
           ;OperandForceIntoTemp
           oEmitSingle(iDec)
           ] or >
           ] or >
           >>
          ;OperandSubtractPop
          oOperandPushMode(mManifest)
          oOperandSetLength(two)
          oOperandSetValue(two)
          oEmitDouble(iShl)
          oOperandPop
          oOperandSwap
          [ oOperandChooseMode (mStatic)
          | mStatic:
          oOperandPushMode(mManifest)
          oOperandSetLength(two)
          oOperandSetValue(eight)
          oOperandAddManifestValues
          oOperandPop
          @OperandForceAddressIntoTemp
           [ oOperandChooseMode (mStatic)
           | mStatic:
           @OperandPushTempWord
            oTempAllocate
            oOperandPushTemp
            oOperandSetValue(zero)
            oOperandSetLength(two)
            >>
           ;OperandPushTempWord
           oOperandSwap
           oEmitDouble(iLoada)
           oOperandPop
           ] or >
           oOperandSetLength(two)
           >>
          ;OperandForceAddressIntoTemp
          oEmitDouble(iAdd)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mTemp)
           | mTemp:
           oTempFree
           ] or >
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          ] or >
          oOperandSetMode(mTempIndirect)
          oOperandSetLength(two)
          >>
         ;OperandCheckedSubscriptNonManifestIntegerPop
         ] or >
         >>
        ;OperandSubscriptNonManifestIntegerPop
        oOperandSetLength(two)
        >>
       ;OperandSubscriptIntegerPop
       ] or >
       ] or >
       [ (tLiteralInteger)
       | *:
       >>
      ;OperandPushVariable
      @OperandPushExpressionAssignPopPop
       [ (tLiteralInteger)
       | tLiteralInteger:
       oOperandPushInteger
       ] or >
       }
       [ (tAssignInteger)
       | tAssignInteger:
       @OperandAssignIntegerPopPop
        [ oOperandCompareLeftAndRight (no)
        | no:
        @EmitMove
         @OperandLeftOrRightIsTemp
          [ oOperandChooseMode (mManifest)
          | *:
          oOperandSwap
          [ oOperandChooseMode (mTempIndirect)
          | *:
          oOperandSwap
          >>no
         ;OperandLeftOrRightIsTemp
         [@OperandLeftOrRightIsTemp (no)
         | *:
         [ oOperandChooseMode (mManifest)
         | mManifest:
         oEmitDouble(iMov)
         ] or >
         >>
        ;EmitMove
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mManifest)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mTempIndirect)
         | mTempIndirect:
         oTempFree
         ] or >
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        ] or >
        >>
       ;OperandAssignIntegerPopPop
       ] or >
       >>
      ;OperandPushExpressionAssignPopPop
      >>
     ;AssignStmt
     ] or >
     }
     [ (tAssignBegin)
     | tAssignBegin:
     @AssignStmt
      oEmitSourceCoordinate
      ?tLiteralAddress (tLiteralAddress)
      @OperandPushVariable
       oOperandPushVariable
       [ (tSubscriptBegin)
       | *:
       [ (tSubscriptBegin)
       | tSubscriptBegin:
       @OperandPushExpression
        [ (tLiteralAddress)
        | tLiteralAddress:
        @OperandPushVariable
         oOperandPushVariable
         [ (tFetchInteger)
         | *:
         [ (tFetchInteger)
         | *:
         [ (tFetchInteger)
         | tFetchInteger:
         ] or >
         >>
        ;OperandPushVariable
        ] or >
        }
        [ (tSubscriptInteger)
        | *:
        ] or >
        >>
       ;OperandPushExpression
       [ (tSubscriptInteger)
       | tSubscriptInteger:
       @OperandSubscriptIntegerPop
        [ oOperandChooseMode (mStatic)
        | *:
        @OperandSubscriptNonManifestIntegerPop
         [ oOptionTestChecking (yes)
         | yes:
         @OperandCheckedSubscriptNonManifestIntegerPop
          @OperandForceIntoTemp
           [ oOperandChooseMode (mStatic)
           | *:
           [ oOperandChooseLength (two)
           | two:
           @OperandPushTempWord
            oTempAllocate
            oOperandPushTemp
            oOperandSetValue(zero)
            oOperandSetLength(two)
            >>
           ;OperandPushTempWord
           oOperandSwap
           oEmitDouble(iMov)
           @OperandPopAndFreeTemp
            [ oOperandChooseMode (mStatic)
            | *:
            oOperandPop
            >>
           ;OperandPopAndFreeTemp
           oOperandSetMode(mTemp)
           ] or >
           >>
          ;OperandForceIntoTemp
          [ oOptionTestChecking (yes)
          | yes:
          @EmitSubscriptRangeCheck
           oOperandSwap
           @OperandPushArrayUpperBound
            [ oOperandChooseMode (mStatic)
            | mStatic:
            oOperandPushArrayUpperBound
            ] or >
            >>
           ;OperandPushArrayUpperBound
           oOperandSwapLeftAndDest
           @EmitCmp
            oOperandSwap
            [ oOperandChooseMode (mTemp)
            | *:
            oOperandSwap
            @OperandLeftOrRightIsTemp
             [ oOperandChooseMode (mManifest)
             | *:
             oOperandSwap
             [ oOperandChooseMode (mTemp)
             | mTemp:
             oOperandSwap
             >>yes
            ;OperandLeftOrRightIsTemp
            [@OperandLeftOrRightIsTemp (yes)
            | yes:
            oEmitDouble(iCmp)
            ] or >
            >>
           ;EmitCmp
           oOperandPushJumpCondition(iJgt)
           oEmitConditionalForwardBranch
           oFixPushLastAddress
           oOperandPop
           oOperandPop
           oOperandSwap
           @OperandPushArrayLowerBound
            [ oOperandChooseMode (mStatic)
            | mStatic:
            oOperandPushArrayLowerBound
            ] or >
            >>
           ;OperandPushArrayLowerBound
           oOperandSwapLeftAndDest
           @EmitCmp
            oOperandSwap
            [ oOperandChooseMode (mTemp)
            | *:
            oOperandSwap
            @OperandLeftOrRightIsTemp
             [ oOperandChooseMode (mManifest)
             | *:
             oOperandSwap
             [ oOperandChooseMode (mTemp)
             | mTemp:
             oOperandSwap
             >>yes
            ;OperandLeftOrRightIsTemp
            [@OperandLeftOrRightIsTemp (yes)
            | yes:
            oEmitDouble(iCmp)
            ] or >
            >>
           ;EmitCmp
           oOperandPushJumpCondition(iJge)
           oEmitConditionalForwardBranch
           oFixPushLastAddress
           oOperandPop
           oOperandPop
           oFixSwapAddresses
           oFixForwardBranch
           oFixPopAddress
           @EmitSubscriptAbort
            oOperandPushMode(mLineNum)
            oOperandSetLength(two)
            oEmitSingle(iPush)
            oOperandPop
            oOperandPushMode(mTrap)
            oOperandSetValue(trSubscriptAbort)
            oEmitSingle(iCall)
            oOperandPop
            >>
           ;EmitSubscriptAbort
           oFixForwardBranch
           oFixPopAddress
           >>
          ;EmitSubscriptRangeCheck
          ] or >
          oOperandSwap
          @OperandPushArrayLowerBound
           [ oOperandChooseMode (mStatic)
           | mStatic:
           oOperandPushArrayLowerBound
           ] or >
           >>
          ;OperandPushArrayLowerBound
          oOperandSwapLeftAndDest
          @OperandSubtractPop
           @OperandAreLeftAndRightManifest
            [ oOperandChooseMode (mManifest)
            | mManifest:
            oOperandSwap
            [ oOperandChooseMode (mTemp)
            | *:
            oOperandSwap
            >>no
           ;OperandAreLeftAndRightManifest
           [@OperandAreLeftAndRightManifest (no)
           | no:
           [ oOperandChooseManifestValue (one)
           | one:
           oOperandPop
           @OperandForceIntoTemp
            [ oOperandChooseMode (mTemp)
            | mTemp:
            ] or >
            >>
           ;OperandForceIntoTemp
           oEmitSingle(iDec)
           ] or >
           ] or >
           >>
          ;OperandSubtractPop
          oOperandPushMode(mManifest)
          oOperandSetLength(two)
          oOperandSetValue(two)
          oEmitDouble(iShl)
          oOperandPop
          oOperandSwap
          [ oOperandChooseMode (mStatic)
          | mStatic:
          oOperandPushMode(mManifest)
          oOperandSetLength(two)
          oOperandSetValue(eight)
          oOperandAddManifestValues
          oOperandPop
          @OperandForceAddressIntoTemp
           [ oOperandChooseMode (mStatic)
           | mStatic:
           @OperandPushTempWord
            oTempAllocate
            oOperandPushTemp
            oOperandSetValue(zero)
            oOperandSetLength(two)
            >>
           ;OperandPushTempWord
           oOperandSwap
           oEmitDouble(iLoada)
           oOperandPop
           ] or >
           oOperandSetLength(two)
           >>
          ;OperandForceAddressIntoTemp
          oEmitDouble(iAdd)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mTemp)
           | mTemp:
           oTempFree
           ] or >
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          ] or >
          oOperandSetMode(mTempIndirect)
          oOperandSetLength(two)
          >>
         ;OperandCheckedSubscriptNonManifestIntegerPop
         ] or >
         >>
        ;OperandSubscriptNonManifestIntegerPop
        oOperandSetLength(two)
        >>
       ;OperandSubscriptIntegerPop
       ] or >
       ] or >
       [ (tLiteralInteger)
       | *:
       >>
      ;OperandPushVariable
      @OperandPushExpressionAssignPopPop
       [ (tLiteralInteger)
       | tLiteralInteger:
       oOperandPushInteger
       ] or >
       }
       [ (tAssignInteger)
       | tAssignInteger:
       @OperandAssignIntegerPopPop
        [ oOperandCompareLeftAndRight (no)
        | no:
        @EmitMove
         @OperandLeftOrRightIsTemp
          [ oOperandChooseMode (mManifest)
          | *:
          oOperandSwap
          [ oOperandChooseMode (mTempIndirect)
          | *:
          oOperandSwap
          >>no
         ;OperandLeftOrRightIsTemp
         [@OperandLeftOrRightIsTemp (no)
         | *:
         [ oOperandChooseMode (mManifest)
         | mManifest:
         oEmitDouble(iMov)
         ] or >
         >>
        ;EmitMove
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mManifest)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mTempIndirect)
         | mTempIndirect:
         oTempFree
         ] or >
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        ] or >
        >>
       ;OperandAssignIntegerPopPop
       ] or >
       >>
      ;OperandPushExpressionAssignPopPop
      >>
     ;AssignStmt
     ] or >
     }
     [ (tAssignBegin)
     | tAssignBegin:
     @AssignStmt
      oEmitSourceCoordinate
      ?tLiteralAddress (tLiteralAddress)
      @OperandPushVariable
       oOperandPushVariable
       [ (tSubscriptBegin)
       | *:
       [ (tSubscriptBegin)
       | tSubscriptBegin:
       @OperandPushExpression
        [ (tLiteralAddress)
        | tLiteralAddress:
        @OperandPushVariable
         oOperandPushVariable
         [ (tFetchInteger)
         | *:
         [ (tFetchInteger)
         | *:
         [ (tFetchInteger)
         | tFetchInteger:
         ] or >
         >>
        ;OperandPushVariable
        ] or >
        }
        [ (tSubscriptInteger)
        | *:
        ] or >
        >>
       ;OperandPushExpression
       [ (tSubscriptInteger)
       | tSubscriptInteger:
       @OperandSubscriptIntegerPop
        [ oOperandChooseMode (mStatic)
        | *:
        @OperandSubscriptNonManifestIntegerPop
         [ oOptionTestChecking (yes)
         | yes:
         @OperandCheckedSubscriptNonManifestIntegerPop
          @OperandForceIntoTemp
           [ oOperandChooseMode (mStatic)
           | *:
           [ oOperandChooseLength (two)
           | two:
           @OperandPushTempWord
            oTempAllocate
            oOperandPushTemp
            oOperandSetValue(zero)
            oOperandSetLength(two)
            >>
           ;OperandPushTempWord
           oOperandSwap
           oEmitDouble(iMov)
           @OperandPopAndFreeTemp
            [ oOperandChooseMode (mStatic)
            | *:
            oOperandPop
            >>
           ;OperandPopAndFreeTemp
           oOperandSetMode(mTemp)
           ] or >
           >>
          ;OperandForceIntoTemp
          [ oOptionTestChecking (yes)
          | yes:
          @EmitSubscriptRangeCheck
           oOperandSwap
           @OperandPushArrayUpperBound
            [ oOperandChooseMode (mStatic)
            | mStatic:
            oOperandPushArrayUpperBound
            ] or >
            >>
           ;OperandPushArrayUpperBound
           oOperandSwapLeftAndDest
           @EmitCmp
            oOperandSwap
            [ oOperandChooseMode (mTemp)
            | *:
            oOperandSwap
            @OperandLeftOrRightIsTemp
             [ oOperandChooseMode (mManifest)
             | *:
             oOperandSwap
             [ oOperandChooseMode (mTemp)
             | mTemp:
             oOperandSwap
             >>yes
            ;OperandLeftOrRightIsTemp
            [@OperandLeftOrRightIsTemp (yes)
            | yes:
            oEmitDouble(iCmp)
            ] or >
            >>
           ;EmitCmp
           oOperandPushJumpCondition(iJgt)
           oEmitConditionalForwardBranch
           oFixPushLastAddress
           oOperandPop
           oOperandPop
           oOperandSwap
           @OperandPushArrayLowerBound
            [ oOperandChooseMode (mStatic)
            | mStatic:
            oOperandPushArrayLowerBound
            ] or >
            >>
           ;OperandPushArrayLowerBound
           oOperandSwapLeftAndDest
           @EmitCmp
            oOperandSwap
            [ oOperandChooseMode (mTemp)
            | *:
            oOperandSwap
            @OperandLeftOrRightIsTemp
             [ oOperandChooseMode (mManifest)
             | *:
             oOperandSwap
             [ oOperandChooseMode (mTemp)
             | mTemp:
             oOperandSwap
             >>yes
            ;OperandLeftOrRightIsTemp
            [@OperandLeftOrRightIsTemp (yes)
            | yes:
            oEmitDouble(iCmp)
            ] or >
            >>
           ;EmitCmp
           oOperandPushJumpCondition(iJge)
           oEmitConditionalForwardBranch
           oFixPushLastAddress
           oOperandPop
           oOperandPop
           oFixSwapAddresses
           oFixForwardBranch
           oFixPopAddress
           @EmitSubscriptAbort
            oOperandPushMode(mLineNum)
            oOperandSetLength(two)
            oEmitSingle(iPush)
            oOperandPop
            oOperandPushMode(mTrap)
            oOperandSetValue(trSubscriptAbort)
            oEmitSingle(iCall)
            oOperandPop
            >>
           ;EmitSubscriptAbort
           oFixForwardBranch
           oFixPopAddress
           >>
          ;EmitSubscriptRangeCheck
          ] or >
          oOperandSwap
          @OperandPushArrayLowerBound
           [ oOperandChooseMode (mStatic)
           | mStatic:
           oOperandPushArrayLowerBound
           ] or >
           >>
          ;OperandPushArrayLowerBound
          oOperandSwapLeftAndDest
          @OperandSubtractPop
           @OperandAreLeftAndRightManifest
            [ oOperandChooseMode (mManifest)
            | mManifest:
            oOperandSwap
            [ oOperandChooseMode (mTemp)
            | *:
            oOperandSwap
            >>no
           ;OperandAreLeftAndRightManifest
           [@OperandAreLeftAndRightManifest (no)
           | no:
           [ oOperandChooseManifestValue (one)
           | one:
           oOperandPop
           @OperandForceIntoTemp
            [ oOperandChooseMode (mTemp)
            | mTemp:
            ] or >
            >>
           ;OperandForceIntoTemp
           oEmitSingle(iDec)
           ] or >
           ] or >
           >>
          ;OperandSubtractPop
          oOperandPushMode(mManifest)
          oOperandSetLength(two)
          oOperandSetValue(two)
          oEmitDouble(iShl)
          oOperandPop
          oOperandSwap
          [ oOperandChooseMode (mStatic)
          | mStatic:
          oOperandPushMode(mManifest)
          oOperandSetLength(two)
          oOperandSetValue(eight)
          oOperandAddManifestValues
          oOperandPop
          @OperandForceAddressIntoTemp
           [ oOperandChooseMode (mStatic)
           | mStatic:
           @OperandPushTempWord
            oTempAllocate
            oOperandPushTemp
            oOperandSetValue(zero)
            oOperandSetLength(two)
            >>
           ;OperandPushTempWord
           oOperandSwap
           oEmitDouble(iLoada)
           oOperandPop
           ] or >
           oOperandSetLength(two)
           >>
          ;OperandForceAddressIntoTemp
          oEmitDouble(iAdd)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mTemp)
           | mTemp:
           oTempFree
           ] or >
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          ] or >
          oOperandSetMode(mTempIndirect)
          oOperandSetLength(two)
          >>
         ;OperandCheckedSubscriptNonManifestIntegerPop
         ] or >
         >>
        ;OperandSubscriptNonManifestIntegerPop
        oOperandSetLength(two)
        >>
       ;OperandSubscriptIntegerPop
       ] or >
       ] or >
       [ (tLiteralInteger)
       | *:
       >>
      ;OperandPushVariable
      @OperandPushExpressionAssignPopPop
       [ (tLiteralInteger)
       | tLiteralInteger:
       oOperandPushInteger
       ] or >
       }
       [ (tAssignInteger)
       | tAssignInteger:
       @OperandAssignIntegerPopPop
        [ oOperandCompareLeftAndRight (no)
        | no:
        @EmitMove
         @OperandLeftOrRightIsTemp
          [ oOperandChooseMode (mManifest)
          | *:
          oOperandSwap
          [ oOperandChooseMode (mTempIndirect)
          | *:
          oOperandSwap
          >>no
         ;OperandLeftOrRightIsTemp
         [@OperandLeftOrRightIsTemp (no)
         | *:
         [ oOperandChooseMode (mManifest)
         | mManifest:
         oEmitDouble(iMov)
         ] or >
         >>
        ;EmitMove
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mManifest)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mTempIndirect)
         | mTempIndirect:
         oTempFree
         ] or >
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        ] or >
        >>
       ;OperandAssignIntegerPopPop
       ] or >
       >>
      ;OperandPushExpressionAssignPopPop
      >>
     ;AssignStmt
     ] or >
     }
     [ (tAssignBegin)
     | tAssignBegin:
     @AssignStmt
      oEmitSourceCoordinate
      ?tLiteralAddress (tLiteralAddress)
      @OperandPushVariable
       oOperandPushVariable
       [ (tLiteralAddress)
       | *:
       [ (tLiteralAddress)
       | *:
       [ (tLiteralAddress)
       | *:
       >>
      ;OperandPushVariable
      @OperandPushExpressionAssignPopPop
       [ (tLiteralAddress)
       | tLiteralAddress:
       @OperandPushVariable
        oOperandPushVariable
        [ (tFetchInteger)
        | *:
        [ (tFetchInteger)
        | *:
        [ (tFetchInteger)
        | tFetchInteger:
        ] or >
        >>
       ;OperandPushVariable
       ] or >
       }
       [ (tLiteralInteger)
       | tLiteralInteger:
       oOperandPushInteger
       ] or >
       }
       [ (tAdd)
       | tAdd:
       [ (tAssignInteger)
       | tAssignInteger:
       @OperandAddAssignPopPopPop
        [ oOperandCompareRightAndDest (no)
        | *:
        oOperandSwap
        [ oOperandCompareRightAndDest (yes)
        | yes:
        oOperandPop
        @OperandAddRightToLeftPop
         [ oOperandChooseManifestValue (one)
         | one:
         oOperandPop
         oEmitSingle(iInc)
         ] or >
         >>
        ;OperandAddRightToLeftPop
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        ] or >
        >>
       ;OperandAddAssignPopPopPop
       ] or >
       >>
      ;OperandPushExpressionAssignPopPop
      >>
     ;AssignStmt
     ] or >
     }
     [ (tWhileEnd)
     | *:
     ] or >
     >>
    ;Block
    >>
   ;Statements
   ?tWhileEnd (tWhileEnd)
   oEmitUnconditionalBackwardBranch
   oFixPopAddress
   oFixAndFreeShuntList
   oOperandPop
   >>
  ;WhileStmt
  ] or >
  }
  [ (tAssignBegin)
  | tAssignBegin:
  @AssignStmt
   oEmitSourceCoordinate
   ?tLiteralAddress (tLiteralAddress)
   @OperandPushVariable
    oOperandPushVariable
    [ (tLiteralInteger)
    | *:
    [ (tLiteralInteger)
    | *:
    [ (tLiteralInteger)
    | *:
    >>
   ;OperandPushVariable
   @OperandPushExpressionAssignPopPop
    [ (tLiteralInteger)
    | tLiteralInteger:
    oOperandPushInteger
    ] or >
    }
    [ (tAssignInteger)
    | tAssignInteger:
    @OperandAssignIntegerPopPop
     [ oOperandCompareLeftAndRight (no)
     | no:
     @EmitMove
      @OperandLeftOrRightIsTemp
       [ oOperandChooseMode (mManifest)
       | *:
       oOperandSwap
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandSwap
       >>no
      ;OperandLeftOrRightIsTemp
      [@OperandLeftOrRightIsTemp (no)
      | *:
      [ oOperandChooseMode (mManifest)
      | mManifest:
      oEmitDouble(iMov)
      ] or >
      >>
     ;EmitMove
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mManifest)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     ] or >
     >>
    ;OperandAssignIntegerPopPop
    ] or >
    >>
   ;OperandPushExpressionAssignPopPop
   >>
  ;AssignStmt
  ] or >
  }
  [ (tAssignBegin)
  | tAssignBegin:
  @AssignStmt
   oEmitSourceCoordinate
   ?tLiteralAddress (tLiteralAddress)
   @OperandPushVariable
    oOperandPushVariable
    [ (tLiteralInteger)
    | *:
    [ (tLiteralInteger)
    | *:
    [ (tLiteralInteger)
    | *:
    >>
   ;OperandPushVariable
   @OperandPushExpressionAssignPopPop
    [ (tLiteralInteger)
    | tLiteralInteger:
    oOperandPushInteger
    ] or >
    }
    [ (tAssignInteger)
    | tAssignInteger:
    @OperandAssignIntegerPopPop
     [ oOperandCompareLeftAndRight (no)
     | no:
     @EmitMove
      @OperandLeftOrRightIsTemp
       [ oOperandChooseMode (mManifest)
       | *:
       oOperandSwap
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandSwap
       >>no
      ;OperandLeftOrRightIsTemp
      [@OperandLeftOrRightIsTemp (no)
      | *:
      [ oOperandChooseMode (mManifest)
      | mManifest:
      oEmitDouble(iMov)
      ] or >
      >>
     ;EmitMove
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mManifest)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     ] or >
     >>
    ;OperandAssignIntegerPopPop
    ] or >
    >>
   ;OperandPushExpressionAssignPopPop
   >>
  ;AssignStmt
  ] or >
  }
  [ (tWriteBegin)
  | tWriteBegin:
  @WriteProc
   oEmitSourceCoordinate
   [ (tTrapBegin)
   | *:
   @WriteParameter
    ?tTrapBegin (tTrapBegin)
    ?tLiteralAddress (tLiteralAddress)
    @OperandPushVariable
     oOperandPushVariable
     [ (tVarParm)
     | *:
     [ (tVarParm)
     | *:
     [ (tVarParm)
     | *:
     >>
    ;OperandPushVariable
    @OperandForceToStack
     [ oOperandChooseLength (two)
     | two:
     ] or >
     oEmitSingle(iPush)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mStack)
     >>
    ;OperandForceToStack
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStack)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ?tVarParm (tVarParm)
    ?tParmEnd (tParmEnd)
    @OperandPushExpression
     [ (tSkipString)
     | tSkipString:
     oEmitNone(iData)
     ?tStringData (tStringData)
     oEmitString
     oEmitNone(iText)
     ] or >
     }
     [ (tLiteralAddress)
     | tLiteralAddress:
     @OperandPushVariable
      oOperandPushVariable
      [ (tFetchChar)
      | *:
      [ (tFetchChar)
      | *:
      [ (tFetchChar)
      | tFetchChar:
      oOperandSetLength(regCX)
      ] or >
      >>
     ;OperandPushVariable
     ] or >
     }
     [ (tParmEnd)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    [ (tParmEnd)
    | *:
    @OperandForceToStack
     [ oOperandChooseLength (regCX)
     | regCX:
     @OperandForceAddressIntoTemp
      [ oOperandChooseMode (mStatic)
      | mStatic:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iLoada)
      oOperandPop
      ] or >
      oOperandSetLength(two)
      >>
     ;OperandForceAddressIntoTemp
     ] or >
     oEmitSingle(iPush)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mTemp)
      | mTemp:
      oTempFree
      ] or >
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mStack)
     >>
    ;OperandForceToStack
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStack)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ?tParmEnd (tParmEnd)
    @OperandPushExpression
     [ (tLiteralInteger)
     | tLiteralInteger:
     oOperandPushInteger
     ] or >
     }
     [ (tParmEnd)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    @OperandForceToStack
     [ oOperandChooseLength (two)
     | two:
     ] or >
     oEmitSingle(iPush)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mManifest)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mStack)
     >>
    ;OperandForceToStack
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStack)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ?tParmEnd (tParmEnd)
    ?tTrap (tTrap)
    oOperandPushTrap
    oEmitSingle(iCall)
    oOperandPop
    oOperandPushMode(mStackReg)
    oOperandSetLength(two)
    oOperandPushMode(mManifest)
    oOperandSetLength(two)
    oOperandSetValue(twelve)
    oEmitDouble(iAdd)
    oOperandPop
    oOperandPop
    >>
   ;WriteParameter
   }
   [ (tWriteEnd)
   | tWriteEnd:
   ] or >
   >>
  ;WriteProc
  ] or >
  }
  [ (tTrapBegin)
  | tTrapBegin:
  @TrapStmt
   oEmitSourceCoordinate
   [ (tLiteralAddress)
   | tLiteralAddress:
   @OperandPushVariable
    oOperandPushVariable
    [ (tVarParm)
    | *:
    [ (tVarParm)
    | *:
    [ (tVarParm)
    | *:
    >>
   ;OperandPushVariable
   oOperandPushCopy
   @OperandForceToStack
    [ oOperandChooseLength (two)
    | two:
    ] or >
    oEmitSingle(iPush)
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    oOperandPushMode(mStack)
    >>
   ;OperandForceToStack
   oOperandPop
   ?tVarParm (tVarParm)
   ?tParmEnd (tParmEnd)
   [ (tTrap)
   | tTrap:
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStatic)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   oOperandPushTrap
   oEmitSingle(iCall)
   oOperandPop
   oOperandPushMode(mStackReg)
   oOperandSetLength(two)
   oOperandPushMode(mManifest)
   oOperandSetLength(two)
   oOperandSetValue(four)
   oEmitDouble(iAdd)
   oOperandPop
   oOperandPop
   ] or >
   ] or >
   >>
  ;TrapStmt
  ] or >
  }
  [ (tRepeatBegin)
  | tRepeatBegin:
  @RepeatStmt
   oFixPushAddress
   oEmitMergeSourceCoordinate
   @Statements
    @Block
     [ (tReadBegin)
     | tReadBegin:
     @ReadProc
      oEmitSourceCoordinate
      [ (tTrapBegin)
      | *:
      @ReadParameter
       ?tTrapBegin (tTrapBegin)
       ?tLiteralAddress (tLiteralAddress)
       @OperandPushVariable
        oOperandPushVariable
        [ (tVarParm)
        | *:
        [ (tVarParm)
        | *:
        [ (tVarParm)
        | *:
        >>
       ;OperandPushVariable
       @OperandForceToStack
        [ oOperandChooseLength (two)
        | two:
        ] or >
        oEmitSingle(iPush)
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        oOperandPushMode(mStack)
        >>
       ;OperandForceToStack
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStack)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       ?tVarParm (tVarParm)
       ?tParmEnd (tParmEnd)
       ?tLiteralAddress (tLiteralAddress)
       @OperandPushVariable
        oOperandPushVariable
        [ (tVarParm)
        | *:
        [ (tVarParm)
        | *:
        [ (tVarParm)
        | *:
        >>
       ;OperandPushVariable
       @OperandForceAddressIntoTemp
        [ oOperandChooseMode (mStatic)
        | mStatic:
        @OperandPushTempWord
         oTempAllocate
         oOperandPushTemp
         oOperandSetValue(zero)
         oOperandSetLength(two)
         >>
        ;OperandPushTempWord
        oOperandSwap
        oEmitDouble(iLoada)
        oOperandPop
        ] or >
        oOperandSetLength(two)
        >>
       ;OperandForceAddressIntoTemp
       @OperandForceToStack
        [ oOperandChooseLength (two)
        | two:
        ] or >
        oEmitSingle(iPush)
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mTemp)
         | mTemp:
         oTempFree
         ] or >
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        oOperandPushMode(mStack)
        >>
       ;OperandForceToStack
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStack)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       ?tVarParm (tVarParm)
       ?tParmEnd (tParmEnd)
       oOperandPushMode(mManifest)
       oOperandSetLength(two)
       oOperandSetValue(eight)
       [ (tTrap)
       | tTrap:
       ] or >
       oOperandPushTrap
       oEmitSingle(iCall)
       oOperandPop
       oOperandPushMode(mStackReg)
       oOperandSetLength(two)
       oOperandSwap
       oEmitDouble(iAdd)
       oOperandPop
       oOperandPop
       >>
      ;ReadParameter
      }
      [ (tReadEnd)
      | tReadEnd:
      ] or >
      >>
     ;ReadProc
     ] or >
     }
     [ (tIfBegin)
     | tIfBegin:
     @IfStmt
      oEmitSourceCoordinate
      @OperandPushBooleanControlExpression
       @OperandPushExpression
        [ (tLiteralAddress)
        | tLiteralAddress:
        @OperandPushVariable
         oOperandPushVariable
         [ (tFetchInteger)
         | *:
         [ (tFetchInteger)
         | *:
         [ (tFetchInteger)
         | tFetchInteger:
         ] or >
         >>
        ;OperandPushVariable
        ] or >
        }
        [ (tLiteralInteger)
        | tLiteralInteger:
        oOperandPushInteger
        ] or >
        }
        [ (tNE)
        | tNE:
        @OperandEqualPop
         [ oOperandCompareLeftAndRight (no)
         | no:
         [ oOperandChooseManifestValue (zero)
         | zero:
         oOperandPop
         @EmitTst
          [ oOperandChooseLength (two)
          | two:
          oOperandPushMode(mManifest)
          oOperandSetValue(zero)
          oOperandSetLength(two)
          ] or >
          @EmitCmp
           oOperandSwap
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandSwap
           @OperandLeftOrRightIsTemp
            [ oOperandChooseMode (mManifest)
            | *:
            oOperandSwap
            [ oOperandChooseMode (mStatic)
            | *:
            oOperandSwap
            >>no
           ;OperandLeftOrRightIsTemp
           [@OperandLeftOrRightIsTemp (no)
           | *:
           [ oOperandChooseMode (mManifest)
           | mManifest:
           oEmitDouble(iCmp)
           ] or >
           >>
          ;EmitCmp
          oOperandPop
          >>
         ;EmitTst
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStatic)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         oOperandPushJumpCondition(iJeq)
         ] or >
         ] or >
         >>
        ;OperandEqualPop
        @OperandNot
         @OperandForceToJumpCondition
          [ oOperandIsJumpCondition (yes)
          | yes:
          ] or >
          >>
         ;OperandForceToJumpCondition
         @OperandComplementJumpCondition
          [ oOperandChooseJumpCondition (iJeq)
          | *:
          oOperandComplementJumpCondition
          >>
         ;OperandComplementJumpCondition
         >>
        ;OperandNot
        ] or >
        }
        [ (tIfThen)
        | *:
        ] or >
        >>
       ;OperandPushExpression
       @OperandForceToJumpCondition
        [ oOperandIsJumpCondition (yes)
        | yes:
        ] or >
        >>
       ;OperandForceToJumpCondition
       >>
      ;OperandPushBooleanControlExpression
      ?tIfThen (tIfThen)
      [ oOperandChooseJumpCondition (iJne)
      | *:
      @OperandComplementJumpCondition
       [ oOperandChooseJumpCondition (iJne)
       | *:
       oOperandComplementJumpCondition
       >>
      ;OperandComplementJumpCondition
      @OperandInfixOr
       @OperandForceToJumpCondition
        [ oOperandIsJumpCondition (yes)
        | yes:
        ] or >
        >>
       ;OperandForceToJumpCondition
       [ oOperandChooseJumpCondition (iJeq)
       | *:
       oEmitConditionalForwardBranch
       oFixAndFreeFalseBranches
       oFixPushLastAddress
       oOperandMergeShuntsWithAddress
       oFixPopAddress
       >>
      ;OperandInfixOr
      @Statements
       @Block
        [ (tCallBegin)
        | tCallBegin:
        @CallStmt
         oEmitSourceCoordinate
         oOperandPushMode(mManifest)
         oOperandSetLength(two)
         oOperandSetValue(zero)
         [ (tLiteralAddress)
         | *:
         @OperandPushExpression
          [ (tLiteralAddress)
          | tLiteralAddress:
          @OperandPushVariable
           oOperandPushVariable
           [ (tFetchInteger)
           | *:
           [ (tFetchInteger)
           | *:
           [ (tFetchInteger)
           | tFetchInteger:
           ] or >
           >>
          ;OperandPushVariable
          ] or >
          }
          [ (tParmEnd)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         @OperandConvertJumpConditionToData
          [ oOperandIsJumpCondition (no)
          | no:
          ] or >
          >>
         ;OperandConvertJumpConditionToData
         [ (tParmEnd)
         | *:
         @OperandForceToStack
          [ oOperandChooseLength (two)
          | two:
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tParmEnd (tParmEnd)
         oOperandPushMode(mManifest)
         oOperandSetLength(two)
         oOperandSetValue(four)
         oOperandAddManifestValues
         oOperandPop
         }
         [ (tCallEnd)
         | tCallEnd:
         ] or >
         oOperandPushProcedure
         oOperandSetMode(mProc)
         oEmitSingle(iCall)
         oOperandPop
         oOperandPushMode(mStackReg)
         oOperandSetLength(two)
         oOperandSwap
         oEmitDouble(iAdd)
         oOperandPop
         oOperandPop
         oEmitMergeSourceCoordinate
         >>
        ;CallStmt
        ] or >
        }
        [ (tIfEnd)
        | *:
        ] or >
        >>
       ;Block
       >>
      ;Statements
      [ (tIfEnd)
      | tIfEnd:
      oFixAndFreeShuntList
      oOperandPop
      oEmitMergeSourceCoordinate
      ] or >
      >>
     ;IfStmt
     ] or >
     }
     [ (tRepeatControl)
     | *:
     ] or >
     >>
    ;Block
    >>
   ;Statements
   ?tRepeatControl (tRepeatControl)
   @OperandPushBooleanControlExpression
    @OperandPushExpression
     [ (tLiteralAddress)
     | tLiteralAddress:
     @OperandPushVariable
      oOperandPushVariable
      [ (tFetchInteger)
      | *:
      [ (tFetchInteger)
      | *:
      [ (tFetchInteger)
      | tFetchInteger:
      ] or >
      >>
     ;OperandPushVariable
     ] or >
     }
     [ (tLiteralInteger)
     | tLiteralInteger:
     oOperandPushInteger
     ] or >
     }
     [ (tNE)
     | tNE:
     @OperandEqualPop
      [ oOperandCompareLeftAndRight (no)
      | no:
      [ oOperandChooseManifestValue (zero)
      | zero:
      oOperandPop
      @EmitTst
       [ oOperandChooseLength (two)
       | two:
       oOperandPushMode(mManifest)
       oOperandSetValue(zero)
       oOperandSetLength(two)
       ] or >
       @EmitCmp
        oOperandSwap
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandSwap
        @OperandLeftOrRightIsTemp
         [ oOperandChooseMode (mManifest)
         | *:
         oOperandSwap
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandSwap
         >>no
        ;OperandLeftOrRightIsTemp
        [@OperandLeftOrRightIsTemp (no)
        | *:
        [ oOperandChooseMode (mManifest)
        | mManifest:
        oEmitDouble(iCmp)
        ] or >
        >>
       ;EmitCmp
       oOperandPop
       >>
      ;EmitTst
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushJumpCondition(iJeq)
      ] or >
      ] or >
      >>
     ;OperandEqualPop
     @OperandNot
      @OperandForceToJumpCondition
       [ oOperandIsJumpCondition (yes)
       | yes:
       ] or >
       >>
      ;OperandForceToJumpCondition
      @OperandComplementJumpCondition
       [ oOperandChooseJumpCondition (iJeq)
       | *:
       oOperandComplementJumpCondition
       >>
      ;OperandComplementJumpCondition
      >>
     ;OperandNot
     ] or >
     }
     [ (tNot)
     | tNot:
     @OperandNot
      @OperandForceToJumpCondition
       [ oOperandIsJumpCondition (yes)
       | yes:
       ] or >
       >>
      ;OperandForceToJumpCondition
      @OperandComplementJumpCondition
       [ oOperandChooseJumpCondition (iJne)
       | *:
       oOperandComplementJumpCondition
       >>
      ;OperandComplementJumpCondition
      >>
     ;OperandNot
     ] or >
     }
     [ (tRepeatTest)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    @OperandForceToJumpCondition
     [ oOperandIsJumpCondition (yes)
     | yes:
     ] or >
     >>
    ;OperandForceToJumpCondition
    >>
   ;OperandPushBooleanControlExpression
   ?tRepeatTest (tRepeatTest)
   [ oOperandChooseJumpCondition (iJeq)
   | *:
   @OperandInfixOr
    @OperandForceToJumpCondition
     [ oOperandIsJumpCondition (yes)
     | yes:
     ] or >
     >>
    ;OperandForceToJumpCondition
    [ oOperandChooseJumpCondition (iJeq)
    | *:
    oEmitConditionalForwardBranch
    oFixAndFreeFalseBranches
    oFixPushLastAddress
    oOperandMergeShuntsWithAddress
    oFixPopAddress
    >>
   ;OperandInfixOr
   oEmitUnconditionalBackwardBranch
   oFixPopAddress
   oFixAndFreeShuntList
   oOperandPop
   >>
  ;RepeatStmt
  ] or >
  }
  [ (tCallBegin)
  | tCallBegin:
  @CallStmt
   oEmitSourceCoordinate
   oOperandPushMode(mManifest)
   oOperandSetLength(two)
   oOperandSetValue(zero)
   [ (tCallEnd)
   | tCallEnd:
   ] or >
   oOperandPushProcedure
   oOperandSetMode(mProc)
   oEmitSingle(iCall)
   oOperandPop
   oOperandPushMode(mStackReg)
   oOperandSetLength(two)
   oOperandSwap
   oEmitDouble(iAdd)
   oOperandPop
   oOperandPop
   oEmitMergeSourceCoordinate
   >>
  ;CallStmt
  ] or >
  }
  [ (tTrapBegin)
  | tTrapBegin:
  @TrapStmt
   oEmitSourceCoordinate
   [ (tTrap)
   | *:
   ?tTrap (tTrap)
   oOperandPushTrap
   oEmitSingle(iCall)
   oOperandPop
   >>
  ;TrapStmt
  ] or >
  }
  [ (tEndOfFile)
  | *:
  ] or >
  >>
 ;Block
 @EmitProgramEpilogue
  oEmitNone(iLeave)
  oEmitNone(iReturn)
  >>
 ;EmitProgramEpilogue
 >>
;Program
