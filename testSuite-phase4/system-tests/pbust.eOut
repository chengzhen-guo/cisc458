@Program
 @EmitProgramPrologue
  oEmitNone(iData)
  oOperandPushMode(mWord)
  oOperandSetLength(two)
  oOperandEnterValueFromDataAreaSize
  oOperandPushMode(mGlobalBase)
  oEmitDouble(iSpace)
  oOperandPop
  oOperandPop
  oEmitProcLabel(mLineNum)
  oOperandPushMode(mWord)
  oOperandSetLength(two)
  oOperandSetValue(zero)
  oEmitSingle(iWord)
  oOperandPop
  oEmitNone(iText)
  oOperandPushMode(mMainProc)
  oEmitSingle(iGlobl)
  oEmitProcLabel(mMainProc)
  oOperandPop
  oEmitNone(iEnter)
  >>
 ;EmitProgramPrologue
 @Block
  [ (tFileDescriptor)
  | tFileDescriptor:
  ?tLiteralInteger (tLiteralInteger)
  oOperandPushInteger
  ?tFileBind (tFileBind)
  ?tLiteralAddress (tLiteralAddress)
  oOperandPushVariable
  ?tStoreInteger (tStoreInteger)
  oOperandSwap
  @OperandAssignIntegerPopPop
   [ oOperandCompareLeftAndRight (no)
   | no:
   @EmitMove
    @OperandLeftOrRightIsTemp
     [ oOperandChooseMode (mManifest)
     | *:
     oOperandSwap
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandSwap
     >>no
    ;OperandLeftOrRightIsTemp
    [@OperandLeftOrRightIsTemp (no)
    | *:
    [ oOperandChooseMode (mManifest)
    | mManifest:
    oEmitDouble(iMov)
    ] or >
    >>
   ;EmitMove
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mManifest)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStatic)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   ] or >
   >>
  ;OperandAssignIntegerPopPop
  ] or >
  }
  [ (tFileDescriptor)
  | tFileDescriptor:
  ?tLiteralInteger (tLiteralInteger)
  oOperandPushInteger
  ?tFileBind (tFileBind)
  ?tLiteralAddress (tLiteralAddress)
  oOperandPushVariable
  ?tStoreInteger (tStoreInteger)
  oOperandSwap
  @OperandAssignIntegerPopPop
   [ oOperandCompareLeftAndRight (no)
   | no:
   @EmitMove
    @OperandLeftOrRightIsTemp
     [ oOperandChooseMode (mManifest)
     | *:
     oOperandSwap
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandSwap
     >>no
    ;OperandLeftOrRightIsTemp
    [@OperandLeftOrRightIsTemp (no)
    | *:
    [ oOperandChooseMode (mManifest)
    | mManifest:
    oEmitDouble(iMov)
    ] or >
    >>
   ;EmitMove
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mManifest)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStatic)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   ] or >
   >>
  ;OperandAssignIntegerPopPop
  ] or >
  }
  [ (tArrayDescriptor)
  | tArrayDescriptor:
  ?tLiteralInteger (tLiteralInteger)
  oOperandPushInteger
  ?tLiteralAddress (tLiteralAddress)
  oOperandPushVariable
  ?tStoreInteger (tStoreInteger)
  oOperandSwap
  oArrayEnterLowerBound
  @OperandAssignIntegerPopPop
   [ oOperandCompareLeftAndRight (no)
   | no:
   @EmitMove
    @OperandLeftOrRightIsTemp
     [ oOperandChooseMode (mManifest)
     | *:
     oOperandSwap
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandSwap
     >>no
    ;OperandLeftOrRightIsTemp
    [@OperandLeftOrRightIsTemp (no)
    | *:
    [ oOperandChooseMode (mManifest)
    | mManifest:
    oEmitDouble(iMov)
    ] or >
    >>
   ;EmitMove
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mManifest)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStatic)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   ] or >
   >>
  ;OperandAssignIntegerPopPop
  ?tLiteralInteger (tLiteralInteger)
  oOperandPushInteger
  ?tLiteralAddress (tLiteralAddress)
  oOperandPushVariable
  ?tStoreInteger (tStoreInteger)
  oOperandSwap
  oArrayEnterUpperBound
  @OperandAssignIntegerPopPop
   [ oOperandCompareLeftAndRight (no)
   | no:
   @EmitMove
    @OperandLeftOrRightIsTemp
     [ oOperandChooseMode (mManifest)
     | *:
     oOperandSwap
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandSwap
     >>no
    ;OperandLeftOrRightIsTemp
    [@OperandLeftOrRightIsTemp (no)
    | *:
    [ oOperandChooseMode (mManifest)
    | mManifest:
    oEmitDouble(iMov)
    ] or >
    >>
   ;EmitMove
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mManifest)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStatic)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   ] or >
   >>
  ;OperandAssignIntegerPopPop
  ] or >
  }
  [ (tArrayDescriptor)
  | tArrayDescriptor:
  ?tLiteralInteger (tLiteralInteger)
  oOperandPushInteger
  ?tLiteralAddress (tLiteralAddress)
  oOperandPushVariable
  ?tStoreInteger (tStoreInteger)
  oOperandSwap
  oArrayEnterLowerBound
  @OperandAssignIntegerPopPop
   [ oOperandCompareLeftAndRight (no)
   | no:
   @EmitMove
    @OperandLeftOrRightIsTemp
     [ oOperandChooseMode (mManifest)
     | *:
     oOperandSwap
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandSwap
     >>no
    ;OperandLeftOrRightIsTemp
    [@OperandLeftOrRightIsTemp (no)
    | *:
    [ oOperandChooseMode (mManifest)
    | mManifest:
    oEmitDouble(iMov)
    ] or >
    >>
   ;EmitMove
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mManifest)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStatic)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   ] or >
   >>
  ;OperandAssignIntegerPopPop
  ?tLiteralInteger (tLiteralInteger)
  oOperandPushInteger
  ?tLiteralAddress (tLiteralAddress)
  oOperandPushVariable
  ?tStoreInteger (tStoreInteger)
  oOperandSwap
  oArrayEnterUpperBound
  @OperandAssignIntegerPopPop
   [ oOperandCompareLeftAndRight (no)
   | no:
   @EmitMove
    @OperandLeftOrRightIsTemp
     [ oOperandChooseMode (mManifest)
     | *:
     oOperandSwap
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandSwap
     >>no
    ;OperandLeftOrRightIsTemp
    [@OperandLeftOrRightIsTemp (no)
    | *:
    [ oOperandChooseMode (mManifest)
    | mManifest:
    oEmitDouble(iMov)
    ] or >
    >>
   ;EmitMove
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mManifest)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStatic)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   ] or >
   >>
  ;OperandAssignIntegerPopPop
  ] or >
  }
  [ (tSkipProc)
  | tSkipProc:
  oEmitUnconditionalForwardBranch
  oFixPushLastAddress
  @Routine
   oEmitProcLabel(mProc)
   oEmitNone(iEnter)
   [ (tParmEnd)
   | tParmEnd:
   ] or >
   @Block
    [ (tAssignBegin)
    | tAssignBegin:
    @AssignStmt
     oEmitSourceCoordinate
     ?tLiteralAddress (tLiteralAddress)
     @OperandPushVariable
      oOperandPushVariable
      [ (tLiteralInteger)
      | *:
      [ (tLiteralInteger)
      | *:
      [ (tLiteralInteger)
      | *:
      >>
     ;OperandPushVariable
     @OperandPushExpressionAssignPopPop
      [ (tLiteralInteger)
      | tLiteralInteger:
      oOperandPushInteger
      ] or >
      }
      [ (tAssignInteger)
      | tAssignInteger:
      @OperandAssignIntegerPopPop
       [ oOperandCompareLeftAndRight (no)
       | no:
       @EmitMove
        @OperandLeftOrRightIsTemp
         [ oOperandChooseMode (mManifest)
         | *:
         oOperandSwap
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandSwap
         >>no
        ;OperandLeftOrRightIsTemp
        [@OperandLeftOrRightIsTemp (no)
        | *:
        [ oOperandChooseMode (mManifest)
        | mManifest:
        oEmitDouble(iMov)
        ] or >
        >>
       ;EmitMove
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mManifest)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       ] or >
       >>
      ;OperandAssignIntegerPopPop
      ] or >
      >>
     ;OperandPushExpressionAssignPopPop
     >>
    ;AssignStmt
    ] or >
    }
    [ (tAssignBegin)
    | tAssignBegin:
    @AssignStmt
     oEmitSourceCoordinate
     ?tLiteralAddress (tLiteralAddress)
     @OperandPushVariable
      oOperandPushVariable
      [ (tLiteralInteger)
      | *:
      [ (tLiteralInteger)
      | *:
      [ (tLiteralInteger)
      | *:
      >>
     ;OperandPushVariable
     @OperandPushExpressionAssignPopPop
      [ (tLiteralInteger)
      | tLiteralInteger:
      oOperandPushInteger
      ] or >
      }
      [ (tAssignInteger)
      | tAssignInteger:
      @OperandAssignIntegerPopPop
       [ oOperandCompareLeftAndRight (no)
       | no:
       @EmitMove
        @OperandLeftOrRightIsTemp
         [ oOperandChooseMode (mManifest)
         | *:
         oOperandSwap
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandSwap
         >>no
        ;OperandLeftOrRightIsTemp
        [@OperandLeftOrRightIsTemp (no)
        | *:
        [ oOperandChooseMode (mManifest)
        | mManifest:
        oEmitDouble(iMov)
        ] or >
        >>
       ;EmitMove
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mManifest)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       ] or >
       >>
      ;OperandAssignIntegerPopPop
      ] or >
      >>
     ;OperandPushExpressionAssignPopPop
     >>
    ;AssignStmt
    ] or >
    }
    [ (tProcedureEnd)
    | *:
    ] or >
    >>
   ;Block
   ?tProcedureEnd (tProcedureEnd)
   oEmitNone(iLeave)
   oEmitNone(iReturn)
   >>
  ;Routine
  oFixForwardBranch
  oFixPopAddress
  ] or >
  }
  [ (tSkipProc)
  | tSkipProc:
  oEmitUnconditionalForwardBranch
  oFixPushLastAddress
  @Routine
   oEmitProcLabel(mProc)
   oEmitNone(iEnter)
   [ (tLiteralAddress)
   | *:
   oOperandPushMode(mArgument)
   oOperandSetValue(four)
   [ (tLiteralAddress)
   | tLiteralAddress:
   @OperandNextArgument
    oOperandSetMode(mManifest)
    oOperandPushMode(mManifest)
    oOperandSetValue(four)
    oOperandAddManifestValues
    oOperandPop
    oOperandSetMode(mArgument)
    >>
   ;OperandNextArgument
   oOperandPushCopy
   oOperandPushVariable
   oOperandSwap
   [ (tStoreInteger)
   | tStoreInteger:
   oOperandSetLength(two)
   @OperandAssignIntegerPopPop
    [ oOperandCompareLeftAndRight (no)
    | no:
    @EmitMove
     @OperandLeftOrRightIsTemp
      [ oOperandChooseMode (mArgument)
      | *:
      oOperandSwap
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandSwap
      >>no
     ;OperandLeftOrRightIsTemp
     [@OperandLeftOrRightIsTemp (no)
     | *:
     [ oOperandChooseMode (mArgument)
     | *:
     oOperandPushCopy
     @OperandForceIntoTemp
      [ oOperandChooseMode (mArgument)
      | *:
      [ oOperandChooseLength (two)
      | two:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iMov)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mArgument)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandSetMode(mTemp)
      ] or >
      >>
     ;OperandForceIntoTemp
     oOperandSwapLeftAndDest
     oEmitDouble(iMov)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mTemp)
      | mTemp:
      oTempFree
      ] or >
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandSwap
     >>
    ;EmitMove
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mArgument)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ] or >
    >>
   ;OperandAssignIntegerPopPop
   ] or >
   ] or >
   }
   [ (tLiteralAddress)
   | tLiteralAddress:
   @OperandNextArgument
    oOperandSetMode(mManifest)
    oOperandPushMode(mManifest)
    oOperandSetValue(four)
    oOperandAddManifestValues
    oOperandPop
    oOperandSetMode(mArgument)
    >>
   ;OperandNextArgument
   oOperandPushCopy
   oOperandPushVariable
   oOperandSwap
   [ (tStoreAddress)
   | tStoreAddress:
   oOperandSetLength(two)
   @OperandAssignIntegerPopPop
    [ oOperandCompareLeftAndRight (no)
    | no:
    @EmitMove
     @OperandLeftOrRightIsTemp
      [ oOperandChooseMode (mArgument)
      | *:
      oOperandSwap
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandSwap
      >>no
     ;OperandLeftOrRightIsTemp
     [@OperandLeftOrRightIsTemp (no)
     | *:
     [ oOperandChooseMode (mArgument)
     | *:
     oOperandPushCopy
     @OperandForceIntoTemp
      [ oOperandChooseMode (mArgument)
      | *:
      [ oOperandChooseLength (two)
      | two:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iMov)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mArgument)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandSetMode(mTemp)
      ] or >
      >>
     ;OperandForceIntoTemp
     oOperandSwapLeftAndDest
     oEmitDouble(iMov)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mTemp)
      | mTemp:
      oTempFree
      ] or >
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandSwap
     >>
    ;EmitMove
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mArgument)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ] or >
    >>
   ;OperandAssignIntegerPopPop
   ] or >
   ] or >
   }
   [ (tParmEnd)
   | tParmEnd:
   ] or >
   oOperandPop
   @Block
    [ (tIfBegin)
    | tIfBegin:
    @IfStmt
     oEmitSourceCoordinate
     @OperandPushBooleanControlExpression
      @OperandPushExpression
       [ (tLiteralAddress)
       | tLiteralAddress:
       @OperandPushVariable
        oOperandPushVariable
        [ (tFetchInteger)
        | *:
        [ (tFetchInteger)
        | *:
        [ (tFetchInteger)
        | tFetchInteger:
        ] or >
        >>
       ;OperandPushVariable
       ] or >
       }
       [ (tLiteralInteger)
       | tLiteralInteger:
       oOperandPushInteger
       ] or >
       }
       [ (tEQ)
       | tEQ:
       @OperandEqualPop
        [ oOperandCompareLeftAndRight (no)
        | no:
        [ oOperandChooseManifestValue ()
        | *:
        oOperandSwap
        [ oOperandChooseManifestValue ()
        | *:
        oOperandSwap
        @OperandAreLeftAndRightManifest
         [ oOperandChooseMode (mManifest)
         | mManifest:
         oOperandSwap
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandSwap
         >>no
        ;OperandAreLeftAndRightManifest
        [@OperandAreLeftAndRightManifest (no)
        | *:
        @EmitCmp
         oOperandSwap
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandSwap
         @OperandLeftOrRightIsTemp
          [ oOperandChooseMode (mManifest)
          | *:
          oOperandSwap
          [ oOperandChooseMode (mStatic)
          | *:
          oOperandSwap
          >>no
         ;OperandLeftOrRightIsTemp
         [@OperandLeftOrRightIsTemp (no)
         | *:
         [ oOperandChooseMode (mManifest)
         | mManifest:
         oEmitDouble(iCmp)
         ] or >
         >>
        ;EmitCmp
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mManifest)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        oOperandPushJumpCondition(iJeq)
        ] or >
        >>
       ;OperandEqualPop
       ] or >
       }
       [ (tIfThen)
       | *:
       ] or >
       >>
      ;OperandPushExpression
      @OperandForceToJumpCondition
       [ oOperandIsJumpCondition (yes)
       | yes:
       ] or >
       >>
      ;OperandForceToJumpCondition
      >>
     ;OperandPushBooleanControlExpression
     ?tIfThen (tIfThen)
     [ oOperandChooseJumpCondition (iJeq)
     | *:
     @OperandComplementJumpCondition
      [ oOperandChooseJumpCondition (iJeq)
      | *:
      oOperandComplementJumpCondition
      >>
     ;OperandComplementJumpCondition
     @OperandInfixOr
      @OperandForceToJumpCondition
       [ oOperandIsJumpCondition (yes)
       | yes:
       ] or >
       >>
      ;OperandForceToJumpCondition
      [ oOperandChooseJumpCondition (iJne)
      | *:
      oEmitConditionalForwardBranch
      oFixAndFreeFalseBranches
      oFixPushLastAddress
      oOperandMergeShuntsWithAddress
      oFixPopAddress
      >>
     ;OperandInfixOr
     @Statements
      @Block
       [ (tAssignBegin)
       | tAssignBegin:
       @AssignStmt
        oEmitSourceCoordinate
        ?tLiteralAddress (tLiteralAddress)
        @OperandPushVariable
         oOperandPushVariable
         [ (tLiteralInteger)
         | *:
         [ (tLiteralInteger)
         | *:
         [ (tLiteralInteger)
         | *:
         >>
        ;OperandPushVariable
        @OperandPushExpressionAssignPopPop
         [ (tLiteralInteger)
         | tLiteralInteger:
         oOperandPushInteger
         ] or >
         }
         [ (tAssignInteger)
         | tAssignInteger:
         @OperandAssignIntegerPopPop
          [ oOperandCompareLeftAndRight (no)
          | no:
          @EmitMove
           @OperandLeftOrRightIsTemp
            [ oOperandChooseMode (mManifest)
            | *:
            oOperandSwap
            [ oOperandChooseMode (mStatic)
            | *:
            oOperandSwap
            >>no
           ;OperandLeftOrRightIsTemp
           [@OperandLeftOrRightIsTemp (no)
           | *:
           [ oOperandChooseMode (mManifest)
           | mManifest:
           oEmitDouble(iMov)
           ] or >
           >>
          ;EmitMove
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mManifest)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          ] or >
          >>
         ;OperandAssignIntegerPopPop
         ] or >
         >>
        ;OperandPushExpressionAssignPopPop
        >>
       ;AssignStmt
       ] or >
       }
       [ (tIfMerge)
       | *:
       ] or >
       >>
      ;Block
      >>
     ;Statements
     [ (tIfMerge)
     | tIfMerge:
     oEmitUnconditionalForwardBranch
     oFixAndFreeShuntList
     oOperandPop
     oFixPushLastAddress
     oEmitMergeSourceCoordinate
     @Statements
      @Block
       [ (tAssignBegin)
       | tAssignBegin:
       @AssignStmt
        oEmitSourceCoordinate
        ?tLiteralAddress (tLiteralAddress)
        @OperandPushVariable
         oOperandPushVariable
         [ (tLiteralInteger)
         | *:
         [ (tLiteralInteger)
         | *:
         [ (tLiteralInteger)
         | *:
         >>
        ;OperandPushVariable
        @OperandPushExpressionAssignPopPop
         [ (tLiteralInteger)
         | tLiteralInteger:
         oOperandPushInteger
         ] or >
         }
         [ (tAssignInteger)
         | tAssignInteger:
         @OperandAssignIntegerPopPop
          [ oOperandCompareLeftAndRight (no)
          | no:
          @EmitMove
           @OperandLeftOrRightIsTemp
            [ oOperandChooseMode (mManifest)
            | *:
            oOperandSwap
            [ oOperandChooseMode (mStatic)
            | *:
            oOperandSwap
            >>no
           ;OperandLeftOrRightIsTemp
           [@OperandLeftOrRightIsTemp (no)
           | *:
           [ oOperandChooseMode (mManifest)
           | mManifest:
           oEmitDouble(iMov)
           ] or >
           >>
          ;EmitMove
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mManifest)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          ] or >
          >>
         ;OperandAssignIntegerPopPop
         ] or >
         >>
        ;OperandPushExpressionAssignPopPop
        >>
       ;AssignStmt
       ] or >
       }
       [ (tIfEnd)
       | *:
       ] or >
       >>
      ;Block
      >>
     ;Statements
     oFixForwardBranch
     oFixPopAddress
     ?tIfEnd (tIfEnd)
     ] or >
     >>
    ;IfStmt
    ] or >
    }
    [ (tAssignBegin)
    | tAssignBegin:
    @AssignStmt
     oEmitSourceCoordinate
     ?tLiteralAddress (tLiteralAddress)
     @OperandPushVariable
      oOperandPushVariable
      [ (tLiteralAddress)
      | *:
      [ (tLiteralAddress)
      | *:
      [ (tLiteralAddress)
      | *:
      >>
     ;OperandPushVariable
     @OperandPushExpressionAssignPopPop
      [ (tLiteralAddress)
      | tLiteralAddress:
      @OperandPushVariable
       oOperandPushVariable
       [ (tFetchInteger)
       | *:
       [ (tFetchInteger)
       | *:
       [ (tFetchInteger)
       | tFetchInteger:
       ] or >
       >>
      ;OperandPushVariable
      ] or >
      }
      [ (tLiteralAddress)
      | tLiteralAddress:
      @OperandPushVariable
       oOperandPushVariable
       [ (tFetchInteger)
       | *:
       [ (tFetchInteger)
       | *:
       [ (tFetchInteger)
       | tFetchInteger:
       ] or >
       >>
      ;OperandPushVariable
      ] or >
      }
      [ (tMultiply)
      | tMultiply:
      [ (tLiteralInteger)
      | *:
      @OperandMultiplyPop
       @OperandAreLeftAndRightManifest
        [ oOperandChooseMode (mStatic)
        | *:
        >>no
       ;OperandAreLeftAndRightManifest
       [@OperandAreLeftAndRightManifest (no)
       | no:
       [ oOperandChooseManifestValue ()
       | *:
       oOperandSwap
       [ oOperandChooseManifestValue ()
       | *:
       @OperandForceIntoTemp
        [ oOperandChooseMode (mStatic)
        | *:
        [ oOperandChooseLength (two)
        | two:
        @OperandPushTempWord
         oTempAllocate
         oOperandPushTemp
         oOperandSetValue(zero)
         oOperandSetLength(two)
         >>
        ;OperandPushTempWord
        oOperandSwap
        oEmitDouble(iMov)
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        oOperandSetMode(mTemp)
        ] or >
        >>
       ;OperandForceIntoTemp
       oOperandSwap
       oEmitDouble(iMul)
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       ] or >
       >>
      ;OperandMultiplyPop
      ] or >
      }
      [ (tLiteralInteger)
      | tLiteralInteger:
      oOperandPushInteger
      ] or >
      }
      [ (tModulus)
      | tModulus:
      @OperandModPop
       [ oOperandChooseManifestValue ()
       | *:
       oOperandPushMode(mRemainderReg)
       oOperandSetLength(two)
       @OperandEmitDividePopPop
        oOperandSwapRightAndDest
        oOperandSwap
        oOperandPushMode(mScratchReg1)
        oOperandSetLength(two)
        oOperandSwap
        @EmitMove
         @OperandLeftOrRightIsTemp
          [ oOperandChooseMode (mManifest)
          | *:
          oOperandSwap
          [ oOperandChooseMode (mScratchReg1)
          | *:
          oOperandSwap
          >>no
         ;OperandLeftOrRightIsTemp
         [@OperandLeftOrRightIsTemp (no)
         | *:
         [ oOperandChooseMode (mManifest)
         | mManifest:
         oEmitDouble(iMov)
         ] or >
         >>
        ;EmitMove
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mManifest)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        oOperandSwap
        oOperandPushMode(mScratchReg2)
        oOperandSetLength(two)
        oOperandSwap
        @EmitMove
         @OperandLeftOrRightIsTemp
          [ oOperandChooseMode (mTemp)
          | mTemp:
          >>yes
         ;OperandLeftOrRightIsTemp
         [@OperandLeftOrRightIsTemp (yes)
         | yes:
         oEmitDouble(iMov)
         ] or >
         >>
        ;EmitMove
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mTemp)
         | mTemp:
         oTempFree
         ] or >
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        oOperandPushMode(mResultReg)
        oOperandSetLength(two)
        @OperandForceToStack
         [ oOperandChooseLength (two)
         | two:
         ] or >
         oEmitSingle(iPush)
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mResultReg)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         oOperandPushMode(mStack)
         >>
        ;OperandForceToStack
        oOperandPop
        oOperandPushMode(mRemainderReg)
        oOperandSetLength(two)
        @OperandForceToStack
         [ oOperandChooseLength (two)
         | two:
         ] or >
         oEmitSingle(iPush)
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mRemainderReg)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         oOperandPushMode(mStack)
         >>
        ;OperandForceToStack
        oOperandPop
        oOperandPushMode(mRemainderReg)
        oOperandSetLength(two)
        oOperandSwap
        oEmitDouble(iMov)
        oOperandPop
        oOperandPushMode(mResultReg)
        oOperandSetLength(two)
        oOperandSwap
        oEmitDouble(iMov)
        oEmitSingle(iExtend)
        oOperandPop
        oOperandPop
        oEmitSingle(iDiv)
        oOperandPop
        oOperandPushMode(mScratchReg1)
        oOperandSetLength(two)
        oOperandSwap
        oEmitDouble(iMov)
        oOperandPop
        oOperandPushMode(mRemainderReg)
        oOperandSetLength(two)
        oEmitSingle(iPop)
        oOperandPop
        oOperandPushMode(mResultReg)
        oOperandSetLength(two)
        oEmitSingle(iPop)
        oOperandPop
        @OperandForceIntoTemp
         [ oOperandChooseMode (mScratchReg1)
         | *:
         [ oOperandChooseLength (two)
         | two:
         @OperandPushTempWord
          oTempAllocate
          oOperandPushTemp
          oOperandSetValue(zero)
          oOperandSetLength(two)
          >>
         ;OperandPushTempWord
         oOperandSwap
         oEmitDouble(iMov)
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mScratchReg1)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         oOperandSetMode(mTemp)
         ] or >
         >>
        ;OperandForceIntoTemp
        >>
       ;OperandEmitDividePopPop
       >>
      ;OperandModPop
      ] or >
      }
      [ (tAssignInteger)
      | tAssignInteger:
      @OperandAssignIntegerPopPop
       [ oOperandCompareLeftAndRight (no)
       | no:
       @EmitMove
        @OperandLeftOrRightIsTemp
         [ oOperandChooseMode (mTemp)
         | mTemp:
         >>yes
        ;OperandLeftOrRightIsTemp
        [@OperandLeftOrRightIsTemp (yes)
        | yes:
        oEmitDouble(iMov)
        ] or >
        >>
       ;EmitMove
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mTemp)
        | mTemp:
        oTempFree
        ] or >
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       ] or >
       >>
      ;OperandAssignIntegerPopPop
      ] or >
      >>
     ;OperandPushExpressionAssignPopPop
     >>
    ;AssignStmt
    ] or >
    }
    [ (tAssignBegin)
    | tAssignBegin:
    @AssignStmt
     oEmitSourceCoordinate
     ?tLiteralAddress (tLiteralAddress)
     @OperandPushVariable
      oOperandPushVariable
      [ (tFetchAddress)
      | tFetchAddress:
      oOperandSetMode(mStatic)
      @OperandForceIntoTemp
       [ oOperandChooseMode (mStatic)
       | *:
       [ oOperandChooseLength (two)
       | two:
       @OperandPushTempWord
        oTempAllocate
        oOperandPushTemp
        oOperandSetValue(zero)
        oOperandSetLength(two)
        >>
       ;OperandPushTempWord
       oOperandSwap
       oEmitDouble(iMov)
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandSetMode(mTemp)
       ] or >
       >>
      ;OperandForceIntoTemp
      oOperandSetMode(mTempIndirect)
      ] or >
      [ (tLiteralAddress)
      | *:
      [ (tLiteralAddress)
      | *:
      >>
     ;OperandPushVariable
     @OperandPushExpressionAssignPopPop
      [ (tLiteralAddress)
      | tLiteralAddress:
      @OperandPushVariable
       oOperandPushVariable
       [ (tFetchInteger)
       | *:
       [ (tFetchInteger)
       | *:
       [ (tFetchInteger)
       | tFetchInteger:
       ] or >
       >>
      ;OperandPushVariable
      ] or >
      }
      [ (tLiteralAddress)
      | tLiteralAddress:
      @OperandPushVariable
       oOperandPushVariable
       [ (tFetchInteger)
       | *:
       [ (tFetchInteger)
       | *:
       [ (tFetchInteger)
       | tFetchInteger:
       ] or >
       >>
      ;OperandPushVariable
      ] or >
      }
      [ (tModulus)
      | tModulus:
      @OperandModPop
       [ oOperandChooseManifestValue ()
       | *:
       oOperandPushMode(mRemainderReg)
       oOperandSetLength(two)
       @OperandEmitDividePopPop
        oOperandSwapRightAndDest
        oOperandSwap
        oOperandPushMode(mScratchReg1)
        oOperandSetLength(two)
        oOperandSwap
        @EmitMove
         @OperandLeftOrRightIsTemp
          [ oOperandChooseMode (mStatic)
          | *:
          oOperandSwap
          [ oOperandChooseMode (mScratchReg1)
          | *:
          oOperandSwap
          >>no
         ;OperandLeftOrRightIsTemp
         [@OperandLeftOrRightIsTemp (no)
         | *:
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandPushCopy
         @OperandForceIntoTemp
          [ oOperandChooseMode (mStatic)
          | *:
          [ oOperandChooseLength (two)
          | two:
          @OperandPushTempWord
           oTempAllocate
           oOperandPushTemp
           oOperandSetValue(zero)
           oOperandSetLength(two)
           >>
          ;OperandPushTempWord
          oOperandSwap
          oEmitDouble(iMov)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandSetMode(mTemp)
          ] or >
          >>
         ;OperandForceIntoTemp
         oOperandSwapLeftAndDest
         oEmitDouble(iMov)
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mTemp)
          | mTemp:
          oTempFree
          ] or >
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         oOperandSwap
         >>
        ;EmitMove
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        oOperandSwap
        oOperandPushMode(mScratchReg2)
        oOperandSetLength(two)
        oOperandSwap
        @EmitMove
         @OperandLeftOrRightIsTemp
          [ oOperandChooseMode (mStatic)
          | *:
          oOperandSwap
          [ oOperandChooseMode (mScratchReg2)
          | *:
          oOperandSwap
          >>no
         ;OperandLeftOrRightIsTemp
         [@OperandLeftOrRightIsTemp (no)
         | *:
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandPushCopy
         @OperandForceIntoTemp
          [ oOperandChooseMode (mStatic)
          | *:
          [ oOperandChooseLength (two)
          | two:
          @OperandPushTempWord
           oTempAllocate
           oOperandPushTemp
           oOperandSetValue(zero)
           oOperandSetLength(two)
           >>
          ;OperandPushTempWord
          oOperandSwap
          oEmitDouble(iMov)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandSetMode(mTemp)
          ] or >
          >>
         ;OperandForceIntoTemp
         oOperandSwapLeftAndDest
         oEmitDouble(iMov)
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mTemp)
          | mTemp:
          oTempFree
          ] or >
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         oOperandSwap
         >>
        ;EmitMove
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        oOperandPushMode(mResultReg)
        oOperandSetLength(two)
        @OperandForceToStack
         [ oOperandChooseLength (two)
         | two:
         ] or >
         oEmitSingle(iPush)
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mResultReg)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         oOperandPushMode(mStack)
         >>
        ;OperandForceToStack
        oOperandPop
        oOperandPushMode(mRemainderReg)
        oOperandSetLength(two)
        @OperandForceToStack
         [ oOperandChooseLength (two)
         | two:
         ] or >
         oEmitSingle(iPush)
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mRemainderReg)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         oOperandPushMode(mStack)
         >>
        ;OperandForceToStack
        oOperandPop
        oOperandPushMode(mRemainderReg)
        oOperandSetLength(two)
        oOperandSwap
        oEmitDouble(iMov)
        oOperandPop
        oOperandPushMode(mResultReg)
        oOperandSetLength(two)
        oOperandSwap
        oEmitDouble(iMov)
        oEmitSingle(iExtend)
        oOperandPop
        oOperandPop
        oEmitSingle(iDiv)
        oOperandPop
        oOperandPushMode(mScratchReg1)
        oOperandSetLength(two)
        oOperandSwap
        oEmitDouble(iMov)
        oOperandPop
        oOperandPushMode(mRemainderReg)
        oOperandSetLength(two)
        oEmitSingle(iPop)
        oOperandPop
        oOperandPushMode(mResultReg)
        oOperandSetLength(two)
        oEmitSingle(iPop)
        oOperandPop
        @OperandForceIntoTemp
         [ oOperandChooseMode (mScratchReg1)
         | *:
         [ oOperandChooseLength (two)
         | two:
         @OperandPushTempWord
          oTempAllocate
          oOperandPushTemp
          oOperandSetValue(zero)
          oOperandSetLength(two)
          >>
         ;OperandPushTempWord
         oOperandSwap
         oEmitDouble(iMov)
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mScratchReg1)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         oOperandSetMode(mTemp)
         ] or >
         >>
        ;OperandForceIntoTemp
        >>
       ;OperandEmitDividePopPop
       >>
      ;OperandModPop
      ] or >
      }
      [ (tLiteralInteger)
      | tLiteralInteger:
      oOperandPushInteger
      ] or >
      }
      [ (tAdd)
      | tAdd:
      [ (tAssignInteger)
      | tAssignInteger:
      @OperandAddAssignPopPopPop
       [ oOperandCompareRightAndDest (no)
       | *:
       oOperandSwap
       [ oOperandCompareRightAndDest (no)
       | *:
       oOperandSwap
       @OperandAddPop
        @OperandAreLeftAndRightManifest
         [ oOperandChooseMode (mManifest)
         | mManifest:
         oOperandSwap
         [ oOperandChooseMode (mTemp)
         | *:
         oOperandSwap
         >>no
        ;OperandAreLeftAndRightManifest
        [@OperandAreLeftAndRightManifest (no)
        | no:
        [ oOperandChooseManifestValue (one)
        | one:
        oOperandPop
        @OperandForceIntoTemp
         [ oOperandChooseMode (mTemp)
         | mTemp:
         ] or >
         >>
        ;OperandForceIntoTemp
        oEmitSingle(iInc)
        ] or >
        ] or >
        >>
       ;OperandAddPop
       @OperandAssignIntegerPopPop
        [ oOperandCompareLeftAndRight (no)
        | no:
        @EmitMove
         @OperandLeftOrRightIsTemp
          [ oOperandChooseMode (mTemp)
          | mTemp:
          >>yes
         ;OperandLeftOrRightIsTemp
         [@OperandLeftOrRightIsTemp (yes)
         | yes:
         oEmitDouble(iMov)
         ] or >
         >>
        ;EmitMove
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mTemp)
         | mTemp:
         oTempFree
         ] or >
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mTempIndirect)
         | mTempIndirect:
         oTempFree
         ] or >
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        ] or >
        >>
       ;OperandAssignIntegerPopPop
       >>
      ;OperandAddAssignPopPopPop
      ] or >
      >>
     ;OperandPushExpressionAssignPopPop
     >>
    ;AssignStmt
    ] or >
    }
    [ (tProcedureEnd)
    | *:
    ] or >
    >>
   ;Block
   ?tProcedureEnd (tProcedureEnd)
   oEmitNone(iLeave)
   oEmitNone(iReturn)
   >>
  ;Routine
  oFixForwardBranch
  oFixPopAddress
  ] or >
  }
  [ (tCallBegin)
  | tCallBegin:
  @CallStmt
   oEmitSourceCoordinate
   oOperandPushMode(mManifest)
   oOperandSetLength(two)
   oOperandSetValue(zero)
   [ (tCallEnd)
   | tCallEnd:
   ] or >
   oOperandPushProcedure
   oOperandSetMode(mProc)
   oEmitSingle(iCall)
   oOperandPop
   oOperandPushMode(mStackReg)
   oOperandSetLength(two)
   oOperandSwap
   oEmitDouble(iAdd)
   oOperandPop
   oOperandPop
   oEmitMergeSourceCoordinate
   >>
  ;CallStmt
  ] or >
  }
  [ (tArrayDescriptor)
  | tArrayDescriptor:
  ?tLiteralInteger (tLiteralInteger)
  oOperandPushInteger
  ?tLiteralAddress (tLiteralAddress)
  oOperandPushVariable
  ?tStoreInteger (tStoreInteger)
  oOperandSwap
  oArrayEnterLowerBound
  @OperandAssignIntegerPopPop
   [ oOperandCompareLeftAndRight (no)
   | no:
   @EmitMove
    @OperandLeftOrRightIsTemp
     [ oOperandChooseMode (mManifest)
     | *:
     oOperandSwap
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandSwap
     >>no
    ;OperandLeftOrRightIsTemp
    [@OperandLeftOrRightIsTemp (no)
    | *:
    [ oOperandChooseMode (mManifest)
    | mManifest:
    oEmitDouble(iMov)
    ] or >
    >>
   ;EmitMove
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mManifest)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStatic)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   ] or >
   >>
  ;OperandAssignIntegerPopPop
  ?tLiteralInteger (tLiteralInteger)
  oOperandPushInteger
  ?tLiteralAddress (tLiteralAddress)
  oOperandPushVariable
  ?tStoreInteger (tStoreInteger)
  oOperandSwap
  oArrayEnterUpperBound
  @OperandAssignIntegerPopPop
   [ oOperandCompareLeftAndRight (no)
   | no:
   @EmitMove
    @OperandLeftOrRightIsTemp
     [ oOperandChooseMode (mManifest)
     | *:
     oOperandSwap
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandSwap
     >>no
    ;OperandLeftOrRightIsTemp
    [@OperandLeftOrRightIsTemp (no)
    | *:
    [ oOperandChooseMode (mManifest)
    | mManifest:
    oEmitDouble(iMov)
    ] or >
    >>
   ;EmitMove
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mManifest)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStatic)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   ] or >
   >>
  ;OperandAssignIntegerPopPop
  ] or >
  }
  [ (tSkipProc)
  | tSkipProc:
  oEmitUnconditionalForwardBranch
  oFixPushLastAddress
  @Routine
   oEmitProcLabel(mProc)
   oEmitNone(iEnter)
   [ (tParmEnd)
   | tParmEnd:
   ] or >
   @Block
    [ (tArrayDescriptor)
    | tArrayDescriptor:
    ?tLiteralInteger (tLiteralInteger)
    oOperandPushInteger
    ?tLiteralAddress (tLiteralAddress)
    oOperandPushVariable
    ?tStoreInteger (tStoreInteger)
    oOperandSwap
    oArrayEnterLowerBound
    @OperandAssignIntegerPopPop
     [ oOperandCompareLeftAndRight (no)
     | no:
     @EmitMove
      @OperandLeftOrRightIsTemp
       [ oOperandChooseMode (mManifest)
       | *:
       oOperandSwap
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandSwap
       >>no
      ;OperandLeftOrRightIsTemp
      [@OperandLeftOrRightIsTemp (no)
      | *:
      [ oOperandChooseMode (mManifest)
      | mManifest:
      oEmitDouble(iMov)
      ] or >
      >>
     ;EmitMove
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mManifest)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     ] or >
     >>
    ;OperandAssignIntegerPopPop
    ?tLiteralInteger (tLiteralInteger)
    oOperandPushInteger
    ?tLiteralAddress (tLiteralAddress)
    oOperandPushVariable
    ?tStoreInteger (tStoreInteger)
    oOperandSwap
    oArrayEnterUpperBound
    @OperandAssignIntegerPopPop
     [ oOperandCompareLeftAndRight (no)
     | no:
     @EmitMove
      @OperandLeftOrRightIsTemp
       [ oOperandChooseMode (mManifest)
       | *:
       oOperandSwap
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandSwap
       >>no
      ;OperandLeftOrRightIsTemp
      [@OperandLeftOrRightIsTemp (no)
      | *:
      [ oOperandChooseMode (mManifest)
      | mManifest:
      oEmitDouble(iMov)
      ] or >
      >>
     ;EmitMove
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mManifest)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     ] or >
     >>
    ;OperandAssignIntegerPopPop
    ] or >
    }
    [ (tInitialValue)
    | tInitialValue:
    @OperandPushExpression
     [ (tLiteralInteger)
     | tLiteralInteger:
     oOperandPushInteger
     ] or >
     }
     [ (tInitEnd)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    ?tInitEnd (tInitEnd)
    ?tLiteralAddress (tLiteralAddress)
    oOperandPushVariable
    oOperandSwap
    [ (tStoreInteger)
    | tStoreInteger:
    oOperandSetLength(two)
    @OperandAssignIntegerPopPop
     [ oOperandCompareLeftAndRight (no)
     | no:
     @EmitMove
      @OperandLeftOrRightIsTemp
       [ oOperandChooseMode (mManifest)
       | *:
       oOperandSwap
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandSwap
       >>no
      ;OperandLeftOrRightIsTemp
      [@OperandLeftOrRightIsTemp (no)
      | *:
      [ oOperandChooseMode (mManifest)
      | mManifest:
      oEmitDouble(iMov)
      ] or >
      >>
     ;EmitMove
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mManifest)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     ] or >
     >>
    ;OperandAssignIntegerPopPop
    ] or >
    ] or >
    }
    [ (tRepeatBegin)
    | tRepeatBegin:
    @RepeatStmt
     oFixPushAddress
     oEmitMergeSourceCoordinate
     @Statements
      @Block
       [ (tAssignBegin)
       | tAssignBegin:
       @AssignStmt
        oEmitSourceCoordinate
        ?tLiteralAddress (tLiteralAddress)
        @OperandPushVariable
         oOperandPushVariable
         [ (tSubscriptBegin)
         | *:
         [ (tSubscriptBegin)
         | tSubscriptBegin:
         @OperandPushExpression
          [ (tLiteralAddress)
          | tLiteralAddress:
          @OperandPushVariable
           oOperandPushVariable
           [ (tFetchInteger)
           | *:
           [ (tFetchInteger)
           | *:
           [ (tFetchInteger)
           | tFetchInteger:
           ] or >
           >>
          ;OperandPushVariable
          ] or >
          }
          [ (tSubscriptInteger)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         [ (tSubscriptInteger)
         | tSubscriptInteger:
         @OperandSubscriptIntegerPop
          [ oOperandChooseMode (mStatic)
          | *:
          @OperandSubscriptNonManifestIntegerPop
           [ oOptionTestChecking (yes)
           | yes:
           @OperandCheckedSubscriptNonManifestIntegerPop
            @OperandForceIntoTemp
             [ oOperandChooseMode (mStatic)
             | *:
             [ oOperandChooseLength (two)
             | two:
             @OperandPushTempWord
              oTempAllocate
              oOperandPushTemp
              oOperandSetValue(zero)
              oOperandSetLength(two)
              >>
             ;OperandPushTempWord
             oOperandSwap
             oEmitDouble(iMov)
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mStatic)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandSetMode(mTemp)
             ] or >
             >>
            ;OperandForceIntoTemp
            [ oOptionTestChecking (yes)
            | yes:
            @EmitSubscriptRangeCheck
             oOperandSwap
             @OperandPushArrayUpperBound
              [ oOperandChooseMode (mStatic)
              | mStatic:
              oOperandPushArrayUpperBound
              ] or >
              >>
             ;OperandPushArrayUpperBound
             oOperandSwapLeftAndDest
             @EmitCmp
              oOperandSwap
              [ oOperandChooseMode (mTemp)
              | *:
              oOperandSwap
              @OperandLeftOrRightIsTemp
               [ oOperandChooseMode (mManifest)
               | *:
               oOperandSwap
               [ oOperandChooseMode (mTemp)
               | mTemp:
               oOperandSwap
               >>yes
              ;OperandLeftOrRightIsTemp
              [@OperandLeftOrRightIsTemp (yes)
              | yes:
              oEmitDouble(iCmp)
              ] or >
              >>
             ;EmitCmp
             oOperandPushJumpCondition(iJgt)
             oEmitConditionalForwardBranch
             oFixPushLastAddress
             oOperandPop
             oOperandPop
             oOperandSwap
             @OperandPushArrayLowerBound
              [ oOperandChooseMode (mStatic)
              | mStatic:
              oOperandPushArrayLowerBound
              ] or >
              >>
             ;OperandPushArrayLowerBound
             oOperandSwapLeftAndDest
             @EmitCmp
              oOperandSwap
              [ oOperandChooseMode (mTemp)
              | *:
              oOperandSwap
              @OperandLeftOrRightIsTemp
               [ oOperandChooseMode (mManifest)
               | *:
               oOperandSwap
               [ oOperandChooseMode (mTemp)
               | mTemp:
               oOperandSwap
               >>yes
              ;OperandLeftOrRightIsTemp
              [@OperandLeftOrRightIsTemp (yes)
              | yes:
              oEmitDouble(iCmp)
              ] or >
              >>
             ;EmitCmp
             oOperandPushJumpCondition(iJge)
             oEmitConditionalForwardBranch
             oFixPushLastAddress
             oOperandPop
             oOperandPop
             oFixSwapAddresses
             oFixForwardBranch
             oFixPopAddress
             @EmitSubscriptAbort
              oOperandPushMode(mLineNum)
              oOperandSetLength(two)
              oEmitSingle(iPush)
              oOperandPop
              oOperandPushMode(mTrap)
              oOperandSetValue(trSubscriptAbort)
              oEmitSingle(iCall)
              oOperandPop
              >>
             ;EmitSubscriptAbort
             oFixForwardBranch
             oFixPopAddress
             >>
            ;EmitSubscriptRangeCheck
            ] or >
            oOperandSwap
            @OperandPushArrayLowerBound
             [ oOperandChooseMode (mStatic)
             | mStatic:
             oOperandPushArrayLowerBound
             ] or >
             >>
            ;OperandPushArrayLowerBound
            oOperandSwapLeftAndDest
            @OperandSubtractPop
             @OperandAreLeftAndRightManifest
              [ oOperandChooseMode (mManifest)
              | mManifest:
              oOperandSwap
              [ oOperandChooseMode (mTemp)
              | *:
              oOperandSwap
              >>no
             ;OperandAreLeftAndRightManifest
             [@OperandAreLeftAndRightManifest (no)
             | no:
             [ oOperandChooseManifestValue (one)
             | one:
             oOperandPop
             @OperandForceIntoTemp
              [ oOperandChooseMode (mTemp)
              | mTemp:
              ] or >
              >>
             ;OperandForceIntoTemp
             oEmitSingle(iDec)
             ] or >
             ] or >
             >>
            ;OperandSubtractPop
            oOperandPushMode(mManifest)
            oOperandSetLength(two)
            oOperandSetValue(two)
            oEmitDouble(iShl)
            oOperandPop
            oOperandSwap
            [ oOperandChooseMode (mStatic)
            | mStatic:
            oOperandPushMode(mManifest)
            oOperandSetLength(two)
            oOperandSetValue(eight)
            oOperandAddManifestValues
            oOperandPop
            @OperandForceAddressIntoTemp
             [ oOperandChooseMode (mStatic)
             | mStatic:
             @OperandPushTempWord
              oTempAllocate
              oOperandPushTemp
              oOperandSetValue(zero)
              oOperandSetLength(two)
              >>
             ;OperandPushTempWord
             oOperandSwap
             oEmitDouble(iLoada)
             oOperandPop
             ] or >
             oOperandSetLength(two)
             >>
            ;OperandForceAddressIntoTemp
            oEmitDouble(iAdd)
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mTemp)
             | mTemp:
             oTempFree
             ] or >
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            ] or >
            oOperandSetMode(mTempIndirect)
            oOperandSetLength(two)
            >>
           ;OperandCheckedSubscriptNonManifestIntegerPop
           ] or >
           >>
          ;OperandSubscriptNonManifestIntegerPop
          oOperandSetLength(two)
          >>
         ;OperandSubscriptIntegerPop
         ] or >
         ] or >
         [ (tLiteralInteger)
         | *:
         >>
        ;OperandPushVariable
        @OperandPushExpressionAssignPopPop
         [ (tLiteralInteger)
         | tLiteralInteger:
         oOperandPushInteger
         ] or >
         }
         [ (tAssignInteger)
         | tAssignInteger:
         @OperandAssignIntegerPopPop
          [ oOperandCompareLeftAndRight (no)
          | no:
          @EmitMove
           @OperandLeftOrRightIsTemp
            [ oOperandChooseMode (mManifest)
            | *:
            oOperandSwap
            [ oOperandChooseMode (mTempIndirect)
            | *:
            oOperandSwap
            >>no
           ;OperandLeftOrRightIsTemp
           [@OperandLeftOrRightIsTemp (no)
           | *:
           [ oOperandChooseMode (mManifest)
           | mManifest:
           oEmitDouble(iMov)
           ] or >
           >>
          ;EmitMove
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mManifest)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mTempIndirect)
           | mTempIndirect:
           oTempFree
           ] or >
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          ] or >
          >>
         ;OperandAssignIntegerPopPop
         ] or >
         >>
        ;OperandPushExpressionAssignPopPop
        >>
       ;AssignStmt
       ] or >
       }
       [ (tAssignBegin)
       | tAssignBegin:
       @AssignStmt
        oEmitSourceCoordinate
        ?tLiteralAddress (tLiteralAddress)
        @OperandPushVariable
         oOperandPushVariable
         [ (tLiteralAddress)
         | *:
         [ (tLiteralAddress)
         | *:
         [ (tLiteralAddress)
         | *:
         >>
        ;OperandPushVariable
        @OperandPushExpressionAssignPopPop
         [ (tLiteralAddress)
         | tLiteralAddress:
         @OperandPushVariable
          oOperandPushVariable
          [ (tFetchInteger)
          | *:
          [ (tFetchInteger)
          | *:
          [ (tFetchInteger)
          | tFetchInteger:
          ] or >
          >>
         ;OperandPushVariable
         ] or >
         }
         [ (tLiteralInteger)
         | tLiteralInteger:
         oOperandPushInteger
         ] or >
         }
         [ (tAdd)
         | tAdd:
         [ (tAssignInteger)
         | tAssignInteger:
         @OperandAddAssignPopPopPop
          [ oOperandCompareRightAndDest (no)
          | *:
          oOperandSwap
          [ oOperandCompareRightAndDest (yes)
          | yes:
          oOperandPop
          @OperandAddRightToLeftPop
           [ oOperandChooseManifestValue (one)
           | one:
           oOperandPop
           oEmitSingle(iInc)
           ] or >
           >>
          ;OperandAddRightToLeftPop
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          ] or >
          >>
         ;OperandAddAssignPopPopPop
         ] or >
         >>
        ;OperandPushExpressionAssignPopPop
        >>
       ;AssignStmt
       ] or >
       }
       [ (tRepeatControl)
       | *:
       ] or >
       >>
      ;Block
      >>
     ;Statements
     ?tRepeatControl (tRepeatControl)
     @OperandPushBooleanControlExpression
      @OperandPushExpression
       [ (tLiteralAddress)
       | tLiteralAddress:
       @OperandPushVariable
        oOperandPushVariable
        [ (tFetchInteger)
        | *:
        [ (tFetchInteger)
        | *:
        [ (tFetchInteger)
        | tFetchInteger:
        ] or >
        >>
       ;OperandPushVariable
       ] or >
       }
       [ (tLiteralInteger)
       | tLiteralInteger:
       oOperandPushInteger
       ] or >
       }
       [ (tLE)
       | tLE:
       @OperandGreaterPop
        [ oOperandCompareLeftAndRight (no)
        | no:
        [ oOperandChooseManifestValue (trSubscriptAbort)
        | *:
        oOperandSwap
        [ oOperandChooseManifestValue ()
        | *:
        oOperandSwap
        @EmitCmp
         oOperandSwap
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandSwap
         @OperandLeftOrRightIsTemp
          [ oOperandChooseMode (mManifest)
          | *:
          oOperandSwap
          [ oOperandChooseMode (mStatic)
          | *:
          oOperandSwap
          >>no
         ;OperandLeftOrRightIsTemp
         [@OperandLeftOrRightIsTemp (no)
         | *:
         [ oOperandChooseMode (mManifest)
         | mManifest:
         oEmitDouble(iCmp)
         ] or >
         >>
        ;EmitCmp
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mManifest)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        oOperandPushJumpCondition(iJgt)
        ] or >
        >>
       ;OperandGreaterPop
       @OperandNot
        @OperandForceToJumpCondition
         [ oOperandIsJumpCondition (yes)
         | yes:
         ] or >
         >>
        ;OperandForceToJumpCondition
        @OperandComplementJumpCondition
         [ oOperandChooseJumpCondition (iJgt)
         | *:
         oOperandComplementJumpCondition
         >>
        ;OperandComplementJumpCondition
        >>
       ;OperandNot
       ] or >
       }
       [ (tNot)
       | tNot:
       @OperandNot
        @OperandForceToJumpCondition
         [ oOperandIsJumpCondition (yes)
         | yes:
         ] or >
         >>
        ;OperandForceToJumpCondition
        @OperandComplementJumpCondition
         [ oOperandChooseJumpCondition (iJle)
         | *:
         oOperandComplementJumpCondition
         >>
        ;OperandComplementJumpCondition
        >>
       ;OperandNot
       ] or >
       }
       [ (tRepeatTest)
       | *:
       ] or >
       >>
      ;OperandPushExpression
      @OperandForceToJumpCondition
       [ oOperandIsJumpCondition (yes)
       | yes:
       ] or >
       >>
      ;OperandForceToJumpCondition
      >>
     ;OperandPushBooleanControlExpression
     ?tRepeatTest (tRepeatTest)
     [ oOperandChooseJumpCondition (iJgt)
     | *:
     @OperandInfixOr
      @OperandForceToJumpCondition
       [ oOperandIsJumpCondition (yes)
       | yes:
       ] or >
       >>
      ;OperandForceToJumpCondition
      [ oOperandChooseJumpCondition (iJgt)
      | *:
      oEmitConditionalForwardBranch
      oFixAndFreeFalseBranches
      oFixPushLastAddress
      oOperandMergeShuntsWithAddress
      oFixPopAddress
      >>
     ;OperandInfixOr
     oEmitUnconditionalBackwardBranch
     oFixPopAddress
     oFixAndFreeShuntList
     oOperandPop
     >>
    ;RepeatStmt
    ] or >
    }
    [ (tInitialValue)
    | tInitialValue:
    @OperandPushExpression
     [ (tLiteralInteger)
     | tLiteralInteger:
     oOperandPushInteger
     ] or >
     }
     [ (tInitEnd)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    ?tInitEnd (tInitEnd)
    ?tLiteralAddress (tLiteralAddress)
    oOperandPushVariable
    oOperandSwap
    [ (tStoreInteger)
    | tStoreInteger:
    oOperandSetLength(two)
    @OperandAssignIntegerPopPop
     [ oOperandCompareLeftAndRight (no)
     | no:
     @EmitMove
      @OperandLeftOrRightIsTemp
       [ oOperandChooseMode (mManifest)
       | *:
       oOperandSwap
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandSwap
       >>no
      ;OperandLeftOrRightIsTemp
      [@OperandLeftOrRightIsTemp (no)
      | *:
      [ oOperandChooseMode (mManifest)
      | mManifest:
      oEmitDouble(iMov)
      ] or >
      >>
     ;EmitMove
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mManifest)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     ] or >
     >>
    ;OperandAssignIntegerPopPop
    ] or >
    ] or >
    }
    [ (tRepeatBegin)
    | tRepeatBegin:
    @RepeatStmt
     oFixPushAddress
     oEmitMergeSourceCoordinate
     @Statements
      @Block
       [ (tCallBegin)
       | tCallBegin:
       @CallStmt
        oEmitSourceCoordinate
        oOperandPushMode(mManifest)
        oOperandSetLength(two)
        oOperandSetValue(zero)
        [ (tLiteralAddress)
        | *:
        @OperandPushExpression
         [ (tLiteralAddress)
         | tLiteralAddress:
         @OperandPushVariable
          oOperandPushVariable
          [ (tVarParm)
          | *:
          [ (tVarParm)
          | *:
          [ (tVarParm)
          | *:
          >>
         ;OperandPushVariable
         ] or >
         }
         [ (tVarParm)
         | *:
         ] or >
         >>
        ;OperandPushExpression
        @OperandConvertJumpConditionToData
         [ oOperandIsJumpCondition (no)
         | no:
         ] or >
         >>
        ;OperandConvertJumpConditionToData
        [ (tVarParm)
        | tVarParm:
        @OperandForceAddressIntoTemp
         [ oOperandChooseMode (mStatic)
         | mStatic:
         @OperandPushTempWord
          oTempAllocate
          oOperandPushTemp
          oOperandSetValue(zero)
          oOperandSetLength(two)
          >>
         ;OperandPushTempWord
         oOperandSwap
         oEmitDouble(iLoada)
         oOperandPop
         ] or >
         oOperandSetLength(two)
         >>
        ;OperandForceAddressIntoTemp
        @OperandForceToStack
         [ oOperandChooseLength (two)
         | two:
         ] or >
         oEmitSingle(iPush)
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mTemp)
          | mTemp:
          oTempFree
          ] or >
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         oOperandPushMode(mStack)
         >>
        ;OperandForceToStack
        ] or >
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mStack)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        ?tParmEnd (tParmEnd)
        oOperandPushMode(mManifest)
        oOperandSetLength(two)
        oOperandSetValue(four)
        oOperandAddManifestValues
        oOperandPop
        }
        [ (tLiteralInteger)
        | *:
        @OperandPushExpression
         [ (tLiteralInteger)
         | tLiteralInteger:
         oOperandPushInteger
         ] or >
         }
         [ (tParmEnd)
         | *:
         ] or >
         >>
        ;OperandPushExpression
        @OperandConvertJumpConditionToData
         [ oOperandIsJumpCondition (no)
         | no:
         ] or >
         >>
        ;OperandConvertJumpConditionToData
        [ (tParmEnd)
        | *:
        @OperandForceToStack
         [ oOperandChooseLength (two)
         | two:
         ] or >
         oEmitSingle(iPush)
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mManifest)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         oOperandPushMode(mStack)
         >>
        ;OperandForceToStack
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mStack)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        ?tParmEnd (tParmEnd)
        oOperandPushMode(mManifest)
        oOperandSetLength(two)
        oOperandSetValue(four)
        oOperandAddManifestValues
        oOperandPop
        }
        [ (tCallEnd)
        | tCallEnd:
        ] or >
        oOperandPushProcedure
        oOperandSetMode(mProc)
        oEmitSingle(iCall)
        oOperandPop
        oOperandPushMode(mStackReg)
        oOperandSetLength(two)
        oOperandSwap
        oEmitDouble(iAdd)
        oOperandPop
        oOperandPop
        oEmitMergeSourceCoordinate
        >>
       ;CallStmt
       ] or >
       }
       [ (tWhileBegin)
       | tWhileBegin:
       @WhileStmt
        oFixPushAddress
        oEmitMergeSourceCoordinate
        @OperandPushBooleanControlExpression
         @OperandPushExpression
          [ (tLiteralAddress)
          | tLiteralAddress:
          @OperandPushVariable
           oOperandPushVariable
           [ (tSubscriptBegin)
           | *:
           [ (tSubscriptBegin)
           | tSubscriptBegin:
           @OperandPushExpression
            [ (tLiteralAddress)
            | tLiteralAddress:
            @OperandPushVariable
             oOperandPushVariable
             [ (tFetchInteger)
             | *:
             [ (tFetchInteger)
             | *:
             [ (tFetchInteger)
             | tFetchInteger:
             ] or >
             >>
            ;OperandPushVariable
            ] or >
            }
            [ (tSubscriptInteger)
            | *:
            ] or >
            >>
           ;OperandPushExpression
           [ (tSubscriptInteger)
           | tSubscriptInteger:
           @OperandSubscriptIntegerPop
            [ oOperandChooseMode (mStatic)
            | *:
            @OperandSubscriptNonManifestIntegerPop
             [ oOptionTestChecking (yes)
             | yes:
             @OperandCheckedSubscriptNonManifestIntegerPop
              @OperandForceIntoTemp
               [ oOperandChooseMode (mStatic)
               | *:
               [ oOperandChooseLength (two)
               | two:
               @OperandPushTempWord
                oTempAllocate
                oOperandPushTemp
                oOperandSetValue(zero)
                oOperandSetLength(two)
                >>
               ;OperandPushTempWord
               oOperandSwap
               oEmitDouble(iMov)
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mStatic)
                | *:
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               oOperandSetMode(mTemp)
               ] or >
               >>
              ;OperandForceIntoTemp
              [ oOptionTestChecking (yes)
              | yes:
              @EmitSubscriptRangeCheck
               oOperandSwap
               @OperandPushArrayUpperBound
                [ oOperandChooseMode (mStatic)
                | mStatic:
                oOperandPushArrayUpperBound
                ] or >
                >>
               ;OperandPushArrayUpperBound
               oOperandSwapLeftAndDest
               @EmitCmp
                oOperandSwap
                [ oOperandChooseMode (mTemp)
                | *:
                oOperandSwap
                @OperandLeftOrRightIsTemp
                 [ oOperandChooseMode (mManifest)
                 | *:
                 oOperandSwap
                 [ oOperandChooseMode (mTemp)
                 | mTemp:
                 oOperandSwap
                 >>yes
                ;OperandLeftOrRightIsTemp
                [@OperandLeftOrRightIsTemp (yes)
                | yes:
                oEmitDouble(iCmp)
                ] or >
                >>
               ;EmitCmp
               oOperandPushJumpCondition(iJgt)
               oEmitConditionalForwardBranch
               oFixPushLastAddress
               oOperandPop
               oOperandPop
               oOperandSwap
               @OperandPushArrayLowerBound
                [ oOperandChooseMode (mStatic)
                | mStatic:
                oOperandPushArrayLowerBound
                ] or >
                >>
               ;OperandPushArrayLowerBound
               oOperandSwapLeftAndDest
               @EmitCmp
                oOperandSwap
                [ oOperandChooseMode (mTemp)
                | *:
                oOperandSwap
                @OperandLeftOrRightIsTemp
                 [ oOperandChooseMode (mManifest)
                 | *:
                 oOperandSwap
                 [ oOperandChooseMode (mTemp)
                 | mTemp:
                 oOperandSwap
                 >>yes
                ;OperandLeftOrRightIsTemp
                [@OperandLeftOrRightIsTemp (yes)
                | yes:
                oEmitDouble(iCmp)
                ] or >
                >>
               ;EmitCmp
               oOperandPushJumpCondition(iJge)
               oEmitConditionalForwardBranch
               oFixPushLastAddress
               oOperandPop
               oOperandPop
               oFixSwapAddresses
               oFixForwardBranch
               oFixPopAddress
               @EmitSubscriptAbort
                oOperandPushMode(mLineNum)
                oOperandSetLength(two)
                oEmitSingle(iPush)
                oOperandPop
                oOperandPushMode(mTrap)
                oOperandSetValue(trSubscriptAbort)
                oEmitSingle(iCall)
                oOperandPop
                >>
               ;EmitSubscriptAbort
               oFixForwardBranch
               oFixPopAddress
               >>
              ;EmitSubscriptRangeCheck
              ] or >
              oOperandSwap
              @OperandPushArrayLowerBound
               [ oOperandChooseMode (mStatic)
               | mStatic:
               oOperandPushArrayLowerBound
               ] or >
               >>
              ;OperandPushArrayLowerBound
              oOperandSwapLeftAndDest
              @OperandSubtractPop
               @OperandAreLeftAndRightManifest
                [ oOperandChooseMode (mManifest)
                | mManifest:
                oOperandSwap
                [ oOperandChooseMode (mTemp)
                | *:
                oOperandSwap
                >>no
               ;OperandAreLeftAndRightManifest
               [@OperandAreLeftAndRightManifest (no)
               | no:
               [ oOperandChooseManifestValue (one)
               | one:
               oOperandPop
               @OperandForceIntoTemp
                [ oOperandChooseMode (mTemp)
                | mTemp:
                ] or >
                >>
               ;OperandForceIntoTemp
               oEmitSingle(iDec)
               ] or >
               ] or >
               >>
              ;OperandSubtractPop
              oOperandPushMode(mManifest)
              oOperandSetLength(two)
              oOperandSetValue(two)
              oEmitDouble(iShl)
              oOperandPop
              oOperandSwap
              [ oOperandChooseMode (mStatic)
              | mStatic:
              oOperandPushMode(mManifest)
              oOperandSetLength(two)
              oOperandSetValue(eight)
              oOperandAddManifestValues
              oOperandPop
              @OperandForceAddressIntoTemp
               [ oOperandChooseMode (mStatic)
               | mStatic:
               @OperandPushTempWord
                oTempAllocate
                oOperandPushTemp
                oOperandSetValue(zero)
                oOperandSetLength(two)
                >>
               ;OperandPushTempWord
               oOperandSwap
               oEmitDouble(iLoada)
               oOperandPop
               ] or >
               oOperandSetLength(two)
               >>
              ;OperandForceAddressIntoTemp
              oEmitDouble(iAdd)
              @OperandPopAndFreeTemp
               [ oOperandChooseMode (mTemp)
               | mTemp:
               oTempFree
               ] or >
               oOperandPop
               >>
              ;OperandPopAndFreeTemp
              ] or >
              oOperandSetMode(mTempIndirect)
              oOperandSetLength(two)
              >>
             ;OperandCheckedSubscriptNonManifestIntegerPop
             ] or >
             >>
            ;OperandSubscriptNonManifestIntegerPop
            oOperandSetLength(two)
            >>
           ;OperandSubscriptIntegerPop
           ] or >
           ] or >
           [ (tFetchInteger)
           | tFetchInteger:
           ] or >
           >>
          ;OperandPushVariable
          ] or >
          }
          [ (tLiteralInteger)
          | tLiteralInteger:
          oOperandPushInteger
          ] or >
          }
          [ (tEQ)
          | tEQ:
          @OperandEqualPop
           [ oOperandCompareLeftAndRight (no)
           | no:
           [ oOperandChooseManifestValue (four)
           | *:
           oOperandSwap
           [ oOperandChooseManifestValue ()
           | *:
           oOperandSwap
           @OperandAreLeftAndRightManifest
            [ oOperandChooseMode (mManifest)
            | mManifest:
            oOperandSwap
            [ oOperandChooseMode (mTempIndirect)
            | *:
            oOperandSwap
            >>no
           ;OperandAreLeftAndRightManifest
           [@OperandAreLeftAndRightManifest (no)
           | *:
           @EmitCmp
            oOperandSwap
            [ oOperandChooseMode (mTempIndirect)
            | *:
            oOperandSwap
            @OperandLeftOrRightIsTemp
             [ oOperandChooseMode (mManifest)
             | *:
             oOperandSwap
             [ oOperandChooseMode (mTempIndirect)
             | *:
             oOperandSwap
             >>no
            ;OperandLeftOrRightIsTemp
            [@OperandLeftOrRightIsTemp (no)
            | *:
            [ oOperandChooseMode (mManifest)
            | mManifest:
            oEmitDouble(iCmp)
            ] or >
            >>
           ;EmitCmp
           @OperandPopAndFreeTemp
            [ oOperandChooseMode (mManifest)
            | *:
            oOperandPop
            >>
           ;OperandPopAndFreeTemp
           @OperandPopAndFreeTemp
            [ oOperandChooseMode (mTempIndirect)
            | mTempIndirect:
            oTempFree
            ] or >
            oOperandPop
            >>
           ;OperandPopAndFreeTemp
           oOperandPushJumpCondition(iJeq)
           ] or >
           >>
          ;OperandEqualPop
          ] or >
          }
          [ (tWhileTest)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         @OperandForceToJumpCondition
          [ oOperandIsJumpCondition (yes)
          | yes:
          ] or >
          >>
         ;OperandForceToJumpCondition
         >>
        ;OperandPushBooleanControlExpression
        ?tWhileTest (tWhileTest)
        @OperandComplementJumpCondition
         [ oOperandChooseJumpCondition (iJeq)
         | *:
         oOperandComplementJumpCondition
         >>
        ;OperandComplementJumpCondition
        [ oOperandChooseJumpCondition (iJne)
        | *:
        @OperandInfixOr
         @OperandForceToJumpCondition
          [ oOperandIsJumpCondition (yes)
          | yes:
          ] or >
          >>
         ;OperandForceToJumpCondition
         [ oOperandChooseJumpCondition (iJne)
         | *:
         oEmitConditionalForwardBranch
         oFixAndFreeFalseBranches
         oFixPushLastAddress
         oOperandMergeShuntsWithAddress
         oFixPopAddress
         >>
        ;OperandInfixOr
        @Statements
         @Block
          [ (tCallBegin)
          | tCallBegin:
          @CallStmt
           oEmitSourceCoordinate
           oOperandPushMode(mManifest)
           oOperandSetLength(two)
           oOperandSetValue(zero)
           [ (tLiteralAddress)
           | *:
           @OperandPushExpression
            [ (tLiteralAddress)
            | tLiteralAddress:
            @OperandPushVariable
             oOperandPushVariable
             [ (tVarParm)
             | *:
             [ (tVarParm)
             | *:
             [ (tVarParm)
             | *:
             >>
            ;OperandPushVariable
            ] or >
            }
            [ (tVarParm)
            | *:
            ] or >
            >>
           ;OperandPushExpression
           @OperandConvertJumpConditionToData
            [ oOperandIsJumpCondition (no)
            | no:
            ] or >
            >>
           ;OperandConvertJumpConditionToData
           [ (tVarParm)
           | tVarParm:
           @OperandForceAddressIntoTemp
            [ oOperandChooseMode (mStatic)
            | mStatic:
            @OperandPushTempWord
             oTempAllocate
             oOperandPushTemp
             oOperandSetValue(zero)
             oOperandSetLength(two)
             >>
            ;OperandPushTempWord
            oOperandSwap
            oEmitDouble(iLoada)
            oOperandPop
            ] or >
            oOperandSetLength(two)
            >>
           ;OperandForceAddressIntoTemp
           @OperandForceToStack
            [ oOperandChooseLength (two)
            | two:
            ] or >
            oEmitSingle(iPush)
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mTemp)
             | mTemp:
             oTempFree
             ] or >
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            oOperandPushMode(mStack)
            >>
           ;OperandForceToStack
           ] or >
           @OperandPopAndFreeTemp
            [ oOperandChooseMode (mStack)
            | *:
            oOperandPop
            >>
           ;OperandPopAndFreeTemp
           ?tParmEnd (tParmEnd)
           oOperandPushMode(mManifest)
           oOperandSetLength(two)
           oOperandSetValue(four)
           oOperandAddManifestValues
           oOperandPop
           }
           [ (tLiteralInteger)
           | *:
           @OperandPushExpression
            [ (tLiteralInteger)
            | tLiteralInteger:
            oOperandPushInteger
            ] or >
            }
            [ (tParmEnd)
            | *:
            ] or >
            >>
           ;OperandPushExpression
           @OperandConvertJumpConditionToData
            [ oOperandIsJumpCondition (no)
            | no:
            ] or >
            >>
           ;OperandConvertJumpConditionToData
           [ (tParmEnd)
           | *:
           @OperandForceToStack
            [ oOperandChooseLength (two)
            | two:
            ] or >
            oEmitSingle(iPush)
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mManifest)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            oOperandPushMode(mStack)
            >>
           ;OperandForceToStack
           @OperandPopAndFreeTemp
            [ oOperandChooseMode (mStack)
            | *:
            oOperandPop
            >>
           ;OperandPopAndFreeTemp
           ?tParmEnd (tParmEnd)
           oOperandPushMode(mManifest)
           oOperandSetLength(two)
           oOperandSetValue(four)
           oOperandAddManifestValues
           oOperandPop
           }
           [ (tCallEnd)
           | tCallEnd:
           ] or >
           oOperandPushProcedure
           oOperandSetMode(mProc)
           oEmitSingle(iCall)
           oOperandPop
           oOperandPushMode(mStackReg)
           oOperandSetLength(two)
           oOperandSwap
           oEmitDouble(iAdd)
           oOperandPop
           oOperandPop
           oEmitMergeSourceCoordinate
           >>
          ;CallStmt
          ] or >
          }
          [ (tWhileEnd)
          | *:
          ] or >
          >>
         ;Block
         >>
        ;Statements
        ?tWhileEnd (tWhileEnd)
        oEmitUnconditionalBackwardBranch
        oFixPopAddress
        oFixAndFreeShuntList
        oOperandPop
        >>
       ;WhileStmt
       ] or >
       }
       [ (tAssignBegin)
       | tAssignBegin:
       @AssignStmt
        oEmitSourceCoordinate
        ?tLiteralAddress (tLiteralAddress)
        @OperandPushVariable
         oOperandPushVariable
         [ (tSubscriptBegin)
         | *:
         [ (tSubscriptBegin)
         | tSubscriptBegin:
         @OperandPushExpression
          [ (tLiteralAddress)
          | tLiteralAddress:
          @OperandPushVariable
           oOperandPushVariable
           [ (tFetchInteger)
           | *:
           [ (tFetchInteger)
           | *:
           [ (tFetchInteger)
           | tFetchInteger:
           ] or >
           >>
          ;OperandPushVariable
          ] or >
          }
          [ (tSubscriptInteger)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         [ (tSubscriptInteger)
         | tSubscriptInteger:
         @OperandSubscriptIntegerPop
          [ oOperandChooseMode (mStatic)
          | *:
          @OperandSubscriptNonManifestIntegerPop
           [ oOptionTestChecking (yes)
           | yes:
           @OperandCheckedSubscriptNonManifestIntegerPop
            @OperandForceIntoTemp
             [ oOperandChooseMode (mStatic)
             | *:
             [ oOperandChooseLength (two)
             | two:
             @OperandPushTempWord
              oTempAllocate
              oOperandPushTemp
              oOperandSetValue(zero)
              oOperandSetLength(two)
              >>
             ;OperandPushTempWord
             oOperandSwap
             oEmitDouble(iMov)
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mStatic)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandSetMode(mTemp)
             ] or >
             >>
            ;OperandForceIntoTemp
            [ oOptionTestChecking (yes)
            | yes:
            @EmitSubscriptRangeCheck
             oOperandSwap
             @OperandPushArrayUpperBound
              [ oOperandChooseMode (mStatic)
              | mStatic:
              oOperandPushArrayUpperBound
              ] or >
              >>
             ;OperandPushArrayUpperBound
             oOperandSwapLeftAndDest
             @EmitCmp
              oOperandSwap
              [ oOperandChooseMode (mTemp)
              | *:
              oOperandSwap
              @OperandLeftOrRightIsTemp
               [ oOperandChooseMode (mManifest)
               | *:
               oOperandSwap
               [ oOperandChooseMode (mTemp)
               | mTemp:
               oOperandSwap
               >>yes
              ;OperandLeftOrRightIsTemp
              [@OperandLeftOrRightIsTemp (yes)
              | yes:
              oEmitDouble(iCmp)
              ] or >
              >>
             ;EmitCmp
             oOperandPushJumpCondition(iJgt)
             oEmitConditionalForwardBranch
             oFixPushLastAddress
             oOperandPop
             oOperandPop
             oOperandSwap
             @OperandPushArrayLowerBound
              [ oOperandChooseMode (mStatic)
              | mStatic:
              oOperandPushArrayLowerBound
              ] or >
              >>
             ;OperandPushArrayLowerBound
             oOperandSwapLeftAndDest
             @EmitCmp
              oOperandSwap
              [ oOperandChooseMode (mTemp)
              | *:
              oOperandSwap
              @OperandLeftOrRightIsTemp
               [ oOperandChooseMode (mManifest)
               | *:
               oOperandSwap
               [ oOperandChooseMode (mTemp)
               | mTemp:
               oOperandSwap
               >>yes
              ;OperandLeftOrRightIsTemp
              [@OperandLeftOrRightIsTemp (yes)
              | yes:
              oEmitDouble(iCmp)
              ] or >
              >>
             ;EmitCmp
             oOperandPushJumpCondition(iJge)
             oEmitConditionalForwardBranch
             oFixPushLastAddress
             oOperandPop
             oOperandPop
             oFixSwapAddresses
             oFixForwardBranch
             oFixPopAddress
             @EmitSubscriptAbort
              oOperandPushMode(mLineNum)
              oOperandSetLength(two)
              oEmitSingle(iPush)
              oOperandPop
              oOperandPushMode(mTrap)
              oOperandSetValue(trSubscriptAbort)
              oEmitSingle(iCall)
              oOperandPop
              >>
             ;EmitSubscriptAbort
             oFixForwardBranch
             oFixPopAddress
             >>
            ;EmitSubscriptRangeCheck
            ] or >
            oOperandSwap
            @OperandPushArrayLowerBound
             [ oOperandChooseMode (mStatic)
             | mStatic:
             oOperandPushArrayLowerBound
             ] or >
             >>
            ;OperandPushArrayLowerBound
            oOperandSwapLeftAndDest
            @OperandSubtractPop
             @OperandAreLeftAndRightManifest
              [ oOperandChooseMode (mManifest)
              | mManifest:
              oOperandSwap
              [ oOperandChooseMode (mTemp)
              | *:
              oOperandSwap
              >>no
             ;OperandAreLeftAndRightManifest
             [@OperandAreLeftAndRightManifest (no)
             | no:
             [ oOperandChooseManifestValue (one)
             | one:
             oOperandPop
             @OperandForceIntoTemp
              [ oOperandChooseMode (mTemp)
              | mTemp:
              ] or >
              >>
             ;OperandForceIntoTemp
             oEmitSingle(iDec)
             ] or >
             ] or >
             >>
            ;OperandSubtractPop
            oOperandPushMode(mManifest)
            oOperandSetLength(two)
            oOperandSetValue(two)
            oEmitDouble(iShl)
            oOperandPop
            oOperandSwap
            [ oOperandChooseMode (mStatic)
            | mStatic:
            oOperandPushMode(mManifest)
            oOperandSetLength(two)
            oOperandSetValue(eight)
            oOperandAddManifestValues
            oOperandPop
            @OperandForceAddressIntoTemp
             [ oOperandChooseMode (mStatic)
             | mStatic:
             @OperandPushTempWord
              oTempAllocate
              oOperandPushTemp
              oOperandSetValue(zero)
              oOperandSetLength(two)
              >>
             ;OperandPushTempWord
             oOperandSwap
             oEmitDouble(iLoada)
             oOperandPop
             ] or >
             oOperandSetLength(two)
             >>
            ;OperandForceAddressIntoTemp
            oEmitDouble(iAdd)
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mTemp)
             | mTemp:
             oTempFree
             ] or >
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            ] or >
            oOperandSetMode(mTempIndirect)
            oOperandSetLength(two)
            >>
           ;OperandCheckedSubscriptNonManifestIntegerPop
           ] or >
           >>
          ;OperandSubscriptNonManifestIntegerPop
          oOperandSetLength(two)
          >>
         ;OperandSubscriptIntegerPop
         ] or >
         ] or >
         [ (tLiteralAddress)
         | *:
         >>
        ;OperandPushVariable
        @OperandPushExpressionAssignPopPop
         [ (tLiteralAddress)
         | tLiteralAddress:
         @OperandPushVariable
          oOperandPushVariable
          [ (tFetchInteger)
          | *:
          [ (tFetchInteger)
          | *:
          [ (tFetchInteger)
          | tFetchInteger:
          ] or >
          >>
         ;OperandPushVariable
         ] or >
         }
         [ (tAssignInteger)
         | tAssignInteger:
         @OperandAssignIntegerPopPop
          [ oOperandCompareLeftAndRight (no)
          | no:
          @EmitMove
           @OperandLeftOrRightIsTemp
            [ oOperandChooseMode (mStatic)
            | *:
            oOperandSwap
            [ oOperandChooseMode (mTempIndirect)
            | *:
            oOperandSwap
            >>no
           ;OperandLeftOrRightIsTemp
           [@OperandLeftOrRightIsTemp (no)
           | *:
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPushCopy
           @OperandForceIntoTemp
            [ oOperandChooseMode (mStatic)
            | *:
            [ oOperandChooseLength (two)
            | two:
            @OperandPushTempWord
             oTempAllocate
             oOperandPushTemp
             oOperandSetValue(zero)
             oOperandSetLength(two)
             >>
            ;OperandPushTempWord
            oOperandSwap
            oEmitDouble(iMov)
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStatic)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            oOperandSetMode(mTemp)
            ] or >
            >>
           ;OperandForceIntoTemp
           oOperandSwapLeftAndDest
           oEmitDouble(iMov)
           @OperandPopAndFreeTemp
            [ oOperandChooseMode (mTemp)
            | mTemp:
            oTempFree
            ] or >
            oOperandPop
            >>
           ;OperandPopAndFreeTemp
           oOperandSwap
           >>
          ;EmitMove
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mTempIndirect)
           | mTempIndirect:
           oTempFree
           ] or >
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          ] or >
          >>
         ;OperandAssignIntegerPopPop
         ] or >
         >>
        ;OperandPushExpressionAssignPopPop
        >>
       ;AssignStmt
       ] or >
       }
       [ (tAssignBegin)
       | tAssignBegin:
       @AssignStmt
        oEmitSourceCoordinate
        ?tLiteralAddress (tLiteralAddress)
        @OperandPushVariable
         oOperandPushVariable
         [ (tSubscriptBegin)
         | *:
         [ (tSubscriptBegin)
         | tSubscriptBegin:
         @OperandPushExpression
          [ (tLiteralAddress)
          | tLiteralAddress:
          @OperandPushVariable
           oOperandPushVariable
           [ (tFetchInteger)
           | *:
           [ (tFetchInteger)
           | *:
           [ (tFetchInteger)
           | tFetchInteger:
           ] or >
           >>
          ;OperandPushVariable
          ] or >
          }
          [ (tSubscriptInteger)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         [ (tSubscriptInteger)
         | tSubscriptInteger:
         @OperandSubscriptIntegerPop
          [ oOperandChooseMode (mStatic)
          | *:
          @OperandSubscriptNonManifestIntegerPop
           [ oOptionTestChecking (yes)
           | yes:
           @OperandCheckedSubscriptNonManifestIntegerPop
            @OperandForceIntoTemp
             [ oOperandChooseMode (mStatic)
             | *:
             [ oOperandChooseLength (two)
             | two:
             @OperandPushTempWord
              oTempAllocate
              oOperandPushTemp
              oOperandSetValue(zero)
              oOperandSetLength(two)
              >>
             ;OperandPushTempWord
             oOperandSwap
             oEmitDouble(iMov)
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mStatic)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandSetMode(mTemp)
             ] or >
             >>
            ;OperandForceIntoTemp
            [ oOptionTestChecking (yes)
            | yes:
            @EmitSubscriptRangeCheck
             oOperandSwap
             @OperandPushArrayUpperBound
              [ oOperandChooseMode (mStatic)
              | mStatic:
              oOperandPushArrayUpperBound
              ] or >
              >>
             ;OperandPushArrayUpperBound
             oOperandSwapLeftAndDest
             @EmitCmp
              oOperandSwap
              [ oOperandChooseMode (mTemp)
              | *:
              oOperandSwap
              @OperandLeftOrRightIsTemp
               [ oOperandChooseMode (mManifest)
               | *:
               oOperandSwap
               [ oOperandChooseMode (mTemp)
               | mTemp:
               oOperandSwap
               >>yes
              ;OperandLeftOrRightIsTemp
              [@OperandLeftOrRightIsTemp (yes)
              | yes:
              oEmitDouble(iCmp)
              ] or >
              >>
             ;EmitCmp
             oOperandPushJumpCondition(iJgt)
             oEmitConditionalForwardBranch
             oFixPushLastAddress
             oOperandPop
             oOperandPop
             oOperandSwap
             @OperandPushArrayLowerBound
              [ oOperandChooseMode (mStatic)
              | mStatic:
              oOperandPushArrayLowerBound
              ] or >
              >>
             ;OperandPushArrayLowerBound
             oOperandSwapLeftAndDest
             @EmitCmp
              oOperandSwap
              [ oOperandChooseMode (mTemp)
              | *:
              oOperandSwap
              @OperandLeftOrRightIsTemp
               [ oOperandChooseMode (mManifest)
               | *:
               oOperandSwap
               [ oOperandChooseMode (mTemp)
               | mTemp:
               oOperandSwap
               >>yes
              ;OperandLeftOrRightIsTemp
              [@OperandLeftOrRightIsTemp (yes)
              | yes:
              oEmitDouble(iCmp)
              ] or >
              >>
             ;EmitCmp
             oOperandPushJumpCondition(iJge)
             oEmitConditionalForwardBranch
             oFixPushLastAddress
             oOperandPop
             oOperandPop
             oFixSwapAddresses
             oFixForwardBranch
             oFixPopAddress
             @EmitSubscriptAbort
              oOperandPushMode(mLineNum)
              oOperandSetLength(two)
              oEmitSingle(iPush)
              oOperandPop
              oOperandPushMode(mTrap)
              oOperandSetValue(trSubscriptAbort)
              oEmitSingle(iCall)
              oOperandPop
              >>
             ;EmitSubscriptAbort
             oFixForwardBranch
             oFixPopAddress
             >>
            ;EmitSubscriptRangeCheck
            ] or >
            oOperandSwap
            @OperandPushArrayLowerBound
             [ oOperandChooseMode (mStatic)
             | mStatic:
             oOperandPushArrayLowerBound
             ] or >
             >>
            ;OperandPushArrayLowerBound
            oOperandSwapLeftAndDest
            @OperandSubtractPop
             @OperandAreLeftAndRightManifest
              [ oOperandChooseMode (mManifest)
              | mManifest:
              oOperandSwap
              [ oOperandChooseMode (mTemp)
              | *:
              oOperandSwap
              >>no
             ;OperandAreLeftAndRightManifest
             [@OperandAreLeftAndRightManifest (no)
             | no:
             [ oOperandChooseManifestValue (one)
             | one:
             oOperandPop
             @OperandForceIntoTemp
              [ oOperandChooseMode (mTemp)
              | mTemp:
              ] or >
              >>
             ;OperandForceIntoTemp
             oEmitSingle(iDec)
             ] or >
             ] or >
             >>
            ;OperandSubtractPop
            oOperandPushMode(mManifest)
            oOperandSetLength(two)
            oOperandSetValue(two)
            oEmitDouble(iShl)
            oOperandPop
            oOperandSwap
            [ oOperandChooseMode (mStatic)
            | mStatic:
            oOperandPushMode(mManifest)
            oOperandSetLength(two)
            oOperandSetValue(eight)
            oOperandAddManifestValues
            oOperandPop
            @OperandForceAddressIntoTemp
             [ oOperandChooseMode (mStatic)
             | mStatic:
             @OperandPushTempWord
              oTempAllocate
              oOperandPushTemp
              oOperandSetValue(zero)
              oOperandSetLength(two)
              >>
             ;OperandPushTempWord
             oOperandSwap
             oEmitDouble(iLoada)
             oOperandPop
             ] or >
             oOperandSetLength(two)
             >>
            ;OperandForceAddressIntoTemp
            oEmitDouble(iAdd)
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mTemp)
             | mTemp:
             oTempFree
             ] or >
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            ] or >
            oOperandSetMode(mTempIndirect)
            oOperandSetLength(two)
            >>
           ;OperandCheckedSubscriptNonManifestIntegerPop
           ] or >
           >>
          ;OperandSubscriptNonManifestIntegerPop
          oOperandSetLength(two)
          >>
         ;OperandSubscriptIntegerPop
         ] or >
         ] or >
         [ (tLiteralAddress)
         | *:
         >>
        ;OperandPushVariable
        @OperandPushExpressionAssignPopPop
         [ (tLiteralAddress)
         | tLiteralAddress:
         @OperandPushVariable
          oOperandPushVariable
          [ (tSubscriptBegin)
          | *:
          [ (tSubscriptBegin)
          | tSubscriptBegin:
          @OperandPushExpression
           [ (tLiteralAddress)
           | tLiteralAddress:
           @OperandPushVariable
            oOperandPushVariable
            [ (tFetchInteger)
            | *:
            [ (tFetchInteger)
            | *:
            [ (tFetchInteger)
            | tFetchInteger:
            ] or >
            >>
           ;OperandPushVariable
           ] or >
           }
           [ (tSubscriptInteger)
           | *:
           ] or >
           >>
          ;OperandPushExpression
          [ (tSubscriptInteger)
          | tSubscriptInteger:
          @OperandSubscriptIntegerPop
           [ oOperandChooseMode (mStatic)
           | *:
           @OperandSubscriptNonManifestIntegerPop
            [ oOptionTestChecking (yes)
            | yes:
            @OperandCheckedSubscriptNonManifestIntegerPop
             @OperandForceIntoTemp
              [ oOperandChooseMode (mStatic)
              | *:
              [ oOperandChooseLength (two)
              | two:
              @OperandPushTempWord
               oTempAllocate
               oOperandPushTemp
               oOperandSetValue(zero)
               oOperandSetLength(two)
               >>
              ;OperandPushTempWord
              oOperandSwap
              oEmitDouble(iMov)
              @OperandPopAndFreeTemp
               [ oOperandChooseMode (mStatic)
               | *:
               oOperandPop
               >>
              ;OperandPopAndFreeTemp
              oOperandSetMode(mTemp)
              ] or >
              >>
             ;OperandForceIntoTemp
             [ oOptionTestChecking (yes)
             | yes:
             @EmitSubscriptRangeCheck
              oOperandSwap
              @OperandPushArrayUpperBound
               [ oOperandChooseMode (mStatic)
               | mStatic:
               oOperandPushArrayUpperBound
               ] or >
               >>
              ;OperandPushArrayUpperBound
              oOperandSwapLeftAndDest
              @EmitCmp
               oOperandSwap
               [ oOperandChooseMode (mTemp)
               | *:
               oOperandSwap
               @OperandLeftOrRightIsTemp
                [ oOperandChooseMode (mManifest)
                | *:
                oOperandSwap
                [ oOperandChooseMode (mTemp)
                | mTemp:
                oOperandSwap
                >>yes
               ;OperandLeftOrRightIsTemp
               [@OperandLeftOrRightIsTemp (yes)
               | yes:
               oEmitDouble(iCmp)
               ] or >
               >>
              ;EmitCmp
              oOperandPushJumpCondition(iJgt)
              oEmitConditionalForwardBranch
              oFixPushLastAddress
              oOperandPop
              oOperandPop
              oOperandSwap
              @OperandPushArrayLowerBound
               [ oOperandChooseMode (mStatic)
               | mStatic:
               oOperandPushArrayLowerBound
               ] or >
               >>
              ;OperandPushArrayLowerBound
              oOperandSwapLeftAndDest
              @EmitCmp
               oOperandSwap
               [ oOperandChooseMode (mTemp)
               | *:
               oOperandSwap
               @OperandLeftOrRightIsTemp
                [ oOperandChooseMode (mManifest)
                | *:
                oOperandSwap
                [ oOperandChooseMode (mTemp)
                | mTemp:
                oOperandSwap
                >>yes
               ;OperandLeftOrRightIsTemp
               [@OperandLeftOrRightIsTemp (yes)
               | yes:
               oEmitDouble(iCmp)
               ] or >
               >>
              ;EmitCmp
              oOperandPushJumpCondition(iJge)
              oEmitConditionalForwardBranch
              oFixPushLastAddress
              oOperandPop
              oOperandPop
              oFixSwapAddresses
              oFixForwardBranch
              oFixPopAddress
              @EmitSubscriptAbort
               oOperandPushMode(mLineNum)
               oOperandSetLength(two)
               oEmitSingle(iPush)
               oOperandPop
               oOperandPushMode(mTrap)
               oOperandSetValue(trSubscriptAbort)
               oEmitSingle(iCall)
               oOperandPop
               >>
              ;EmitSubscriptAbort
              oFixForwardBranch
              oFixPopAddress
              >>
             ;EmitSubscriptRangeCheck
             ] or >
             oOperandSwap
             @OperandPushArrayLowerBound
              [ oOperandChooseMode (mStatic)
              | mStatic:
              oOperandPushArrayLowerBound
              ] or >
              >>
             ;OperandPushArrayLowerBound
             oOperandSwapLeftAndDest
             @OperandSubtractPop
              @OperandAreLeftAndRightManifest
               [ oOperandChooseMode (mManifest)
               | mManifest:
               oOperandSwap
               [ oOperandChooseMode (mTemp)
               | *:
               oOperandSwap
               >>no
              ;OperandAreLeftAndRightManifest
              [@OperandAreLeftAndRightManifest (no)
              | no:
              [ oOperandChooseManifestValue (one)
              | one:
              oOperandPop
              @OperandForceIntoTemp
               [ oOperandChooseMode (mTemp)
               | mTemp:
               ] or >
               >>
              ;OperandForceIntoTemp
              oEmitSingle(iDec)
              ] or >
              ] or >
              >>
             ;OperandSubtractPop
             oOperandPushMode(mManifest)
             oOperandSetLength(two)
             oOperandSetValue(two)
             oEmitDouble(iShl)
             oOperandPop
             oOperandSwap
             [ oOperandChooseMode (mStatic)
             | mStatic:
             oOperandPushMode(mManifest)
             oOperandSetLength(two)
             oOperandSetValue(eight)
             oOperandAddManifestValues
             oOperandPop
             @OperandForceAddressIntoTemp
              [ oOperandChooseMode (mStatic)
              | mStatic:
              @OperandPushTempWord
               oTempAllocate
               oOperandPushTemp
               oOperandSetValue(zero)
               oOperandSetLength(two)
               >>
              ;OperandPushTempWord
              oOperandSwap
              oEmitDouble(iLoada)
              oOperandPop
              ] or >
              oOperandSetLength(two)
              >>
             ;OperandForceAddressIntoTemp
             oEmitDouble(iAdd)
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mTemp)
              | mTemp:
              oTempFree
              ] or >
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             ] or >
             oOperandSetMode(mTempIndirect)
             oOperandSetLength(two)
             >>
            ;OperandCheckedSubscriptNonManifestIntegerPop
            ] or >
            >>
           ;OperandSubscriptNonManifestIntegerPop
           oOperandSetLength(two)
           >>
          ;OperandSubscriptIntegerPop
          ] or >
          ] or >
          [ (tFetchInteger)
          | tFetchInteger:
          ] or >
          >>
         ;OperandPushVariable
         ] or >
         }
         [ (tLiteralInteger)
         | tLiteralInteger:
         oOperandPushInteger
         ] or >
         }
         [ (tAdd)
         | tAdd:
         [ (tAssignInteger)
         | tAssignInteger:
         @OperandAddAssignPopPopPop
          [ oOperandCompareRightAndDest (no)
          | *:
          oOperandSwap
          [ oOperandCompareRightAndDest (no)
          | *:
          oOperandSwap
          @OperandAddPop
           @OperandAreLeftAndRightManifest
            [ oOperandChooseMode (mManifest)
            | mManifest:
            oOperandSwap
            [ oOperandChooseMode (mTempIndirect)
            | *:
            oOperandSwap
            >>no
           ;OperandAreLeftAndRightManifest
           [@OperandAreLeftAndRightManifest (no)
           | no:
           [ oOperandChooseManifestValue (one)
           | one:
           oOperandPop
           @OperandForceIntoTemp
            [ oOperandChooseMode (mTempIndirect)
            | mTempIndirect:
            oOperandPushCopy
            oOperandSetMode(mTemp)
            oOperandSwap
            oEmitDouble(iMov)
            oOperandPop
            ] or >
            >>
           ;OperandForceIntoTemp
           oEmitSingle(iInc)
           ] or >
           ] or >
           >>
          ;OperandAddPop
          @OperandAssignIntegerPopPop
           [ oOperandCompareLeftAndRight (no)
           | no:
           @EmitMove
            @OperandLeftOrRightIsTemp
             [ oOperandChooseMode (mTemp)
             | mTemp:
             >>yes
            ;OperandLeftOrRightIsTemp
            [@OperandLeftOrRightIsTemp (yes)
            | yes:
            oEmitDouble(iMov)
            ] or >
            >>
           ;EmitMove
           @OperandPopAndFreeTemp
            [ oOperandChooseMode (mTemp)
            | mTemp:
            oTempFree
            ] or >
            oOperandPop
            >>
           ;OperandPopAndFreeTemp
           @OperandPopAndFreeTemp
            [ oOperandChooseMode (mTempIndirect)
            | mTempIndirect:
            oTempFree
            ] or >
            oOperandPop
            >>
           ;OperandPopAndFreeTemp
           ] or >
           >>
          ;OperandAssignIntegerPopPop
          >>
         ;OperandAddAssignPopPopPop
         ] or >
         >>
        ;OperandPushExpressionAssignPopPop
        >>
       ;AssignStmt
       ] or >
       }
       [ (tAssignBegin)
       | tAssignBegin:
       @AssignStmt
        oEmitSourceCoordinate
        ?tLiteralAddress (tLiteralAddress)
        @OperandPushVariable
         oOperandPushVariable
         [ (tLiteralAddress)
         | *:
         [ (tLiteralAddress)
         | *:
         [ (tLiteralAddress)
         | *:
         >>
        ;OperandPushVariable
        @OperandPushExpressionAssignPopPop
         [ (tLiteralAddress)
         | tLiteralAddress:
         @OperandPushVariable
          oOperandPushVariable
          [ (tFetchInteger)
          | *:
          [ (tFetchInteger)
          | *:
          [ (tFetchInteger)
          | tFetchInteger:
          ] or >
          >>
         ;OperandPushVariable
         ] or >
         }
         [ (tLiteralInteger)
         | tLiteralInteger:
         oOperandPushInteger
         ] or >
         }
         [ (tAdd)
         | tAdd:
         [ (tAssignInteger)
         | tAssignInteger:
         @OperandAddAssignPopPopPop
          [ oOperandCompareRightAndDest (no)
          | *:
          oOperandSwap
          [ oOperandCompareRightAndDest (yes)
          | yes:
          oOperandPop
          @OperandAddRightToLeftPop
           [ oOperandChooseManifestValue (one)
           | one:
           oOperandPop
           oEmitSingle(iInc)
           ] or >
           >>
          ;OperandAddRightToLeftPop
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          ] or >
          >>
         ;OperandAddAssignPopPopPop
         ] or >
         >>
        ;OperandPushExpressionAssignPopPop
        >>
       ;AssignStmt
       ] or >
       }
       [ (tRepeatControl)
       | *:
       ] or >
       >>
      ;Block
      >>
     ;Statements
     ?tRepeatControl (tRepeatControl)
     @OperandPushBooleanControlExpression
      @OperandPushExpression
       [ (tLiteralAddress)
       | tLiteralAddress:
       @OperandPushVariable
        oOperandPushVariable
        [ (tFetchInteger)
        | *:
        [ (tFetchInteger)
        | *:
        [ (tFetchInteger)
        | tFetchInteger:
        ] or >
        >>
       ;OperandPushVariable
       ] or >
       }
       [ (tLiteralInteger)
       | tLiteralInteger:
       oOperandPushInteger
       ] or >
       }
       [ (tLE)
       | tLE:
       @OperandGreaterPop
        [ oOperandCompareLeftAndRight (no)
        | no:
        [ oOperandChooseManifestValue ()
        | *:
        oOperandSwap
        [ oOperandChooseManifestValue ()
        | *:
        oOperandSwap
        @EmitCmp
         oOperandSwap
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandSwap
         @OperandLeftOrRightIsTemp
          [ oOperandChooseMode (mManifest)
          | *:
          oOperandSwap
          [ oOperandChooseMode (mStatic)
          | *:
          oOperandSwap
          >>no
         ;OperandLeftOrRightIsTemp
         [@OperandLeftOrRightIsTemp (no)
         | *:
         [ oOperandChooseMode (mManifest)
         | mManifest:
         oEmitDouble(iCmp)
         ] or >
         >>
        ;EmitCmp
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mManifest)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        oOperandPushJumpCondition(iJgt)
        ] or >
        >>
       ;OperandGreaterPop
       @OperandNot
        @OperandForceToJumpCondition
         [ oOperandIsJumpCondition (yes)
         | yes:
         ] or >
         >>
        ;OperandForceToJumpCondition
        @OperandComplementJumpCondition
         [ oOperandChooseJumpCondition (iJgt)
         | *:
         oOperandComplementJumpCondition
         >>
        ;OperandComplementJumpCondition
        >>
       ;OperandNot
       ] or >
       }
       [ (tNot)
       | tNot:
       @OperandNot
        @OperandForceToJumpCondition
         [ oOperandIsJumpCondition (yes)
         | yes:
         ] or >
         >>
        ;OperandForceToJumpCondition
        @OperandComplementJumpCondition
         [ oOperandChooseJumpCondition (iJle)
         | *:
         oOperandComplementJumpCondition
         >>
        ;OperandComplementJumpCondition
        >>
       ;OperandNot
       ] or >
       }
       [ (tRepeatTest)
       | *:
       ] or >
       >>
      ;OperandPushExpression
      @OperandForceToJumpCondition
       [ oOperandIsJumpCondition (yes)
       | yes:
       ] or >
       >>
      ;OperandForceToJumpCondition
      >>
     ;OperandPushBooleanControlExpression
     ?tRepeatTest (tRepeatTest)
     [ oOperandChooseJumpCondition (iJgt)
     | *:
     @OperandInfixOr
      @OperandForceToJumpCondition
       [ oOperandIsJumpCondition (yes)
       | yes:
       ] or >
       >>
      ;OperandForceToJumpCondition
      [ oOperandChooseJumpCondition (iJgt)
      | *:
      oEmitConditionalForwardBranch
      oFixAndFreeFalseBranches
      oFixPushLastAddress
      oOperandMergeShuntsWithAddress
      oFixPopAddress
      >>
     ;OperandInfixOr
     oEmitUnconditionalBackwardBranch
     oFixPopAddress
     oFixAndFreeShuntList
     oOperandPop
     >>
    ;RepeatStmt
    ] or >
    }
    [ (tAssignBegin)
    | tAssignBegin:
    @AssignStmt
     oEmitSourceCoordinate
     ?tLiteralAddress (tLiteralAddress)
     @OperandPushVariable
      oOperandPushVariable
      [ (tLiteralInteger)
      | *:
      [ (tLiteralInteger)
      | *:
      [ (tLiteralInteger)
      | *:
      >>
     ;OperandPushVariable
     @OperandPushExpressionAssignPopPop
      [ (tLiteralInteger)
      | tLiteralInteger:
      oOperandPushInteger
      ] or >
      }
      [ (tAssignInteger)
      | tAssignInteger:
      @OperandAssignIntegerPopPop
       [ oOperandCompareLeftAndRight (no)
       | no:
       @EmitMove
        @OperandLeftOrRightIsTemp
         [ oOperandChooseMode (mManifest)
         | *:
         oOperandSwap
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandSwap
         >>no
        ;OperandLeftOrRightIsTemp
        [@OperandLeftOrRightIsTemp (no)
        | *:
        [ oOperandChooseMode (mManifest)
        | mManifest:
        oEmitDouble(iMov)
        ] or >
        >>
       ;EmitMove
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mManifest)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       ] or >
       >>
      ;OperandAssignIntegerPopPop
      ] or >
      >>
     ;OperandPushExpressionAssignPopPop
     >>
    ;AssignStmt
    ] or >
    }
    [ (tProcedureEnd)
    | *:
    ] or >
    >>
   ;Block
   ?tProcedureEnd (tProcedureEnd)
   oEmitNone(iLeave)
   oEmitNone(iReturn)
   >>
  ;Routine
  oFixForwardBranch
  oFixPopAddress
  ] or >
  }
  [ (tSkipProc)
  | tSkipProc:
  oEmitUnconditionalForwardBranch
  oFixPushLastAddress
  @Routine
   oEmitProcLabel(mProc)
   oEmitNone(iEnter)
   [ (tLiteralAddress)
   | *:
   oOperandPushMode(mArgument)
   oOperandSetValue(four)
   [ (tLiteralAddress)
   | tLiteralAddress:
   @OperandNextArgument
    oOperandSetMode(mManifest)
    oOperandPushMode(mManifest)
    oOperandSetValue(four)
    oOperandAddManifestValues
    oOperandPop
    oOperandSetMode(mArgument)
    >>
   ;OperandNextArgument
   oOperandPushCopy
   oOperandPushVariable
   oOperandSwap
   [ (tStoreAddress)
   | tStoreAddress:
   oOperandSetLength(two)
   @OperandAssignIntegerPopPop
    [ oOperandCompareLeftAndRight (no)
    | no:
    @EmitMove
     @OperandLeftOrRightIsTemp
      [ oOperandChooseMode (mArgument)
      | *:
      oOperandSwap
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandSwap
      >>no
     ;OperandLeftOrRightIsTemp
     [@OperandLeftOrRightIsTemp (no)
     | *:
     [ oOperandChooseMode (mArgument)
     | *:
     oOperandPushCopy
     @OperandForceIntoTemp
      [ oOperandChooseMode (mArgument)
      | *:
      [ oOperandChooseLength (two)
      | two:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iMov)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mArgument)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandSetMode(mTemp)
      ] or >
      >>
     ;OperandForceIntoTemp
     oOperandSwapLeftAndDest
     oEmitDouble(iMov)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mTemp)
      | mTemp:
      oTempFree
      ] or >
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandSwap
     >>
    ;EmitMove
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mArgument)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ] or >
    >>
   ;OperandAssignIntegerPopPop
   ] or >
   ] or >
   }
   [ (tParmEnd)
   | tParmEnd:
   ] or >
   oOperandPop
   @Block
    [ (tAssignBegin)
    | tAssignBegin:
    @AssignStmt
     oEmitSourceCoordinate
     ?tLiteralAddress (tLiteralAddress)
     @OperandPushVariable
      oOperandPushVariable
      [ (tLiteralAddress)
      | *:
      [ (tLiteralAddress)
      | *:
      [ (tLiteralAddress)
      | *:
      >>
     ;OperandPushVariable
     @OperandPushExpressionAssignPopPop
      [ (tLiteralAddress)
      | tLiteralAddress:
      @OperandPushVariable
       oOperandPushVariable
       [ (tFetchInteger)
       | *:
       [ (tFetchInteger)
       | *:
       [ (tFetchInteger)
       | tFetchInteger:
       ] or >
       >>
      ;OperandPushVariable
      ] or >
      }
      [ (tLiteralInteger)
      | tLiteralInteger:
      oOperandPushInteger
      ] or >
      }
      [ (tAdd)
      | tAdd:
      [ (tAssignInteger)
      | tAssignInteger:
      @OperandAddAssignPopPopPop
       [ oOperandCompareRightAndDest (no)
       | *:
       oOperandSwap
       [ oOperandCompareRightAndDest (yes)
       | yes:
       oOperandPop
       @OperandAddRightToLeftPop
        [ oOperandChooseManifestValue (one)
        | one:
        oOperandPop
        oEmitSingle(iInc)
        ] or >
        >>
       ;OperandAddRightToLeftPop
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       ] or >
       >>
      ;OperandAddAssignPopPopPop
      ] or >
      >>
     ;OperandPushExpressionAssignPopPop
     >>
    ;AssignStmt
    ] or >
    }
    [ (tAssignBegin)
    | tAssignBegin:
    @AssignStmt
     oEmitSourceCoordinate
     ?tLiteralAddress (tLiteralAddress)
     @OperandPushVariable
      oOperandPushVariable
      [ (tFetchAddress)
      | tFetchAddress:
      oOperandSetMode(mStatic)
      @OperandForceIntoTemp
       [ oOperandChooseMode (mStatic)
       | *:
       [ oOperandChooseLength (two)
       | two:
       @OperandPushTempWord
        oTempAllocate
        oOperandPushTemp
        oOperandSetValue(zero)
        oOperandSetLength(two)
        >>
       ;OperandPushTempWord
       oOperandSwap
       oEmitDouble(iMov)
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandSetMode(mTemp)
       ] or >
       >>
      ;OperandForceIntoTemp
      oOperandSetMode(mTempIndirect)
      ] or >
      [ (tLiteralAddress)
      | *:
      [ (tLiteralAddress)
      | *:
      >>
     ;OperandPushVariable
     @OperandPushExpressionAssignPopPop
      [ (tLiteralAddress)
      | tLiteralAddress:
      @OperandPushVariable
       oOperandPushVariable
       [ (tSubscriptBegin)
       | *:
       [ (tSubscriptBegin)
       | tSubscriptBegin:
       @OperandPushExpression
        [ (tLiteralAddress)
        | tLiteralAddress:
        @OperandPushVariable
         oOperandPushVariable
         [ (tFetchInteger)
         | *:
         [ (tFetchInteger)
         | *:
         [ (tFetchInteger)
         | tFetchInteger:
         ] or >
         >>
        ;OperandPushVariable
        ] or >
        }
        [ (tSubscriptInteger)
        | *:
        ] or >
        >>
       ;OperandPushExpression
       [ (tSubscriptInteger)
       | tSubscriptInteger:
       @OperandSubscriptIntegerPop
        [ oOperandChooseMode (mStatic)
        | *:
        @OperandSubscriptNonManifestIntegerPop
         [ oOptionTestChecking (yes)
         | yes:
         @OperandCheckedSubscriptNonManifestIntegerPop
          @OperandForceIntoTemp
           [ oOperandChooseMode (mStatic)
           | *:
           [ oOperandChooseLength (two)
           | two:
           @OperandPushTempWord
            oTempAllocate
            oOperandPushTemp
            oOperandSetValue(zero)
            oOperandSetLength(two)
            >>
           ;OperandPushTempWord
           oOperandSwap
           oEmitDouble(iMov)
           @OperandPopAndFreeTemp
            [ oOperandChooseMode (mStatic)
            | *:
            oOperandPop
            >>
           ;OperandPopAndFreeTemp
           oOperandSetMode(mTemp)
           ] or >
           >>
          ;OperandForceIntoTemp
          [ oOptionTestChecking (yes)
          | yes:
          @EmitSubscriptRangeCheck
           oOperandSwap
           @OperandPushArrayUpperBound
            [ oOperandChooseMode (mStatic)
            | mStatic:
            oOperandPushArrayUpperBound
            ] or >
            >>
           ;OperandPushArrayUpperBound
           oOperandSwapLeftAndDest
           @EmitCmp
            oOperandSwap
            [ oOperandChooseMode (mTemp)
            | *:
            oOperandSwap
            @OperandLeftOrRightIsTemp
             [ oOperandChooseMode (mManifest)
             | *:
             oOperandSwap
             [ oOperandChooseMode (mTemp)
             | mTemp:
             oOperandSwap
             >>yes
            ;OperandLeftOrRightIsTemp
            [@OperandLeftOrRightIsTemp (yes)
            | yes:
            oEmitDouble(iCmp)
            ] or >
            >>
           ;EmitCmp
           oOperandPushJumpCondition(iJgt)
           oEmitConditionalForwardBranch
           oFixPushLastAddress
           oOperandPop
           oOperandPop
           oOperandSwap
           @OperandPushArrayLowerBound
            [ oOperandChooseMode (mStatic)
            | mStatic:
            oOperandPushArrayLowerBound
            ] or >
            >>
           ;OperandPushArrayLowerBound
           oOperandSwapLeftAndDest
           @EmitCmp
            oOperandSwap
            [ oOperandChooseMode (mTemp)
            | *:
            oOperandSwap
            @OperandLeftOrRightIsTemp
             [ oOperandChooseMode (mManifest)
             | *:
             oOperandSwap
             [ oOperandChooseMode (mTemp)
             | mTemp:
             oOperandSwap
             >>yes
            ;OperandLeftOrRightIsTemp
            [@OperandLeftOrRightIsTemp (yes)
            | yes:
            oEmitDouble(iCmp)
            ] or >
            >>
           ;EmitCmp
           oOperandPushJumpCondition(iJge)
           oEmitConditionalForwardBranch
           oFixPushLastAddress
           oOperandPop
           oOperandPop
           oFixSwapAddresses
           oFixForwardBranch
           oFixPopAddress
           @EmitSubscriptAbort
            oOperandPushMode(mLineNum)
            oOperandSetLength(two)
            oEmitSingle(iPush)
            oOperandPop
            oOperandPushMode(mTrap)
            oOperandSetValue(trSubscriptAbort)
            oEmitSingle(iCall)
            oOperandPop
            >>
           ;EmitSubscriptAbort
           oFixForwardBranch
           oFixPopAddress
           >>
          ;EmitSubscriptRangeCheck
          ] or >
          oOperandSwap
          @OperandPushArrayLowerBound
           [ oOperandChooseMode (mStatic)
           | mStatic:
           oOperandPushArrayLowerBound
           ] or >
           >>
          ;OperandPushArrayLowerBound
          oOperandSwapLeftAndDest
          @OperandSubtractPop
           @OperandAreLeftAndRightManifest
            [ oOperandChooseMode (mManifest)
            | mManifest:
            oOperandSwap
            [ oOperandChooseMode (mTemp)
            | *:
            oOperandSwap
            >>no
           ;OperandAreLeftAndRightManifest
           [@OperandAreLeftAndRightManifest (no)
           | no:
           [ oOperandChooseManifestValue (one)
           | one:
           oOperandPop
           @OperandForceIntoTemp
            [ oOperandChooseMode (mTemp)
            | mTemp:
            ] or >
            >>
           ;OperandForceIntoTemp
           oEmitSingle(iDec)
           ] or >
           ] or >
           >>
          ;OperandSubtractPop
          oOperandPushMode(mManifest)
          oOperandSetLength(two)
          oOperandSetValue(two)
          oEmitDouble(iShl)
          oOperandPop
          oOperandSwap
          [ oOperandChooseMode (mStatic)
          | mStatic:
          oOperandPushMode(mManifest)
          oOperandSetLength(two)
          oOperandSetValue(eight)
          oOperandAddManifestValues
          oOperandPop
          @OperandForceAddressIntoTemp
           [ oOperandChooseMode (mStatic)
           | mStatic:
           @OperandPushTempWord
            oTempAllocate
            oOperandPushTemp
            oOperandSetValue(zero)
            oOperandSetLength(two)
            >>
           ;OperandPushTempWord
           oOperandSwap
           oEmitDouble(iLoada)
           oOperandPop
           ] or >
           oOperandSetLength(two)
           >>
          ;OperandForceAddressIntoTemp
          oEmitDouble(iAdd)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mTemp)
           | mTemp:
           oTempFree
           ] or >
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          ] or >
          oOperandSetMode(mTempIndirect)
          oOperandSetLength(two)
          >>
         ;OperandCheckedSubscriptNonManifestIntegerPop
         ] or >
         >>
        ;OperandSubscriptNonManifestIntegerPop
        oOperandSetLength(two)
        >>
       ;OperandSubscriptIntegerPop
       ] or >
       ] or >
       [ (tFetchInteger)
       | tFetchInteger:
       ] or >
       >>
      ;OperandPushVariable
      ] or >
      }
      [ (tAssignInteger)
      | tAssignInteger:
      @OperandAssignIntegerPopPop
       [ oOperandCompareLeftAndRight (no)
       | no:
       @EmitMove
        @OperandLeftOrRightIsTemp
         [ oOperandChooseMode (mTempIndirect)
         | *:
         oOperandSwap
         [ oOperandChooseMode (mTempIndirect)
         | *:
         oOperandSwap
         >>no
        ;OperandLeftOrRightIsTemp
        [@OperandLeftOrRightIsTemp (no)
        | *:
        [ oOperandChooseMode (mTempIndirect)
        | *:
        oOperandPushCopy
        @OperandForceIntoTemp
         [ oOperandChooseMode (mTempIndirect)
         | mTempIndirect:
         oOperandPushCopy
         oOperandSetMode(mTemp)
         oOperandSwap
         oEmitDouble(iMov)
         oOperandPop
         ] or >
         >>
        ;OperandForceIntoTemp
        oOperandSwapLeftAndDest
        oEmitDouble(iMov)
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mTemp)
         | mTemp:
         oTempFree
         ] or >
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        oOperandSwap
        >>
       ;EmitMove
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mTempIndirect)
        | mTempIndirect:
        oTempFree
        ] or >
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mTempIndirect)
        | mTempIndirect:
        oTempFree
        ] or >
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       ] or >
       >>
      ;OperandAssignIntegerPopPop
      ] or >
      >>
     ;OperandPushExpressionAssignPopPop
     >>
    ;AssignStmt
    ] or >
    }
    [ (tProcedureEnd)
    | *:
    ] or >
    >>
   ;Block
   ?tProcedureEnd (tProcedureEnd)
   oEmitNone(iLeave)
   oEmitNone(iReturn)
   >>
  ;Routine
  oFixForwardBranch
  oFixPopAddress
  ] or >
  }
  [ (tSkipProc)
  | tSkipProc:
  oEmitUnconditionalForwardBranch
  oFixPushLastAddress
  @Routine
   oEmitProcLabel(mProc)
   oEmitNone(iEnter)
   [ (tLiteralAddress)
   | *:
   oOperandPushMode(mArgument)
   oOperandSetValue(four)
   [ (tLiteralAddress)
   | tLiteralAddress:
   @OperandNextArgument
    oOperandSetMode(mManifest)
    oOperandPushMode(mManifest)
    oOperandSetValue(four)
    oOperandAddManifestValues
    oOperandPop
    oOperandSetMode(mArgument)
    >>
   ;OperandNextArgument
   oOperandPushCopy
   oOperandPushVariable
   oOperandSwap
   [ (tStoreAddress)
   | tStoreAddress:
   oOperandSetLength(two)
   @OperandAssignIntegerPopPop
    [ oOperandCompareLeftAndRight (no)
    | no:
    @EmitMove
     @OperandLeftOrRightIsTemp
      [ oOperandChooseMode (mArgument)
      | *:
      oOperandSwap
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandSwap
      >>no
     ;OperandLeftOrRightIsTemp
     [@OperandLeftOrRightIsTemp (no)
     | *:
     [ oOperandChooseMode (mArgument)
     | *:
     oOperandPushCopy
     @OperandForceIntoTemp
      [ oOperandChooseMode (mArgument)
      | *:
      [ oOperandChooseLength (two)
      | two:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iMov)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mArgument)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandSetMode(mTemp)
      ] or >
      >>
     ;OperandForceIntoTemp
     oOperandSwapLeftAndDest
     oEmitDouble(iMov)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mTemp)
      | mTemp:
      oTempFree
      ] or >
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandSwap
     >>
    ;EmitMove
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mArgument)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ] or >
    >>
   ;OperandAssignIntegerPopPop
   ] or >
   ] or >
   }
   [ (tParmEnd)
   | tParmEnd:
   ] or >
   oOperandPop
   @Block
    [ (tAssignBegin)
    | tAssignBegin:
    @AssignStmt
     oEmitSourceCoordinate
     ?tLiteralAddress (tLiteralAddress)
     @OperandPushVariable
      oOperandPushVariable
      [ (tFetchAddress)
      | tFetchAddress:
      oOperandSetMode(mStatic)
      @OperandForceIntoTemp
       [ oOperandChooseMode (mStatic)
       | *:
       [ oOperandChooseLength (two)
       | two:
       @OperandPushTempWord
        oTempAllocate
        oOperandPushTemp
        oOperandSetValue(zero)
        oOperandSetLength(two)
        >>
       ;OperandPushTempWord
       oOperandSwap
       oEmitDouble(iMov)
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandSetMode(mTemp)
       ] or >
       >>
      ;OperandForceIntoTemp
      oOperandSetMode(mTempIndirect)
      ] or >
      [ (tLiteralInteger)
      | *:
      [ (tLiteralInteger)
      | *:
      >>
     ;OperandPushVariable
     @OperandPushExpressionAssignPopPop
      [ (tLiteralInteger)
      | tLiteralInteger:
      oOperandPushInteger
      ] or >
      }
      [ (tLiteralAddress)
      | tLiteralAddress:
      @OperandPushVariable
       oOperandPushVariable
       [ (tFetchInteger)
       | *:
       [ (tFetchInteger)
       | *:
       [ (tFetchInteger)
       | tFetchInteger:
       ] or >
       >>
      ;OperandPushVariable
      ] or >
      }
      [ (tSubtract)
      | tSubtract:
      [ (tLiteralInteger)
      | *:
      @OperandSubtractPop
       @OperandAreLeftAndRightManifest
        [ oOperandChooseMode (mStatic)
        | *:
        >>no
       ;OperandAreLeftAndRightManifest
       [@OperandAreLeftAndRightManifest (no)
       | no:
       [ oOperandChooseManifestValue ()
       | *:
       @OperandForceLeftIntoTemp
        oOperandSwap
        [ oOperandChooseMode (mManifest)
        | *:
        @OperandForceIntoTemp
         [ oOperandChooseMode (mManifest)
         | *:
         [ oOperandChooseLength (two)
         | two:
         @OperandPushTempWord
          oTempAllocate
          oOperandPushTemp
          oOperandSetValue(zero)
          oOperandSetLength(two)
          >>
         ;OperandPushTempWord
         oOperandSwap
         oEmitDouble(iMov)
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mManifest)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         oOperandSetMode(mTemp)
         ] or >
         >>
        ;OperandForceIntoTemp
        oOperandSwap
        >>
       ;OperandForceLeftIntoTemp
       oEmitDouble(iSub)
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       ] or >
       >>
      ;OperandSubtractPop
      ] or >
      }
      [ (tLiteralInteger)
      | tLiteralInteger:
      oOperandPushInteger
      ] or >
      }
      [ (tAdd)
      | tAdd:
      [ (tAssignInteger)
      | tAssignInteger:
      @OperandAddAssignPopPopPop
       [ oOperandCompareRightAndDest (no)
       | *:
       oOperandSwap
       [ oOperandCompareRightAndDest (no)
       | *:
       oOperandSwap
       @OperandAddPop
        @OperandAreLeftAndRightManifest
         [ oOperandChooseMode (mManifest)
         | mManifest:
         oOperandSwap
         [ oOperandChooseMode (mTemp)
         | *:
         oOperandSwap
         >>no
        ;OperandAreLeftAndRightManifest
        [@OperandAreLeftAndRightManifest (no)
        | no:
        [ oOperandChooseManifestValue (one)
        | one:
        oOperandPop
        @OperandForceIntoTemp
         [ oOperandChooseMode (mTemp)
         | mTemp:
         ] or >
         >>
        ;OperandForceIntoTemp
        oEmitSingle(iInc)
        ] or >
        ] or >
        >>
       ;OperandAddPop
       @OperandAssignIntegerPopPop
        [ oOperandCompareLeftAndRight (no)
        | no:
        @EmitMove
         @OperandLeftOrRightIsTemp
          [ oOperandChooseMode (mTemp)
          | mTemp:
          >>yes
         ;OperandLeftOrRightIsTemp
         [@OperandLeftOrRightIsTemp (yes)
         | yes:
         oEmitDouble(iMov)
         ] or >
         >>
        ;EmitMove
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mTemp)
         | mTemp:
         oTempFree
         ] or >
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mTempIndirect)
         | mTempIndirect:
         oTempFree
         ] or >
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        ] or >
        >>
       ;OperandAssignIntegerPopPop
       >>
      ;OperandAddAssignPopPopPop
      ] or >
      >>
     ;OperandPushExpressionAssignPopPop
     >>
    ;AssignStmt
    ] or >
    }
    [ (tProcedureEnd)
    | *:
    ] or >
    >>
   ;Block
   ?tProcedureEnd (tProcedureEnd)
   oEmitNone(iLeave)
   oEmitNone(iReturn)
   >>
  ;Routine
  oFixForwardBranch
  oFixPopAddress
  ] or >
  }
  [ (tArrayDescriptor)
  | tArrayDescriptor:
  ?tLiteralInteger (tLiteralInteger)
  oOperandPushInteger
  ?tLiteralAddress (tLiteralAddress)
  oOperandPushVariable
  ?tStoreInteger (tStoreInteger)
  oOperandSwap
  oArrayEnterLowerBound
  @OperandAssignIntegerPopPop
   [ oOperandCompareLeftAndRight (no)
   | no:
   @EmitMove
    @OperandLeftOrRightIsTemp
     [ oOperandChooseMode (mManifest)
     | *:
     oOperandSwap
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandSwap
     >>no
    ;OperandLeftOrRightIsTemp
    [@OperandLeftOrRightIsTemp (no)
    | *:
    [ oOperandChooseMode (mManifest)
    | mManifest:
    oEmitDouble(iMov)
    ] or >
    >>
   ;EmitMove
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mManifest)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStatic)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   ] or >
   >>
  ;OperandAssignIntegerPopPop
  ?tLiteralInteger (tLiteralInteger)
  oOperandPushInteger
  ?tLiteralAddress (tLiteralAddress)
  oOperandPushVariable
  ?tStoreInteger (tStoreInteger)
  oOperandSwap
  oArrayEnterUpperBound
  @OperandAssignIntegerPopPop
   [ oOperandCompareLeftAndRight (no)
   | no:
   @EmitMove
    @OperandLeftOrRightIsTemp
     [ oOperandChooseMode (mManifest)
     | *:
     oOperandSwap
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandSwap
     >>no
    ;OperandLeftOrRightIsTemp
    [@OperandLeftOrRightIsTemp (no)
    | *:
    [ oOperandChooseMode (mManifest)
    | mManifest:
    oEmitDouble(iMov)
    ] or >
    >>
   ;EmitMove
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mManifest)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStatic)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   ] or >
   >>
  ;OperandAssignIntegerPopPop
  ] or >
  }
  [ (tSkipProc)
  | tSkipProc:
  oEmitUnconditionalForwardBranch
  oFixPushLastAddress
  @Routine
   oEmitProcLabel(mProc)
   oEmitNone(iEnter)
   [ (tLiteralAddress)
   | *:
   oOperandPushMode(mArgument)
   oOperandSetValue(four)
   [ (tLiteralAddress)
   | tLiteralAddress:
   @OperandNextArgument
    oOperandSetMode(mManifest)
    oOperandPushMode(mManifest)
    oOperandSetValue(four)
    oOperandAddManifestValues
    oOperandPop
    oOperandSetMode(mArgument)
    >>
   ;OperandNextArgument
   oOperandPushCopy
   oOperandPushVariable
   oOperandSwap
   [ (tStoreAddress)
   | tStoreAddress:
   oOperandSetLength(two)
   @OperandAssignIntegerPopPop
    [ oOperandCompareLeftAndRight (no)
    | no:
    @EmitMove
     @OperandLeftOrRightIsTemp
      [ oOperandChooseMode (mArgument)
      | *:
      oOperandSwap
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandSwap
      >>no
     ;OperandLeftOrRightIsTemp
     [@OperandLeftOrRightIsTemp (no)
     | *:
     [ oOperandChooseMode (mArgument)
     | *:
     oOperandPushCopy
     @OperandForceIntoTemp
      [ oOperandChooseMode (mArgument)
      | *:
      [ oOperandChooseLength (two)
      | two:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iMov)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mArgument)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandSetMode(mTemp)
      ] or >
      >>
     ;OperandForceIntoTemp
     oOperandSwapLeftAndDest
     oEmitDouble(iMov)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mTemp)
      | mTemp:
      oTempFree
      ] or >
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandSwap
     >>
    ;EmitMove
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mArgument)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ] or >
    >>
   ;OperandAssignIntegerPopPop
   ] or >
   ] or >
   }
   [ (tLiteralAddress)
   | tLiteralAddress:
   @OperandNextArgument
    oOperandSetMode(mManifest)
    oOperandPushMode(mManifest)
    oOperandSetValue(four)
    oOperandAddManifestValues
    oOperandPop
    oOperandSetMode(mArgument)
    >>
   ;OperandNextArgument
   oOperandPushCopy
   oOperandPushVariable
   oOperandSwap
   [ (tStoreInteger)
   | tStoreInteger:
   oOperandSetLength(two)
   @OperandAssignIntegerPopPop
    [ oOperandCompareLeftAndRight (no)
    | no:
    @EmitMove
     @OperandLeftOrRightIsTemp
      [ oOperandChooseMode (mArgument)
      | *:
      oOperandSwap
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandSwap
      >>no
     ;OperandLeftOrRightIsTemp
     [@OperandLeftOrRightIsTemp (no)
     | *:
     [ oOperandChooseMode (mArgument)
     | *:
     oOperandPushCopy
     @OperandForceIntoTemp
      [ oOperandChooseMode (mArgument)
      | *:
      [ oOperandChooseLength (two)
      | two:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iMov)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mArgument)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandSetMode(mTemp)
      ] or >
      >>
     ;OperandForceIntoTemp
     oOperandSwapLeftAndDest
     oEmitDouble(iMov)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mTemp)
      | mTemp:
      oTempFree
      ] or >
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandSwap
     >>
    ;EmitMove
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mArgument)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ] or >
    >>
   ;OperandAssignIntegerPopPop
   ] or >
   ] or >
   }
   [ (tParmEnd)
   | tParmEnd:
   ] or >
   oOperandPop
   @Block
    [ (tInitialValue)
    | tInitialValue:
    @OperandPushExpression
     [ (tLiteralInteger)
     | tLiteralInteger:
     oOperandPushInteger
     ] or >
     }
     [ (tInitEnd)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    ?tInitEnd (tInitEnd)
    ?tLiteralAddress (tLiteralAddress)
    oOperandPushVariable
    oOperandSwap
    [ (tStoreInteger)
    | tStoreInteger:
    oOperandSetLength(two)
    @OperandAssignIntegerPopPop
     [ oOperandCompareLeftAndRight (no)
     | no:
     @EmitMove
      @OperandLeftOrRightIsTemp
       [ oOperandChooseMode (mManifest)
       | *:
       oOperandSwap
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandSwap
       >>no
      ;OperandLeftOrRightIsTemp
      [@OperandLeftOrRightIsTemp (no)
      | *:
      [ oOperandChooseMode (mManifest)
      | mManifest:
      oEmitDouble(iMov)
      ] or >
      >>
     ;EmitMove
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mManifest)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     ] or >
     >>
    ;OperandAssignIntegerPopPop
    ] or >
    ] or >
    }
    [ (tWhileBegin)
    | tWhileBegin:
    @WhileStmt
     oFixPushAddress
     oEmitMergeSourceCoordinate
     @OperandPushBooleanControlExpression
      @OperandPushExpression
       [ (tLiteralAddress)
       | tLiteralAddress:
       @OperandPushVariable
        oOperandPushVariable
        [ (tFetchInteger)
        | *:
        [ (tFetchInteger)
        | *:
        [ (tFetchInteger)
        | tFetchInteger:
        ] or >
        >>
       ;OperandPushVariable
       ] or >
       }
       [ (tLiteralAddress)
       | tLiteralAddress:
       @OperandPushVariable
        oOperandPushVariable
        [ (tFetchInteger)
        | *:
        [ (tFetchInteger)
        | *:
        [ (tFetchInteger)
        | tFetchInteger:
        ] or >
        >>
       ;OperandPushVariable
       ] or >
       }
       [ (tLE)
       | tLE:
       @OperandGreaterPop
        [ oOperandCompareLeftAndRight (no)
        | no:
        [ oOperandChooseManifestValue ()
        | *:
        oOperandSwap
        [ oOperandChooseManifestValue ()
        | *:
        oOperandSwap
        @EmitCmp
         oOperandSwap
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandSwap
         @OperandLeftOrRightIsTemp
          [ oOperandChooseMode (mStatic)
          | *:
          oOperandSwap
          [ oOperandChooseMode (mStatic)
          | *:
          oOperandSwap
          >>no
         ;OperandLeftOrRightIsTemp
         [@OperandLeftOrRightIsTemp (no)
         | *:
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandPushCopy
         @OperandForceIntoTemp
          [ oOperandChooseMode (mStatic)
          | *:
          [ oOperandChooseLength (two)
          | two:
          @OperandPushTempWord
           oTempAllocate
           oOperandPushTemp
           oOperandSetValue(zero)
           oOperandSetLength(two)
           >>
          ;OperandPushTempWord
          oOperandSwap
          oEmitDouble(iMov)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandSetMode(mTemp)
          ] or >
          >>
         ;OperandForceIntoTemp
         oOperandSwapLeftAndDest
         oEmitDouble(iCmp)
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mTemp)
          | mTemp:
          oTempFree
          ] or >
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         oOperandSwap
         >>
        ;EmitCmp
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        oOperandPushJumpCondition(iJgt)
        ] or >
        >>
       ;OperandGreaterPop
       @OperandNot
        @OperandForceToJumpCondition
         [ oOperandIsJumpCondition (yes)
         | yes:
         ] or >
         >>
        ;OperandForceToJumpCondition
        @OperandComplementJumpCondition
         [ oOperandChooseJumpCondition (iJgt)
         | *:
         oOperandComplementJumpCondition
         >>
        ;OperandComplementJumpCondition
        >>
       ;OperandNot
       ] or >
       }
       [ (tWhileTest)
       | *:
       ] or >
       >>
      ;OperandPushExpression
      @OperandForceToJumpCondition
       [ oOperandIsJumpCondition (yes)
       | yes:
       ] or >
       >>
      ;OperandForceToJumpCondition
      >>
     ;OperandPushBooleanControlExpression
     ?tWhileTest (tWhileTest)
     @OperandComplementJumpCondition
      [ oOperandChooseJumpCondition (iJle)
      | *:
      oOperandComplementJumpCondition
      >>
     ;OperandComplementJumpCondition
     [ oOperandChooseJumpCondition (iJgt)
     | *:
     @OperandInfixOr
      @OperandForceToJumpCondition
       [ oOperandIsJumpCondition (yes)
       | yes:
       ] or >
       >>
      ;OperandForceToJumpCondition
      [ oOperandChooseJumpCondition (iJgt)
      | *:
      oEmitConditionalForwardBranch
      oFixAndFreeFalseBranches
      oFixPushLastAddress
      oOperandMergeShuntsWithAddress
      oFixPopAddress
      >>
     ;OperandInfixOr
     @Statements
      @Block
       [ (tWriteBegin)
       | tWriteBegin:
       @WriteProc
        oEmitSourceCoordinate
        [ (tTrapBegin)
        | *:
        @WriteParameter
         ?tTrapBegin (tTrapBegin)
         ?tLiteralAddress (tLiteralAddress)
         @OperandPushVariable
          oOperandPushVariable
          [ (tVarParm)
          | *:
          [ (tVarParm)
          | *:
          [ (tVarParm)
          | *:
          >>
         ;OperandPushVariable
         @OperandForceToStack
          [ oOperandChooseLength (two)
          | two:
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tVarParm (tVarParm)
         ?tParmEnd (tParmEnd)
         @OperandPushExpression
          [ (tSkipString)
          | tSkipString:
          oEmitNone(iData)
          ?tStringData (tStringData)
          oEmitString
          oEmitNone(iText)
          ] or >
          }
          [ (tLiteralAddress)
          | tLiteralAddress:
          @OperandPushVariable
           oOperandPushVariable
           [ (tFetchChar)
           | *:
           [ (tFetchChar)
           | *:
           [ (tFetchChar)
           | tFetchChar:
           oOperandSetLength(regCX)
           ] or >
           >>
          ;OperandPushVariable
          ] or >
          }
          [ (tParmEnd)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         [ (tParmEnd)
         | *:
         @OperandForceToStack
          [ oOperandChooseLength (regCX)
          | regCX:
          @OperandForceAddressIntoTemp
           [ oOperandChooseMode (mStatic)
           | mStatic:
           @OperandPushTempWord
            oTempAllocate
            oOperandPushTemp
            oOperandSetValue(zero)
            oOperandSetLength(two)
            >>
           ;OperandPushTempWord
           oOperandSwap
           oEmitDouble(iLoada)
           oOperandPop
           ] or >
           oOperandSetLength(two)
           >>
          ;OperandForceAddressIntoTemp
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mTemp)
           | mTemp:
           oTempFree
           ] or >
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tParmEnd (tParmEnd)
         @OperandPushExpression
          [ (tLiteralInteger)
          | tLiteralInteger:
          oOperandPushInteger
          ] or >
          }
          [ (tParmEnd)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         @OperandForceToStack
          [ oOperandChooseLength (two)
          | two:
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mManifest)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tParmEnd (tParmEnd)
         ?tTrap (tTrap)
         oOperandPushTrap
         oEmitSingle(iCall)
         oOperandPop
         oOperandPushMode(mStackReg)
         oOperandSetLength(two)
         oOperandPushMode(mManifest)
         oOperandSetLength(two)
         oOperandSetValue(twelve)
         oEmitDouble(iAdd)
         oOperandPop
         oOperandPop
         >>
        ;WriteParameter
        }
        [ (tTrapBegin)
        | *:
        @WriteParameter
         ?tTrapBegin (tTrapBegin)
         ?tLiteralAddress (tLiteralAddress)
         @OperandPushVariable
          oOperandPushVariable
          [ (tVarParm)
          | *:
          [ (tVarParm)
          | *:
          [ (tVarParm)
          | *:
          >>
         ;OperandPushVariable
         @OperandForceToStack
          [ oOperandChooseLength (two)
          | two:
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tVarParm (tVarParm)
         ?tParmEnd (tParmEnd)
         @OperandPushExpression
          [ (tLiteralAddress)
          | tLiteralAddress:
          @OperandPushVariable
           oOperandPushVariable
           [ (tSubscriptBegin)
           | *:
           [ (tSubscriptBegin)
           | tSubscriptBegin:
           @OperandPushExpression
            [ (tLiteralAddress)
            | tLiteralAddress:
            @OperandPushVariable
             oOperandPushVariable
             [ (tFetchAddress)
             | tFetchAddress:
             oOperandSetMode(mStatic)
             @OperandForceIntoTemp
              [ oOperandChooseMode (mStatic)
              | *:
              [ oOperandChooseLength (two)
              | two:
              @OperandPushTempWord
               oTempAllocate
               oOperandPushTemp
               oOperandSetValue(zero)
               oOperandSetLength(two)
               >>
              ;OperandPushTempWord
              oOperandSwap
              oEmitDouble(iMov)
              @OperandPopAndFreeTemp
               [ oOperandChooseMode (mStatic)
               | *:
               oOperandPop
               >>
              ;OperandPopAndFreeTemp
              oOperandSetMode(mTemp)
              ] or >
              >>
             ;OperandForceIntoTemp
             oOperandSetMode(mTempIndirect)
             ] or >
             [ (tSubscriptBegin)
             | tSubscriptBegin:
             @OperandPushExpression
              [ (tLiteralAddress)
              | tLiteralAddress:
              @OperandPushVariable
               oOperandPushVariable
               [ (tFetchInteger)
               | *:
               [ (tFetchInteger)
               | *:
               [ (tFetchInteger)
               | tFetchInteger:
               ] or >
               >>
              ;OperandPushVariable
              ] or >
              }
              [ (tSubscriptInteger)
              | *:
              ] or >
              >>
             ;OperandPushExpression
             [ (tSubscriptInteger)
             | tSubscriptInteger:
             @OperandSubscriptIntegerPop
              [ oOperandChooseMode (mStatic)
              | *:
              @OperandSubscriptNonManifestIntegerPop
               [ oOptionTestChecking (yes)
               | yes:
               @OperandCheckedSubscriptNonManifestIntegerPop
                @OperandForceIntoTemp
                 [ oOperandChooseMode (mStatic)
                 | *:
                 [ oOperandChooseLength (two)
                 | two:
                 @OperandPushTempWord
                  oTempAllocate
                  oOperandPushTemp
                  oOperandSetValue(zero)
                  oOperandSetLength(two)
                  >>
                 ;OperandPushTempWord
                 oOperandSwap
                 oEmitDouble(iMov)
                 @OperandPopAndFreeTemp
                  [ oOperandChooseMode (mStatic)
                  | *:
                  oOperandPop
                  >>
                 ;OperandPopAndFreeTemp
                 oOperandSetMode(mTemp)
                 ] or >
                 >>
                ;OperandForceIntoTemp
                [ oOptionTestChecking (yes)
                | yes:
                @EmitSubscriptRangeCheck
                 oOperandSwap
                 @OperandPushArrayUpperBound
                  [ oOperandChooseMode (mTempIndirect)
                  | mTempIndirect:
                  oOperandPushCopy
                  oOperandSetValue(four)
                  ] or >
                  >>
                 ;OperandPushArrayUpperBound
                 oOperandSwapLeftAndDest
                 @EmitCmp
                  oOperandSwap
                  [ oOperandChooseMode (mTemp)
                  | *:
                  oOperandSwap
                  @OperandLeftOrRightIsTemp
                   [ oOperandChooseMode (mTempIndirect)
                   | *:
                   oOperandSwap
                   [ oOperandChooseMode (mTemp)
                   | mTemp:
                   oOperandSwap
                   >>yes
                  ;OperandLeftOrRightIsTemp
                  [@OperandLeftOrRightIsTemp (yes)
                  | yes:
                  oEmitDouble(iCmp)
                  ] or >
                  >>
                 ;EmitCmp
                 oOperandPushJumpCondition(iJgt)
                 oEmitConditionalForwardBranch
                 oFixPushLastAddress
                 oOperandPop
                 oOperandPop
                 oOperandSwap
                 @OperandPushArrayLowerBound
                  [ oOperandChooseMode (mTempIndirect)
                  | *:
                  oOperandPushCopy
                  oOperandSetLength(two)
                  >>
                 ;OperandPushArrayLowerBound
                 oOperandSwapLeftAndDest
                 @EmitCmp
                  oOperandSwap
                  [ oOperandChooseMode (mTemp)
                  | *:
                  oOperandSwap
                  @OperandLeftOrRightIsTemp
                   [ oOperandChooseMode (mTempIndirect)
                   | *:
                   oOperandSwap
                   [ oOperandChooseMode (mTemp)
                   | mTemp:
                   oOperandSwap
                   >>yes
                  ;OperandLeftOrRightIsTemp
                  [@OperandLeftOrRightIsTemp (yes)
                  | yes:
                  oEmitDouble(iCmp)
                  ] or >
                  >>
                 ;EmitCmp
                 oOperandPushJumpCondition(iJge)
                 oEmitConditionalForwardBranch
                 oFixPushLastAddress
                 oOperandPop
                 oOperandPop
                 oFixSwapAddresses
                 oFixForwardBranch
                 oFixPopAddress
                 @EmitSubscriptAbort
                  oOperandPushMode(mLineNum)
                  oOperandSetLength(two)
                  oEmitSingle(iPush)
                  oOperandPop
                  oOperandPushMode(mTrap)
                  oOperandSetValue(trSubscriptAbort)
                  oEmitSingle(iCall)
                  oOperandPop
                  >>
                 ;EmitSubscriptAbort
                 oFixForwardBranch
                 oFixPopAddress
                 >>
                ;EmitSubscriptRangeCheck
                ] or >
                oOperandSwap
                @OperandPushArrayLowerBound
                 [ oOperandChooseMode (mTempIndirect)
                 | *:
                 oOperandPushCopy
                 oOperandSetLength(two)
                 >>
                ;OperandPushArrayLowerBound
                oOperandSwapLeftAndDest
                @OperandSubtractPop
                 @OperandAreLeftAndRightManifest
                  [ oOperandChooseMode (mTempIndirect)
                  | *:
                  >>no
                 ;OperandAreLeftAndRightManifest
                 [@OperandAreLeftAndRightManifest (no)
                 | no:
                 [ oOperandChooseManifestValue ()
                 | *:
                 @OperandForceLeftIntoTemp
                  oOperandSwap
                  [ oOperandChooseMode (mTemp)
                  | mTemp:
                  oOperandSwap
                  ] or >
                  >>
                 ;OperandForceLeftIntoTemp
                 oEmitDouble(iSub)
                 @OperandPopAndFreeTemp
                  [ oOperandChooseMode (mTempIndirect)
                  | mTempIndirect:
                  oTempFree
                  ] or >
                  oOperandPop
                  >>
                 ;OperandPopAndFreeTemp
                 ] or >
                 >>
                ;OperandSubtractPop
                oOperandPushMode(mManifest)
                oOperandSetLength(two)
                oOperandSetValue(two)
                oEmitDouble(iShl)
                oOperandPop
                oOperandSwap
                [ oOperandChooseMode (mTempIndirect)
                | *:
                @OperandForceAddressIntoTemp
                 [ oOperandChooseMode (mTempIndirect)
                 | mTempIndirect:
                 [ oOperandChooseValue (zero)
                 | zero:
                 oOperandSetMode(mTemp)
                 ] or >
                 ] or >
                 oOperandSetLength(two)
                 >>
                ;OperandForceAddressIntoTemp
                oOperandPushMode(mManifest)
                oOperandSetLength(two)
                oOperandSetValue(eight)
                oEmitDouble(iAdd)
                oOperandPop
                oEmitDouble(iAdd)
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mTemp)
                 | mTemp:
                 oTempFree
                 ] or >
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                oOperandSetMode(mTempIndirect)
                oOperandSetLength(two)
                >>
               ;OperandCheckedSubscriptNonManifestIntegerPop
               ] or >
               >>
              ;OperandSubscriptNonManifestIntegerPop
              oOperandSetLength(two)
              >>
             ;OperandSubscriptIntegerPop
             ] or >
             ] or >
             [ (tFetchInteger)
             | tFetchInteger:
             ] or >
             >>
            ;OperandPushVariable
            ] or >
            }
            [ (tSubscriptChar)
            | *:
            ] or >
            >>
           ;OperandPushExpression
           [ (tSubscriptChar)
           | tSubscriptChar:
           @OperandSubscriptCharPop
            [ oOperandChooseMode (mTempIndirect)
            | *:
            @OperandSubscriptNonManifestCharPop
             [ oOptionTestChecking (yes)
             | yes:
             @OperandCheckedSubscriptNonManifestCharPop
              @OperandForceIntoTemp
               [ oOperandChooseMode (mTempIndirect)
               | mTempIndirect:
               oOperandPushCopy
               oOperandSetMode(mTemp)
               oOperandSwap
               oEmitDouble(iMov)
               oOperandPop
               ] or >
               >>
              ;OperandForceIntoTemp
              [ oOptionTestChecking (yes)
              | yes:
              @EmitSubscriptRangeCheck
               oOperandSwap
               @OperandPushArrayUpperBound
                [ oOperandChooseMode (mStatic)
                | mStatic:
                oOperandPushArrayUpperBound
                ] or >
                >>
               ;OperandPushArrayUpperBound
               oOperandSwapLeftAndDest
               @EmitCmp
                oOperandSwap
                [ oOperandChooseMode (mTemp)
                | *:
                oOperandSwap
                @OperandLeftOrRightIsTemp
                 [ oOperandChooseMode (mManifest)
                 | *:
                 oOperandSwap
                 [ oOperandChooseMode (mTemp)
                 | mTemp:
                 oOperandSwap
                 >>yes
                ;OperandLeftOrRightIsTemp
                [@OperandLeftOrRightIsTemp (yes)
                | yes:
                oEmitDouble(iCmp)
                ] or >
                >>
               ;EmitCmp
               oOperandPushJumpCondition(iJgt)
               oEmitConditionalForwardBranch
               oFixPushLastAddress
               oOperandPop
               oOperandPop
               oOperandSwap
               @OperandPushArrayLowerBound
                [ oOperandChooseMode (mStatic)
                | mStatic:
                oOperandPushArrayLowerBound
                ] or >
                >>
               ;OperandPushArrayLowerBound
               oOperandSwapLeftAndDest
               @EmitCmp
                oOperandSwap
                [ oOperandChooseMode (mTemp)
                | *:
                oOperandSwap
                @OperandLeftOrRightIsTemp
                 [ oOperandChooseMode (mManifest)
                 | *:
                 oOperandSwap
                 [ oOperandChooseMode (mTemp)
                 | mTemp:
                 oOperandSwap
                 >>yes
                ;OperandLeftOrRightIsTemp
                [@OperandLeftOrRightIsTemp (yes)
                | yes:
                oEmitDouble(iCmp)
                ] or >
                >>
               ;EmitCmp
               oOperandPushJumpCondition(iJge)
               oEmitConditionalForwardBranch
               oFixPushLastAddress
               oOperandPop
               oOperandPop
               oFixSwapAddresses
               oFixForwardBranch
               oFixPopAddress
               @EmitSubscriptAbort
                oOperandPushMode(mLineNum)
                oOperandSetLength(two)
                oEmitSingle(iPush)
                oOperandPop
                oOperandPushMode(mTrap)
                oOperandSetValue(trSubscriptAbort)
                oEmitSingle(iCall)
                oOperandPop
                >>
               ;EmitSubscriptAbort
               oFixForwardBranch
               oFixPopAddress
               >>
              ;EmitSubscriptRangeCheck
              ] or >
              oOperandSwap
              [ oOperandChooseMode (mStatic)
              | mStatic:
              oOperandPushMode(mManifest)
              oOperandSetLength(two)
              oOperandSetValue(eight)
              oOperandAddManifestValues
              oOperandPop
              @OperandForceAddressIntoTemp
               [ oOperandChooseMode (mStatic)
               | mStatic:
               @OperandPushTempWord
                oTempAllocate
                oOperandPushTemp
                oOperandSetValue(zero)
                oOperandSetLength(two)
                >>
               ;OperandPushTempWord
               oOperandSwap
               oEmitDouble(iLoada)
               oOperandPop
               ] or >
               oOperandSetLength(two)
               >>
              ;OperandForceAddressIntoTemp
              oEmitDouble(iAdd)
              @OperandPopAndFreeTemp
               [ oOperandChooseMode (mTemp)
               | mTemp:
               oTempFree
               ] or >
               oOperandPop
               >>
              ;OperandPopAndFreeTemp
              ] or >
              oOperandSetMode(mTempIndirect)
              oOperandSetLength(one)
              >>
             ;OperandCheckedSubscriptNonManifestCharPop
             ] or >
             >>
            ;OperandSubscriptNonManifestCharPop
            oOperandSetLength(regCX)
            >>
           ;OperandSubscriptCharPop
           ] or >
           ] or >
           [ (tFetchChar)
           | tFetchChar:
           oOperandSetLength(regCX)
           ] or >
           >>
          ;OperandPushVariable
          ] or >
          }
          [ (tParmEnd)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         [ (tParmEnd)
         | *:
         @OperandForceToStack
          [ oOperandChooseLength (regCX)
          | regCX:
          @OperandForceAddressIntoTemp
           [ oOperandChooseMode (mTempIndirect)
           | mTempIndirect:
           [ oOperandChooseValue (zero)
           | zero:
           oOperandSetMode(mTemp)
           ] or >
           ] or >
           oOperandSetLength(two)
           >>
          ;OperandForceAddressIntoTemp
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mTemp)
           | mTemp:
           oTempFree
           ] or >
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tParmEnd (tParmEnd)
         @OperandPushExpression
          [ (tLiteralInteger)
          | tLiteralInteger:
          oOperandPushInteger
          ] or >
          }
          [ (tParmEnd)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         @OperandForceToStack
          [ oOperandChooseLength (two)
          | two:
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mManifest)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tParmEnd (tParmEnd)
         ?tTrap (tTrap)
         oOperandPushTrap
         oEmitSingle(iCall)
         oOperandPop
         oOperandPushMode(mStackReg)
         oOperandSetLength(two)
         oOperandPushMode(mManifest)
         oOperandSetLength(two)
         oOperandSetValue(twelve)
         oEmitDouble(iAdd)
         oOperandPop
         oOperandPop
         >>
        ;WriteParameter
        }
        [ (tWriteEnd)
        | tWriteEnd:
        ] or >
        >>
       ;WriteProc
       ] or >
       }
       [ (tAssignBegin)
       | tAssignBegin:
       @AssignStmt
        oEmitSourceCoordinate
        ?tLiteralAddress (tLiteralAddress)
        @OperandPushVariable
         oOperandPushVariable
         [ (tLiteralAddress)
         | *:
         [ (tLiteralAddress)
         | *:
         [ (tLiteralAddress)
         | *:
         >>
        ;OperandPushVariable
        @OperandPushExpressionAssignPopPop
         [ (tLiteralAddress)
         | tLiteralAddress:
         @OperandPushVariable
          oOperandPushVariable
          [ (tFetchInteger)
          | *:
          [ (tFetchInteger)
          | *:
          [ (tFetchInteger)
          | tFetchInteger:
          ] or >
          >>
         ;OperandPushVariable
         ] or >
         }
         [ (tLiteralInteger)
         | tLiteralInteger:
         oOperandPushInteger
         ] or >
         }
         [ (tAdd)
         | tAdd:
         [ (tAssignInteger)
         | tAssignInteger:
         @OperandAddAssignPopPopPop
          [ oOperandCompareRightAndDest (no)
          | *:
          oOperandSwap
          [ oOperandCompareRightAndDest (yes)
          | yes:
          oOperandPop
          @OperandAddRightToLeftPop
           [ oOperandChooseManifestValue (one)
           | one:
           oOperandPop
           oEmitSingle(iInc)
           ] or >
           >>
          ;OperandAddRightToLeftPop
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          ] or >
          >>
         ;OperandAddAssignPopPopPop
         ] or >
         >>
        ;OperandPushExpressionAssignPopPop
        >>
       ;AssignStmt
       ] or >
       }
       [ (tWhileEnd)
       | *:
       ] or >
       >>
      ;Block
      >>
     ;Statements
     ?tWhileEnd (tWhileEnd)
     oEmitUnconditionalBackwardBranch
     oFixPopAddress
     oFixAndFreeShuntList
     oOperandPop
     >>
    ;WhileStmt
    ] or >
    }
    [ (tProcedureEnd)
    | *:
    ] or >
    >>
   ;Block
   ?tProcedureEnd (tProcedureEnd)
   oEmitNone(iLeave)
   oEmitNone(iReturn)
   >>
  ;Routine
  oFixForwardBranch
  oFixPopAddress
  ] or >
  }
  [ (tAssignBegin)
  | tAssignBegin:
  @AssignStmt
   oEmitSourceCoordinate
   ?tLiteralAddress (tLiteralAddress)
   @OperandPushVariable
    oOperandPushVariable
    [ (tSubscriptBegin)
    | *:
    [ (tSubscriptBegin)
    | tSubscriptBegin:
    @OperandPushExpression
     [ (tLiteralInteger)
     | tLiteralInteger:
     oOperandPushInteger
     ] or >
     }
     [ (tSubscriptChar)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    [ (tSubscriptChar)
    | tSubscriptChar:
    @OperandSubscriptCharPop
     [ oOperandChooseMode (mManifest)
     | mManifest:
     oOperandSwap
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandSetLength(regCX)
     oOperandSwap
     oOperandFoldManifestSubscript
     oOperandPop
     ] or >
     oOperandSetLength(regCX)
     >>
    ;OperandSubscriptCharPop
    ] or >
    ] or >
    [ (tSkipString)
    | *:
    >>
   ;OperandPushVariable
   @OperandPushExpressionAssignPopPop
    [ (tSkipString)
    | tSkipString:
    oEmitNone(iData)
    ?tStringData (tStringData)
    oEmitString
    oEmitNone(iText)
    ] or >
    }
    [ (tLiteralAddress)
    | tLiteralAddress:
    @OperandPushVariable
     oOperandPushVariable
     [ (tFetchChar)
     | *:
     [ (tFetchChar)
     | *:
     [ (tFetchChar)
     | tFetchChar:
     oOperandSetLength(regCX)
     ] or >
     >>
    ;OperandPushVariable
    ] or >
    }
    [ (tAssignChar)
    | tAssignChar:
    @OperandAssignCharPopPop
     @SaveTempRegsToStack
      oOperandPushMode(mTemp)
      oOperandSetLength(two)
      oOperandSetRegnum(one)
      oEmitSingle(iPush)
      oOperandSetRegnum(two)
      oEmitSingle(iPush)
      oOperandSetRegnum(regCX)
      oEmitSingle(iPush)
      oOperandSetRegnum(four)
      oEmitSingle(iPush)
      oOperandPop
      >>
     ;SaveTempRegsToStack
     @OperandForceAddressIntoTemp
      [ oOperandChooseMode (mStatic)
      | mStatic:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iLoada)
      oOperandPop
      ] or >
      oOperandSetLength(two)
      >>
     ;OperandForceAddressIntoTemp
     @OperandForceToStack
      [ oOperandChooseLength (two)
      | two:
      ] or >
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mTemp)
       | mTemp:
       oTempFree
       ] or >
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mStack)
      >>
     ;OperandForceToStack
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStack)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     @OperandForceAddressIntoTemp
      [ oOperandChooseMode (mStatic)
      | mStatic:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iLoada)
      oOperandPop
      ] or >
      oOperandSetLength(two)
      >>
     ;OperandForceAddressIntoTemp
     @OperandForceToStack
      [ oOperandChooseLength (two)
      | two:
      ] or >
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mTemp)
       | mTemp:
       oTempFree
       ] or >
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mStack)
      >>
     ;OperandForceToStack
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStack)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mTrap)
     oOperandSetValue(trAssignString)
     oOperandSetLength(two)
     oEmitSingle(iCall)
     oOperandPop
     oOperandPushMode(mStackReg)
     oOperandSetLength(two)
     oOperandPushMode(mManifest)
     oOperandSetLength(two)
     oOperandSetValue(eight)
     oEmitDouble(iAdd)
     oOperandPop
     oOperandPop
     @RestoreTempRegsFromStack
      oOperandPushMode(mTemp)
      oOperandSetLength(two)
      oOperandSetRegnum(four)
      oEmitSingle(iPop)
      oOperandSetRegnum(regCX)
      oEmitSingle(iPop)
      oOperandSetRegnum(two)
      oEmitSingle(iPop)
      oOperandSetRegnum(one)
      oEmitSingle(iPop)
      oOperandPop
      >>
     ;RestoreTempRegsFromStack
     >>
    ;OperandAssignCharPopPop
    ] or >
    >>
   ;OperandPushExpressionAssignPopPop
   >>
  ;AssignStmt
  ] or >
  }
  [ (tAssignBegin)
  | tAssignBegin:
  @AssignStmt
   oEmitSourceCoordinate
   ?tLiteralAddress (tLiteralAddress)
   @OperandPushVariable
    oOperandPushVariable
    [ (tSubscriptBegin)
    | *:
    [ (tSubscriptBegin)
    | tSubscriptBegin:
    @OperandPushExpression
     [ (tLiteralInteger)
     | tLiteralInteger:
     oOperandPushInteger
     ] or >
     }
     [ (tSubscriptChar)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    [ (tSubscriptChar)
    | tSubscriptChar:
    @OperandSubscriptCharPop
     [ oOperandChooseMode (mManifest)
     | mManifest:
     oOperandSwap
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandSetLength(regCX)
     oOperandSwap
     oOperandFoldManifestSubscript
     oOperandPop
     ] or >
     oOperandSetLength(regCX)
     >>
    ;OperandSubscriptCharPop
    ] or >
    ] or >
    [ (tSkipString)
    | *:
    >>
   ;OperandPushVariable
   @OperandPushExpressionAssignPopPop
    [ (tSkipString)
    | tSkipString:
    oEmitNone(iData)
    ?tStringData (tStringData)
    oEmitString
    oEmitNone(iText)
    ] or >
    }
    [ (tLiteralAddress)
    | tLiteralAddress:
    @OperandPushVariable
     oOperandPushVariable
     [ (tFetchChar)
     | *:
     [ (tFetchChar)
     | *:
     [ (tFetchChar)
     | tFetchChar:
     oOperandSetLength(regCX)
     ] or >
     >>
    ;OperandPushVariable
    ] or >
    }
    [ (tAssignChar)
    | tAssignChar:
    @OperandAssignCharPopPop
     @SaveTempRegsToStack
      oOperandPushMode(mTemp)
      oOperandSetLength(two)
      oOperandSetRegnum(one)
      oEmitSingle(iPush)
      oOperandSetRegnum(two)
      oEmitSingle(iPush)
      oOperandSetRegnum(regCX)
      oEmitSingle(iPush)
      oOperandSetRegnum(four)
      oEmitSingle(iPush)
      oOperandPop
      >>
     ;SaveTempRegsToStack
     @OperandForceAddressIntoTemp
      [ oOperandChooseMode (mStatic)
      | mStatic:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iLoada)
      oOperandPop
      ] or >
      oOperandSetLength(two)
      >>
     ;OperandForceAddressIntoTemp
     @OperandForceToStack
      [ oOperandChooseLength (two)
      | two:
      ] or >
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mTemp)
       | mTemp:
       oTempFree
       ] or >
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mStack)
      >>
     ;OperandForceToStack
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStack)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     @OperandForceAddressIntoTemp
      [ oOperandChooseMode (mStatic)
      | mStatic:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iLoada)
      oOperandPop
      ] or >
      oOperandSetLength(two)
      >>
     ;OperandForceAddressIntoTemp
     @OperandForceToStack
      [ oOperandChooseLength (two)
      | two:
      ] or >
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mTemp)
       | mTemp:
       oTempFree
       ] or >
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mStack)
      >>
     ;OperandForceToStack
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStack)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mTrap)
     oOperandSetValue(trAssignString)
     oOperandSetLength(two)
     oEmitSingle(iCall)
     oOperandPop
     oOperandPushMode(mStackReg)
     oOperandSetLength(two)
     oOperandPushMode(mManifest)
     oOperandSetLength(two)
     oOperandSetValue(eight)
     oEmitDouble(iAdd)
     oOperandPop
     oOperandPop
     @RestoreTempRegsFromStack
      oOperandPushMode(mTemp)
      oOperandSetLength(two)
      oOperandSetRegnum(four)
      oEmitSingle(iPop)
      oOperandSetRegnum(regCX)
      oEmitSingle(iPop)
      oOperandSetRegnum(two)
      oEmitSingle(iPop)
      oOperandSetRegnum(one)
      oEmitSingle(iPop)
      oOperandPop
      >>
     ;RestoreTempRegsFromStack
     >>
    ;OperandAssignCharPopPop
    ] or >
    >>
   ;OperandPushExpressionAssignPopPop
   >>
  ;AssignStmt
  ] or >
  }
  [ (tAssignBegin)
  | tAssignBegin:
  @AssignStmt
   oEmitSourceCoordinate
   ?tLiteralAddress (tLiteralAddress)
   @OperandPushVariable
    oOperandPushVariable
    [ (tSubscriptBegin)
    | *:
    [ (tSubscriptBegin)
    | tSubscriptBegin:
    @OperandPushExpression
     [ (tLiteralInteger)
     | tLiteralInteger:
     oOperandPushInteger
     ] or >
     }
     [ (tSubscriptChar)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    [ (tSubscriptChar)
    | tSubscriptChar:
    @OperandSubscriptCharPop
     [ oOperandChooseMode (mManifest)
     | mManifest:
     oOperandSwap
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandSetLength(regCX)
     oOperandSwap
     oOperandFoldManifestSubscript
     oOperandPop
     ] or >
     oOperandSetLength(regCX)
     >>
    ;OperandSubscriptCharPop
    ] or >
    ] or >
    [ (tSkipString)
    | *:
    >>
   ;OperandPushVariable
   @OperandPushExpressionAssignPopPop
    [ (tSkipString)
    | tSkipString:
    oEmitNone(iData)
    ?tStringData (tStringData)
    oEmitString
    oEmitNone(iText)
    ] or >
    }
    [ (tLiteralAddress)
    | tLiteralAddress:
    @OperandPushVariable
     oOperandPushVariable
     [ (tFetchChar)
     | *:
     [ (tFetchChar)
     | *:
     [ (tFetchChar)
     | tFetchChar:
     oOperandSetLength(regCX)
     ] or >
     >>
    ;OperandPushVariable
    ] or >
    }
    [ (tAssignChar)
    | tAssignChar:
    @OperandAssignCharPopPop
     @SaveTempRegsToStack
      oOperandPushMode(mTemp)
      oOperandSetLength(two)
      oOperandSetRegnum(one)
      oEmitSingle(iPush)
      oOperandSetRegnum(two)
      oEmitSingle(iPush)
      oOperandSetRegnum(regCX)
      oEmitSingle(iPush)
      oOperandSetRegnum(four)
      oEmitSingle(iPush)
      oOperandPop
      >>
     ;SaveTempRegsToStack
     @OperandForceAddressIntoTemp
      [ oOperandChooseMode (mStatic)
      | mStatic:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iLoada)
      oOperandPop
      ] or >
      oOperandSetLength(two)
      >>
     ;OperandForceAddressIntoTemp
     @OperandForceToStack
      [ oOperandChooseLength (two)
      | two:
      ] or >
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mTemp)
       | mTemp:
       oTempFree
       ] or >
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mStack)
      >>
     ;OperandForceToStack
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStack)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     @OperandForceAddressIntoTemp
      [ oOperandChooseMode (mStatic)
      | mStatic:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iLoada)
      oOperandPop
      ] or >
      oOperandSetLength(two)
      >>
     ;OperandForceAddressIntoTemp
     @OperandForceToStack
      [ oOperandChooseLength (two)
      | two:
      ] or >
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mTemp)
       | mTemp:
       oTempFree
       ] or >
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mStack)
      >>
     ;OperandForceToStack
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStack)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mTrap)
     oOperandSetValue(trAssignString)
     oOperandSetLength(two)
     oEmitSingle(iCall)
     oOperandPop
     oOperandPushMode(mStackReg)
     oOperandSetLength(two)
     oOperandPushMode(mManifest)
     oOperandSetLength(two)
     oOperandSetValue(eight)
     oEmitDouble(iAdd)
     oOperandPop
     oOperandPop
     @RestoreTempRegsFromStack
      oOperandPushMode(mTemp)
      oOperandSetLength(two)
      oOperandSetRegnum(four)
      oEmitSingle(iPop)
      oOperandSetRegnum(regCX)
      oEmitSingle(iPop)
      oOperandSetRegnum(two)
      oEmitSingle(iPop)
      oOperandSetRegnum(one)
      oEmitSingle(iPop)
      oOperandPop
      >>
     ;RestoreTempRegsFromStack
     >>
    ;OperandAssignCharPopPop
    ] or >
    >>
   ;OperandPushExpressionAssignPopPop
   >>
  ;AssignStmt
  ] or >
  }
  [ (tAssignBegin)
  | tAssignBegin:
  @AssignStmt
   oEmitSourceCoordinate
   ?tLiteralAddress (tLiteralAddress)
   @OperandPushVariable
    oOperandPushVariable
    [ (tSubscriptBegin)
    | *:
    [ (tSubscriptBegin)
    | tSubscriptBegin:
    @OperandPushExpression
     [ (tLiteralInteger)
     | tLiteralInteger:
     oOperandPushInteger
     ] or >
     }
     [ (tSubscriptChar)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    [ (tSubscriptChar)
    | tSubscriptChar:
    @OperandSubscriptCharPop
     [ oOperandChooseMode (mManifest)
     | mManifest:
     oOperandSwap
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandSetLength(regCX)
     oOperandSwap
     oOperandFoldManifestSubscript
     oOperandPop
     ] or >
     oOperandSetLength(regCX)
     >>
    ;OperandSubscriptCharPop
    ] or >
    ] or >
    [ (tSkipString)
    | *:
    >>
   ;OperandPushVariable
   @OperandPushExpressionAssignPopPop
    [ (tSkipString)
    | tSkipString:
    oEmitNone(iData)
    ?tStringData (tStringData)
    oEmitString
    oEmitNone(iText)
    ] or >
    }
    [ (tLiteralAddress)
    | tLiteralAddress:
    @OperandPushVariable
     oOperandPushVariable
     [ (tFetchChar)
     | *:
     [ (tFetchChar)
     | *:
     [ (tFetchChar)
     | tFetchChar:
     oOperandSetLength(regCX)
     ] or >
     >>
    ;OperandPushVariable
    ] or >
    }
    [ (tAssignChar)
    | tAssignChar:
    @OperandAssignCharPopPop
     @SaveTempRegsToStack
      oOperandPushMode(mTemp)
      oOperandSetLength(two)
      oOperandSetRegnum(one)
      oEmitSingle(iPush)
      oOperandSetRegnum(two)
      oEmitSingle(iPush)
      oOperandSetRegnum(regCX)
      oEmitSingle(iPush)
      oOperandSetRegnum(four)
      oEmitSingle(iPush)
      oOperandPop
      >>
     ;SaveTempRegsToStack
     @OperandForceAddressIntoTemp
      [ oOperandChooseMode (mStatic)
      | mStatic:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iLoada)
      oOperandPop
      ] or >
      oOperandSetLength(two)
      >>
     ;OperandForceAddressIntoTemp
     @OperandForceToStack
      [ oOperandChooseLength (two)
      | two:
      ] or >
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mTemp)
       | mTemp:
       oTempFree
       ] or >
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mStack)
      >>
     ;OperandForceToStack
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStack)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     @OperandForceAddressIntoTemp
      [ oOperandChooseMode (mStatic)
      | mStatic:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iLoada)
      oOperandPop
      ] or >
      oOperandSetLength(two)
      >>
     ;OperandForceAddressIntoTemp
     @OperandForceToStack
      [ oOperandChooseLength (two)
      | two:
      ] or >
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mTemp)
       | mTemp:
       oTempFree
       ] or >
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mStack)
      >>
     ;OperandForceToStack
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStack)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mTrap)
     oOperandSetValue(trAssignString)
     oOperandSetLength(two)
     oEmitSingle(iCall)
     oOperandPop
     oOperandPushMode(mStackReg)
     oOperandSetLength(two)
     oOperandPushMode(mManifest)
     oOperandSetLength(two)
     oOperandSetValue(eight)
     oEmitDouble(iAdd)
     oOperandPop
     oOperandPop
     @RestoreTempRegsFromStack
      oOperandPushMode(mTemp)
      oOperandSetLength(two)
      oOperandSetRegnum(four)
      oEmitSingle(iPop)
      oOperandSetRegnum(regCX)
      oEmitSingle(iPop)
      oOperandSetRegnum(two)
      oEmitSingle(iPop)
      oOperandSetRegnum(one)
      oEmitSingle(iPop)
      oOperandPop
      >>
     ;RestoreTempRegsFromStack
     >>
    ;OperandAssignCharPopPop
    ] or >
    >>
   ;OperandPushExpressionAssignPopPop
   >>
  ;AssignStmt
  ] or >
  }
  [ (tAssignBegin)
  | tAssignBegin:
  @AssignStmt
   oEmitSourceCoordinate
   ?tLiteralAddress (tLiteralAddress)
   @OperandPushVariable
    oOperandPushVariable
    [ (tSubscriptBegin)
    | *:
    [ (tSubscriptBegin)
    | tSubscriptBegin:
    @OperandPushExpression
     [ (tLiteralInteger)
     | tLiteralInteger:
     oOperandPushInteger
     ] or >
     }
     [ (tSubscriptChar)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    [ (tSubscriptChar)
    | tSubscriptChar:
    @OperandSubscriptCharPop
     [ oOperandChooseMode (mManifest)
     | mManifest:
     oOperandSwap
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandSetLength(regCX)
     oOperandSwap
     oOperandFoldManifestSubscript
     oOperandPop
     ] or >
     oOperandSetLength(regCX)
     >>
    ;OperandSubscriptCharPop
    ] or >
    ] or >
    [ (tSkipString)
    | *:
    >>
   ;OperandPushVariable
   @OperandPushExpressionAssignPopPop
    [ (tSkipString)
    | tSkipString:
    oEmitNone(iData)
    ?tStringData (tStringData)
    oEmitString
    oEmitNone(iText)
    ] or >
    }
    [ (tLiteralAddress)
    | tLiteralAddress:
    @OperandPushVariable
     oOperandPushVariable
     [ (tFetchChar)
     | *:
     [ (tFetchChar)
     | *:
     [ (tFetchChar)
     | tFetchChar:
     oOperandSetLength(regCX)
     ] or >
     >>
    ;OperandPushVariable
    ] or >
    }
    [ (tAssignChar)
    | tAssignChar:
    @OperandAssignCharPopPop
     @SaveTempRegsToStack
      oOperandPushMode(mTemp)
      oOperandSetLength(two)
      oOperandSetRegnum(one)
      oEmitSingle(iPush)
      oOperandSetRegnum(two)
      oEmitSingle(iPush)
      oOperandSetRegnum(regCX)
      oEmitSingle(iPush)
      oOperandSetRegnum(four)
      oEmitSingle(iPush)
      oOperandPop
      >>
     ;SaveTempRegsToStack
     @OperandForceAddressIntoTemp
      [ oOperandChooseMode (mStatic)
      | mStatic:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iLoada)
      oOperandPop
      ] or >
      oOperandSetLength(two)
      >>
     ;OperandForceAddressIntoTemp
     @OperandForceToStack
      [ oOperandChooseLength (two)
      | two:
      ] or >
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mTemp)
       | mTemp:
       oTempFree
       ] or >
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mStack)
      >>
     ;OperandForceToStack
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStack)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     @OperandForceAddressIntoTemp
      [ oOperandChooseMode (mStatic)
      | mStatic:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iLoada)
      oOperandPop
      ] or >
      oOperandSetLength(two)
      >>
     ;OperandForceAddressIntoTemp
     @OperandForceToStack
      [ oOperandChooseLength (two)
      | two:
      ] or >
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mTemp)
       | mTemp:
       oTempFree
       ] or >
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mStack)
      >>
     ;OperandForceToStack
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStack)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mTrap)
     oOperandSetValue(trAssignString)
     oOperandSetLength(two)
     oEmitSingle(iCall)
     oOperandPop
     oOperandPushMode(mStackReg)
     oOperandSetLength(two)
     oOperandPushMode(mManifest)
     oOperandSetLength(two)
     oOperandSetValue(eight)
     oEmitDouble(iAdd)
     oOperandPop
     oOperandPop
     @RestoreTempRegsFromStack
      oOperandPushMode(mTemp)
      oOperandSetLength(two)
      oOperandSetRegnum(four)
      oEmitSingle(iPop)
      oOperandSetRegnum(regCX)
      oEmitSingle(iPop)
      oOperandSetRegnum(two)
      oEmitSingle(iPop)
      oOperandSetRegnum(one)
      oEmitSingle(iPop)
      oOperandPop
      >>
     ;RestoreTempRegsFromStack
     >>
    ;OperandAssignCharPopPop
    ] or >
    >>
   ;OperandPushExpressionAssignPopPop
   >>
  ;AssignStmt
  ] or >
  }
  [ (tAssignBegin)
  | tAssignBegin:
  @AssignStmt
   oEmitSourceCoordinate
   ?tLiteralAddress (tLiteralAddress)
   @OperandPushVariable
    oOperandPushVariable
    [ (tSubscriptBegin)
    | *:
    [ (tSubscriptBegin)
    | tSubscriptBegin:
    @OperandPushExpression
     [ (tLiteralInteger)
     | tLiteralInteger:
     oOperandPushInteger
     ] or >
     }
     [ (tSubscriptChar)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    [ (tSubscriptChar)
    | tSubscriptChar:
    @OperandSubscriptCharPop
     [ oOperandChooseMode (mManifest)
     | mManifest:
     oOperandSwap
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandSetLength(regCX)
     oOperandSwap
     oOperandFoldManifestSubscript
     oOperandPop
     ] or >
     oOperandSetLength(regCX)
     >>
    ;OperandSubscriptCharPop
    ] or >
    ] or >
    [ (tSkipString)
    | *:
    >>
   ;OperandPushVariable
   @OperandPushExpressionAssignPopPop
    [ (tSkipString)
    | tSkipString:
    oEmitNone(iData)
    ?tStringData (tStringData)
    oEmitString
    oEmitNone(iText)
    ] or >
    }
    [ (tLiteralAddress)
    | tLiteralAddress:
    @OperandPushVariable
     oOperandPushVariable
     [ (tFetchChar)
     | *:
     [ (tFetchChar)
     | *:
     [ (tFetchChar)
     | tFetchChar:
     oOperandSetLength(regCX)
     ] or >
     >>
    ;OperandPushVariable
    ] or >
    }
    [ (tAssignChar)
    | tAssignChar:
    @OperandAssignCharPopPop
     @SaveTempRegsToStack
      oOperandPushMode(mTemp)
      oOperandSetLength(two)
      oOperandSetRegnum(one)
      oEmitSingle(iPush)
      oOperandSetRegnum(two)
      oEmitSingle(iPush)
      oOperandSetRegnum(regCX)
      oEmitSingle(iPush)
      oOperandSetRegnum(four)
      oEmitSingle(iPush)
      oOperandPop
      >>
     ;SaveTempRegsToStack
     @OperandForceAddressIntoTemp
      [ oOperandChooseMode (mStatic)
      | mStatic:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iLoada)
      oOperandPop
      ] or >
      oOperandSetLength(two)
      >>
     ;OperandForceAddressIntoTemp
     @OperandForceToStack
      [ oOperandChooseLength (two)
      | two:
      ] or >
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mTemp)
       | mTemp:
       oTempFree
       ] or >
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mStack)
      >>
     ;OperandForceToStack
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStack)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     @OperandForceAddressIntoTemp
      [ oOperandChooseMode (mStatic)
      | mStatic:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iLoada)
      oOperandPop
      ] or >
      oOperandSetLength(two)
      >>
     ;OperandForceAddressIntoTemp
     @OperandForceToStack
      [ oOperandChooseLength (two)
      | two:
      ] or >
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mTemp)
       | mTemp:
       oTempFree
       ] or >
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mStack)
      >>
     ;OperandForceToStack
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStack)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mTrap)
     oOperandSetValue(trAssignString)
     oOperandSetLength(two)
     oEmitSingle(iCall)
     oOperandPop
     oOperandPushMode(mStackReg)
     oOperandSetLength(two)
     oOperandPushMode(mManifest)
     oOperandSetLength(two)
     oOperandSetValue(eight)
     oEmitDouble(iAdd)
     oOperandPop
     oOperandPop
     @RestoreTempRegsFromStack
      oOperandPushMode(mTemp)
      oOperandSetLength(two)
      oOperandSetRegnum(four)
      oEmitSingle(iPop)
      oOperandSetRegnum(regCX)
      oEmitSingle(iPop)
      oOperandSetRegnum(two)
      oEmitSingle(iPop)
      oOperandSetRegnum(one)
      oEmitSingle(iPop)
      oOperandPop
      >>
     ;RestoreTempRegsFromStack
     >>
    ;OperandAssignCharPopPop
    ] or >
    >>
   ;OperandPushExpressionAssignPopPop
   >>
  ;AssignStmt
  ] or >
  }
  [ (tAssignBegin)
  | tAssignBegin:
  @AssignStmt
   oEmitSourceCoordinate
   ?tLiteralAddress (tLiteralAddress)
   @OperandPushVariable
    oOperandPushVariable
    [ (tSubscriptBegin)
    | *:
    [ (tSubscriptBegin)
    | tSubscriptBegin:
    @OperandPushExpression
     [ (tLiteralInteger)
     | tLiteralInteger:
     oOperandPushInteger
     ] or >
     }
     [ (tSubscriptChar)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    [ (tSubscriptChar)
    | tSubscriptChar:
    @OperandSubscriptCharPop
     [ oOperandChooseMode (mManifest)
     | mManifest:
     oOperandSwap
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandSetLength(regCX)
     oOperandSwap
     oOperandFoldManifestSubscript
     oOperandPop
     ] or >
     oOperandSetLength(regCX)
     >>
    ;OperandSubscriptCharPop
    ] or >
    ] or >
    [ (tSkipString)
    | *:
    >>
   ;OperandPushVariable
   @OperandPushExpressionAssignPopPop
    [ (tSkipString)
    | tSkipString:
    oEmitNone(iData)
    ?tStringData (tStringData)
    oEmitString
    oEmitNone(iText)
    ] or >
    }
    [ (tLiteralAddress)
    | tLiteralAddress:
    @OperandPushVariable
     oOperandPushVariable
     [ (tFetchChar)
     | *:
     [ (tFetchChar)
     | *:
     [ (tFetchChar)
     | tFetchChar:
     oOperandSetLength(regCX)
     ] or >
     >>
    ;OperandPushVariable
    ] or >
    }
    [ (tAssignChar)
    | tAssignChar:
    @OperandAssignCharPopPop
     @SaveTempRegsToStack
      oOperandPushMode(mTemp)
      oOperandSetLength(two)
      oOperandSetRegnum(one)
      oEmitSingle(iPush)
      oOperandSetRegnum(two)
      oEmitSingle(iPush)
      oOperandSetRegnum(regCX)
      oEmitSingle(iPush)
      oOperandSetRegnum(four)
      oEmitSingle(iPush)
      oOperandPop
      >>
     ;SaveTempRegsToStack
     @OperandForceAddressIntoTemp
      [ oOperandChooseMode (mStatic)
      | mStatic:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iLoada)
      oOperandPop
      ] or >
      oOperandSetLength(two)
      >>
     ;OperandForceAddressIntoTemp
     @OperandForceToStack
      [ oOperandChooseLength (two)
      | two:
      ] or >
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mTemp)
       | mTemp:
       oTempFree
       ] or >
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mStack)
      >>
     ;OperandForceToStack
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStack)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     @OperandForceAddressIntoTemp
      [ oOperandChooseMode (mStatic)
      | mStatic:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iLoada)
      oOperandPop
      ] or >
      oOperandSetLength(two)
      >>
     ;OperandForceAddressIntoTemp
     @OperandForceToStack
      [ oOperandChooseLength (two)
      | two:
      ] or >
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mTemp)
       | mTemp:
       oTempFree
       ] or >
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mStack)
      >>
     ;OperandForceToStack
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStack)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mTrap)
     oOperandSetValue(trAssignString)
     oOperandSetLength(two)
     oEmitSingle(iCall)
     oOperandPop
     oOperandPushMode(mStackReg)
     oOperandSetLength(two)
     oOperandPushMode(mManifest)
     oOperandSetLength(two)
     oOperandSetValue(eight)
     oEmitDouble(iAdd)
     oOperandPop
     oOperandPop
     @RestoreTempRegsFromStack
      oOperandPushMode(mTemp)
      oOperandSetLength(two)
      oOperandSetRegnum(four)
      oEmitSingle(iPop)
      oOperandSetRegnum(regCX)
      oEmitSingle(iPop)
      oOperandSetRegnum(two)
      oEmitSingle(iPop)
      oOperandSetRegnum(one)
      oEmitSingle(iPop)
      oOperandPop
      >>
     ;RestoreTempRegsFromStack
     >>
    ;OperandAssignCharPopPop
    ] or >
    >>
   ;OperandPushExpressionAssignPopPop
   >>
  ;AssignStmt
  ] or >
  }
  [ (tAssignBegin)
  | tAssignBegin:
  @AssignStmt
   oEmitSourceCoordinate
   ?tLiteralAddress (tLiteralAddress)
   @OperandPushVariable
    oOperandPushVariable
    [ (tSubscriptBegin)
    | *:
    [ (tSubscriptBegin)
    | tSubscriptBegin:
    @OperandPushExpression
     [ (tLiteralInteger)
     | tLiteralInteger:
     oOperandPushInteger
     ] or >
     }
     [ (tSubscriptChar)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    [ (tSubscriptChar)
    | tSubscriptChar:
    @OperandSubscriptCharPop
     [ oOperandChooseMode (mManifest)
     | mManifest:
     oOperandSwap
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandSetLength(regCX)
     oOperandSwap
     oOperandFoldManifestSubscript
     oOperandPop
     ] or >
     oOperandSetLength(regCX)
     >>
    ;OperandSubscriptCharPop
    ] or >
    ] or >
    [ (tSkipString)
    | *:
    >>
   ;OperandPushVariable
   @OperandPushExpressionAssignPopPop
    [ (tSkipString)
    | tSkipString:
    oEmitNone(iData)
    ?tStringData (tStringData)
    oEmitString
    oEmitNone(iText)
    ] or >
    }
    [ (tLiteralAddress)
    | tLiteralAddress:
    @OperandPushVariable
     oOperandPushVariable
     [ (tFetchChar)
     | *:
     [ (tFetchChar)
     | *:
     [ (tFetchChar)
     | tFetchChar:
     oOperandSetLength(regCX)
     ] or >
     >>
    ;OperandPushVariable
    ] or >
    }
    [ (tAssignChar)
    | tAssignChar:
    @OperandAssignCharPopPop
     @SaveTempRegsToStack
      oOperandPushMode(mTemp)
      oOperandSetLength(two)
      oOperandSetRegnum(one)
      oEmitSingle(iPush)
      oOperandSetRegnum(two)
      oEmitSingle(iPush)
      oOperandSetRegnum(regCX)
      oEmitSingle(iPush)
      oOperandSetRegnum(four)
      oEmitSingle(iPush)
      oOperandPop
      >>
     ;SaveTempRegsToStack
     @OperandForceAddressIntoTemp
      [ oOperandChooseMode (mStatic)
      | mStatic:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iLoada)
      oOperandPop
      ] or >
      oOperandSetLength(two)
      >>
     ;OperandForceAddressIntoTemp
     @OperandForceToStack
      [ oOperandChooseLength (two)
      | two:
      ] or >
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mTemp)
       | mTemp:
       oTempFree
       ] or >
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mStack)
      >>
     ;OperandForceToStack
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStack)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     @OperandForceAddressIntoTemp
      [ oOperandChooseMode (mStatic)
      | mStatic:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iLoada)
      oOperandPop
      ] or >
      oOperandSetLength(two)
      >>
     ;OperandForceAddressIntoTemp
     @OperandForceToStack
      [ oOperandChooseLength (two)
      | two:
      ] or >
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mTemp)
       | mTemp:
       oTempFree
       ] or >
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mStack)
      >>
     ;OperandForceToStack
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStack)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mTrap)
     oOperandSetValue(trAssignString)
     oOperandSetLength(two)
     oEmitSingle(iCall)
     oOperandPop
     oOperandPushMode(mStackReg)
     oOperandSetLength(two)
     oOperandPushMode(mManifest)
     oOperandSetLength(two)
     oOperandSetValue(eight)
     oEmitDouble(iAdd)
     oOperandPop
     oOperandPop
     @RestoreTempRegsFromStack
      oOperandPushMode(mTemp)
      oOperandSetLength(two)
      oOperandSetRegnum(four)
      oEmitSingle(iPop)
      oOperandSetRegnum(regCX)
      oEmitSingle(iPop)
      oOperandSetRegnum(two)
      oEmitSingle(iPop)
      oOperandSetRegnum(one)
      oEmitSingle(iPop)
      oOperandPop
      >>
     ;RestoreTempRegsFromStack
     >>
    ;OperandAssignCharPopPop
    ] or >
    >>
   ;OperandPushExpressionAssignPopPop
   >>
  ;AssignStmt
  ] or >
  }
  [ (tAssignBegin)
  | tAssignBegin:
  @AssignStmt
   oEmitSourceCoordinate
   ?tLiteralAddress (tLiteralAddress)
   @OperandPushVariable
    oOperandPushVariable
    [ (tSubscriptBegin)
    | *:
    [ (tSubscriptBegin)
    | tSubscriptBegin:
    @OperandPushExpression
     [ (tLiteralInteger)
     | tLiteralInteger:
     oOperandPushInteger
     ] or >
     }
     [ (tSubscriptChar)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    [ (tSubscriptChar)
    | tSubscriptChar:
    @OperandSubscriptCharPop
     [ oOperandChooseMode (mManifest)
     | mManifest:
     oOperandSwap
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandSetLength(regCX)
     oOperandSwap
     oOperandFoldManifestSubscript
     oOperandPop
     ] or >
     oOperandSetLength(regCX)
     >>
    ;OperandSubscriptCharPop
    ] or >
    ] or >
    [ (tSkipString)
    | *:
    >>
   ;OperandPushVariable
   @OperandPushExpressionAssignPopPop
    [ (tSkipString)
    | tSkipString:
    oEmitNone(iData)
    ?tStringData (tStringData)
    oEmitString
    oEmitNone(iText)
    ] or >
    }
    [ (tLiteralAddress)
    | tLiteralAddress:
    @OperandPushVariable
     oOperandPushVariable
     [ (tFetchChar)
     | *:
     [ (tFetchChar)
     | *:
     [ (tFetchChar)
     | tFetchChar:
     oOperandSetLength(regCX)
     ] or >
     >>
    ;OperandPushVariable
    ] or >
    }
    [ (tAssignChar)
    | tAssignChar:
    @OperandAssignCharPopPop
     @SaveTempRegsToStack
      oOperandPushMode(mTemp)
      oOperandSetLength(two)
      oOperandSetRegnum(one)
      oEmitSingle(iPush)
      oOperandSetRegnum(two)
      oEmitSingle(iPush)
      oOperandSetRegnum(regCX)
      oEmitSingle(iPush)
      oOperandSetRegnum(four)
      oEmitSingle(iPush)
      oOperandPop
      >>
     ;SaveTempRegsToStack
     @OperandForceAddressIntoTemp
      [ oOperandChooseMode (mStatic)
      | mStatic:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iLoada)
      oOperandPop
      ] or >
      oOperandSetLength(two)
      >>
     ;OperandForceAddressIntoTemp
     @OperandForceToStack
      [ oOperandChooseLength (two)
      | two:
      ] or >
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mTemp)
       | mTemp:
       oTempFree
       ] or >
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mStack)
      >>
     ;OperandForceToStack
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStack)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     @OperandForceAddressIntoTemp
      [ oOperandChooseMode (mStatic)
      | mStatic:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iLoada)
      oOperandPop
      ] or >
      oOperandSetLength(two)
      >>
     ;OperandForceAddressIntoTemp
     @OperandForceToStack
      [ oOperandChooseLength (two)
      | two:
      ] or >
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mTemp)
       | mTemp:
       oTempFree
       ] or >
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mStack)
      >>
     ;OperandForceToStack
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStack)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mTrap)
     oOperandSetValue(trAssignString)
     oOperandSetLength(two)
     oEmitSingle(iCall)
     oOperandPop
     oOperandPushMode(mStackReg)
     oOperandSetLength(two)
     oOperandPushMode(mManifest)
     oOperandSetLength(two)
     oOperandSetValue(eight)
     oEmitDouble(iAdd)
     oOperandPop
     oOperandPop
     @RestoreTempRegsFromStack
      oOperandPushMode(mTemp)
      oOperandSetLength(two)
      oOperandSetRegnum(four)
      oEmitSingle(iPop)
      oOperandSetRegnum(regCX)
      oEmitSingle(iPop)
      oOperandSetRegnum(two)
      oEmitSingle(iPop)
      oOperandSetRegnum(one)
      oEmitSingle(iPop)
      oOperandPop
      >>
     ;RestoreTempRegsFromStack
     >>
    ;OperandAssignCharPopPop
    ] or >
    >>
   ;OperandPushExpressionAssignPopPop
   >>
  ;AssignStmt
  ] or >
  }
  [ (tAssignBegin)
  | tAssignBegin:
  @AssignStmt
   oEmitSourceCoordinate
   ?tLiteralAddress (tLiteralAddress)
   @OperandPushVariable
    oOperandPushVariable
    [ (tSubscriptBegin)
    | *:
    [ (tSubscriptBegin)
    | tSubscriptBegin:
    @OperandPushExpression
     [ (tLiteralInteger)
     | tLiteralInteger:
     oOperandPushInteger
     ] or >
     }
     [ (tSubscriptChar)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    [ (tSubscriptChar)
    | tSubscriptChar:
    @OperandSubscriptCharPop
     [ oOperandChooseMode (mManifest)
     | mManifest:
     oOperandSwap
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandSetLength(regCX)
     oOperandSwap
     oOperandFoldManifestSubscript
     oOperandPop
     ] or >
     oOperandSetLength(regCX)
     >>
    ;OperandSubscriptCharPop
    ] or >
    ] or >
    [ (tSkipString)
    | *:
    >>
   ;OperandPushVariable
   @OperandPushExpressionAssignPopPop
    [ (tSkipString)
    | tSkipString:
    oEmitNone(iData)
    ?tStringData (tStringData)
    oEmitString
    oEmitNone(iText)
    ] or >
    }
    [ (tLiteralAddress)
    | tLiteralAddress:
    @OperandPushVariable
     oOperandPushVariable
     [ (tFetchChar)
     | *:
     [ (tFetchChar)
     | *:
     [ (tFetchChar)
     | tFetchChar:
     oOperandSetLength(regCX)
     ] or >
     >>
    ;OperandPushVariable
    ] or >
    }
    [ (tAssignChar)
    | tAssignChar:
    @OperandAssignCharPopPop
     @SaveTempRegsToStack
      oOperandPushMode(mTemp)
      oOperandSetLength(two)
      oOperandSetRegnum(one)
      oEmitSingle(iPush)
      oOperandSetRegnum(two)
      oEmitSingle(iPush)
      oOperandSetRegnum(regCX)
      oEmitSingle(iPush)
      oOperandSetRegnum(four)
      oEmitSingle(iPush)
      oOperandPop
      >>
     ;SaveTempRegsToStack
     @OperandForceAddressIntoTemp
      [ oOperandChooseMode (mStatic)
      | mStatic:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iLoada)
      oOperandPop
      ] or >
      oOperandSetLength(two)
      >>
     ;OperandForceAddressIntoTemp
     @OperandForceToStack
      [ oOperandChooseLength (two)
      | two:
      ] or >
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mTemp)
       | mTemp:
       oTempFree
       ] or >
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mStack)
      >>
     ;OperandForceToStack
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStack)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     @OperandForceAddressIntoTemp
      [ oOperandChooseMode (mStatic)
      | mStatic:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iLoada)
      oOperandPop
      ] or >
      oOperandSetLength(two)
      >>
     ;OperandForceAddressIntoTemp
     @OperandForceToStack
      [ oOperandChooseLength (two)
      | two:
      ] or >
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mTemp)
       | mTemp:
       oTempFree
       ] or >
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mStack)
      >>
     ;OperandForceToStack
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStack)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mTrap)
     oOperandSetValue(trAssignString)
     oOperandSetLength(two)
     oEmitSingle(iCall)
     oOperandPop
     oOperandPushMode(mStackReg)
     oOperandSetLength(two)
     oOperandPushMode(mManifest)
     oOperandSetLength(two)
     oOperandSetValue(eight)
     oEmitDouble(iAdd)
     oOperandPop
     oOperandPop
     @RestoreTempRegsFromStack
      oOperandPushMode(mTemp)
      oOperandSetLength(two)
      oOperandSetRegnum(four)
      oEmitSingle(iPop)
      oOperandSetRegnum(regCX)
      oEmitSingle(iPop)
      oOperandSetRegnum(two)
      oEmitSingle(iPop)
      oOperandSetRegnum(one)
      oEmitSingle(iPop)
      oOperandPop
      >>
     ;RestoreTempRegsFromStack
     >>
    ;OperandAssignCharPopPop
    ] or >
    >>
   ;OperandPushExpressionAssignPopPop
   >>
  ;AssignStmt
  ] or >
  }
  [ (tAssignBegin)
  | tAssignBegin:
  @AssignStmt
   oEmitSourceCoordinate
   ?tLiteralAddress (tLiteralAddress)
   @OperandPushVariable
    oOperandPushVariable
    [ (tSubscriptBegin)
    | *:
    [ (tSubscriptBegin)
    | tSubscriptBegin:
    @OperandPushExpression
     [ (tLiteralInteger)
     | tLiteralInteger:
     oOperandPushInteger
     ] or >
     }
     [ (tSubscriptChar)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    [ (tSubscriptChar)
    | tSubscriptChar:
    @OperandSubscriptCharPop
     [ oOperandChooseMode (mManifest)
     | mManifest:
     oOperandSwap
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandSetLength(regCX)
     oOperandSwap
     oOperandFoldManifestSubscript
     oOperandPop
     ] or >
     oOperandSetLength(regCX)
     >>
    ;OperandSubscriptCharPop
    ] or >
    ] or >
    [ (tSkipString)
    | *:
    >>
   ;OperandPushVariable
   @OperandPushExpressionAssignPopPop
    [ (tSkipString)
    | tSkipString:
    oEmitNone(iData)
    ?tStringData (tStringData)
    oEmitString
    oEmitNone(iText)
    ] or >
    }
    [ (tLiteralAddress)
    | tLiteralAddress:
    @OperandPushVariable
     oOperandPushVariable
     [ (tFetchChar)
     | *:
     [ (tFetchChar)
     | *:
     [ (tFetchChar)
     | tFetchChar:
     oOperandSetLength(regCX)
     ] or >
     >>
    ;OperandPushVariable
    ] or >
    }
    [ (tAssignChar)
    | tAssignChar:
    @OperandAssignCharPopPop
     @SaveTempRegsToStack
      oOperandPushMode(mTemp)
      oOperandSetLength(two)
      oOperandSetRegnum(one)
      oEmitSingle(iPush)
      oOperandSetRegnum(two)
      oEmitSingle(iPush)
      oOperandSetRegnum(regCX)
      oEmitSingle(iPush)
      oOperandSetRegnum(four)
      oEmitSingle(iPush)
      oOperandPop
      >>
     ;SaveTempRegsToStack
     @OperandForceAddressIntoTemp
      [ oOperandChooseMode (mStatic)
      | mStatic:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iLoada)
      oOperandPop
      ] or >
      oOperandSetLength(two)
      >>
     ;OperandForceAddressIntoTemp
     @OperandForceToStack
      [ oOperandChooseLength (two)
      | two:
      ] or >
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mTemp)
       | mTemp:
       oTempFree
       ] or >
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mStack)
      >>
     ;OperandForceToStack
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStack)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     @OperandForceAddressIntoTemp
      [ oOperandChooseMode (mStatic)
      | mStatic:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iLoada)
      oOperandPop
      ] or >
      oOperandSetLength(two)
      >>
     ;OperandForceAddressIntoTemp
     @OperandForceToStack
      [ oOperandChooseLength (two)
      | two:
      ] or >
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mTemp)
       | mTemp:
       oTempFree
       ] or >
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mStack)
      >>
     ;OperandForceToStack
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStack)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mTrap)
     oOperandSetValue(trAssignString)
     oOperandSetLength(two)
     oEmitSingle(iCall)
     oOperandPop
     oOperandPushMode(mStackReg)
     oOperandSetLength(two)
     oOperandPushMode(mManifest)
     oOperandSetLength(two)
     oOperandSetValue(eight)
     oEmitDouble(iAdd)
     oOperandPop
     oOperandPop
     @RestoreTempRegsFromStack
      oOperandPushMode(mTemp)
      oOperandSetLength(two)
      oOperandSetRegnum(four)
      oEmitSingle(iPop)
      oOperandSetRegnum(regCX)
      oEmitSingle(iPop)
      oOperandSetRegnum(two)
      oEmitSingle(iPop)
      oOperandSetRegnum(one)
      oEmitSingle(iPop)
      oOperandPop
      >>
     ;RestoreTempRegsFromStack
     >>
    ;OperandAssignCharPopPop
    ] or >
    >>
   ;OperandPushExpressionAssignPopPop
   >>
  ;AssignStmt
  ] or >
  }
  [ (tAssignBegin)
  | tAssignBegin:
  @AssignStmt
   oEmitSourceCoordinate
   ?tLiteralAddress (tLiteralAddress)
   @OperandPushVariable
    oOperandPushVariable
    [ (tSubscriptBegin)
    | *:
    [ (tSubscriptBegin)
    | tSubscriptBegin:
    @OperandPushExpression
     [ (tLiteralInteger)
     | tLiteralInteger:
     oOperandPushInteger
     ] or >
     }
     [ (tSubscriptChar)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    [ (tSubscriptChar)
    | tSubscriptChar:
    @OperandSubscriptCharPop
     [ oOperandChooseMode (mManifest)
     | mManifest:
     oOperandSwap
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandSetLength(regCX)
     oOperandSwap
     oOperandFoldManifestSubscript
     oOperandPop
     ] or >
     oOperandSetLength(regCX)
     >>
    ;OperandSubscriptCharPop
    ] or >
    ] or >
    [ (tSkipString)
    | *:
    >>
   ;OperandPushVariable
   @OperandPushExpressionAssignPopPop
    [ (tSkipString)
    | tSkipString:
    oEmitNone(iData)
    ?tStringData (tStringData)
    oEmitString
    oEmitNone(iText)
    ] or >
    }
    [ (tLiteralAddress)
    | tLiteralAddress:
    @OperandPushVariable
     oOperandPushVariable
     [ (tFetchChar)
     | *:
     [ (tFetchChar)
     | *:
     [ (tFetchChar)
     | tFetchChar:
     oOperandSetLength(regCX)
     ] or >
     >>
    ;OperandPushVariable
    ] or >
    }
    [ (tAssignChar)
    | tAssignChar:
    @OperandAssignCharPopPop
     @SaveTempRegsToStack
      oOperandPushMode(mTemp)
      oOperandSetLength(two)
      oOperandSetRegnum(one)
      oEmitSingle(iPush)
      oOperandSetRegnum(two)
      oEmitSingle(iPush)
      oOperandSetRegnum(regCX)
      oEmitSingle(iPush)
      oOperandSetRegnum(four)
      oEmitSingle(iPush)
      oOperandPop
      >>
     ;SaveTempRegsToStack
     @OperandForceAddressIntoTemp
      [ oOperandChooseMode (mStatic)
      | mStatic:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iLoada)
      oOperandPop
      ] or >
      oOperandSetLength(two)
      >>
     ;OperandForceAddressIntoTemp
     @OperandForceToStack
      [ oOperandChooseLength (two)
      | two:
      ] or >
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mTemp)
       | mTemp:
       oTempFree
       ] or >
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mStack)
      >>
     ;OperandForceToStack
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStack)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     @OperandForceAddressIntoTemp
      [ oOperandChooseMode (mStatic)
      | mStatic:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iLoada)
      oOperandPop
      ] or >
      oOperandSetLength(two)
      >>
     ;OperandForceAddressIntoTemp
     @OperandForceToStack
      [ oOperandChooseLength (two)
      | two:
      ] or >
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mTemp)
       | mTemp:
       oTempFree
       ] or >
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mStack)
      >>
     ;OperandForceToStack
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStack)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mTrap)
     oOperandSetValue(trAssignString)
     oOperandSetLength(two)
     oEmitSingle(iCall)
     oOperandPop
     oOperandPushMode(mStackReg)
     oOperandSetLength(two)
     oOperandPushMode(mManifest)
     oOperandSetLength(two)
     oOperandSetValue(eight)
     oEmitDouble(iAdd)
     oOperandPop
     oOperandPop
     @RestoreTempRegsFromStack
      oOperandPushMode(mTemp)
      oOperandSetLength(two)
      oOperandSetRegnum(four)
      oEmitSingle(iPop)
      oOperandSetRegnum(regCX)
      oEmitSingle(iPop)
      oOperandSetRegnum(two)
      oEmitSingle(iPop)
      oOperandSetRegnum(one)
      oEmitSingle(iPop)
      oOperandPop
      >>
     ;RestoreTempRegsFromStack
     >>
    ;OperandAssignCharPopPop
    ] or >
    >>
   ;OperandPushExpressionAssignPopPop
   >>
  ;AssignStmt
  ] or >
  }
  [ (tAssignBegin)
  | tAssignBegin:
  @AssignStmt
   oEmitSourceCoordinate
   ?tLiteralAddress (tLiteralAddress)
   @OperandPushVariable
    oOperandPushVariable
    [ (tSubscriptBegin)
    | *:
    [ (tSubscriptBegin)
    | tSubscriptBegin:
    @OperandPushExpression
     [ (tLiteralInteger)
     | tLiteralInteger:
     oOperandPushInteger
     ] or >
     }
     [ (tSubscriptChar)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    [ (tSubscriptChar)
    | tSubscriptChar:
    @OperandSubscriptCharPop
     [ oOperandChooseMode (mManifest)
     | mManifest:
     oOperandSwap
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandSetLength(regCX)
     oOperandSwap
     oOperandFoldManifestSubscript
     oOperandPop
     ] or >
     oOperandSetLength(regCX)
     >>
    ;OperandSubscriptCharPop
    ] or >
    ] or >
    [ (tSkipString)
    | *:
    >>
   ;OperandPushVariable
   @OperandPushExpressionAssignPopPop
    [ (tSkipString)
    | tSkipString:
    oEmitNone(iData)
    ?tStringData (tStringData)
    oEmitString
    oEmitNone(iText)
    ] or >
    }
    [ (tLiteralAddress)
    | tLiteralAddress:
    @OperandPushVariable
     oOperandPushVariable
     [ (tFetchChar)
     | *:
     [ (tFetchChar)
     | *:
     [ (tFetchChar)
     | tFetchChar:
     oOperandSetLength(regCX)
     ] or >
     >>
    ;OperandPushVariable
    ] or >
    }
    [ (tAssignChar)
    | tAssignChar:
    @OperandAssignCharPopPop
     @SaveTempRegsToStack
      oOperandPushMode(mTemp)
      oOperandSetLength(two)
      oOperandSetRegnum(one)
      oEmitSingle(iPush)
      oOperandSetRegnum(two)
      oEmitSingle(iPush)
      oOperandSetRegnum(regCX)
      oEmitSingle(iPush)
      oOperandSetRegnum(four)
      oEmitSingle(iPush)
      oOperandPop
      >>
     ;SaveTempRegsToStack
     @OperandForceAddressIntoTemp
      [ oOperandChooseMode (mStatic)
      | mStatic:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iLoada)
      oOperandPop
      ] or >
      oOperandSetLength(two)
      >>
     ;OperandForceAddressIntoTemp
     @OperandForceToStack
      [ oOperandChooseLength (two)
      | two:
      ] or >
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mTemp)
       | mTemp:
       oTempFree
       ] or >
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mStack)
      >>
     ;OperandForceToStack
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStack)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     @OperandForceAddressIntoTemp
      [ oOperandChooseMode (mStatic)
      | mStatic:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iLoada)
      oOperandPop
      ] or >
      oOperandSetLength(two)
      >>
     ;OperandForceAddressIntoTemp
     @OperandForceToStack
      [ oOperandChooseLength (two)
      | two:
      ] or >
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mTemp)
       | mTemp:
       oTempFree
       ] or >
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mStack)
      >>
     ;OperandForceToStack
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStack)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mTrap)
     oOperandSetValue(trAssignString)
     oOperandSetLength(two)
     oEmitSingle(iCall)
     oOperandPop
     oOperandPushMode(mStackReg)
     oOperandSetLength(two)
     oOperandPushMode(mManifest)
     oOperandSetLength(two)
     oOperandSetValue(eight)
     oEmitDouble(iAdd)
     oOperandPop
     oOperandPop
     @RestoreTempRegsFromStack
      oOperandPushMode(mTemp)
      oOperandSetLength(two)
      oOperandSetRegnum(four)
      oEmitSingle(iPop)
      oOperandSetRegnum(regCX)
      oEmitSingle(iPop)
      oOperandSetRegnum(two)
      oEmitSingle(iPop)
      oOperandSetRegnum(one)
      oEmitSingle(iPop)
      oOperandPop
      >>
     ;RestoreTempRegsFromStack
     >>
    ;OperandAssignCharPopPop
    ] or >
    >>
   ;OperandPushExpressionAssignPopPop
   >>
  ;AssignStmt
  ] or >
  }
  [ (tSkipProc)
  | tSkipProc:
  oEmitUnconditionalForwardBranch
  oFixPushLastAddress
  @Routine
   oEmitProcLabel(mProc)
   oEmitNone(iEnter)
   [ (tParmEnd)
   | tParmEnd:
   ] or >
   @Block
    [ (tIfBegin)
    | tIfBegin:
    @IfStmt
     oEmitSourceCoordinate
     @OperandPushBooleanControlExpression
      @OperandPushExpression
       [ (tLiteralAddress)
       | tLiteralAddress:
       @OperandPushVariable
        oOperandPushVariable
        [ (tFetchChar)
        | *:
        [ (tFetchChar)
        | *:
        [ (tFetchChar)
        | tFetchChar:
        oOperandSetLength(regCX)
        ] or >
        >>
       ;OperandPushVariable
       ] or >
       }
       [ (tSkipString)
       | tSkipString:
       oEmitNone(iData)
       ?tStringData (tStringData)
       oEmitString
       oEmitNone(iText)
       ] or >
       }
       [ (tLiteralAddress)
       | tLiteralAddress:
       @OperandPushVariable
        oOperandPushVariable
        [ (tFetchChar)
        | *:
        [ (tFetchChar)
        | *:
        [ (tFetchChar)
        | tFetchChar:
        oOperandSetLength(regCX)
        ] or >
        >>
       ;OperandPushVariable
       ] or >
       }
       [ (tStringEQ)
       | tStringEQ:
       @OperandStringEqualPop
        @SaveTempRegsToStack
         oOperandPushMode(mTemp)
         oOperandSetLength(two)
         oOperandSetRegnum(one)
         oEmitSingle(iPush)
         oOperandSetRegnum(two)
         oEmitSingle(iPush)
         oOperandSetRegnum(regCX)
         oEmitSingle(iPush)
         oOperandSetRegnum(four)
         oEmitSingle(iPush)
         oOperandPop
         >>
        ;SaveTempRegsToStack
        @OperandForceAddressIntoTemp
         [ oOperandChooseMode (mStatic)
         | mStatic:
         @OperandPushTempWord
          oTempAllocate
          oOperandPushTemp
          oOperandSetValue(zero)
          oOperandSetLength(two)
          >>
         ;OperandPushTempWord
         oOperandSwap
         oEmitDouble(iLoada)
         oOperandPop
         ] or >
         oOperandSetLength(two)
         >>
        ;OperandForceAddressIntoTemp
        @OperandForceToStack
         [ oOperandChooseLength (two)
         | two:
         ] or >
         oEmitSingle(iPush)
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mTemp)
          | mTemp:
          oTempFree
          ] or >
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         oOperandPushMode(mStack)
         >>
        ;OperandForceToStack
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mStack)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        @OperandForceAddressIntoTemp
         [ oOperandChooseMode (mStatic)
         | mStatic:
         @OperandPushTempWord
          oTempAllocate
          oOperandPushTemp
          oOperandSetValue(zero)
          oOperandSetLength(two)
          >>
         ;OperandPushTempWord
         oOperandSwap
         oEmitDouble(iLoada)
         oOperandPop
         ] or >
         oOperandSetLength(two)
         >>
        ;OperandForceAddressIntoTemp
        @OperandForceToStack
         [ oOperandChooseLength (two)
         | two:
         ] or >
         oEmitSingle(iPush)
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mTemp)
          | mTemp:
          oTempFree
          ] or >
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         oOperandPushMode(mStack)
         >>
        ;OperandForceToStack
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mStack)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        oOperandPushMode(mTrap)
        oOperandSetValue(trStringEqual)
        oOperandSetLength(two)
        oEmitSingle(iCall)
        oOperandPop
        oOperandPushMode(mStackReg)
        oOperandSetLength(two)
        oOperandPushMode(mManifest)
        oOperandSetLength(two)
        oOperandSetValue(eight)
        oEmitDouble(iAdd)
        oOperandPop
        oOperandPop
        oOperandPushMode(mScratchReg1)
        oOperandSetLength(two)
        oOperandPushMode(mResultReg)
        oOperandSetLength(two)
        oEmitDouble(iMov)
        oOperandPop
        @RestoreTempRegsFromStack
         oOperandPushMode(mTemp)
         oOperandSetLength(two)
         oOperandSetRegnum(four)
         oEmitSingle(iPop)
         oOperandSetRegnum(regCX)
         oEmitSingle(iPop)
         oOperandSetRegnum(two)
         oEmitSingle(iPop)
         oOperandSetRegnum(one)
         oEmitSingle(iPop)
         oOperandPop
         >>
        ;RestoreTempRegsFromStack
        @OperandForceIntoTemp
         [ oOperandChooseMode (mScratchReg1)
         | *:
         [ oOperandChooseLength (two)
         | two:
         @OperandPushTempWord
          oTempAllocate
          oOperandPushTemp
          oOperandSetValue(zero)
          oOperandSetLength(two)
          >>
         ;OperandPushTempWord
         oOperandSwap
         oEmitDouble(iMov)
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mScratchReg1)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         oOperandSetMode(mTemp)
         ] or >
         >>
        ;OperandForceIntoTemp
        oOperandSetLength(one)
        >>
       ;OperandStringEqualPop
       ] or >
       }
       [ (tIfThen)
       | *:
       ] or >
       >>
      ;OperandPushExpression
      @OperandForceToJumpCondition
       [ oOperandIsJumpCondition (no)
       | *:
       [ oOperandChooseManifestValue ()
       | *:
       @EmitTst
        [ oOperandChooseLength (one)
        | one:
        oOperandPushMode(mManifest)
        oOperandSetValue(zero)
        oOperandSetLength(one)
        ] or >
        @EmitCmp
         oOperandSwap
         [ oOperandChooseMode (mTemp)
         | *:
         oOperandSwap
         @OperandLeftOrRightIsTemp
          [ oOperandChooseMode (mManifest)
          | *:
          oOperandSwap
          [ oOperandChooseMode (mTemp)
          | mTemp:
          oOperandSwap
          >>yes
         ;OperandLeftOrRightIsTemp
         [@OperandLeftOrRightIsTemp (yes)
         | yes:
         oEmitDouble(iCmp)
         ] or >
         >>
        ;EmitCmp
        oOperandPop
        >>
       ;EmitTst
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mTemp)
        | mTemp:
        oTempFree
        ] or >
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandPushJumpCondition(iJne)
       >>
      ;OperandForceToJumpCondition
      >>
     ;OperandPushBooleanControlExpression
     ?tIfThen (tIfThen)
     [ oOperandChooseJumpCondition (iJne)
     | *:
     @OperandComplementJumpCondition
      [ oOperandChooseJumpCondition (iJne)
      | *:
      oOperandComplementJumpCondition
      >>
     ;OperandComplementJumpCondition
     @OperandInfixOr
      @OperandForceToJumpCondition
       [ oOperandIsJumpCondition (yes)
       | yes:
       ] or >
       >>
      ;OperandForceToJumpCondition
      [ oOperandChooseJumpCondition (iJeq)
      | *:
      oEmitConditionalForwardBranch
      oFixAndFreeFalseBranches
      oFixPushLastAddress
      oOperandMergeShuntsWithAddress
      oFixPopAddress
      >>
     ;OperandInfixOr
     @Statements
      @Block
       [ (tWriteBegin)
       | tWriteBegin:
       @WriteProc
        oEmitSourceCoordinate
        [ (tTrapBegin)
        | *:
        @WriteParameter
         ?tTrapBegin (tTrapBegin)
         ?tLiteralAddress (tLiteralAddress)
         @OperandPushVariable
          oOperandPushVariable
          [ (tVarParm)
          | *:
          [ (tVarParm)
          | *:
          [ (tVarParm)
          | *:
          >>
         ;OperandPushVariable
         @OperandForceToStack
          [ oOperandChooseLength (two)
          | two:
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tVarParm (tVarParm)
         ?tParmEnd (tParmEnd)
         @OperandPushExpression
          [ (tSkipString)
          | tSkipString:
          oEmitNone(iData)
          ?tStringData (tStringData)
          oEmitString
          oEmitNone(iText)
          ] or >
          }
          [ (tLiteralAddress)
          | tLiteralAddress:
          @OperandPushVariable
           oOperandPushVariable
           [ (tFetchChar)
           | *:
           [ (tFetchChar)
           | *:
           [ (tFetchChar)
           | tFetchChar:
           oOperandSetLength(regCX)
           ] or >
           >>
          ;OperandPushVariable
          ] or >
          }
          [ (tParmEnd)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         [ (tParmEnd)
         | *:
         @OperandForceToStack
          [ oOperandChooseLength (regCX)
          | regCX:
          @OperandForceAddressIntoTemp
           [ oOperandChooseMode (mStatic)
           | mStatic:
           @OperandPushTempWord
            oTempAllocate
            oOperandPushTemp
            oOperandSetValue(zero)
            oOperandSetLength(two)
            >>
           ;OperandPushTempWord
           oOperandSwap
           oEmitDouble(iLoada)
           oOperandPop
           ] or >
           oOperandSetLength(two)
           >>
          ;OperandForceAddressIntoTemp
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mTemp)
           | mTemp:
           oTempFree
           ] or >
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tParmEnd (tParmEnd)
         @OperandPushExpression
          [ (tLiteralInteger)
          | tLiteralInteger:
          oOperandPushInteger
          ] or >
          }
          [ (tParmEnd)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         @OperandForceToStack
          [ oOperandChooseLength (two)
          | two:
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mManifest)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tParmEnd (tParmEnd)
         ?tTrap (tTrap)
         oOperandPushTrap
         oEmitSingle(iCall)
         oOperandPop
         oOperandPushMode(mStackReg)
         oOperandSetLength(two)
         oOperandPushMode(mManifest)
         oOperandSetLength(two)
         oOperandSetValue(twelve)
         oEmitDouble(iAdd)
         oOperandPop
         oOperandPop
         >>
        ;WriteParameter
        }
        [ (tWriteEnd)
        | tWriteEnd:
        ] or >
        >>
       ;WriteProc
       ] or >
       }
       [ (tIfMerge)
       | *:
       ] or >
       >>
      ;Block
      >>
     ;Statements
     [ (tIfMerge)
     | tIfMerge:
     oEmitUnconditionalForwardBranch
     oFixAndFreeShuntList
     oOperandPop
     oFixPushLastAddress
     oEmitMergeSourceCoordinate
     @Statements
      @Block
       [ (tIfBegin)
       | tIfBegin:
       @IfStmt
        oEmitSourceCoordinate
        @OperandPushBooleanControlExpression
         @OperandPushExpression
          [ (tLiteralAddress)
          | tLiteralAddress:
          @OperandPushVariable
           oOperandPushVariable
           [ (tFetchChar)
           | *:
           [ (tFetchChar)
           | *:
           [ (tFetchChar)
           | tFetchChar:
           oOperandSetLength(regCX)
           ] or >
           >>
          ;OperandPushVariable
          ] or >
          }
          [ (tSkipString)
          | tSkipString:
          oEmitNone(iData)
          ?tStringData (tStringData)
          oEmitString
          oEmitNone(iText)
          ] or >
          }
          [ (tLiteralAddress)
          | tLiteralAddress:
          @OperandPushVariable
           oOperandPushVariable
           [ (tFetchChar)
           | *:
           [ (tFetchChar)
           | *:
           [ (tFetchChar)
           | tFetchChar:
           oOperandSetLength(regCX)
           ] or >
           >>
          ;OperandPushVariable
          ] or >
          }
          [ (tStringEQ)
          | tStringEQ:
          @OperandStringEqualPop
           @SaveTempRegsToStack
            oOperandPushMode(mTemp)
            oOperandSetLength(two)
            oOperandSetRegnum(one)
            oEmitSingle(iPush)
            oOperandSetRegnum(two)
            oEmitSingle(iPush)
            oOperandSetRegnum(regCX)
            oEmitSingle(iPush)
            oOperandSetRegnum(four)
            oEmitSingle(iPush)
            oOperandPop
            >>
           ;SaveTempRegsToStack
           @OperandForceAddressIntoTemp
            [ oOperandChooseMode (mStatic)
            | mStatic:
            @OperandPushTempWord
             oTempAllocate
             oOperandPushTemp
             oOperandSetValue(zero)
             oOperandSetLength(two)
             >>
            ;OperandPushTempWord
            oOperandSwap
            oEmitDouble(iLoada)
            oOperandPop
            ] or >
            oOperandSetLength(two)
            >>
           ;OperandForceAddressIntoTemp
           @OperandForceToStack
            [ oOperandChooseLength (two)
            | two:
            ] or >
            oEmitSingle(iPush)
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mTemp)
             | mTemp:
             oTempFree
             ] or >
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            oOperandPushMode(mStack)
            >>
           ;OperandForceToStack
           @OperandPopAndFreeTemp
            [ oOperandChooseMode (mStack)
            | *:
            oOperandPop
            >>
           ;OperandPopAndFreeTemp
           @OperandForceAddressIntoTemp
            [ oOperandChooseMode (mStatic)
            | mStatic:
            @OperandPushTempWord
             oTempAllocate
             oOperandPushTemp
             oOperandSetValue(zero)
             oOperandSetLength(two)
             >>
            ;OperandPushTempWord
            oOperandSwap
            oEmitDouble(iLoada)
            oOperandPop
            ] or >
            oOperandSetLength(two)
            >>
           ;OperandForceAddressIntoTemp
           @OperandForceToStack
            [ oOperandChooseLength (two)
            | two:
            ] or >
            oEmitSingle(iPush)
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mTemp)
             | mTemp:
             oTempFree
             ] or >
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            oOperandPushMode(mStack)
            >>
           ;OperandForceToStack
           @OperandPopAndFreeTemp
            [ oOperandChooseMode (mStack)
            | *:
            oOperandPop
            >>
           ;OperandPopAndFreeTemp
           oOperandPushMode(mTrap)
           oOperandSetValue(trStringEqual)
           oOperandSetLength(two)
           oEmitSingle(iCall)
           oOperandPop
           oOperandPushMode(mStackReg)
           oOperandSetLength(two)
           oOperandPushMode(mManifest)
           oOperandSetLength(two)
           oOperandSetValue(eight)
           oEmitDouble(iAdd)
           oOperandPop
           oOperandPop
           oOperandPushMode(mScratchReg1)
           oOperandSetLength(two)
           oOperandPushMode(mResultReg)
           oOperandSetLength(two)
           oEmitDouble(iMov)
           oOperandPop
           @RestoreTempRegsFromStack
            oOperandPushMode(mTemp)
            oOperandSetLength(two)
            oOperandSetRegnum(four)
            oEmitSingle(iPop)
            oOperandSetRegnum(regCX)
            oEmitSingle(iPop)
            oOperandSetRegnum(two)
            oEmitSingle(iPop)
            oOperandSetRegnum(one)
            oEmitSingle(iPop)
            oOperandPop
            >>
           ;RestoreTempRegsFromStack
           @OperandForceIntoTemp
            [ oOperandChooseMode (mScratchReg1)
            | *:
            [ oOperandChooseLength (two)
            | two:
            @OperandPushTempWord
             oTempAllocate
             oOperandPushTemp
             oOperandSetValue(zero)
             oOperandSetLength(two)
             >>
            ;OperandPushTempWord
            oOperandSwap
            oEmitDouble(iMov)
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mScratchReg1)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            oOperandSetMode(mTemp)
            ] or >
            >>
           ;OperandForceIntoTemp
           oOperandSetLength(one)
           >>
          ;OperandStringEqualPop
          ] or >
          }
          [ (tIfThen)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         @OperandForceToJumpCondition
          [ oOperandIsJumpCondition (no)
          | *:
          [ oOperandChooseManifestValue ()
          | *:
          @EmitTst
           [ oOperandChooseLength (one)
           | one:
           oOperandPushMode(mManifest)
           oOperandSetValue(zero)
           oOperandSetLength(one)
           ] or >
           @EmitCmp
            oOperandSwap
            [ oOperandChooseMode (mTemp)
            | *:
            oOperandSwap
            @OperandLeftOrRightIsTemp
             [ oOperandChooseMode (mManifest)
             | *:
             oOperandSwap
             [ oOperandChooseMode (mTemp)
             | mTemp:
             oOperandSwap
             >>yes
            ;OperandLeftOrRightIsTemp
            [@OperandLeftOrRightIsTemp (yes)
            | yes:
            oEmitDouble(iCmp)
            ] or >
            >>
           ;EmitCmp
           oOperandPop
           >>
          ;EmitTst
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mTemp)
           | mTemp:
           oTempFree
           ] or >
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushJumpCondition(iJne)
          >>
         ;OperandForceToJumpCondition
         >>
        ;OperandPushBooleanControlExpression
        ?tIfThen (tIfThen)
        [ oOperandChooseJumpCondition (iJne)
        | *:
        @OperandComplementJumpCondition
         [ oOperandChooseJumpCondition (iJne)
         | *:
         oOperandComplementJumpCondition
         >>
        ;OperandComplementJumpCondition
        @OperandInfixOr
         @OperandForceToJumpCondition
          [ oOperandIsJumpCondition (yes)
          | yes:
          ] or >
          >>
         ;OperandForceToJumpCondition
         [ oOperandChooseJumpCondition (iJeq)
         | *:
         oEmitConditionalForwardBranch
         oFixAndFreeFalseBranches
         oFixPushLastAddress
         oOperandMergeShuntsWithAddress
         oFixPopAddress
         >>
        ;OperandInfixOr
        @Statements
         @Block
          [ (tWriteBegin)
          | tWriteBegin:
          @WriteProc
           oEmitSourceCoordinate
           [ (tTrapBegin)
           | *:
           @WriteParameter
            ?tTrapBegin (tTrapBegin)
            ?tLiteralAddress (tLiteralAddress)
            @OperandPushVariable
             oOperandPushVariable
             [ (tVarParm)
             | *:
             [ (tVarParm)
             | *:
             [ (tVarParm)
             | *:
             >>
            ;OperandPushVariable
            @OperandForceToStack
             [ oOperandChooseLength (two)
             | two:
             ] or >
             oEmitSingle(iPush)
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mStatic)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandPushMode(mStack)
             >>
            ;OperandForceToStack
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStack)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            ?tVarParm (tVarParm)
            ?tParmEnd (tParmEnd)
            @OperandPushExpression
             [ (tSkipString)
             | tSkipString:
             oEmitNone(iData)
             ?tStringData (tStringData)
             oEmitString
             oEmitNone(iText)
             ] or >
             }
             [ (tLiteralAddress)
             | tLiteralAddress:
             @OperandPushVariable
              oOperandPushVariable
              [ (tFetchChar)
              | *:
              [ (tFetchChar)
              | *:
              [ (tFetchChar)
              | tFetchChar:
              oOperandSetLength(regCX)
              ] or >
              >>
             ;OperandPushVariable
             ] or >
             }
             [ (tParmEnd)
             | *:
             ] or >
             >>
            ;OperandPushExpression
            [ (tParmEnd)
            | *:
            @OperandForceToStack
             [ oOperandChooseLength (regCX)
             | regCX:
             @OperandForceAddressIntoTemp
              [ oOperandChooseMode (mStatic)
              | mStatic:
              @OperandPushTempWord
               oTempAllocate
               oOperandPushTemp
               oOperandSetValue(zero)
               oOperandSetLength(two)
               >>
              ;OperandPushTempWord
              oOperandSwap
              oEmitDouble(iLoada)
              oOperandPop
              ] or >
              oOperandSetLength(two)
              >>
             ;OperandForceAddressIntoTemp
             ] or >
             oEmitSingle(iPush)
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mTemp)
              | mTemp:
              oTempFree
              ] or >
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandPushMode(mStack)
             >>
            ;OperandForceToStack
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStack)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            ?tParmEnd (tParmEnd)
            @OperandPushExpression
             [ (tLiteralInteger)
             | tLiteralInteger:
             oOperandPushInteger
             ] or >
             }
             [ (tParmEnd)
             | *:
             ] or >
             >>
            ;OperandPushExpression
            @OperandForceToStack
             [ oOperandChooseLength (two)
             | two:
             ] or >
             oEmitSingle(iPush)
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mManifest)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandPushMode(mStack)
             >>
            ;OperandForceToStack
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStack)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            ?tParmEnd (tParmEnd)
            ?tTrap (tTrap)
            oOperandPushTrap
            oEmitSingle(iCall)
            oOperandPop
            oOperandPushMode(mStackReg)
            oOperandSetLength(two)
            oOperandPushMode(mManifest)
            oOperandSetLength(two)
            oOperandSetValue(twelve)
            oEmitDouble(iAdd)
            oOperandPop
            oOperandPop
            >>
           ;WriteParameter
           }
           [ (tWriteEnd)
           | tWriteEnd:
           ] or >
           >>
          ;WriteProc
          ] or >
          }
          [ (tIfMerge)
          | *:
          ] or >
          >>
         ;Block
         >>
        ;Statements
        [ (tIfMerge)
        | tIfMerge:
        oEmitUnconditionalForwardBranch
        oFixAndFreeShuntList
        oOperandPop
        oFixPushLastAddress
        oEmitMergeSourceCoordinate
        @Statements
         @Block
          [ (tWriteBegin)
          | tWriteBegin:
          @WriteProc
           oEmitSourceCoordinate
           [ (tTrapBegin)
           | *:
           @WriteParameter
            ?tTrapBegin (tTrapBegin)
            ?tLiteralAddress (tLiteralAddress)
            @OperandPushVariable
             oOperandPushVariable
             [ (tVarParm)
             | *:
             [ (tVarParm)
             | *:
             [ (tVarParm)
             | *:
             >>
            ;OperandPushVariable
            @OperandForceToStack
             [ oOperandChooseLength (two)
             | two:
             ] or >
             oEmitSingle(iPush)
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mStatic)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandPushMode(mStack)
             >>
            ;OperandForceToStack
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStack)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            ?tVarParm (tVarParm)
            ?tParmEnd (tParmEnd)
            @OperandPushExpression
             [ (tSkipString)
             | tSkipString:
             oEmitNone(iData)
             ?tStringData (tStringData)
             oEmitString
             oEmitNone(iText)
             ] or >
             }
             [ (tLiteralAddress)
             | tLiteralAddress:
             @OperandPushVariable
              oOperandPushVariable
              [ (tFetchChar)
              | *:
              [ (tFetchChar)
              | *:
              [ (tFetchChar)
              | tFetchChar:
              oOperandSetLength(regCX)
              ] or >
              >>
             ;OperandPushVariable
             ] or >
             }
             [ (tParmEnd)
             | *:
             ] or >
             >>
            ;OperandPushExpression
            [ (tParmEnd)
            | *:
            @OperandForceToStack
             [ oOperandChooseLength (regCX)
             | regCX:
             @OperandForceAddressIntoTemp
              [ oOperandChooseMode (mStatic)
              | mStatic:
              @OperandPushTempWord
               oTempAllocate
               oOperandPushTemp
               oOperandSetValue(zero)
               oOperandSetLength(two)
               >>
              ;OperandPushTempWord
              oOperandSwap
              oEmitDouble(iLoada)
              oOperandPop
              ] or >
              oOperandSetLength(two)
              >>
             ;OperandForceAddressIntoTemp
             ] or >
             oEmitSingle(iPush)
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mTemp)
              | mTemp:
              oTempFree
              ] or >
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandPushMode(mStack)
             >>
            ;OperandForceToStack
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStack)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            ?tParmEnd (tParmEnd)
            @OperandPushExpression
             [ (tLiteralInteger)
             | tLiteralInteger:
             oOperandPushInteger
             ] or >
             }
             [ (tParmEnd)
             | *:
             ] or >
             >>
            ;OperandPushExpression
            @OperandForceToStack
             [ oOperandChooseLength (two)
             | two:
             ] or >
             oEmitSingle(iPush)
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mManifest)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandPushMode(mStack)
             >>
            ;OperandForceToStack
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStack)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            ?tParmEnd (tParmEnd)
            ?tTrap (tTrap)
            oOperandPushTrap
            oEmitSingle(iCall)
            oOperandPop
            oOperandPushMode(mStackReg)
            oOperandSetLength(two)
            oOperandPushMode(mManifest)
            oOperandSetLength(two)
            oOperandSetValue(twelve)
            oEmitDouble(iAdd)
            oOperandPop
            oOperandPop
            >>
           ;WriteParameter
           }
           [ (tWriteEnd)
           | tWriteEnd:
           ] or >
           >>
          ;WriteProc
          ] or >
          }
          [ (tIfEnd)
          | *:
          ] or >
          >>
         ;Block
         >>
        ;Statements
        oFixForwardBranch
        oFixPopAddress
        ?tIfEnd (tIfEnd)
        ] or >
        >>
       ;IfStmt
       ] or >
       }
       [ (tIfEnd)
       | *:
       ] or >
       >>
      ;Block
      >>
     ;Statements
     oFixForwardBranch
     oFixPopAddress
     ?tIfEnd (tIfEnd)
     ] or >
     >>
    ;IfStmt
    ] or >
    }
    [ (tProcedureEnd)
    | *:
    ] or >
    >>
   ;Block
   ?tProcedureEnd (tProcedureEnd)
   oEmitNone(iLeave)
   oEmitNone(iReturn)
   >>
  ;Routine
  oFixForwardBranch
  oFixPopAddress
  ] or >
  }
  [ (tSkipProc)
  | tSkipProc:
  oEmitUnconditionalForwardBranch
  oFixPushLastAddress
  @Routine
   oEmitProcLabel(mProc)
   oEmitNone(iEnter)
   [ (tLiteralAddress)
   | *:
   oOperandPushMode(mArgument)
   oOperandSetValue(four)
   [ (tLiteralAddress)
   | tLiteralAddress:
   @OperandNextArgument
    oOperandSetMode(mManifest)
    oOperandPushMode(mManifest)
    oOperandSetValue(four)
    oOperandAddManifestValues
    oOperandPop
    oOperandSetMode(mArgument)
    >>
   ;OperandNextArgument
   oOperandPushCopy
   oOperandPushVariable
   oOperandSwap
   [ (tStoreAddress)
   | tStoreAddress:
   oOperandSetLength(two)
   @OperandAssignIntegerPopPop
    [ oOperandCompareLeftAndRight (no)
    | no:
    @EmitMove
     @OperandLeftOrRightIsTemp
      [ oOperandChooseMode (mArgument)
      | *:
      oOperandSwap
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandSwap
      >>no
     ;OperandLeftOrRightIsTemp
     [@OperandLeftOrRightIsTemp (no)
     | *:
     [ oOperandChooseMode (mArgument)
     | *:
     oOperandPushCopy
     @OperandForceIntoTemp
      [ oOperandChooseMode (mArgument)
      | *:
      [ oOperandChooseLength (two)
      | two:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iMov)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mArgument)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandSetMode(mTemp)
      ] or >
      >>
     ;OperandForceIntoTemp
     oOperandSwapLeftAndDest
     oEmitDouble(iMov)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mTemp)
      | mTemp:
      oTempFree
      ] or >
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandSwap
     >>
    ;EmitMove
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mArgument)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ] or >
    >>
   ;OperandAssignIntegerPopPop
   ] or >
   ] or >
   }
   [ (tParmEnd)
   | tParmEnd:
   ] or >
   oOperandPop
   @Block
    [ (tAssignBegin)
    | tAssignBegin:
    @AssignStmt
     oEmitSourceCoordinate
     ?tLiteralAddress (tLiteralAddress)
     @OperandPushVariable
      oOperandPushVariable
      [ (tLiteralInteger)
      | *:
      [ (tLiteralInteger)
      | *:
      [ (tLiteralInteger)
      | *:
      >>
     ;OperandPushVariable
     @OperandPushExpressionAssignPopPop
      [ (tLiteralInteger)
      | tLiteralInteger:
      oOperandPushInteger
      ] or >
      }
      [ (tAssignInteger)
      | tAssignInteger:
      @OperandAssignIntegerPopPop
       [ oOperandCompareLeftAndRight (no)
       | no:
       @EmitMove
        @OperandLeftOrRightIsTemp
         [ oOperandChooseMode (mManifest)
         | *:
         oOperandSwap
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandSwap
         >>no
        ;OperandLeftOrRightIsTemp
        [@OperandLeftOrRightIsTemp (no)
        | *:
        [ oOperandChooseMode (mManifest)
        | mManifest:
        oEmitDouble(iMov)
        ] or >
        >>
       ;EmitMove
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mManifest)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       ] or >
       >>
      ;OperandAssignIntegerPopPop
      ] or >
      >>
     ;OperandPushExpressionAssignPopPop
     >>
    ;AssignStmt
    ] or >
    }
    [ (tAssignBegin)
    | tAssignBegin:
    @AssignStmt
     oEmitSourceCoordinate
     ?tLiteralAddress (tLiteralAddress)
     @OperandPushVariable
      oOperandPushVariable
      [ (tLiteralInteger)
      | *:
      [ (tLiteralInteger)
      | *:
      [ (tLiteralInteger)
      | *:
      >>
     ;OperandPushVariable
     @OperandPushExpressionAssignPopPop
      [ (tLiteralInteger)
      | tLiteralInteger:
      oOperandPushInteger
      ] or >
      }
      [ (tAssignInteger)
      | tAssignInteger:
      @OperandAssignIntegerPopPop
       [ oOperandCompareLeftAndRight (no)
       | no:
       @EmitMove
        @OperandLeftOrRightIsTemp
         [ oOperandChooseMode (mManifest)
         | *:
         oOperandSwap
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandSwap
         >>no
        ;OperandLeftOrRightIsTemp
        [@OperandLeftOrRightIsTemp (no)
        | *:
        [ oOperandChooseMode (mManifest)
        | mManifest:
        oEmitDouble(iMov)
        ] or >
        >>
       ;EmitMove
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mManifest)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       ] or >
       >>
      ;OperandAssignIntegerPopPop
      ] or >
      >>
     ;OperandPushExpressionAssignPopPop
     >>
    ;AssignStmt
    ] or >
    }
    [ (tAssignBegin)
    | tAssignBegin:
    @AssignStmt
     oEmitSourceCoordinate
     ?tLiteralAddress (tLiteralAddress)
     @OperandPushVariable
      oOperandPushVariable
      [ (tLiteralInteger)
      | *:
      [ (tLiteralInteger)
      | *:
      [ (tLiteralInteger)
      | *:
      >>
     ;OperandPushVariable
     @OperandPushExpressionAssignPopPop
      [ (tLiteralInteger)
      | tLiteralInteger:
      oOperandPushInteger
      ] or >
      }
      [ (tAssignInteger)
      | tAssignInteger:
      @OperandAssignIntegerPopPop
       [ oOperandCompareLeftAndRight (no)
       | no:
       @EmitMove
        @OperandLeftOrRightIsTemp
         [ oOperandChooseMode (mManifest)
         | *:
         oOperandSwap
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandSwap
         >>no
        ;OperandLeftOrRightIsTemp
        [@OperandLeftOrRightIsTemp (no)
        | *:
        [ oOperandChooseMode (mManifest)
        | mManifest:
        oEmitDouble(iMov)
        ] or >
        >>
       ;EmitMove
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mManifest)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       ] or >
       >>
      ;OperandAssignIntegerPopPop
      ] or >
      >>
     ;OperandPushExpressionAssignPopPop
     >>
    ;AssignStmt
    ] or >
    }
    [ (tTrapBegin)
    | tTrapBegin:
    @TrapStmt
     oEmitSourceCoordinate
     [ (tLiteralAddress)
     | tLiteralAddress:
     @OperandPushVariable
      oOperandPushVariable
      [ (tVarParm)
      | *:
      [ (tVarParm)
      | *:
      [ (tVarParm)
      | *:
      >>
     ;OperandPushVariable
     oOperandPushCopy
     @OperandForceToStack
      [ oOperandChooseLength (two)
      | two:
      ] or >
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mStack)
      >>
     ;OperandForceToStack
     oOperandPop
     ?tVarParm (tVarParm)
     ?tParmEnd (tParmEnd)
     [ (tTrap)
     | tTrap:
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushTrap
     oEmitSingle(iCall)
     oOperandPop
     oOperandPushMode(mStackReg)
     oOperandSetLength(two)
     oOperandPushMode(mManifest)
     oOperandSetLength(two)
     oOperandSetValue(four)
     oEmitDouble(iAdd)
     oOperandPop
     oOperandPop
     ] or >
     ] or >
     >>
    ;TrapStmt
    ] or >
    }
    [ (tTrapBegin)
    | tTrapBegin:
    @TrapStmt
     oEmitSourceCoordinate
     [ (tLiteralAddress)
     | tLiteralAddress:
     @OperandPushVariable
      oOperandPushVariable
      [ (tVarParm)
      | *:
      [ (tVarParm)
      | *:
      [ (tVarParm)
      | *:
      >>
     ;OperandPushVariable
     oOperandPushCopy
     @OperandForceToStack
      [ oOperandChooseLength (two)
      | two:
      ] or >
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mStack)
      >>
     ;OperandForceToStack
     oOperandPop
     ?tVarParm (tVarParm)
     ?tParmEnd (tParmEnd)
     [ (tTrap)
     | tTrap:
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushTrap
     oEmitSingle(iCall)
     oOperandPop
     oOperandPushMode(mStackReg)
     oOperandSetLength(two)
     oOperandPushMode(mManifest)
     oOperandSetLength(two)
     oOperandSetValue(four)
     oEmitDouble(iAdd)
     oOperandPop
     oOperandPop
     ] or >
     ] or >
     >>
    ;TrapStmt
    ] or >
    }
    [ (tWriteBegin)
    | tWriteBegin:
    @WriteProc
     oEmitSourceCoordinate
     [ (tTrapBegin)
     | *:
     @WriteParameter
      ?tTrapBegin (tTrapBegin)
      ?tLiteralAddress (tLiteralAddress)
      @OperandPushVariable
       oOperandPushVariable
       [ (tVarParm)
       | *:
       [ (tVarParm)
       | *:
       [ (tVarParm)
       | *:
       >>
      ;OperandPushVariable
      @OperandForceToStack
       [ oOperandChooseLength (two)
       | two:
       ] or >
       oEmitSingle(iPush)
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandPushMode(mStack)
       >>
      ;OperandForceToStack
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStack)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      ?tVarParm (tVarParm)
      ?tParmEnd (tParmEnd)
      @OperandPushExpression
       [ (tSkipString)
       | tSkipString:
       oEmitNone(iData)
       ?tStringData (tStringData)
       oEmitString
       oEmitNone(iText)
       ] or >
       }
       [ (tLiteralAddress)
       | tLiteralAddress:
       @OperandPushVariable
        oOperandPushVariable
        [ (tFetchChar)
        | *:
        [ (tFetchChar)
        | *:
        [ (tFetchChar)
        | tFetchChar:
        oOperandSetLength(regCX)
        ] or >
        >>
       ;OperandPushVariable
       ] or >
       }
       [ (tParmEnd)
       | *:
       ] or >
       >>
      ;OperandPushExpression
      [ (tParmEnd)
      | *:
      @OperandForceToStack
       [ oOperandChooseLength (regCX)
       | regCX:
       @OperandForceAddressIntoTemp
        [ oOperandChooseMode (mStatic)
        | mStatic:
        @OperandPushTempWord
         oTempAllocate
         oOperandPushTemp
         oOperandSetValue(zero)
         oOperandSetLength(two)
         >>
        ;OperandPushTempWord
        oOperandSwap
        oEmitDouble(iLoada)
        oOperandPop
        ] or >
        oOperandSetLength(two)
        >>
       ;OperandForceAddressIntoTemp
       ] or >
       oEmitSingle(iPush)
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mTemp)
        | mTemp:
        oTempFree
        ] or >
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandPushMode(mStack)
       >>
      ;OperandForceToStack
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStack)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      ?tParmEnd (tParmEnd)
      @OperandPushExpression
       [ (tLiteralInteger)
       | tLiteralInteger:
       oOperandPushInteger
       ] or >
       }
       [ (tParmEnd)
       | *:
       ] or >
       >>
      ;OperandPushExpression
      @OperandForceToStack
       [ oOperandChooseLength (two)
       | two:
       ] or >
       oEmitSingle(iPush)
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mManifest)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandPushMode(mStack)
       >>
      ;OperandForceToStack
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStack)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      ?tParmEnd (tParmEnd)
      ?tTrap (tTrap)
      oOperandPushTrap
      oEmitSingle(iCall)
      oOperandPop
      oOperandPushMode(mStackReg)
      oOperandSetLength(two)
      oOperandPushMode(mManifest)
      oOperandSetLength(two)
      oOperandSetValue(twelve)
      oEmitDouble(iAdd)
      oOperandPop
      oOperandPop
      >>
     ;WriteParameter
     }
     [ (tWriteEnd)
     | tWriteEnd:
     ] or >
     >>
    ;WriteProc
    ] or >
    }
    [ (tTrapBegin)
    | tTrapBegin:
    @TrapStmt
     oEmitSourceCoordinate
     [ (tLiteralAddress)
     | tLiteralAddress:
     @OperandPushVariable
      oOperandPushVariable
      [ (tVarParm)
      | *:
      [ (tVarParm)
      | *:
      [ (tVarParm)
      | *:
      >>
     ;OperandPushVariable
     oOperandPushCopy
     @OperandForceToStack
      [ oOperandChooseLength (two)
      | two:
      ] or >
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mStack)
      >>
     ;OperandForceToStack
     oOperandPop
     ?tVarParm (tVarParm)
     ?tParmEnd (tParmEnd)
     [ (tTrap)
     | tTrap:
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushTrap
     oEmitSingle(iCall)
     oOperandPop
     oOperandPushMode(mStackReg)
     oOperandSetLength(two)
     oOperandPushMode(mManifest)
     oOperandSetLength(two)
     oOperandSetValue(four)
     oEmitDouble(iAdd)
     oOperandPop
     oOperandPop
     ] or >
     ] or >
     >>
    ;TrapStmt
    ] or >
    }
    [ (tTrapBegin)
    | tTrapBegin:
    @TrapStmt
     oEmitSourceCoordinate
     [ (tLiteralAddress)
     | tLiteralAddress:
     @OperandPushVariable
      oOperandPushVariable
      [ (tVarParm)
      | *:
      [ (tVarParm)
      | *:
      [ (tVarParm)
      | *:
      >>
     ;OperandPushVariable
     oOperandPushCopy
     @OperandForceToStack
      [ oOperandChooseLength (two)
      | two:
      ] or >
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mStack)
      >>
     ;OperandForceToStack
     oOperandPop
     ?tVarParm (tVarParm)
     ?tParmEnd (tParmEnd)
     [ (tTrap)
     | tTrap:
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushTrap
     oEmitSingle(iCall)
     oOperandPop
     oOperandPushMode(mStackReg)
     oOperandSetLength(two)
     oOperandPushMode(mManifest)
     oOperandSetLength(two)
     oOperandSetValue(four)
     oEmitDouble(iAdd)
     oOperandPop
     oOperandPop
     ] or >
     ] or >
     >>
    ;TrapStmt
    ] or >
    }
    [ (tWriteBegin)
    | tWriteBegin:
    @WriteProc
     oEmitSourceCoordinate
     [ (tTrapBegin)
     | *:
     @WriteParameter
      ?tTrapBegin (tTrapBegin)
      ?tLiteralAddress (tLiteralAddress)
      @OperandPushVariable
       oOperandPushVariable
       [ (tVarParm)
       | *:
       [ (tVarParm)
       | *:
       [ (tVarParm)
       | *:
       >>
      ;OperandPushVariable
      @OperandForceToStack
       [ oOperandChooseLength (two)
       | two:
       ] or >
       oEmitSingle(iPush)
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandPushMode(mStack)
       >>
      ;OperandForceToStack
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStack)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      ?tVarParm (tVarParm)
      ?tParmEnd (tParmEnd)
      @OperandPushExpression
       [ (tSkipString)
       | tSkipString:
       oEmitNone(iData)
       ?tStringData (tStringData)
       oEmitString
       oEmitNone(iText)
       ] or >
       }
       [ (tLiteralAddress)
       | tLiteralAddress:
       @OperandPushVariable
        oOperandPushVariable
        [ (tFetchChar)
        | *:
        [ (tFetchChar)
        | *:
        [ (tFetchChar)
        | tFetchChar:
        oOperandSetLength(regCX)
        ] or >
        >>
       ;OperandPushVariable
       ] or >
       }
       [ (tParmEnd)
       | *:
       ] or >
       >>
      ;OperandPushExpression
      [ (tParmEnd)
      | *:
      @OperandForceToStack
       [ oOperandChooseLength (regCX)
       | regCX:
       @OperandForceAddressIntoTemp
        [ oOperandChooseMode (mStatic)
        | mStatic:
        @OperandPushTempWord
         oTempAllocate
         oOperandPushTemp
         oOperandSetValue(zero)
         oOperandSetLength(two)
         >>
        ;OperandPushTempWord
        oOperandSwap
        oEmitDouble(iLoada)
        oOperandPop
        ] or >
        oOperandSetLength(two)
        >>
       ;OperandForceAddressIntoTemp
       ] or >
       oEmitSingle(iPush)
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mTemp)
        | mTemp:
        oTempFree
        ] or >
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandPushMode(mStack)
       >>
      ;OperandForceToStack
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStack)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      ?tParmEnd (tParmEnd)
      @OperandPushExpression
       [ (tLiteralInteger)
       | tLiteralInteger:
       oOperandPushInteger
       ] or >
       }
       [ (tParmEnd)
       | *:
       ] or >
       >>
      ;OperandPushExpression
      @OperandForceToStack
       [ oOperandChooseLength (two)
       | two:
       ] or >
       oEmitSingle(iPush)
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mManifest)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandPushMode(mStack)
       >>
      ;OperandForceToStack
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStack)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      ?tParmEnd (tParmEnd)
      ?tTrap (tTrap)
      oOperandPushTrap
      oEmitSingle(iCall)
      oOperandPop
      oOperandPushMode(mStackReg)
      oOperandSetLength(two)
      oOperandPushMode(mManifest)
      oOperandSetLength(two)
      oOperandSetValue(twelve)
      oEmitDouble(iAdd)
      oOperandPop
      oOperandPop
      >>
     ;WriteParameter
     }
     [ (tWriteEnd)
     | tWriteEnd:
     ] or >
     >>
    ;WriteProc
    ] or >
    }
    [ (tReadBegin)
    | tReadBegin:
    @ReadProc
     oEmitSourceCoordinate
     [ (tTrapBegin)
     | *:
     @ReadParameter
      ?tTrapBegin (tTrapBegin)
      ?tLiteralAddress (tLiteralAddress)
      @OperandPushVariable
       oOperandPushVariable
       [ (tVarParm)
       | *:
       [ (tVarParm)
       | *:
       [ (tVarParm)
       | *:
       >>
      ;OperandPushVariable
      @OperandForceToStack
       [ oOperandChooseLength (two)
       | two:
       ] or >
       oEmitSingle(iPush)
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandPushMode(mStack)
       >>
      ;OperandForceToStack
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStack)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      ?tVarParm (tVarParm)
      ?tParmEnd (tParmEnd)
      ?tLiteralAddress (tLiteralAddress)
      @OperandPushVariable
       oOperandPushVariable
       [ (tVarParm)
       | *:
       [ (tVarParm)
       | *:
       [ (tVarParm)
       | *:
       >>
      ;OperandPushVariable
      @OperandForceAddressIntoTemp
       [ oOperandChooseMode (mStatic)
       | mStatic:
       @OperandPushTempWord
        oTempAllocate
        oOperandPushTemp
        oOperandSetValue(zero)
        oOperandSetLength(two)
        >>
       ;OperandPushTempWord
       oOperandSwap
       oEmitDouble(iLoada)
       oOperandPop
       ] or >
       oOperandSetLength(two)
       >>
      ;OperandForceAddressIntoTemp
      @OperandForceToStack
       [ oOperandChooseLength (two)
       | two:
       ] or >
       oEmitSingle(iPush)
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mTemp)
        | mTemp:
        oTempFree
        ] or >
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandPushMode(mStack)
       >>
      ;OperandForceToStack
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStack)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      ?tVarParm (tVarParm)
      ?tParmEnd (tParmEnd)
      oOperandPushMode(mManifest)
      oOperandSetLength(two)
      oOperandSetValue(eight)
      [ (tTrap)
      | tTrap:
      ] or >
      oOperandPushTrap
      oEmitSingle(iCall)
      oOperandPop
      oOperandPushMode(mStackReg)
      oOperandSetLength(two)
      oOperandSwap
      oEmitDouble(iAdd)
      oOperandPop
      oOperandPop
      >>
     ;ReadParameter
     }
     [ (tReadEnd)
     | tReadEnd:
     ] or >
     >>
    ;ReadProc
    ] or >
    }
    [ (tTrapBegin)
    | tTrapBegin:
    @TrapStmt
     oEmitSourceCoordinate
     [ (tLiteralAddress)
     | tLiteralAddress:
     @OperandPushVariable
      oOperandPushVariable
      [ (tVarParm)
      | *:
      [ (tVarParm)
      | *:
      [ (tVarParm)
      | *:
      >>
     ;OperandPushVariable
     oOperandPushCopy
     @OperandForceToStack
      [ oOperandChooseLength (two)
      | two:
      ] or >
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mStack)
      >>
     ;OperandForceToStack
     oOperandPop
     ?tVarParm (tVarParm)
     ?tParmEnd (tParmEnd)
     [ (tTrap)
     | tTrap:
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushTrap
     oEmitSingle(iCall)
     oOperandPop
     oOperandPushMode(mStackReg)
     oOperandSetLength(two)
     oOperandPushMode(mManifest)
     oOperandSetLength(two)
     oOperandSetValue(four)
     oEmitDouble(iAdd)
     oOperandPop
     oOperandPop
     ] or >
     ] or >
     >>
    ;TrapStmt
    ] or >
    }
    [ (tIfBegin)
    | tIfBegin:
    @IfStmt
     oEmitSourceCoordinate
     @OperandPushBooleanControlExpression
      @OperandPushExpression
       [ (tLiteralAddress)
       | tLiteralAddress:
       @OperandPushVariable
        oOperandPushVariable
        [ (tFetchChar)
        | *:
        [ (tFetchChar)
        | *:
        [ (tFetchChar)
        | tFetchChar:
        oOperandSetLength(regCX)
        ] or >
        >>
       ;OperandPushVariable
       ] or >
       }
       [ (tSkipString)
       | tSkipString:
       oEmitNone(iData)
       ?tStringData (tStringData)
       oEmitString
       oEmitNone(iText)
       ] or >
       }
       [ (tLiteralAddress)
       | tLiteralAddress:
       @OperandPushVariable
        oOperandPushVariable
        [ (tFetchChar)
        | *:
        [ (tFetchChar)
        | *:
        [ (tFetchChar)
        | tFetchChar:
        oOperandSetLength(regCX)
        ] or >
        >>
       ;OperandPushVariable
       ] or >
       }
       [ (tStringEQ)
       | tStringEQ:
       @OperandStringEqualPop
        @SaveTempRegsToStack
         oOperandPushMode(mTemp)
         oOperandSetLength(two)
         oOperandSetRegnum(one)
         oEmitSingle(iPush)
         oOperandSetRegnum(two)
         oEmitSingle(iPush)
         oOperandSetRegnum(regCX)
         oEmitSingle(iPush)
         oOperandSetRegnum(four)
         oEmitSingle(iPush)
         oOperandPop
         >>
        ;SaveTempRegsToStack
        @OperandForceAddressIntoTemp
         [ oOperandChooseMode (mStatic)
         | mStatic:
         @OperandPushTempWord
          oTempAllocate
          oOperandPushTemp
          oOperandSetValue(zero)
          oOperandSetLength(two)
          >>
         ;OperandPushTempWord
         oOperandSwap
         oEmitDouble(iLoada)
         oOperandPop
         ] or >
         oOperandSetLength(two)
         >>
        ;OperandForceAddressIntoTemp
        @OperandForceToStack
         [ oOperandChooseLength (two)
         | two:
         ] or >
         oEmitSingle(iPush)
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mTemp)
          | mTemp:
          oTempFree
          ] or >
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         oOperandPushMode(mStack)
         >>
        ;OperandForceToStack
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mStack)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        @OperandForceAddressIntoTemp
         [ oOperandChooseMode (mStatic)
         | mStatic:
         @OperandPushTempWord
          oTempAllocate
          oOperandPushTemp
          oOperandSetValue(zero)
          oOperandSetLength(two)
          >>
         ;OperandPushTempWord
         oOperandSwap
         oEmitDouble(iLoada)
         oOperandPop
         ] or >
         oOperandSetLength(two)
         >>
        ;OperandForceAddressIntoTemp
        @OperandForceToStack
         [ oOperandChooseLength (two)
         | two:
         ] or >
         oEmitSingle(iPush)
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mTemp)
          | mTemp:
          oTempFree
          ] or >
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         oOperandPushMode(mStack)
         >>
        ;OperandForceToStack
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mStack)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        oOperandPushMode(mTrap)
        oOperandSetValue(trStringEqual)
        oOperandSetLength(two)
        oEmitSingle(iCall)
        oOperandPop
        oOperandPushMode(mStackReg)
        oOperandSetLength(two)
        oOperandPushMode(mManifest)
        oOperandSetLength(two)
        oOperandSetValue(eight)
        oEmitDouble(iAdd)
        oOperandPop
        oOperandPop
        oOperandPushMode(mScratchReg1)
        oOperandSetLength(two)
        oOperandPushMode(mResultReg)
        oOperandSetLength(two)
        oEmitDouble(iMov)
        oOperandPop
        @RestoreTempRegsFromStack
         oOperandPushMode(mTemp)
         oOperandSetLength(two)
         oOperandSetRegnum(four)
         oEmitSingle(iPop)
         oOperandSetRegnum(regCX)
         oEmitSingle(iPop)
         oOperandSetRegnum(two)
         oEmitSingle(iPop)
         oOperandSetRegnum(one)
         oEmitSingle(iPop)
         oOperandPop
         >>
        ;RestoreTempRegsFromStack
        @OperandForceIntoTemp
         [ oOperandChooseMode (mScratchReg1)
         | *:
         [ oOperandChooseLength (two)
         | two:
         @OperandPushTempWord
          oTempAllocate
          oOperandPushTemp
          oOperandSetValue(zero)
          oOperandSetLength(two)
          >>
         ;OperandPushTempWord
         oOperandSwap
         oEmitDouble(iMov)
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mScratchReg1)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         oOperandSetMode(mTemp)
         ] or >
         >>
        ;OperandForceIntoTemp
        oOperandSetLength(one)
        >>
       ;OperandStringEqualPop
       ] or >
       }
       [ (tIfThen)
       | *:
       ] or >
       >>
      ;OperandPushExpression
      @OperandForceToJumpCondition
       [ oOperandIsJumpCondition (no)
       | *:
       [ oOperandChooseManifestValue ()
       | *:
       @EmitTst
        [ oOperandChooseLength (one)
        | one:
        oOperandPushMode(mManifest)
        oOperandSetValue(zero)
        oOperandSetLength(one)
        ] or >
        @EmitCmp
         oOperandSwap
         [ oOperandChooseMode (mTemp)
         | *:
         oOperandSwap
         @OperandLeftOrRightIsTemp
          [ oOperandChooseMode (mManifest)
          | *:
          oOperandSwap
          [ oOperandChooseMode (mTemp)
          | mTemp:
          oOperandSwap
          >>yes
         ;OperandLeftOrRightIsTemp
         [@OperandLeftOrRightIsTemp (yes)
         | yes:
         oEmitDouble(iCmp)
         ] or >
         >>
        ;EmitCmp
        oOperandPop
        >>
       ;EmitTst
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mTemp)
        | mTemp:
        oTempFree
        ] or >
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandPushJumpCondition(iJne)
       >>
      ;OperandForceToJumpCondition
      >>
     ;OperandPushBooleanControlExpression
     ?tIfThen (tIfThen)
     [ oOperandChooseJumpCondition (iJne)
     | *:
     @OperandComplementJumpCondition
      [ oOperandChooseJumpCondition (iJne)
      | *:
      oOperandComplementJumpCondition
      >>
     ;OperandComplementJumpCondition
     @OperandInfixOr
      @OperandForceToJumpCondition
       [ oOperandIsJumpCondition (yes)
       | yes:
       ] or >
       >>
      ;OperandForceToJumpCondition
      [ oOperandChooseJumpCondition (iJeq)
      | *:
      oEmitConditionalForwardBranch
      oFixAndFreeFalseBranches
      oFixPushLastAddress
      oOperandMergeShuntsWithAddress
      oFixPopAddress
      >>
     ;OperandInfixOr
     @Statements
      @Block
       [ (tAssignBegin)
       | tAssignBegin:
       @AssignStmt
        oEmitSourceCoordinate
        ?tLiteralAddress (tLiteralAddress)
        @OperandPushVariable
         oOperandPushVariable
         [ (tFetchAddress)
         | tFetchAddress:
         oOperandSetMode(mStatic)
         @OperandForceIntoTemp
          [ oOperandChooseMode (mStatic)
          | *:
          [ oOperandChooseLength (two)
          | two:
          @OperandPushTempWord
           oTempAllocate
           oOperandPushTemp
           oOperandSetValue(zero)
           oOperandSetLength(two)
           >>
          ;OperandPushTempWord
          oOperandSwap
          oEmitDouble(iMov)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandSetMode(mTemp)
          ] or >
          >>
         ;OperandForceIntoTemp
         oOperandSetMode(mTempIndirect)
         ] or >
         [ (tLiteralBoolean)
         | *:
         [ (tLiteralBoolean)
         | *:
         >>
        ;OperandPushVariable
        @OperandPushExpressionAssignPopPop
         [ (tLiteralBoolean)
         | tLiteralBoolean:
         oOperandPushBoolean
         ] or >
         }
         [ (tAssignBoolean)
         | tAssignBoolean:
         @OperandAssignBooleanPopPop
          @OperandConvertJumpConditionToData
           [ oOperandIsJumpCondition (no)
           | no:
           ] or >
           >>
          ;OperandConvertJumpConditionToData
          oOperandSetLength(one)
          @EmitMove
           @OperandLeftOrRightIsTemp
            [ oOperandChooseMode (mManifest)
            | *:
            oOperandSwap
            [ oOperandChooseMode (mTempIndirect)
            | *:
            oOperandSwap
            >>no
           ;OperandLeftOrRightIsTemp
           [@OperandLeftOrRightIsTemp (no)
           | *:
           [ oOperandChooseMode (mManifest)
           | mManifest:
           oEmitDouble(iMov)
           ] or >
           >>
          ;EmitMove
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mManifest)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mTempIndirect)
           | mTempIndirect:
           oTempFree
           ] or >
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          >>
         ;OperandAssignBooleanPopPop
         ] or >
         >>
        ;OperandPushExpressionAssignPopPop
        >>
       ;AssignStmt
       ] or >
       }
       [ (tIfMerge)
       | *:
       ] or >
       >>
      ;Block
      >>
     ;Statements
     [ (tIfMerge)
     | tIfMerge:
     oEmitUnconditionalForwardBranch
     oFixAndFreeShuntList
     oOperandPop
     oFixPushLastAddress
     oEmitMergeSourceCoordinate
     @Statements
      @Block
       [ (tIfBegin)
       | tIfBegin:
       @IfStmt
        oEmitSourceCoordinate
        @OperandPushBooleanControlExpression
         @OperandPushExpression
          [ (tLiteralAddress)
          | tLiteralAddress:
          @OperandPushVariable
           oOperandPushVariable
           [ (tFetchChar)
           | *:
           [ (tFetchChar)
           | *:
           [ (tFetchChar)
           | tFetchChar:
           oOperandSetLength(regCX)
           ] or >
           >>
          ;OperandPushVariable
          ] or >
          }
          [ (tSkipString)
          | tSkipString:
          oEmitNone(iData)
          ?tStringData (tStringData)
          oEmitString
          oEmitNone(iText)
          ] or >
          }
          [ (tLiteralAddress)
          | tLiteralAddress:
          @OperandPushVariable
           oOperandPushVariable
           [ (tFetchChar)
           | *:
           [ (tFetchChar)
           | *:
           [ (tFetchChar)
           | tFetchChar:
           oOperandSetLength(regCX)
           ] or >
           >>
          ;OperandPushVariable
          ] or >
          }
          [ (tStringEQ)
          | tStringEQ:
          @OperandStringEqualPop
           @SaveTempRegsToStack
            oOperandPushMode(mTemp)
            oOperandSetLength(two)
            oOperandSetRegnum(one)
            oEmitSingle(iPush)
            oOperandSetRegnum(two)
            oEmitSingle(iPush)
            oOperandSetRegnum(regCX)
            oEmitSingle(iPush)
            oOperandSetRegnum(four)
            oEmitSingle(iPush)
            oOperandPop
            >>
           ;SaveTempRegsToStack
           @OperandForceAddressIntoTemp
            [ oOperandChooseMode (mStatic)
            | mStatic:
            @OperandPushTempWord
             oTempAllocate
             oOperandPushTemp
             oOperandSetValue(zero)
             oOperandSetLength(two)
             >>
            ;OperandPushTempWord
            oOperandSwap
            oEmitDouble(iLoada)
            oOperandPop
            ] or >
            oOperandSetLength(two)
            >>
           ;OperandForceAddressIntoTemp
           @OperandForceToStack
            [ oOperandChooseLength (two)
            | two:
            ] or >
            oEmitSingle(iPush)
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mTemp)
             | mTemp:
             oTempFree
             ] or >
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            oOperandPushMode(mStack)
            >>
           ;OperandForceToStack
           @OperandPopAndFreeTemp
            [ oOperandChooseMode (mStack)
            | *:
            oOperandPop
            >>
           ;OperandPopAndFreeTemp
           @OperandForceAddressIntoTemp
            [ oOperandChooseMode (mStatic)
            | mStatic:
            @OperandPushTempWord
             oTempAllocate
             oOperandPushTemp
             oOperandSetValue(zero)
             oOperandSetLength(two)
             >>
            ;OperandPushTempWord
            oOperandSwap
            oEmitDouble(iLoada)
            oOperandPop
            ] or >
            oOperandSetLength(two)
            >>
           ;OperandForceAddressIntoTemp
           @OperandForceToStack
            [ oOperandChooseLength (two)
            | two:
            ] or >
            oEmitSingle(iPush)
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mTemp)
             | mTemp:
             oTempFree
             ] or >
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            oOperandPushMode(mStack)
            >>
           ;OperandForceToStack
           @OperandPopAndFreeTemp
            [ oOperandChooseMode (mStack)
            | *:
            oOperandPop
            >>
           ;OperandPopAndFreeTemp
           oOperandPushMode(mTrap)
           oOperandSetValue(trStringEqual)
           oOperandSetLength(two)
           oEmitSingle(iCall)
           oOperandPop
           oOperandPushMode(mStackReg)
           oOperandSetLength(two)
           oOperandPushMode(mManifest)
           oOperandSetLength(two)
           oOperandSetValue(eight)
           oEmitDouble(iAdd)
           oOperandPop
           oOperandPop
           oOperandPushMode(mScratchReg1)
           oOperandSetLength(two)
           oOperandPushMode(mResultReg)
           oOperandSetLength(two)
           oEmitDouble(iMov)
           oOperandPop
           @RestoreTempRegsFromStack
            oOperandPushMode(mTemp)
            oOperandSetLength(two)
            oOperandSetRegnum(four)
            oEmitSingle(iPop)
            oOperandSetRegnum(regCX)
            oEmitSingle(iPop)
            oOperandSetRegnum(two)
            oEmitSingle(iPop)
            oOperandSetRegnum(one)
            oEmitSingle(iPop)
            oOperandPop
            >>
           ;RestoreTempRegsFromStack
           @OperandForceIntoTemp
            [ oOperandChooseMode (mScratchReg1)
            | *:
            [ oOperandChooseLength (two)
            | two:
            @OperandPushTempWord
             oTempAllocate
             oOperandPushTemp
             oOperandSetValue(zero)
             oOperandSetLength(two)
             >>
            ;OperandPushTempWord
            oOperandSwap
            oEmitDouble(iMov)
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mScratchReg1)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            oOperandSetMode(mTemp)
            ] or >
            >>
           ;OperandForceIntoTemp
           oOperandSetLength(one)
           >>
          ;OperandStringEqualPop
          ] or >
          }
          [ (tNot)
          | tNot:
          @OperandNot
           @OperandForceToJumpCondition
            [ oOperandIsJumpCondition (no)
            | *:
            [ oOperandChooseManifestValue ()
            | *:
            @EmitTst
             [ oOperandChooseLength (one)
             | one:
             oOperandPushMode(mManifest)
             oOperandSetValue(zero)
             oOperandSetLength(one)
             ] or >
             @EmitCmp
              oOperandSwap
              [ oOperandChooseMode (mTemp)
              | *:
              oOperandSwap
              @OperandLeftOrRightIsTemp
               [ oOperandChooseMode (mManifest)
               | *:
               oOperandSwap
               [ oOperandChooseMode (mTemp)
               | mTemp:
               oOperandSwap
               >>yes
              ;OperandLeftOrRightIsTemp
              [@OperandLeftOrRightIsTemp (yes)
              | yes:
              oEmitDouble(iCmp)
              ] or >
              >>
             ;EmitCmp
             oOperandPop
             >>
            ;EmitTst
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mTemp)
             | mTemp:
             oTempFree
             ] or >
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            oOperandPushJumpCondition(iJne)
            >>
           ;OperandForceToJumpCondition
           @OperandComplementJumpCondition
            [ oOperandChooseJumpCondition (iJne)
            | *:
            oOperandComplementJumpCondition
            >>
           ;OperandComplementJumpCondition
           >>
          ;OperandNot
          ] or >
          }
          [ (tIfThen)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         @OperandForceToJumpCondition
          [ oOperandIsJumpCondition (yes)
          | yes:
          ] or >
          >>
         ;OperandForceToJumpCondition
         >>
        ;OperandPushBooleanControlExpression
        ?tIfThen (tIfThen)
        [ oOperandChooseJumpCondition (iJeq)
        | *:
        @OperandComplementJumpCondition
         [ oOperandChooseJumpCondition (iJeq)
         | *:
         oOperandComplementJumpCondition
         >>
        ;OperandComplementJumpCondition
        @OperandInfixOr
         @OperandForceToJumpCondition
          [ oOperandIsJumpCondition (yes)
          | yes:
          ] or >
          >>
         ;OperandForceToJumpCondition
         [ oOperandChooseJumpCondition (iJne)
         | *:
         oEmitConditionalForwardBranch
         oFixAndFreeFalseBranches
         oFixPushLastAddress
         oOperandMergeShuntsWithAddress
         oFixPopAddress
         >>
        ;OperandInfixOr
        @Statements
         @Block
          [ (tWriteBegin)
          | tWriteBegin:
          @WriteProc
           oEmitSourceCoordinate
           [ (tTrapBegin)
           | *:
           @WriteParameter
            ?tTrapBegin (tTrapBegin)
            ?tLiteralAddress (tLiteralAddress)
            @OperandPushVariable
             oOperandPushVariable
             [ (tVarParm)
             | *:
             [ (tVarParm)
             | *:
             [ (tVarParm)
             | *:
             >>
            ;OperandPushVariable
            @OperandForceToStack
             [ oOperandChooseLength (two)
             | two:
             ] or >
             oEmitSingle(iPush)
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mStatic)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandPushMode(mStack)
             >>
            ;OperandForceToStack
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStack)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            ?tVarParm (tVarParm)
            ?tParmEnd (tParmEnd)
            @OperandPushExpression
             [ (tSkipString)
             | tSkipString:
             oEmitNone(iData)
             ?tStringData (tStringData)
             oEmitString
             oEmitNone(iText)
             ] or >
             }
             [ (tLiteralAddress)
             | tLiteralAddress:
             @OperandPushVariable
              oOperandPushVariable
              [ (tFetchChar)
              | *:
              [ (tFetchChar)
              | *:
              [ (tFetchChar)
              | tFetchChar:
              oOperandSetLength(regCX)
              ] or >
              >>
             ;OperandPushVariable
             ] or >
             }
             [ (tParmEnd)
             | *:
             ] or >
             >>
            ;OperandPushExpression
            [ (tParmEnd)
            | *:
            @OperandForceToStack
             [ oOperandChooseLength (regCX)
             | regCX:
             @OperandForceAddressIntoTemp
              [ oOperandChooseMode (mStatic)
              | mStatic:
              @OperandPushTempWord
               oTempAllocate
               oOperandPushTemp
               oOperandSetValue(zero)
               oOperandSetLength(two)
               >>
              ;OperandPushTempWord
              oOperandSwap
              oEmitDouble(iLoada)
              oOperandPop
              ] or >
              oOperandSetLength(two)
              >>
             ;OperandForceAddressIntoTemp
             ] or >
             oEmitSingle(iPush)
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mTemp)
              | mTemp:
              oTempFree
              ] or >
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandPushMode(mStack)
             >>
            ;OperandForceToStack
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStack)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            ?tParmEnd (tParmEnd)
            @OperandPushExpression
             [ (tLiteralInteger)
             | tLiteralInteger:
             oOperandPushInteger
             ] or >
             }
             [ (tParmEnd)
             | *:
             ] or >
             >>
            ;OperandPushExpression
            @OperandForceToStack
             [ oOperandChooseLength (two)
             | two:
             ] or >
             oEmitSingle(iPush)
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mManifest)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandPushMode(mStack)
             >>
            ;OperandForceToStack
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStack)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            ?tParmEnd (tParmEnd)
            ?tTrap (tTrap)
            oOperandPushTrap
            oEmitSingle(iCall)
            oOperandPop
            oOperandPushMode(mStackReg)
            oOperandSetLength(two)
            oOperandPushMode(mManifest)
            oOperandSetLength(two)
            oOperandSetValue(twelve)
            oEmitDouble(iAdd)
            oOperandPop
            oOperandPop
            >>
           ;WriteParameter
           }
           [ (tWriteEnd)
           | tWriteEnd:
           ] or >
           >>
          ;WriteProc
          ] or >
          }
          [ (tReadBegin)
          | tReadBegin:
          @ReadProc
           oEmitSourceCoordinate
           [ (tTrapBegin)
           | *:
           @ReadParameter
            ?tTrapBegin (tTrapBegin)
            ?tLiteralAddress (tLiteralAddress)
            @OperandPushVariable
             oOperandPushVariable
             [ (tVarParm)
             | *:
             [ (tVarParm)
             | *:
             [ (tVarParm)
             | *:
             >>
            ;OperandPushVariable
            @OperandForceToStack
             [ oOperandChooseLength (two)
             | two:
             ] or >
             oEmitSingle(iPush)
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mStatic)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandPushMode(mStack)
             >>
            ;OperandForceToStack
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStack)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            ?tVarParm (tVarParm)
            ?tParmEnd (tParmEnd)
            ?tLiteralAddress (tLiteralAddress)
            @OperandPushVariable
             oOperandPushVariable
             [ (tVarParm)
             | *:
             [ (tVarParm)
             | *:
             [ (tVarParm)
             | *:
             >>
            ;OperandPushVariable
            @OperandForceAddressIntoTemp
             [ oOperandChooseMode (mStatic)
             | mStatic:
             @OperandPushTempWord
              oTempAllocate
              oOperandPushTemp
              oOperandSetValue(zero)
              oOperandSetLength(two)
              >>
             ;OperandPushTempWord
             oOperandSwap
             oEmitDouble(iLoada)
             oOperandPop
             ] or >
             oOperandSetLength(two)
             >>
            ;OperandForceAddressIntoTemp
            @OperandForceToStack
             [ oOperandChooseLength (two)
             | two:
             ] or >
             oEmitSingle(iPush)
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mTemp)
              | mTemp:
              oTempFree
              ] or >
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandPushMode(mStack)
             >>
            ;OperandForceToStack
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStack)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            ?tVarParm (tVarParm)
            ?tParmEnd (tParmEnd)
            oOperandPushMode(mManifest)
            oOperandSetLength(two)
            oOperandSetValue(eight)
            [ (tTrap)
            | tTrap:
            ] or >
            oOperandPushTrap
            oEmitSingle(iCall)
            oOperandPop
            oOperandPushMode(mStackReg)
            oOperandSetLength(two)
            oOperandSwap
            oEmitDouble(iAdd)
            oOperandPop
            oOperandPop
            >>
           ;ReadParameter
           }
           [ (tReadEnd)
           | tReadEnd:
           ] or >
           >>
          ;ReadProc
          ] or >
          }
          [ (tTrapBegin)
          | tTrapBegin:
          @TrapStmt
           oEmitSourceCoordinate
           [ (tLiteralAddress)
           | tLiteralAddress:
           @OperandPushVariable
            oOperandPushVariable
            [ (tVarParm)
            | *:
            [ (tVarParm)
            | *:
            [ (tVarParm)
            | *:
            >>
           ;OperandPushVariable
           oOperandPushCopy
           @OperandForceToStack
            [ oOperandChooseLength (two)
            | two:
            ] or >
            oEmitSingle(iPush)
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStatic)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            oOperandPushMode(mStack)
            >>
           ;OperandForceToStack
           oOperandPop
           ?tVarParm (tVarParm)
           ?tParmEnd (tParmEnd)
           [ (tTrap)
           | tTrap:
           @OperandPopAndFreeTemp
            [ oOperandChooseMode (mStatic)
            | *:
            oOperandPop
            >>
           ;OperandPopAndFreeTemp
           oOperandPushTrap
           oEmitSingle(iCall)
           oOperandPop
           oOperandPushMode(mStackReg)
           oOperandSetLength(two)
           oOperandPushMode(mManifest)
           oOperandSetLength(two)
           oOperandSetValue(four)
           oEmitDouble(iAdd)
           oOperandPop
           oOperandPop
           ] or >
           ] or >
           >>
          ;TrapStmt
          ] or >
          }
          [ (tWhileBegin)
          | tWhileBegin:
          @WhileStmt
           oFixPushAddress
           oEmitMergeSourceCoordinate
           @OperandPushBooleanControlExpression
            @OperandPushExpression
             [ (tLiteralAddress)
             | tLiteralAddress:
             @OperandPushVariable
              oOperandPushVariable
              [ (tFetchInteger)
              | *:
              [ (tFetchInteger)
              | *:
              [ (tFetchInteger)
              | tFetchInteger:
              ] or >
              >>
             ;OperandPushVariable
             ] or >
             }
             [ (tLiteralInteger)
             | tLiteralInteger:
             oOperandPushInteger
             ] or >
             }
             [ (tLT)
             | tLT:
             @OperandLessPop
              oOperandSwap
              @OperandGreaterPop
               [ oOperandCompareLeftAndRight (no)
               | no:
               [ oOperandChooseManifestValue ()
               | *:
               oOperandSwap
               [ oOperandChooseManifestValue (one)
               | one:
               oOperandPop
               @EmitTst
                [ oOperandChooseLength (two)
                | two:
                oOperandPushMode(mManifest)
                oOperandSetValue(zero)
                oOperandSetLength(two)
                ] or >
                @EmitCmp
                 oOperandSwap
                 [ oOperandChooseMode (mStatic)
                 | *:
                 oOperandSwap
                 @OperandLeftOrRightIsTemp
                  [ oOperandChooseMode (mManifest)
                  | *:
                  oOperandSwap
                  [ oOperandChooseMode (mStatic)
                  | *:
                  oOperandSwap
                  >>no
                 ;OperandLeftOrRightIsTemp
                 [@OperandLeftOrRightIsTemp (no)
                 | *:
                 [ oOperandChooseMode (mManifest)
                 | mManifest:
                 oEmitDouble(iCmp)
                 ] or >
                 >>
                ;EmitCmp
                oOperandPop
                >>
               ;EmitTst
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mStatic)
                | *:
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               oOperandPushJumpCondition(iJle)
               ] or >
               ] or >
               >>
              ;OperandGreaterPop
              >>
             ;OperandLessPop
             ] or >
             }
             [ (tInfixOr)
             | tInfixOr:
             @OperandInfixOr
              @OperandForceToJumpCondition
               [ oOperandIsJumpCondition (yes)
               | yes:
               ] or >
               >>
              ;OperandForceToJumpCondition
              [ oOperandChooseJumpCondition (iJle)
              | *:
              oEmitConditionalForwardBranch
              oFixAndFreeFalseBranches
              oFixPushLastAddress
              oOperandMergeShuntsWithAddress
              oFixPopAddress
              >>
             ;OperandInfixOr
             ] or >
             }
             [ (tLiteralAddress)
             | tLiteralAddress:
             @OperandPushVariable
              oOperandPushVariable
              [ (tFetchInteger)
              | *:
              [ (tFetchInteger)
              | *:
              [ (tFetchInteger)
              | tFetchInteger:
              ] or >
              >>
             ;OperandPushVariable
             ] or >
             }
             [ (tLiteralInteger)
             | tLiteralInteger:
             oOperandPushInteger
             ] or >
             }
             [ (tGT)
             | tGT:
             @OperandGreaterPop
              [ oOperandCompareLeftAndRight (no)
              | no:
              [ oOperandChooseManifestValue ()
              | *:
              oOperandSwap
              [ oOperandChooseManifestValue ()
              | *:
              oOperandSwap
              @EmitCmp
               oOperandSwap
               [ oOperandChooseMode (mStatic)
               | *:
               oOperandSwap
               @OperandLeftOrRightIsTemp
                [ oOperandChooseMode (mManifest)
                | *:
                oOperandSwap
                [ oOperandChooseMode (mStatic)
                | *:
                oOperandSwap
                >>no
               ;OperandLeftOrRightIsTemp
               [@OperandLeftOrRightIsTemp (no)
               | *:
               [ oOperandChooseMode (mManifest)
               | mManifest:
               oEmitDouble(iCmp)
               ] or >
               >>
              ;EmitCmp
              @OperandPopAndFreeTemp
               [ oOperandChooseMode (mManifest)
               | *:
               oOperandPop
               >>
              ;OperandPopAndFreeTemp
              @OperandPopAndFreeTemp
               [ oOperandChooseMode (mStatic)
               | *:
               oOperandPop
               >>
              ;OperandPopAndFreeTemp
              oOperandPushJumpCondition(iJgt)
              ] or >
              >>
             ;OperandGreaterPop
             ] or >
             }
             [ (tOr)
             | tOr:
             @OperandOrPop
              @OperandForceToJumpCondition
               [ oOperandIsJumpCondition (yes)
               | yes:
               ] or >
               >>
              ;OperandForceToJumpCondition
              oOperandSwap
              [ oOperandChooseJumpCondition ()
              | *:
              oOperandSwap
              oOperandMergeShunts
              oOperandSwap
              oOperandPop
              >>
             ;OperandOrPop
             ] or >
             }
             [ (tWhileTest)
             | *:
             ] or >
             >>
            ;OperandPushExpression
            @OperandForceToJumpCondition
             [ oOperandIsJumpCondition (yes)
             | yes:
             ] or >
             >>
            ;OperandForceToJumpCondition
            >>
           ;OperandPushBooleanControlExpression
           ?tWhileTest (tWhileTest)
           @OperandComplementJumpCondition
            [ oOperandChooseJumpCondition (iJgt)
            | *:
            oOperandComplementJumpCondition
            >>
           ;OperandComplementJumpCondition
           [ oOperandChooseJumpCondition (iJle)
           | *:
           @OperandInfixOr
            @OperandForceToJumpCondition
             [ oOperandIsJumpCondition (yes)
             | yes:
             ] or >
             >>
            ;OperandForceToJumpCondition
            [ oOperandChooseJumpCondition (iJle)
            | *:
            oEmitConditionalForwardBranch
            oFixAndFreeFalseBranches
            oFixPushLastAddress
            oOperandMergeShuntsWithAddress
            oFixPopAddress
            >>
           ;OperandInfixOr
           @Statements
            @Block
             [ (tWriteBegin)
             | tWriteBegin:
             @WriteProc
              oEmitSourceCoordinate
              [ (tTrapBegin)
              | *:
              @WriteParameter
               ?tTrapBegin (tTrapBegin)
               ?tLiteralAddress (tLiteralAddress)
               @OperandPushVariable
                oOperandPushVariable
                [ (tVarParm)
                | *:
                [ (tVarParm)
                | *:
                [ (tVarParm)
                | *:
                >>
               ;OperandPushVariable
               @OperandForceToStack
                [ oOperandChooseLength (two)
                | two:
                ] or >
                oEmitSingle(iPush)
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mStatic)
                 | *:
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                oOperandPushMode(mStack)
                >>
               ;OperandForceToStack
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mStack)
                | *:
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               ?tVarParm (tVarParm)
               ?tParmEnd (tParmEnd)
               @OperandPushExpression
                [ (tSkipString)
                | tSkipString:
                oEmitNone(iData)
                ?tStringData (tStringData)
                oEmitString
                oEmitNone(iText)
                ] or >
                }
                [ (tLiteralAddress)
                | tLiteralAddress:
                @OperandPushVariable
                 oOperandPushVariable
                 [ (tFetchChar)
                 | *:
                 [ (tFetchChar)
                 | *:
                 [ (tFetchChar)
                 | tFetchChar:
                 oOperandSetLength(regCX)
                 ] or >
                 >>
                ;OperandPushVariable
                ] or >
                }
                [ (tParmEnd)
                | *:
                ] or >
                >>
               ;OperandPushExpression
               [ (tParmEnd)
               | *:
               @OperandForceToStack
                [ oOperandChooseLength (regCX)
                | regCX:
                @OperandForceAddressIntoTemp
                 [ oOperandChooseMode (mStatic)
                 | mStatic:
                 @OperandPushTempWord
                  oTempAllocate
                  oOperandPushTemp
                  oOperandSetValue(zero)
                  oOperandSetLength(two)
                  >>
                 ;OperandPushTempWord
                 oOperandSwap
                 oEmitDouble(iLoada)
                 oOperandPop
                 ] or >
                 oOperandSetLength(two)
                 >>
                ;OperandForceAddressIntoTemp
                ] or >
                oEmitSingle(iPush)
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mTemp)
                 | mTemp:
                 oTempFree
                 ] or >
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                oOperandPushMode(mStack)
                >>
               ;OperandForceToStack
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mStack)
                | *:
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               ?tParmEnd (tParmEnd)
               @OperandPushExpression
                [ (tLiteralInteger)
                | tLiteralInteger:
                oOperandPushInteger
                ] or >
                }
                [ (tParmEnd)
                | *:
                ] or >
                >>
               ;OperandPushExpression
               @OperandForceToStack
                [ oOperandChooseLength (two)
                | two:
                ] or >
                oEmitSingle(iPush)
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mManifest)
                 | *:
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                oOperandPushMode(mStack)
                >>
               ;OperandForceToStack
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mStack)
                | *:
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               ?tParmEnd (tParmEnd)
               ?tTrap (tTrap)
               oOperandPushTrap
               oEmitSingle(iCall)
               oOperandPop
               oOperandPushMode(mStackReg)
               oOperandSetLength(two)
               oOperandPushMode(mManifest)
               oOperandSetLength(two)
               oOperandSetValue(twelve)
               oEmitDouble(iAdd)
               oOperandPop
               oOperandPop
               >>
              ;WriteParameter
              }
              [ (tWriteEnd)
              | tWriteEnd:
              ] or >
              >>
             ;WriteProc
             ] or >
             }
             [ (tReadBegin)
             | tReadBegin:
             @ReadProc
              oEmitSourceCoordinate
              [ (tTrapBegin)
              | *:
              @ReadParameter
               ?tTrapBegin (tTrapBegin)
               ?tLiteralAddress (tLiteralAddress)
               @OperandPushVariable
                oOperandPushVariable
                [ (tVarParm)
                | *:
                [ (tVarParm)
                | *:
                [ (tVarParm)
                | *:
                >>
               ;OperandPushVariable
               @OperandForceToStack
                [ oOperandChooseLength (two)
                | two:
                ] or >
                oEmitSingle(iPush)
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mStatic)
                 | *:
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                oOperandPushMode(mStack)
                >>
               ;OperandForceToStack
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mStack)
                | *:
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               ?tVarParm (tVarParm)
               ?tParmEnd (tParmEnd)
               ?tLiteralAddress (tLiteralAddress)
               @OperandPushVariable
                oOperandPushVariable
                [ (tVarParm)
                | *:
                [ (tVarParm)
                | *:
                [ (tVarParm)
                | *:
                >>
               ;OperandPushVariable
               @OperandForceAddressIntoTemp
                [ oOperandChooseMode (mStatic)
                | mStatic:
                @OperandPushTempWord
                 oTempAllocate
                 oOperandPushTemp
                 oOperandSetValue(zero)
                 oOperandSetLength(two)
                 >>
                ;OperandPushTempWord
                oOperandSwap
                oEmitDouble(iLoada)
                oOperandPop
                ] or >
                oOperandSetLength(two)
                >>
               ;OperandForceAddressIntoTemp
               @OperandForceToStack
                [ oOperandChooseLength (two)
                | two:
                ] or >
                oEmitSingle(iPush)
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mTemp)
                 | mTemp:
                 oTempFree
                 ] or >
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                oOperandPushMode(mStack)
                >>
               ;OperandForceToStack
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mStack)
                | *:
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               ?tVarParm (tVarParm)
               ?tParmEnd (tParmEnd)
               oOperandPushMode(mManifest)
               oOperandSetLength(two)
               oOperandSetValue(eight)
               [ (tTrap)
               | tTrap:
               ] or >
               oOperandPushTrap
               oEmitSingle(iCall)
               oOperandPop
               oOperandPushMode(mStackReg)
               oOperandSetLength(two)
               oOperandSwap
               oEmitDouble(iAdd)
               oOperandPop
               oOperandPop
               >>
              ;ReadParameter
              }
              [ (tReadEnd)
              | tReadEnd:
              ] or >
              >>
             ;ReadProc
             ] or >
             }
             [ (tTrapBegin)
             | tTrapBegin:
             @TrapStmt
              oEmitSourceCoordinate
              [ (tLiteralAddress)
              | tLiteralAddress:
              @OperandPushVariable
               oOperandPushVariable
               [ (tVarParm)
               | *:
               [ (tVarParm)
               | *:
               [ (tVarParm)
               | *:
               >>
              ;OperandPushVariable
              oOperandPushCopy
              @OperandForceToStack
               [ oOperandChooseLength (two)
               | two:
               ] or >
               oEmitSingle(iPush)
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mStatic)
                | *:
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               oOperandPushMode(mStack)
               >>
              ;OperandForceToStack
              oOperandPop
              ?tVarParm (tVarParm)
              ?tParmEnd (tParmEnd)
              [ (tTrap)
              | tTrap:
              @OperandPopAndFreeTemp
               [ oOperandChooseMode (mStatic)
               | *:
               oOperandPop
               >>
              ;OperandPopAndFreeTemp
              oOperandPushTrap
              oEmitSingle(iCall)
              oOperandPop
              oOperandPushMode(mStackReg)
              oOperandSetLength(two)
              oOperandPushMode(mManifest)
              oOperandSetLength(two)
              oOperandSetValue(four)
              oEmitDouble(iAdd)
              oOperandPop
              oOperandPop
              ] or >
              ] or >
              >>
             ;TrapStmt
             ] or >
             }
             [ (tWhileEnd)
             | *:
             ] or >
             >>
            ;Block
            >>
           ;Statements
           ?tWhileEnd (tWhileEnd)
           oEmitUnconditionalBackwardBranch
           oFixPopAddress
           oFixAndFreeShuntList
           oOperandPop
           >>
          ;WhileStmt
          ] or >
          }
          [ (tIfEnd)
          | *:
          ] or >
          >>
         ;Block
         >>
        ;Statements
        [ (tIfEnd)
        | tIfEnd:
        oFixAndFreeShuntList
        oOperandPop
        oEmitMergeSourceCoordinate
        ] or >
        >>
       ;IfStmt
       ] or >
       }
       [ (tIfBegin)
       | tIfBegin:
       @IfStmt
        oEmitSourceCoordinate
        @OperandPushBooleanControlExpression
         @OperandPushExpression
          [ (tLiteralAddress)
          | tLiteralAddress:
          @OperandPushVariable
           oOperandPushVariable
           [ (tFetchChar)
           | *:
           [ (tFetchChar)
           | *:
           [ (tFetchChar)
           | tFetchChar:
           oOperandSetLength(regCX)
           ] or >
           >>
          ;OperandPushVariable
          ] or >
          }
          [ (tSkipString)
          | tSkipString:
          oEmitNone(iData)
          ?tStringData (tStringData)
          oEmitString
          oEmitNone(iText)
          ] or >
          }
          [ (tLiteralAddress)
          | tLiteralAddress:
          @OperandPushVariable
           oOperandPushVariable
           [ (tFetchChar)
           | *:
           [ (tFetchChar)
           | *:
           [ (tFetchChar)
           | tFetchChar:
           oOperandSetLength(regCX)
           ] or >
           >>
          ;OperandPushVariable
          ] or >
          }
          [ (tStringEQ)
          | tStringEQ:
          @OperandStringEqualPop
           @SaveTempRegsToStack
            oOperandPushMode(mTemp)
            oOperandSetLength(two)
            oOperandSetRegnum(one)
            oEmitSingle(iPush)
            oOperandSetRegnum(two)
            oEmitSingle(iPush)
            oOperandSetRegnum(regCX)
            oEmitSingle(iPush)
            oOperandSetRegnum(four)
            oEmitSingle(iPush)
            oOperandPop
            >>
           ;SaveTempRegsToStack
           @OperandForceAddressIntoTemp
            [ oOperandChooseMode (mStatic)
            | mStatic:
            @OperandPushTempWord
             oTempAllocate
             oOperandPushTemp
             oOperandSetValue(zero)
             oOperandSetLength(two)
             >>
            ;OperandPushTempWord
            oOperandSwap
            oEmitDouble(iLoada)
            oOperandPop
            ] or >
            oOperandSetLength(two)
            >>
           ;OperandForceAddressIntoTemp
           @OperandForceToStack
            [ oOperandChooseLength (two)
            | two:
            ] or >
            oEmitSingle(iPush)
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mTemp)
             | mTemp:
             oTempFree
             ] or >
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            oOperandPushMode(mStack)
            >>
           ;OperandForceToStack
           @OperandPopAndFreeTemp
            [ oOperandChooseMode (mStack)
            | *:
            oOperandPop
            >>
           ;OperandPopAndFreeTemp
           @OperandForceAddressIntoTemp
            [ oOperandChooseMode (mStatic)
            | mStatic:
            @OperandPushTempWord
             oTempAllocate
             oOperandPushTemp
             oOperandSetValue(zero)
             oOperandSetLength(two)
             >>
            ;OperandPushTempWord
            oOperandSwap
            oEmitDouble(iLoada)
            oOperandPop
            ] or >
            oOperandSetLength(two)
            >>
           ;OperandForceAddressIntoTemp
           @OperandForceToStack
            [ oOperandChooseLength (two)
            | two:
            ] or >
            oEmitSingle(iPush)
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mTemp)
             | mTemp:
             oTempFree
             ] or >
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            oOperandPushMode(mStack)
            >>
           ;OperandForceToStack
           @OperandPopAndFreeTemp
            [ oOperandChooseMode (mStack)
            | *:
            oOperandPop
            >>
           ;OperandPopAndFreeTemp
           oOperandPushMode(mTrap)
           oOperandSetValue(trStringEqual)
           oOperandSetLength(two)
           oEmitSingle(iCall)
           oOperandPop
           oOperandPushMode(mStackReg)
           oOperandSetLength(two)
           oOperandPushMode(mManifest)
           oOperandSetLength(two)
           oOperandSetValue(eight)
           oEmitDouble(iAdd)
           oOperandPop
           oOperandPop
           oOperandPushMode(mScratchReg1)
           oOperandSetLength(two)
           oOperandPushMode(mResultReg)
           oOperandSetLength(two)
           oEmitDouble(iMov)
           oOperandPop
           @RestoreTempRegsFromStack
            oOperandPushMode(mTemp)
            oOperandSetLength(two)
            oOperandSetRegnum(four)
            oEmitSingle(iPop)
            oOperandSetRegnum(regCX)
            oEmitSingle(iPop)
            oOperandSetRegnum(two)
            oEmitSingle(iPop)
            oOperandSetRegnum(one)
            oEmitSingle(iPop)
            oOperandPop
            >>
           ;RestoreTempRegsFromStack
           @OperandForceIntoTemp
            [ oOperandChooseMode (mScratchReg1)
            | *:
            [ oOperandChooseLength (two)
            | two:
            @OperandPushTempWord
             oTempAllocate
             oOperandPushTemp
             oOperandSetValue(zero)
             oOperandSetLength(two)
             >>
            ;OperandPushTempWord
            oOperandSwap
            oEmitDouble(iMov)
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mScratchReg1)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            oOperandSetMode(mTemp)
            ] or >
            >>
           ;OperandForceIntoTemp
           oOperandSetLength(one)
           >>
          ;OperandStringEqualPop
          ] or >
          }
          [ (tIfThen)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         @OperandForceToJumpCondition
          [ oOperandIsJumpCondition (no)
          | *:
          [ oOperandChooseManifestValue ()
          | *:
          @EmitTst
           [ oOperandChooseLength (one)
           | one:
           oOperandPushMode(mManifest)
           oOperandSetValue(zero)
           oOperandSetLength(one)
           ] or >
           @EmitCmp
            oOperandSwap
            [ oOperandChooseMode (mTemp)
            | *:
            oOperandSwap
            @OperandLeftOrRightIsTemp
             [ oOperandChooseMode (mManifest)
             | *:
             oOperandSwap
             [ oOperandChooseMode (mTemp)
             | mTemp:
             oOperandSwap
             >>yes
            ;OperandLeftOrRightIsTemp
            [@OperandLeftOrRightIsTemp (yes)
            | yes:
            oEmitDouble(iCmp)
            ] or >
            >>
           ;EmitCmp
           oOperandPop
           >>
          ;EmitTst
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mTemp)
           | mTemp:
           oTempFree
           ] or >
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushJumpCondition(iJne)
          >>
         ;OperandForceToJumpCondition
         >>
        ;OperandPushBooleanControlExpression
        ?tIfThen (tIfThen)
        [ oOperandChooseJumpCondition (iJne)
        | *:
        @OperandComplementJumpCondition
         [ oOperandChooseJumpCondition (iJne)
         | *:
         oOperandComplementJumpCondition
         >>
        ;OperandComplementJumpCondition
        @OperandInfixOr
         @OperandForceToJumpCondition
          [ oOperandIsJumpCondition (yes)
          | yes:
          ] or >
          >>
         ;OperandForceToJumpCondition
         [ oOperandChooseJumpCondition (iJeq)
         | *:
         oEmitConditionalForwardBranch
         oFixAndFreeFalseBranches
         oFixPushLastAddress
         oOperandMergeShuntsWithAddress
         oFixPopAddress
         >>
        ;OperandInfixOr
        @Statements
         @Block
          [ (tTrapBegin)
          | tTrapBegin:
          @TrapStmt
           oEmitSourceCoordinate
           [ (tLiteralAddress)
           | tLiteralAddress:
           @OperandPushVariable
            oOperandPushVariable
            [ (tVarParm)
            | *:
            [ (tVarParm)
            | *:
            [ (tVarParm)
            | *:
            >>
           ;OperandPushVariable
           oOperandPushCopy
           @OperandForceToStack
            [ oOperandChooseLength (two)
            | two:
            ] or >
            oEmitSingle(iPush)
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStatic)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            oOperandPushMode(mStack)
            >>
           ;OperandForceToStack
           oOperandPop
           ?tVarParm (tVarParm)
           ?tParmEnd (tParmEnd)
           [ (tTrap)
           | tTrap:
           @OperandPopAndFreeTemp
            [ oOperandChooseMode (mStatic)
            | *:
            oOperandPop
            >>
           ;OperandPopAndFreeTemp
           oOperandPushTrap
           oEmitSingle(iCall)
           oOperandPop
           oOperandPushMode(mStackReg)
           oOperandSetLength(two)
           oOperandPushMode(mManifest)
           oOperandSetLength(two)
           oOperandSetValue(four)
           oEmitDouble(iAdd)
           oOperandPop
           oOperandPop
           ] or >
           ] or >
           >>
          ;TrapStmt
          ] or >
          }
          [ (tWriteBegin)
          | tWriteBegin:
          @WriteProc
           oEmitSourceCoordinate
           [ (tTrapBegin)
           | *:
           @WriteParameter
            ?tTrapBegin (tTrapBegin)
            ?tLiteralAddress (tLiteralAddress)
            @OperandPushVariable
             oOperandPushVariable
             [ (tVarParm)
             | *:
             [ (tVarParm)
             | *:
             [ (tVarParm)
             | *:
             >>
            ;OperandPushVariable
            @OperandForceToStack
             [ oOperandChooseLength (two)
             | two:
             ] or >
             oEmitSingle(iPush)
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mStatic)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandPushMode(mStack)
             >>
            ;OperandForceToStack
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStack)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            ?tVarParm (tVarParm)
            ?tParmEnd (tParmEnd)
            @OperandPushExpression
             [ (tSkipString)
             | tSkipString:
             oEmitNone(iData)
             ?tStringData (tStringData)
             oEmitString
             oEmitNone(iText)
             ] or >
             }
             [ (tLiteralAddress)
             | tLiteralAddress:
             @OperandPushVariable
              oOperandPushVariable
              [ (tFetchChar)
              | *:
              [ (tFetchChar)
              | *:
              [ (tFetchChar)
              | tFetchChar:
              oOperandSetLength(regCX)
              ] or >
              >>
             ;OperandPushVariable
             ] or >
             }
             [ (tParmEnd)
             | *:
             ] or >
             >>
            ;OperandPushExpression
            [ (tParmEnd)
            | *:
            @OperandForceToStack
             [ oOperandChooseLength (regCX)
             | regCX:
             @OperandForceAddressIntoTemp
              [ oOperandChooseMode (mStatic)
              | mStatic:
              @OperandPushTempWord
               oTempAllocate
               oOperandPushTemp
               oOperandSetValue(zero)
               oOperandSetLength(two)
               >>
              ;OperandPushTempWord
              oOperandSwap
              oEmitDouble(iLoada)
              oOperandPop
              ] or >
              oOperandSetLength(two)
              >>
             ;OperandForceAddressIntoTemp
             ] or >
             oEmitSingle(iPush)
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mTemp)
              | mTemp:
              oTempFree
              ] or >
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandPushMode(mStack)
             >>
            ;OperandForceToStack
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStack)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            ?tParmEnd (tParmEnd)
            @OperandPushExpression
             [ (tLiteralInteger)
             | tLiteralInteger:
             oOperandPushInteger
             ] or >
             }
             [ (tParmEnd)
             | *:
             ] or >
             >>
            ;OperandPushExpression
            @OperandForceToStack
             [ oOperandChooseLength (two)
             | two:
             ] or >
             oEmitSingle(iPush)
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mManifest)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandPushMode(mStack)
             >>
            ;OperandForceToStack
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStack)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            ?tParmEnd (tParmEnd)
            ?tTrap (tTrap)
            oOperandPushTrap
            oEmitSingle(iCall)
            oOperandPop
            oOperandPushMode(mStackReg)
            oOperandSetLength(two)
            oOperandPushMode(mManifest)
            oOperandSetLength(two)
            oOperandSetValue(twelve)
            oEmitDouble(iAdd)
            oOperandPop
            oOperandPop
            >>
           ;WriteParameter
           }
           [ (tWriteEnd)
           | tWriteEnd:
           ] or >
           >>
          ;WriteProc
          ] or >
          }
          [ (tTrapBegin)
          | tTrapBegin:
          @TrapStmt
           oEmitSourceCoordinate
           [ (tLiteralAddress)
           | tLiteralAddress:
           @OperandPushVariable
            oOperandPushVariable
            [ (tVarParm)
            | *:
            [ (tVarParm)
            | *:
            [ (tVarParm)
            | *:
            >>
           ;OperandPushVariable
           oOperandPushCopy
           @OperandForceToStack
            [ oOperandChooseLength (two)
            | two:
            ] or >
            oEmitSingle(iPush)
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStatic)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            oOperandPushMode(mStack)
            >>
           ;OperandForceToStack
           oOperandPop
           ?tVarParm (tVarParm)
           ?tParmEnd (tParmEnd)
           [ (tTrap)
           | tTrap:
           @OperandPopAndFreeTemp
            [ oOperandChooseMode (mStatic)
            | *:
            oOperandPop
            >>
           ;OperandPopAndFreeTemp
           oOperandPushTrap
           oEmitSingle(iCall)
           oOperandPop
           oOperandPushMode(mStackReg)
           oOperandSetLength(two)
           oOperandPushMode(mManifest)
           oOperandSetLength(two)
           oOperandSetValue(four)
           oEmitDouble(iAdd)
           oOperandPop
           oOperandPop
           ] or >
           ] or >
           >>
          ;TrapStmt
          ] or >
          }
          [ (tIfMerge)
          | *:
          ] or >
          >>
         ;Block
         >>
        ;Statements
        [ (tIfMerge)
        | tIfMerge:
        oEmitUnconditionalForwardBranch
        oFixAndFreeShuntList
        oOperandPop
        oFixPushLastAddress
        oEmitMergeSourceCoordinate
        @Statements
         @Block
          [ (tTrapBegin)
          | tTrapBegin:
          @TrapStmt
           oEmitSourceCoordinate
           [ (tLiteralAddress)
           | tLiteralAddress:
           @OperandPushVariable
            oOperandPushVariable
            [ (tVarParm)
            | *:
            [ (tVarParm)
            | *:
            [ (tVarParm)
            | *:
            >>
           ;OperandPushVariable
           oOperandPushCopy
           @OperandForceToStack
            [ oOperandChooseLength (two)
            | two:
            ] or >
            oEmitSingle(iPush)
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStatic)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            oOperandPushMode(mStack)
            >>
           ;OperandForceToStack
           oOperandPop
           ?tVarParm (tVarParm)
           ?tParmEnd (tParmEnd)
           [ (tTrap)
           | tTrap:
           @OperandPopAndFreeTemp
            [ oOperandChooseMode (mStatic)
            | *:
            oOperandPop
            >>
           ;OperandPopAndFreeTemp
           oOperandPushTrap
           oEmitSingle(iCall)
           oOperandPop
           oOperandPushMode(mStackReg)
           oOperandSetLength(two)
           oOperandPushMode(mManifest)
           oOperandSetLength(two)
           oOperandSetValue(four)
           oEmitDouble(iAdd)
           oOperandPop
           oOperandPop
           ] or >
           ] or >
           >>
          ;TrapStmt
          ] or >
          }
          [ (tWriteBegin)
          | tWriteBegin:
          @WriteProc
           oEmitSourceCoordinate
           [ (tTrapBegin)
           | *:
           @WriteParameter
            ?tTrapBegin (tTrapBegin)
            ?tLiteralAddress (tLiteralAddress)
            @OperandPushVariable
             oOperandPushVariable
             [ (tVarParm)
             | *:
             [ (tVarParm)
             | *:
             [ (tVarParm)
             | *:
             >>
            ;OperandPushVariable
            @OperandForceToStack
             [ oOperandChooseLength (two)
             | two:
             ] or >
             oEmitSingle(iPush)
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mStatic)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandPushMode(mStack)
             >>
            ;OperandForceToStack
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStack)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            ?tVarParm (tVarParm)
            ?tParmEnd (tParmEnd)
            @OperandPushExpression
             [ (tSkipString)
             | tSkipString:
             oEmitNone(iData)
             ?tStringData (tStringData)
             oEmitString
             oEmitNone(iText)
             ] or >
             }
             [ (tLiteralAddress)
             | tLiteralAddress:
             @OperandPushVariable
              oOperandPushVariable
              [ (tFetchChar)
              | *:
              [ (tFetchChar)
              | *:
              [ (tFetchChar)
              | tFetchChar:
              oOperandSetLength(regCX)
              ] or >
              >>
             ;OperandPushVariable
             ] or >
             }
             [ (tParmEnd)
             | *:
             ] or >
             >>
            ;OperandPushExpression
            [ (tParmEnd)
            | *:
            @OperandForceToStack
             [ oOperandChooseLength (regCX)
             | regCX:
             @OperandForceAddressIntoTemp
              [ oOperandChooseMode (mStatic)
              | mStatic:
              @OperandPushTempWord
               oTempAllocate
               oOperandPushTemp
               oOperandSetValue(zero)
               oOperandSetLength(two)
               >>
              ;OperandPushTempWord
              oOperandSwap
              oEmitDouble(iLoada)
              oOperandPop
              ] or >
              oOperandSetLength(two)
              >>
             ;OperandForceAddressIntoTemp
             ] or >
             oEmitSingle(iPush)
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mTemp)
              | mTemp:
              oTempFree
              ] or >
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandPushMode(mStack)
             >>
            ;OperandForceToStack
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStack)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            ?tParmEnd (tParmEnd)
            @OperandPushExpression
             [ (tLiteralInteger)
             | tLiteralInteger:
             oOperandPushInteger
             ] or >
             }
             [ (tParmEnd)
             | *:
             ] or >
             >>
            ;OperandPushExpression
            @OperandForceToStack
             [ oOperandChooseLength (two)
             | two:
             ] or >
             oEmitSingle(iPush)
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mManifest)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandPushMode(mStack)
             >>
            ;OperandForceToStack
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStack)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            ?tParmEnd (tParmEnd)
            ?tTrap (tTrap)
            oOperandPushTrap
            oEmitSingle(iCall)
            oOperandPop
            oOperandPushMode(mStackReg)
            oOperandSetLength(two)
            oOperandPushMode(mManifest)
            oOperandSetLength(two)
            oOperandSetValue(twelve)
            oEmitDouble(iAdd)
            oOperandPop
            oOperandPop
            >>
           ;WriteParameter
           }
           [ (tWriteEnd)
           | tWriteEnd:
           ] or >
           >>
          ;WriteProc
          ] or >
          }
          [ (tCallBegin)
          | tCallBegin:
          @CallStmt
           oEmitSourceCoordinate
           oOperandPushMode(mManifest)
           oOperandSetLength(two)
           oOperandSetValue(zero)
           [ (tCallEnd)
           | tCallEnd:
           ] or >
           oOperandPushProcedure
           oOperandSetMode(mProc)
           oEmitSingle(iCall)
           oOperandPop
           oOperandPushMode(mStackReg)
           oOperandSetLength(two)
           oOperandSwap
           oEmitDouble(iAdd)
           oOperandPop
           oOperandPop
           oEmitMergeSourceCoordinate
           >>
          ;CallStmt
          ] or >
          }
          [ (tWriteBegin)
          | tWriteBegin:
          @WriteProc
           oEmitSourceCoordinate
           [ (tTrapBegin)
           | *:
           @WriteParameter
            ?tTrapBegin (tTrapBegin)
            ?tLiteralAddress (tLiteralAddress)
            @OperandPushVariable
             oOperandPushVariable
             [ (tVarParm)
             | *:
             [ (tVarParm)
             | *:
             [ (tVarParm)
             | *:
             >>
            ;OperandPushVariable
            @OperandForceToStack
             [ oOperandChooseLength (two)
             | two:
             ] or >
             oEmitSingle(iPush)
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mStatic)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandPushMode(mStack)
             >>
            ;OperandForceToStack
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStack)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            ?tVarParm (tVarParm)
            ?tParmEnd (tParmEnd)
            @OperandPushExpression
             [ (tSkipString)
             | tSkipString:
             oEmitNone(iData)
             ?tStringData (tStringData)
             oEmitString
             oEmitNone(iText)
             ] or >
             }
             [ (tLiteralAddress)
             | tLiteralAddress:
             @OperandPushVariable
              oOperandPushVariable
              [ (tFetchChar)
              | *:
              [ (tFetchChar)
              | *:
              [ (tFetchChar)
              | tFetchChar:
              oOperandSetLength(regCX)
              ] or >
              >>
             ;OperandPushVariable
             ] or >
             }
             [ (tParmEnd)
             | *:
             ] or >
             >>
            ;OperandPushExpression
            [ (tParmEnd)
            | *:
            @OperandForceToStack
             [ oOperandChooseLength (regCX)
             | regCX:
             @OperandForceAddressIntoTemp
              [ oOperandChooseMode (mStatic)
              | mStatic:
              @OperandPushTempWord
               oTempAllocate
               oOperandPushTemp
               oOperandSetValue(zero)
               oOperandSetLength(two)
               >>
              ;OperandPushTempWord
              oOperandSwap
              oEmitDouble(iLoada)
              oOperandPop
              ] or >
              oOperandSetLength(two)
              >>
             ;OperandForceAddressIntoTemp
             ] or >
             oEmitSingle(iPush)
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mTemp)
              | mTemp:
              oTempFree
              ] or >
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandPushMode(mStack)
             >>
            ;OperandForceToStack
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStack)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            ?tParmEnd (tParmEnd)
            @OperandPushExpression
             [ (tLiteralInteger)
             | tLiteralInteger:
             oOperandPushInteger
             ] or >
             }
             [ (tParmEnd)
             | *:
             ] or >
             >>
            ;OperandPushExpression
            @OperandForceToStack
             [ oOperandChooseLength (two)
             | two:
             ] or >
             oEmitSingle(iPush)
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mManifest)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandPushMode(mStack)
             >>
            ;OperandForceToStack
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStack)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            ?tParmEnd (tParmEnd)
            ?tTrap (tTrap)
            oOperandPushTrap
            oEmitSingle(iCall)
            oOperandPop
            oOperandPushMode(mStackReg)
            oOperandSetLength(two)
            oOperandPushMode(mManifest)
            oOperandSetLength(two)
            oOperandSetValue(twelve)
            oEmitDouble(iAdd)
            oOperandPop
            oOperandPop
            >>
           ;WriteParameter
           }
           [ (tWriteEnd)
           | tWriteEnd:
           ] or >
           >>
          ;WriteProc
          ] or >
          }
          [ (tTrapBegin)
          | tTrapBegin:
          @TrapStmt
           oEmitSourceCoordinate
           [ (tLiteralAddress)
           | tLiteralAddress:
           @OperandPushVariable
            oOperandPushVariable
            [ (tVarParm)
            | *:
            [ (tVarParm)
            | *:
            [ (tVarParm)
            | *:
            >>
           ;OperandPushVariable
           oOperandPushCopy
           @OperandForceToStack
            [ oOperandChooseLength (two)
            | two:
            ] or >
            oEmitSingle(iPush)
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStatic)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            oOperandPushMode(mStack)
            >>
           ;OperandForceToStack
           oOperandPop
           ?tVarParm (tVarParm)
           ?tParmEnd (tParmEnd)
           [ (tTrap)
           | tTrap:
           @OperandPopAndFreeTemp
            [ oOperandChooseMode (mStatic)
            | *:
            oOperandPop
            >>
           ;OperandPopAndFreeTemp
           oOperandPushTrap
           oEmitSingle(iCall)
           oOperandPop
           oOperandPushMode(mStackReg)
           oOperandSetLength(two)
           oOperandPushMode(mManifest)
           oOperandSetLength(two)
           oOperandSetValue(four)
           oEmitDouble(iAdd)
           oOperandPop
           oOperandPop
           ] or >
           ] or >
           >>
          ;TrapStmt
          ] or >
          }
          [ (tWriteBegin)
          | tWriteBegin:
          @WriteProc
           oEmitSourceCoordinate
           [ (tTrapBegin)
           | *:
           @WriteParameter
            ?tTrapBegin (tTrapBegin)
            ?tLiteralAddress (tLiteralAddress)
            @OperandPushVariable
             oOperandPushVariable
             [ (tVarParm)
             | *:
             [ (tVarParm)
             | *:
             [ (tVarParm)
             | *:
             >>
            ;OperandPushVariable
            @OperandForceToStack
             [ oOperandChooseLength (two)
             | two:
             ] or >
             oEmitSingle(iPush)
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mStatic)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandPushMode(mStack)
             >>
            ;OperandForceToStack
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStack)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            ?tVarParm (tVarParm)
            ?tParmEnd (tParmEnd)
            @OperandPushExpression
             [ (tSkipString)
             | tSkipString:
             oEmitNone(iData)
             ?tStringData (tStringData)
             oEmitString
             oEmitNone(iText)
             ] or >
             }
             [ (tLiteralAddress)
             | tLiteralAddress:
             @OperandPushVariable
              oOperandPushVariable
              [ (tFetchChar)
              | *:
              [ (tFetchChar)
              | *:
              [ (tFetchChar)
              | tFetchChar:
              oOperandSetLength(regCX)
              ] or >
              >>
             ;OperandPushVariable
             ] or >
             }
             [ (tParmEnd)
             | *:
             ] or >
             >>
            ;OperandPushExpression
            [ (tParmEnd)
            | *:
            @OperandForceToStack
             [ oOperandChooseLength (regCX)
             | regCX:
             @OperandForceAddressIntoTemp
              [ oOperandChooseMode (mStatic)
              | mStatic:
              @OperandPushTempWord
               oTempAllocate
               oOperandPushTemp
               oOperandSetValue(zero)
               oOperandSetLength(two)
               >>
              ;OperandPushTempWord
              oOperandSwap
              oEmitDouble(iLoada)
              oOperandPop
              ] or >
              oOperandSetLength(two)
              >>
             ;OperandForceAddressIntoTemp
             ] or >
             oEmitSingle(iPush)
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mTemp)
              | mTemp:
              oTempFree
              ] or >
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandPushMode(mStack)
             >>
            ;OperandForceToStack
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStack)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            ?tParmEnd (tParmEnd)
            @OperandPushExpression
             [ (tLiteralInteger)
             | tLiteralInteger:
             oOperandPushInteger
             ] or >
             }
             [ (tParmEnd)
             | *:
             ] or >
             >>
            ;OperandPushExpression
            @OperandForceToStack
             [ oOperandChooseLength (two)
             | two:
             ] or >
             oEmitSingle(iPush)
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mManifest)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandPushMode(mStack)
             >>
            ;OperandForceToStack
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStack)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            ?tParmEnd (tParmEnd)
            ?tTrap (tTrap)
            oOperandPushTrap
            oEmitSingle(iCall)
            oOperandPop
            oOperandPushMode(mStackReg)
            oOperandSetLength(two)
            oOperandPushMode(mManifest)
            oOperandSetLength(two)
            oOperandSetValue(twelve)
            oEmitDouble(iAdd)
            oOperandPop
            oOperandPop
            >>
           ;WriteParameter
           }
           [ (tTrapBegin)
           | *:
           @WriteParameter
            ?tTrapBegin (tTrapBegin)
            ?tLiteralAddress (tLiteralAddress)
            @OperandPushVariable
             oOperandPushVariable
             [ (tVarParm)
             | *:
             [ (tVarParm)
             | *:
             [ (tVarParm)
             | *:
             >>
            ;OperandPushVariable
            @OperandForceToStack
             [ oOperandChooseLength (two)
             | two:
             ] or >
             oEmitSingle(iPush)
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mStatic)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandPushMode(mStack)
             >>
            ;OperandForceToStack
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStack)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            ?tVarParm (tVarParm)
            ?tParmEnd (tParmEnd)
            @OperandPushExpression
             [ (tLiteralAddress)
             | tLiteralAddress:
             @OperandPushVariable
              oOperandPushVariable
              [ (tFetchInteger)
              | *:
              [ (tFetchInteger)
              | *:
              [ (tFetchInteger)
              | tFetchInteger:
              ] or >
              >>
             ;OperandPushVariable
             ] or >
             }
             [ (tParmEnd)
             | *:
             ] or >
             >>
            ;OperandPushExpression
            [ (tParmEnd)
            | *:
            @OperandForceToStack
             [ oOperandChooseLength (two)
             | two:
             ] or >
             oEmitSingle(iPush)
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mStatic)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandPushMode(mStack)
             >>
            ;OperandForceToStack
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStack)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            ?tParmEnd (tParmEnd)
            @OperandPushExpression
             [ (tLiteralInteger)
             | tLiteralInteger:
             oOperandPushInteger
             ] or >
             }
             [ (tParmEnd)
             | *:
             ] or >
             >>
            ;OperandPushExpression
            @OperandForceToStack
             [ oOperandChooseLength (two)
             | two:
             ] or >
             oEmitSingle(iPush)
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mManifest)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandPushMode(mStack)
             >>
            ;OperandForceToStack
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStack)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            ?tParmEnd (tParmEnd)
            ?tTrap (tTrap)
            oOperandPushTrap
            oEmitSingle(iCall)
            oOperandPop
            oOperandPushMode(mStackReg)
            oOperandSetLength(two)
            oOperandPushMode(mManifest)
            oOperandSetLength(two)
            oOperandSetValue(twelve)
            oEmitDouble(iAdd)
            oOperandPop
            oOperandPop
            >>
           ;WriteParameter
           }
           [ (tTrapBegin)
           | *:
           @WriteParameter
            ?tTrapBegin (tTrapBegin)
            ?tLiteralAddress (tLiteralAddress)
            @OperandPushVariable
             oOperandPushVariable
             [ (tVarParm)
             | *:
             [ (tVarParm)
             | *:
             [ (tVarParm)
             | *:
             >>
            ;OperandPushVariable
            @OperandForceToStack
             [ oOperandChooseLength (two)
             | two:
             ] or >
             oEmitSingle(iPush)
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mStatic)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandPushMode(mStack)
             >>
            ;OperandForceToStack
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStack)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            ?tVarParm (tVarParm)
            ?tParmEnd (tParmEnd)
            @OperandPushExpression
             [ (tSkipString)
             | tSkipString:
             oEmitNone(iData)
             ?tStringData (tStringData)
             oEmitString
             oEmitNone(iText)
             ] or >
             }
             [ (tLiteralAddress)
             | tLiteralAddress:
             @OperandPushVariable
              oOperandPushVariable
              [ (tFetchChar)
              | *:
              [ (tFetchChar)
              | *:
              [ (tFetchChar)
              | tFetchChar:
              oOperandSetLength(regCX)
              ] or >
              >>
             ;OperandPushVariable
             ] or >
             }
             [ (tParmEnd)
             | *:
             ] or >
             >>
            ;OperandPushExpression
            [ (tParmEnd)
            | *:
            @OperandForceToStack
             [ oOperandChooseLength (regCX)
             | regCX:
             @OperandForceAddressIntoTemp
              [ oOperandChooseMode (mStatic)
              | mStatic:
              @OperandPushTempWord
               oTempAllocate
               oOperandPushTemp
               oOperandSetValue(zero)
               oOperandSetLength(two)
               >>
              ;OperandPushTempWord
              oOperandSwap
              oEmitDouble(iLoada)
              oOperandPop
              ] or >
              oOperandSetLength(two)
              >>
             ;OperandForceAddressIntoTemp
             ] or >
             oEmitSingle(iPush)
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mTemp)
              | mTemp:
              oTempFree
              ] or >
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandPushMode(mStack)
             >>
            ;OperandForceToStack
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStack)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            ?tParmEnd (tParmEnd)
            @OperandPushExpression
             [ (tLiteralInteger)
             | tLiteralInteger:
             oOperandPushInteger
             ] or >
             }
             [ (tParmEnd)
             | *:
             ] or >
             >>
            ;OperandPushExpression
            @OperandForceToStack
             [ oOperandChooseLength (two)
             | two:
             ] or >
             oEmitSingle(iPush)
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mManifest)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandPushMode(mStack)
             >>
            ;OperandForceToStack
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStack)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            ?tParmEnd (tParmEnd)
            ?tTrap (tTrap)
            oOperandPushTrap
            oEmitSingle(iCall)
            oOperandPop
            oOperandPushMode(mStackReg)
            oOperandSetLength(two)
            oOperandPushMode(mManifest)
            oOperandSetLength(two)
            oOperandSetValue(twelve)
            oEmitDouble(iAdd)
            oOperandPop
            oOperandPop
            >>
           ;WriteParameter
           }
           [ (tWriteEnd)
           | tWriteEnd:
           ] or >
           >>
          ;WriteProc
          ] or >
          }
          [ (tTrapBegin)
          | tTrapBegin:
          @TrapStmt
           oEmitSourceCoordinate
           [ (tLiteralAddress)
           | tLiteralAddress:
           @OperandPushVariable
            oOperandPushVariable
            [ (tVarParm)
            | *:
            [ (tVarParm)
            | *:
            [ (tVarParm)
            | *:
            >>
           ;OperandPushVariable
           oOperandPushCopy
           @OperandForceToStack
            [ oOperandChooseLength (two)
            | two:
            ] or >
            oEmitSingle(iPush)
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStatic)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            oOperandPushMode(mStack)
            >>
           ;OperandForceToStack
           oOperandPop
           ?tVarParm (tVarParm)
           ?tParmEnd (tParmEnd)
           [ (tTrap)
           | tTrap:
           @OperandPopAndFreeTemp
            [ oOperandChooseMode (mStatic)
            | *:
            oOperandPop
            >>
           ;OperandPopAndFreeTemp
           oOperandPushTrap
           oEmitSingle(iCall)
           oOperandPop
           oOperandPushMode(mStackReg)
           oOperandSetLength(two)
           oOperandPushMode(mManifest)
           oOperandSetLength(two)
           oOperandSetValue(four)
           oEmitDouble(iAdd)
           oOperandPop
           oOperandPop
           ] or >
           ] or >
           >>
          ;TrapStmt
          ] or >
          }
          [ (tIfBegin)
          | tIfBegin:
          @IfStmt
           oEmitSourceCoordinate
           @OperandPushBooleanControlExpression
            @OperandPushExpression
             [ (tLiteralAddress)
             | tLiteralAddress:
             @OperandPushVariable
              oOperandPushVariable
              [ (tFetchInteger)
              | *:
              [ (tFetchInteger)
              | *:
              [ (tFetchInteger)
              | tFetchInteger:
              ] or >
              >>
             ;OperandPushVariable
             ] or >
             }
             [ (tLiteralInteger)
             | tLiteralInteger:
             oOperandPushInteger
             ] or >
             }
             [ (tLT)
             | tLT:
             @OperandLessPop
              oOperandSwap
              @OperandGreaterPop
               [ oOperandCompareLeftAndRight (no)
               | no:
               [ oOperandChooseManifestValue ()
               | *:
               oOperandSwap
               [ oOperandChooseManifestValue (trEoln)
               | *:
               oOperandSwap
               @EmitCmp
                oOperandSwap
                [ oOperandChooseMode (mManifest)
                | mManifest:
                oOperandPushCopy
                @OperandForceIntoTemp
                 [ oOperandChooseMode (mManifest)
                 | *:
                 [ oOperandChooseLength (two)
                 | two:
                 @OperandPushTempWord
                  oTempAllocate
                  oOperandPushTemp
                  oOperandSetValue(zero)
                  oOperandSetLength(two)
                  >>
                 ;OperandPushTempWord
                 oOperandSwap
                 oEmitDouble(iMov)
                 @OperandPopAndFreeTemp
                  [ oOperandChooseMode (mManifest)
                  | *:
                  oOperandPop
                  >>
                 ;OperandPopAndFreeTemp
                 oOperandSetMode(mTemp)
                 ] or >
                 >>
                ;OperandForceIntoTemp
                oOperandSwap
                oOperandSwapRightAndDest
                oEmitDouble(iCmp)
                oOperandSwap
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mTemp)
                 | mTemp:
                 oTempFree
                 ] or >
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                >>
               ;EmitCmp
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mStatic)
                | *:
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mManifest)
                | *:
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               oOperandPushJumpCondition(iJgt)
               ] or >
               >>
              ;OperandGreaterPop
              >>
             ;OperandLessPop
             ] or >
             }
             [ (tIfThen)
             | *:
             ] or >
             >>
            ;OperandPushExpression
            @OperandForceToJumpCondition
             [ oOperandIsJumpCondition (yes)
             | yes:
             ] or >
             >>
            ;OperandForceToJumpCondition
            >>
           ;OperandPushBooleanControlExpression
           ?tIfThen (tIfThen)
           [ oOperandChooseJumpCondition (iJgt)
           | *:
           @OperandComplementJumpCondition
            [ oOperandChooseJumpCondition (iJgt)
            | *:
            oOperandComplementJumpCondition
            >>
           ;OperandComplementJumpCondition
           @OperandInfixOr
            @OperandForceToJumpCondition
             [ oOperandIsJumpCondition (yes)
             | yes:
             ] or >
             >>
            ;OperandForceToJumpCondition
            [ oOperandChooseJumpCondition (iJle)
            | *:
            oEmitConditionalForwardBranch
            oFixAndFreeFalseBranches
            oFixPushLastAddress
            oOperandMergeShuntsWithAddress
            oFixPopAddress
            >>
           ;OperandInfixOr
           @Statements
            @Block
             [ (tWriteBegin)
             | tWriteBegin:
             @WriteProc
              oEmitSourceCoordinate
              [ (tTrapBegin)
              | *:
              @WriteParameter
               ?tTrapBegin (tTrapBegin)
               ?tLiteralAddress (tLiteralAddress)
               @OperandPushVariable
                oOperandPushVariable
                [ (tVarParm)
                | *:
                [ (tVarParm)
                | *:
                [ (tVarParm)
                | *:
                >>
               ;OperandPushVariable
               @OperandForceToStack
                [ oOperandChooseLength (two)
                | two:
                ] or >
                oEmitSingle(iPush)
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mStatic)
                 | *:
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                oOperandPushMode(mStack)
                >>
               ;OperandForceToStack
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mStack)
                | *:
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               ?tVarParm (tVarParm)
               ?tParmEnd (tParmEnd)
               @OperandPushExpression
                [ (tSkipString)
                | tSkipString:
                oEmitNone(iData)
                ?tStringData (tStringData)
                oEmitString
                oEmitNone(iText)
                ] or >
                }
                [ (tLiteralAddress)
                | tLiteralAddress:
                @OperandPushVariable
                 oOperandPushVariable
                 [ (tFetchChar)
                 | *:
                 [ (tFetchChar)
                 | *:
                 [ (tFetchChar)
                 | tFetchChar:
                 oOperandSetLength(regCX)
                 ] or >
                 >>
                ;OperandPushVariable
                ] or >
                }
                [ (tParmEnd)
                | *:
                ] or >
                >>
               ;OperandPushExpression
               [ (tParmEnd)
               | *:
               @OperandForceToStack
                [ oOperandChooseLength (regCX)
                | regCX:
                @OperandForceAddressIntoTemp
                 [ oOperandChooseMode (mStatic)
                 | mStatic:
                 @OperandPushTempWord
                  oTempAllocate
                  oOperandPushTemp
                  oOperandSetValue(zero)
                  oOperandSetLength(two)
                  >>
                 ;OperandPushTempWord
                 oOperandSwap
                 oEmitDouble(iLoada)
                 oOperandPop
                 ] or >
                 oOperandSetLength(two)
                 >>
                ;OperandForceAddressIntoTemp
                ] or >
                oEmitSingle(iPush)
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mTemp)
                 | mTemp:
                 oTempFree
                 ] or >
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                oOperandPushMode(mStack)
                >>
               ;OperandForceToStack
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mStack)
                | *:
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               ?tParmEnd (tParmEnd)
               @OperandPushExpression
                [ (tLiteralInteger)
                | tLiteralInteger:
                oOperandPushInteger
                ] or >
                }
                [ (tParmEnd)
                | *:
                ] or >
                >>
               ;OperandPushExpression
               @OperandForceToStack
                [ oOperandChooseLength (two)
                | two:
                ] or >
                oEmitSingle(iPush)
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mManifest)
                 | *:
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                oOperandPushMode(mStack)
                >>
               ;OperandForceToStack
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mStack)
                | *:
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               ?tParmEnd (tParmEnd)
               ?tTrap (tTrap)
               oOperandPushTrap
               oEmitSingle(iCall)
               oOperandPop
               oOperandPushMode(mStackReg)
               oOperandSetLength(two)
               oOperandPushMode(mManifest)
               oOperandSetLength(two)
               oOperandSetValue(twelve)
               oEmitDouble(iAdd)
               oOperandPop
               oOperandPop
               >>
              ;WriteParameter
              }
              [ (tWriteEnd)
              | tWriteEnd:
              ] or >
              >>
             ;WriteProc
             ] or >
             }
             [ (tTrapBegin)
             | tTrapBegin:
             @TrapStmt
              oEmitSourceCoordinate
              [ (tLiteralAddress)
              | tLiteralAddress:
              @OperandPushVariable
               oOperandPushVariable
               [ (tVarParm)
               | *:
               [ (tVarParm)
               | *:
               [ (tVarParm)
               | *:
               >>
              ;OperandPushVariable
              oOperandPushCopy
              @OperandForceToStack
               [ oOperandChooseLength (two)
               | two:
               ] or >
               oEmitSingle(iPush)
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mStatic)
                | *:
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               oOperandPushMode(mStack)
               >>
              ;OperandForceToStack
              oOperandPop
              ?tVarParm (tVarParm)
              ?tParmEnd (tParmEnd)
              [ (tTrap)
              | tTrap:
              @OperandPopAndFreeTemp
               [ oOperandChooseMode (mStatic)
               | *:
               oOperandPop
               >>
              ;OperandPopAndFreeTemp
              oOperandPushTrap
              oEmitSingle(iCall)
              oOperandPop
              oOperandPushMode(mStackReg)
              oOperandSetLength(two)
              oOperandPushMode(mManifest)
              oOperandSetLength(two)
              oOperandSetValue(four)
              oEmitDouble(iAdd)
              oOperandPop
              oOperandPop
              ] or >
              ] or >
              >>
             ;TrapStmt
             ] or >
             }
             [ (tIfMerge)
             | *:
             ] or >
             >>
            ;Block
            >>
           ;Statements
           [ (tIfMerge)
           | tIfMerge:
           oEmitUnconditionalForwardBranch
           oFixAndFreeShuntList
           oOperandPop
           oFixPushLastAddress
           oEmitMergeSourceCoordinate
           @Statements
            @Block
             [ (tWriteBegin)
             | tWriteBegin:
             @WriteProc
              oEmitSourceCoordinate
              [ (tTrapBegin)
              | *:
              @WriteParameter
               ?tTrapBegin (tTrapBegin)
               ?tLiteralAddress (tLiteralAddress)
               @OperandPushVariable
                oOperandPushVariable
                [ (tVarParm)
                | *:
                [ (tVarParm)
                | *:
                [ (tVarParm)
                | *:
                >>
               ;OperandPushVariable
               @OperandForceToStack
                [ oOperandChooseLength (two)
                | two:
                ] or >
                oEmitSingle(iPush)
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mStatic)
                 | *:
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                oOperandPushMode(mStack)
                >>
               ;OperandForceToStack
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mStack)
                | *:
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               ?tVarParm (tVarParm)
               ?tParmEnd (tParmEnd)
               @OperandPushExpression
                [ (tSkipString)
                | tSkipString:
                oEmitNone(iData)
                ?tStringData (tStringData)
                oEmitString
                oEmitNone(iText)
                ] or >
                }
                [ (tLiteralAddress)
                | tLiteralAddress:
                @OperandPushVariable
                 oOperandPushVariable
                 [ (tFetchChar)
                 | *:
                 [ (tFetchChar)
                 | *:
                 [ (tFetchChar)
                 | tFetchChar:
                 oOperandSetLength(regCX)
                 ] or >
                 >>
                ;OperandPushVariable
                ] or >
                }
                [ (tParmEnd)
                | *:
                ] or >
                >>
               ;OperandPushExpression
               [ (tParmEnd)
               | *:
               @OperandForceToStack
                [ oOperandChooseLength (regCX)
                | regCX:
                @OperandForceAddressIntoTemp
                 [ oOperandChooseMode (mStatic)
                 | mStatic:
                 @OperandPushTempWord
                  oTempAllocate
                  oOperandPushTemp
                  oOperandSetValue(zero)
                  oOperandSetLength(two)
                  >>
                 ;OperandPushTempWord
                 oOperandSwap
                 oEmitDouble(iLoada)
                 oOperandPop
                 ] or >
                 oOperandSetLength(two)
                 >>
                ;OperandForceAddressIntoTemp
                ] or >
                oEmitSingle(iPush)
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mTemp)
                 | mTemp:
                 oTempFree
                 ] or >
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                oOperandPushMode(mStack)
                >>
               ;OperandForceToStack
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mStack)
                | *:
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               ?tParmEnd (tParmEnd)
               @OperandPushExpression
                [ (tLiteralInteger)
                | tLiteralInteger:
                oOperandPushInteger
                ] or >
                }
                [ (tParmEnd)
                | *:
                ] or >
                >>
               ;OperandPushExpression
               @OperandForceToStack
                [ oOperandChooseLength (two)
                | two:
                ] or >
                oEmitSingle(iPush)
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mManifest)
                 | *:
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                oOperandPushMode(mStack)
                >>
               ;OperandForceToStack
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mStack)
                | *:
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               ?tParmEnd (tParmEnd)
               ?tTrap (tTrap)
               oOperandPushTrap
               oEmitSingle(iCall)
               oOperandPop
               oOperandPushMode(mStackReg)
               oOperandSetLength(two)
               oOperandPushMode(mManifest)
               oOperandSetLength(two)
               oOperandSetValue(twelve)
               oEmitDouble(iAdd)
               oOperandPop
               oOperandPop
               >>
              ;WriteParameter
              }
              [ (tWriteEnd)
              | tWriteEnd:
              ] or >
              >>
             ;WriteProc
             ] or >
             }
             [ (tCallBegin)
             | tCallBegin:
             @CallStmt
              oEmitSourceCoordinate
              oOperandPushMode(mManifest)
              oOperandSetLength(two)
              oOperandSetValue(zero)
              [ (tCallEnd)
              | tCallEnd:
              ] or >
              oOperandPushProcedure
              oOperandSetMode(mProc)
              oEmitSingle(iCall)
              oOperandPop
              oOperandPushMode(mStackReg)
              oOperandSetLength(two)
              oOperandSwap
              oEmitDouble(iAdd)
              oOperandPop
              oOperandPop
              oEmitMergeSourceCoordinate
              >>
             ;CallStmt
             ] or >
             }
             [ (tWriteBegin)
             | tWriteBegin:
             @WriteProc
              oEmitSourceCoordinate
              [ (tTrapBegin)
              | *:
              @WriteParameter
               ?tTrapBegin (tTrapBegin)
               ?tLiteralAddress (tLiteralAddress)
               @OperandPushVariable
                oOperandPushVariable
                [ (tVarParm)
                | *:
                [ (tVarParm)
                | *:
                [ (tVarParm)
                | *:
                >>
               ;OperandPushVariable
               @OperandForceToStack
                [ oOperandChooseLength (two)
                | two:
                ] or >
                oEmitSingle(iPush)
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mStatic)
                 | *:
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                oOperandPushMode(mStack)
                >>
               ;OperandForceToStack
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mStack)
                | *:
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               ?tVarParm (tVarParm)
               ?tParmEnd (tParmEnd)
               @OperandPushExpression
                [ (tSkipString)
                | tSkipString:
                oEmitNone(iData)
                ?tStringData (tStringData)
                oEmitString
                oEmitNone(iText)
                ] or >
                }
                [ (tLiteralAddress)
                | tLiteralAddress:
                @OperandPushVariable
                 oOperandPushVariable
                 [ (tFetchChar)
                 | *:
                 [ (tFetchChar)
                 | *:
                 [ (tFetchChar)
                 | tFetchChar:
                 oOperandSetLength(regCX)
                 ] or >
                 >>
                ;OperandPushVariable
                ] or >
                }
                [ (tParmEnd)
                | *:
                ] or >
                >>
               ;OperandPushExpression
               [ (tParmEnd)
               | *:
               @OperandForceToStack
                [ oOperandChooseLength (regCX)
                | regCX:
                @OperandForceAddressIntoTemp
                 [ oOperandChooseMode (mStatic)
                 | mStatic:
                 @OperandPushTempWord
                  oTempAllocate
                  oOperandPushTemp
                  oOperandSetValue(zero)
                  oOperandSetLength(two)
                  >>
                 ;OperandPushTempWord
                 oOperandSwap
                 oEmitDouble(iLoada)
                 oOperandPop
                 ] or >
                 oOperandSetLength(two)
                 >>
                ;OperandForceAddressIntoTemp
                ] or >
                oEmitSingle(iPush)
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mTemp)
                 | mTemp:
                 oTempFree
                 ] or >
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                oOperandPushMode(mStack)
                >>
               ;OperandForceToStack
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mStack)
                | *:
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               ?tParmEnd (tParmEnd)
               @OperandPushExpression
                [ (tLiteralInteger)
                | tLiteralInteger:
                oOperandPushInteger
                ] or >
                }
                [ (tParmEnd)
                | *:
                ] or >
                >>
               ;OperandPushExpression
               @OperandForceToStack
                [ oOperandChooseLength (two)
                | two:
                ] or >
                oEmitSingle(iPush)
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mManifest)
                 | *:
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                oOperandPushMode(mStack)
                >>
               ;OperandForceToStack
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mStack)
                | *:
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               ?tParmEnd (tParmEnd)
               ?tTrap (tTrap)
               oOperandPushTrap
               oEmitSingle(iCall)
               oOperandPop
               oOperandPushMode(mStackReg)
               oOperandSetLength(two)
               oOperandPushMode(mManifest)
               oOperandSetLength(two)
               oOperandSetValue(twelve)
               oEmitDouble(iAdd)
               oOperandPop
               oOperandPop
               >>
              ;WriteParameter
              }
              [ (tWriteEnd)
              | tWriteEnd:
              ] or >
              >>
             ;WriteProc
             ] or >
             }
             [ (tTrapBegin)
             | tTrapBegin:
             @TrapStmt
              oEmitSourceCoordinate
              [ (tLiteralAddress)
              | tLiteralAddress:
              @OperandPushVariable
               oOperandPushVariable
               [ (tVarParm)
               | *:
               [ (tVarParm)
               | *:
               [ (tVarParm)
               | *:
               >>
              ;OperandPushVariable
              oOperandPushCopy
              @OperandForceToStack
               [ oOperandChooseLength (two)
               | two:
               ] or >
               oEmitSingle(iPush)
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mStatic)
                | *:
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               oOperandPushMode(mStack)
               >>
              ;OperandForceToStack
              oOperandPop
              ?tVarParm (tVarParm)
              ?tParmEnd (tParmEnd)
              [ (tTrap)
              | tTrap:
              @OperandPopAndFreeTemp
               [ oOperandChooseMode (mStatic)
               | *:
               oOperandPop
               >>
              ;OperandPopAndFreeTemp
              oOperandPushTrap
              oEmitSingle(iCall)
              oOperandPop
              oOperandPushMode(mStackReg)
              oOperandSetLength(two)
              oOperandPushMode(mManifest)
              oOperandSetLength(two)
              oOperandSetValue(four)
              oEmitDouble(iAdd)
              oOperandPop
              oOperandPop
              ] or >
              ] or >
              >>
             ;TrapStmt
             ] or >
             }
             [ (tIfEnd)
             | *:
             ] or >
             >>
            ;Block
            >>
           ;Statements
           oFixForwardBranch
           oFixPopAddress
           ?tIfEnd (tIfEnd)
           ] or >
           >>
          ;IfStmt
          ] or >
          }
          [ (tIfEnd)
          | *:
          ] or >
          >>
         ;Block
         >>
        ;Statements
        oFixForwardBranch
        oFixPopAddress
        ?tIfEnd (tIfEnd)
        ] or >
        >>
       ;IfStmt
       ] or >
       }
       [ (tAssignBegin)
       | tAssignBegin:
       @AssignStmt
        oEmitSourceCoordinate
        ?tLiteralAddress (tLiteralAddress)
        @OperandPushVariable
         oOperandPushVariable
         [ (tFetchAddress)
         | tFetchAddress:
         oOperandSetMode(mStatic)
         @OperandForceIntoTemp
          [ oOperandChooseMode (mStatic)
          | *:
          [ oOperandChooseLength (two)
          | two:
          @OperandPushTempWord
           oTempAllocate
           oOperandPushTemp
           oOperandSetValue(zero)
           oOperandSetLength(two)
           >>
          ;OperandPushTempWord
          oOperandSwap
          oEmitDouble(iMov)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandSetMode(mTemp)
          ] or >
          >>
         ;OperandForceIntoTemp
         oOperandSetMode(mTempIndirect)
         ] or >
         [ (tLiteralBoolean)
         | *:
         [ (tLiteralBoolean)
         | *:
         >>
        ;OperandPushVariable
        @OperandPushExpressionAssignPopPop
         [ (tLiteralBoolean)
         | tLiteralBoolean:
         oOperandPushBoolean
         ] or >
         }
         [ (tAssignBoolean)
         | tAssignBoolean:
         @OperandAssignBooleanPopPop
          @OperandConvertJumpConditionToData
           [ oOperandIsJumpCondition (no)
           | no:
           ] or >
           >>
          ;OperandConvertJumpConditionToData
          oOperandSetLength(one)
          @EmitMove
           @OperandLeftOrRightIsTemp
            [ oOperandChooseMode (mManifest)
            | *:
            oOperandSwap
            [ oOperandChooseMode (mTempIndirect)
            | *:
            oOperandSwap
            >>no
           ;OperandLeftOrRightIsTemp
           [@OperandLeftOrRightIsTemp (no)
           | *:
           [ oOperandChooseMode (mManifest)
           | mManifest:
           oEmitDouble(iMov)
           ] or >
           >>
          ;EmitMove
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mManifest)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mTempIndirect)
           | mTempIndirect:
           oTempFree
           ] or >
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          >>
         ;OperandAssignBooleanPopPop
         ] or >
         >>
        ;OperandPushExpressionAssignPopPop
        >>
       ;AssignStmt
       ] or >
       }
       [ (tIfEnd)
       | *:
       ] or >
       >>
      ;Block
      >>
     ;Statements
     oFixForwardBranch
     oFixPopAddress
     ?tIfEnd (tIfEnd)
     ] or >
     >>
    ;IfStmt
    ] or >
    }
    [ (tProcedureEnd)
    | *:
    ] or >
    >>
   ;Block
   ?tProcedureEnd (tProcedureEnd)
   oEmitNone(iLeave)
   oEmitNone(iReturn)
   >>
  ;Routine
  oFixForwardBranch
  oFixPopAddress
  ] or >
  }
  [ (tSkipProc)
  | tSkipProc:
  oEmitUnconditionalForwardBranch
  oFixPushLastAddress
  @Routine
   oEmitProcLabel(mProc)
   oEmitNone(iEnter)
   [ (tLiteralAddress)
   | *:
   oOperandPushMode(mArgument)
   oOperandSetValue(four)
   [ (tLiteralAddress)
   | tLiteralAddress:
   @OperandNextArgument
    oOperandSetMode(mManifest)
    oOperandPushMode(mManifest)
    oOperandSetValue(four)
    oOperandAddManifestValues
    oOperandPop
    oOperandSetMode(mArgument)
    >>
   ;OperandNextArgument
   oOperandPushCopy
   oOperandPushVariable
   oOperandSwap
   [ (tStoreAddress)
   | tStoreAddress:
   oOperandSetLength(two)
   @OperandAssignIntegerPopPop
    [ oOperandCompareLeftAndRight (no)
    | no:
    @EmitMove
     @OperandLeftOrRightIsTemp
      [ oOperandChooseMode (mArgument)
      | *:
      oOperandSwap
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandSwap
      >>no
     ;OperandLeftOrRightIsTemp
     [@OperandLeftOrRightIsTemp (no)
     | *:
     [ oOperandChooseMode (mArgument)
     | *:
     oOperandPushCopy
     @OperandForceIntoTemp
      [ oOperandChooseMode (mArgument)
      | *:
      [ oOperandChooseLength (two)
      | two:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iMov)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mArgument)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandSetMode(mTemp)
      ] or >
      >>
     ;OperandForceIntoTemp
     oOperandSwapLeftAndDest
     oEmitDouble(iMov)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mTemp)
      | mTemp:
      oTempFree
      ] or >
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandSwap
     >>
    ;EmitMove
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mArgument)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ] or >
    >>
   ;OperandAssignIntegerPopPop
   ] or >
   ] or >
   }
   [ (tParmEnd)
   | tParmEnd:
   ] or >
   oOperandPop
   @Block
    [ (tCallBegin)
    | tCallBegin:
    @CallStmt
     oEmitSourceCoordinate
     oOperandPushMode(mManifest)
     oOperandSetLength(two)
     oOperandSetValue(zero)
     [ (tLiteralAddress)
     | *:
     @OperandPushExpression
      [ (tLiteralAddress)
      | tLiteralAddress:
      @OperandPushVariable
       oOperandPushVariable
       [ (tVarParm)
       | *:
       [ (tVarParm)
       | *:
       [ (tVarParm)
       | *:
       >>
      ;OperandPushVariable
      ] or >
      }
      [ (tVarParm)
      | *:
      ] or >
      >>
     ;OperandPushExpression
     @OperandConvertJumpConditionToData
      [ oOperandIsJumpCondition (no)
      | no:
      ] or >
      >>
     ;OperandConvertJumpConditionToData
     [ (tVarParm)
     | tVarParm:
     @OperandForceAddressIntoTemp
      [ oOperandChooseMode (mStatic)
      | mStatic:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iLoada)
      oOperandPop
      ] or >
      oOperandSetLength(two)
      >>
     ;OperandForceAddressIntoTemp
     @OperandForceToStack
      [ oOperandChooseLength (two)
      | two:
      ] or >
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mTemp)
       | mTemp:
       oTempFree
       ] or >
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mStack)
      >>
     ;OperandForceToStack
     ] or >
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStack)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     ?tParmEnd (tParmEnd)
     oOperandPushMode(mManifest)
     oOperandSetLength(two)
     oOperandSetValue(four)
     oOperandAddManifestValues
     oOperandPop
     }
     [ (tCallEnd)
     | tCallEnd:
     ] or >
     oOperandPushProcedure
     oOperandSetMode(mProc)
     oEmitSingle(iCall)
     oOperandPop
     oOperandPushMode(mStackReg)
     oOperandSetLength(two)
     oOperandSwap
     oEmitDouble(iAdd)
     oOperandPop
     oOperandPop
     oEmitMergeSourceCoordinate
     >>
    ;CallStmt
    ] or >
    }
    [ (tIfBegin)
    | tIfBegin:
    @IfStmt
     oEmitSourceCoordinate
     @OperandPushBooleanControlExpression
      @OperandPushExpression
       [ (tLiteralAddress)
       | tLiteralAddress:
       @OperandPushVariable
        oOperandPushVariable
        [ (tFetchInteger)
        | *:
        [ (tFetchInteger)
        | *:
        [ (tFetchInteger)
        | tFetchInteger:
        ] or >
        >>
       ;OperandPushVariable
       ] or >
       }
       [ (tLiteralInteger)
       | tLiteralInteger:
       oOperandPushInteger
       ] or >
       }
       [ (tGT)
       | tGT:
       @OperandGreaterPop
        [ oOperandCompareLeftAndRight (no)
        | no:
        [ oOperandChooseManifestValue (trReadInteger)
        | *:
        oOperandSwap
        [ oOperandChooseManifestValue ()
        | *:
        oOperandSwap
        @EmitCmp
         oOperandSwap
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandSwap
         @OperandLeftOrRightIsTemp
          [ oOperandChooseMode (mManifest)
          | *:
          oOperandSwap
          [ oOperandChooseMode (mStatic)
          | *:
          oOperandSwap
          >>no
         ;OperandLeftOrRightIsTemp
         [@OperandLeftOrRightIsTemp (no)
         | *:
         [ oOperandChooseMode (mManifest)
         | mManifest:
         oEmitDouble(iCmp)
         ] or >
         >>
        ;EmitCmp
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mManifest)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        oOperandPushJumpCondition(iJgt)
        ] or >
        >>
       ;OperandGreaterPop
       ] or >
       }
       [ (tIfThen)
       | *:
       ] or >
       >>
      ;OperandPushExpression
      @OperandForceToJumpCondition
       [ oOperandIsJumpCondition (yes)
       | yes:
       ] or >
       >>
      ;OperandForceToJumpCondition
      >>
     ;OperandPushBooleanControlExpression
     ?tIfThen (tIfThen)
     [ oOperandChooseJumpCondition (iJgt)
     | *:
     @OperandComplementJumpCondition
      [ oOperandChooseJumpCondition (iJgt)
      | *:
      oOperandComplementJumpCondition
      >>
     ;OperandComplementJumpCondition
     @OperandInfixOr
      @OperandForceToJumpCondition
       [ oOperandIsJumpCondition (yes)
       | yes:
       ] or >
       >>
      ;OperandForceToJumpCondition
      [ oOperandChooseJumpCondition (iJle)
      | *:
      oEmitConditionalForwardBranch
      oFixAndFreeFalseBranches
      oFixPushLastAddress
      oOperandMergeShuntsWithAddress
      oFixPopAddress
      >>
     ;OperandInfixOr
     @Statements
      @Block
       [ (tTrapBegin)
       | tTrapBegin:
       @TrapStmt
        oEmitSourceCoordinate
        [ (tLiteralAddress)
        | tLiteralAddress:
        @OperandPushVariable
         oOperandPushVariable
         [ (tVarParm)
         | *:
         [ (tVarParm)
         | *:
         [ (tVarParm)
         | *:
         >>
        ;OperandPushVariable
        oOperandPushCopy
        @OperandForceToStack
         [ oOperandChooseLength (two)
         | two:
         ] or >
         oEmitSingle(iPush)
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStatic)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         oOperandPushMode(mStack)
         >>
        ;OperandForceToStack
        oOperandPop
        ?tVarParm (tVarParm)
        ?tParmEnd (tParmEnd)
        [ (tTrap)
        | tTrap:
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        oOperandPushTrap
        oEmitSingle(iCall)
        oOperandPop
        oOperandPushMode(mStackReg)
        oOperandSetLength(two)
        oOperandPushMode(mManifest)
        oOperandSetLength(two)
        oOperandSetValue(four)
        oEmitDouble(iAdd)
        oOperandPop
        oOperandPop
        ] or >
        ] or >
        >>
       ;TrapStmt
       ] or >
       }
       [ (tWriteBegin)
       | tWriteBegin:
       @WriteProc
        oEmitSourceCoordinate
        [ (tTrapBegin)
        | *:
        @WriteParameter
         ?tTrapBegin (tTrapBegin)
         ?tLiteralAddress (tLiteralAddress)
         @OperandPushVariable
          oOperandPushVariable
          [ (tVarParm)
          | *:
          [ (tVarParm)
          | *:
          [ (tVarParm)
          | *:
          >>
         ;OperandPushVariable
         @OperandForceToStack
          [ oOperandChooseLength (two)
          | two:
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tVarParm (tVarParm)
         ?tParmEnd (tParmEnd)
         @OperandPushExpression
          [ (tSkipString)
          | tSkipString:
          oEmitNone(iData)
          ?tStringData (tStringData)
          oEmitString
          oEmitNone(iText)
          ] or >
          }
          [ (tLiteralAddress)
          | tLiteralAddress:
          @OperandPushVariable
           oOperandPushVariable
           [ (tFetchChar)
           | *:
           [ (tFetchChar)
           | *:
           [ (tFetchChar)
           | tFetchChar:
           oOperandSetLength(regCX)
           ] or >
           >>
          ;OperandPushVariable
          ] or >
          }
          [ (tParmEnd)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         [ (tParmEnd)
         | *:
         @OperandForceToStack
          [ oOperandChooseLength (regCX)
          | regCX:
          @OperandForceAddressIntoTemp
           [ oOperandChooseMode (mStatic)
           | mStatic:
           @OperandPushTempWord
            oTempAllocate
            oOperandPushTemp
            oOperandSetValue(zero)
            oOperandSetLength(two)
            >>
           ;OperandPushTempWord
           oOperandSwap
           oEmitDouble(iLoada)
           oOperandPop
           ] or >
           oOperandSetLength(two)
           >>
          ;OperandForceAddressIntoTemp
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mTemp)
           | mTemp:
           oTempFree
           ] or >
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tParmEnd (tParmEnd)
         @OperandPushExpression
          [ (tLiteralInteger)
          | tLiteralInteger:
          oOperandPushInteger
          ] or >
          }
          [ (tParmEnd)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         @OperandForceToStack
          [ oOperandChooseLength (two)
          | two:
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mManifest)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tParmEnd (tParmEnd)
         ?tTrap (tTrap)
         oOperandPushTrap
         oEmitSingle(iCall)
         oOperandPop
         oOperandPushMode(mStackReg)
         oOperandSetLength(two)
         oOperandPushMode(mManifest)
         oOperandSetLength(two)
         oOperandSetValue(twelve)
         oEmitDouble(iAdd)
         oOperandPop
         oOperandPop
         >>
        ;WriteParameter
        }
        [ (tWriteEnd)
        | tWriteEnd:
        ] or >
        >>
       ;WriteProc
       ] or >
       }
       [ (tTrapBegin)
       | tTrapBegin:
       @TrapStmt
        oEmitSourceCoordinate
        [ (tLiteralAddress)
        | tLiteralAddress:
        @OperandPushVariable
         oOperandPushVariable
         [ (tVarParm)
         | *:
         [ (tVarParm)
         | *:
         [ (tVarParm)
         | *:
         >>
        ;OperandPushVariable
        oOperandPushCopy
        @OperandForceToStack
         [ oOperandChooseLength (two)
         | two:
         ] or >
         oEmitSingle(iPush)
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStatic)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         oOperandPushMode(mStack)
         >>
        ;OperandForceToStack
        oOperandPop
        ?tVarParm (tVarParm)
        ?tParmEnd (tParmEnd)
        [ (tTrap)
        | tTrap:
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        oOperandPushTrap
        oEmitSingle(iCall)
        oOperandPop
        oOperandPushMode(mStackReg)
        oOperandSetLength(two)
        oOperandPushMode(mManifest)
        oOperandSetLength(two)
        oOperandSetValue(four)
        oEmitDouble(iAdd)
        oOperandPop
        oOperandPop
        ] or >
        ] or >
        >>
       ;TrapStmt
       ] or >
       }
       [ (tAssignBegin)
       | tAssignBegin:
       @AssignStmt
        oEmitSourceCoordinate
        ?tLiteralAddress (tLiteralAddress)
        @OperandPushVariable
         oOperandPushVariable
         [ (tLiteralAddress)
         | *:
         [ (tLiteralAddress)
         | *:
         [ (tLiteralAddress)
         | *:
         >>
        ;OperandPushVariable
        @OperandPushExpressionAssignPopPop
         [ (tLiteralAddress)
         | tLiteralAddress:
         @OperandPushVariable
          oOperandPushVariable
          [ (tFetchInteger)
          | *:
          [ (tFetchInteger)
          | *:
          [ (tFetchInteger)
          | tFetchInteger:
          ] or >
          >>
         ;OperandPushVariable
         ] or >
         }
         [ (tLiteralInteger)
         | tLiteralInteger:
         oOperandPushInteger
         ] or >
         }
         [ (tAdd)
         | tAdd:
         [ (tAssignInteger)
         | tAssignInteger:
         @OperandAddAssignPopPopPop
          [ oOperandCompareRightAndDest (no)
          | *:
          oOperandSwap
          [ oOperandCompareRightAndDest (yes)
          | yes:
          oOperandPop
          @OperandAddRightToLeftPop
           [ oOperandChooseManifestValue (one)
           | one:
           oOperandPop
           oEmitSingle(iInc)
           ] or >
           >>
          ;OperandAddRightToLeftPop
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          ] or >
          >>
         ;OperandAddAssignPopPopPop
         ] or >
         >>
        ;OperandPushExpressionAssignPopPop
        >>
       ;AssignStmt
       ] or >
       }
       [ (tAssignBegin)
       | tAssignBegin:
       @AssignStmt
        oEmitSourceCoordinate
        ?tLiteralAddress (tLiteralAddress)
        @OperandPushVariable
         oOperandPushVariable
         [ (tFetchAddress)
         | tFetchAddress:
         oOperandSetMode(mStatic)
         @OperandForceIntoTemp
          [ oOperandChooseMode (mStatic)
          | *:
          [ oOperandChooseLength (two)
          | two:
          @OperandPushTempWord
           oTempAllocate
           oOperandPushTemp
           oOperandSetValue(zero)
           oOperandSetLength(two)
           >>
          ;OperandPushTempWord
          oOperandSwap
          oEmitDouble(iMov)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandSetMode(mTemp)
          ] or >
          >>
         ;OperandForceIntoTemp
         oOperandSetMode(mTempIndirect)
         ] or >
         [ (tLiteralBoolean)
         | *:
         [ (tLiteralBoolean)
         | *:
         >>
        ;OperandPushVariable
        @OperandPushExpressionAssignPopPop
         [ (tLiteralBoolean)
         | tLiteralBoolean:
         oOperandPushBoolean
         ] or >
         }
         [ (tAssignBoolean)
         | tAssignBoolean:
         @OperandAssignBooleanPopPop
          @OperandConvertJumpConditionToData
           [ oOperandIsJumpCondition (no)
           | no:
           ] or >
           >>
          ;OperandConvertJumpConditionToData
          oOperandSetLength(one)
          @EmitMove
           @OperandLeftOrRightIsTemp
            [ oOperandChooseMode (mManifest)
            | *:
            oOperandSwap
            [ oOperandChooseMode (mTempIndirect)
            | *:
            oOperandSwap
            >>no
           ;OperandLeftOrRightIsTemp
           [@OperandLeftOrRightIsTemp (no)
           | *:
           [ oOperandChooseMode (mManifest)
           | mManifest:
           oEmitDouble(iMov)
           ] or >
           >>
          ;EmitMove
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mManifest)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mTempIndirect)
           | mTempIndirect:
           oTempFree
           ] or >
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          >>
         ;OperandAssignBooleanPopPop
         ] or >
         >>
        ;OperandPushExpressionAssignPopPop
        >>
       ;AssignStmt
       ] or >
       }
       [ (tIfMerge)
       | *:
       ] or >
       >>
      ;Block
      >>
     ;Statements
     [ (tIfMerge)
     | tIfMerge:
     oEmitUnconditionalForwardBranch
     oFixAndFreeShuntList
     oOperandPop
     oFixPushLastAddress
     oEmitMergeSourceCoordinate
     @Statements
      @Block
       [ (tTrapBegin)
       | tTrapBegin:
       @TrapStmt
        oEmitSourceCoordinate
        [ (tLiteralAddress)
        | tLiteralAddress:
        @OperandPushVariable
         oOperandPushVariable
         [ (tVarParm)
         | *:
         [ (tVarParm)
         | *:
         [ (tVarParm)
         | *:
         >>
        ;OperandPushVariable
        oOperandPushCopy
        @OperandForceToStack
         [ oOperandChooseLength (two)
         | two:
         ] or >
         oEmitSingle(iPush)
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStatic)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         oOperandPushMode(mStack)
         >>
        ;OperandForceToStack
        oOperandPop
        ?tVarParm (tVarParm)
        ?tParmEnd (tParmEnd)
        [ (tTrap)
        | tTrap:
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        oOperandPushTrap
        oEmitSingle(iCall)
        oOperandPop
        oOperandPushMode(mStackReg)
        oOperandSetLength(two)
        oOperandPushMode(mManifest)
        oOperandSetLength(two)
        oOperandSetValue(four)
        oEmitDouble(iAdd)
        oOperandPop
        oOperandPop
        ] or >
        ] or >
        >>
       ;TrapStmt
       ] or >
       }
       [ (tWriteBegin)
       | tWriteBegin:
       @WriteProc
        oEmitSourceCoordinate
        [ (tTrapBegin)
        | *:
        @WriteParameter
         ?tTrapBegin (tTrapBegin)
         ?tLiteralAddress (tLiteralAddress)
         @OperandPushVariable
          oOperandPushVariable
          [ (tVarParm)
          | *:
          [ (tVarParm)
          | *:
          [ (tVarParm)
          | *:
          >>
         ;OperandPushVariable
         @OperandForceToStack
          [ oOperandChooseLength (two)
          | two:
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tVarParm (tVarParm)
         ?tParmEnd (tParmEnd)
         @OperandPushExpression
          [ (tSkipString)
          | tSkipString:
          oEmitNone(iData)
          ?tStringData (tStringData)
          oEmitString
          oEmitNone(iText)
          ] or >
          }
          [ (tLiteralAddress)
          | tLiteralAddress:
          @OperandPushVariable
           oOperandPushVariable
           [ (tFetchChar)
           | *:
           [ (tFetchChar)
           | *:
           [ (tFetchChar)
           | tFetchChar:
           oOperandSetLength(regCX)
           ] or >
           >>
          ;OperandPushVariable
          ] or >
          }
          [ (tParmEnd)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         [ (tParmEnd)
         | *:
         @OperandForceToStack
          [ oOperandChooseLength (regCX)
          | regCX:
          @OperandForceAddressIntoTemp
           [ oOperandChooseMode (mStatic)
           | mStatic:
           @OperandPushTempWord
            oTempAllocate
            oOperandPushTemp
            oOperandSetValue(zero)
            oOperandSetLength(two)
            >>
           ;OperandPushTempWord
           oOperandSwap
           oEmitDouble(iLoada)
           oOperandPop
           ] or >
           oOperandSetLength(two)
           >>
          ;OperandForceAddressIntoTemp
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mTemp)
           | mTemp:
           oTempFree
           ] or >
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tParmEnd (tParmEnd)
         @OperandPushExpression
          [ (tLiteralInteger)
          | tLiteralInteger:
          oOperandPushInteger
          ] or >
          }
          [ (tParmEnd)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         @OperandForceToStack
          [ oOperandChooseLength (two)
          | two:
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mManifest)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tParmEnd (tParmEnd)
         ?tTrap (tTrap)
         oOperandPushTrap
         oEmitSingle(iCall)
         oOperandPop
         oOperandPushMode(mStackReg)
         oOperandSetLength(two)
         oOperandPushMode(mManifest)
         oOperandSetLength(two)
         oOperandSetValue(twelve)
         oEmitDouble(iAdd)
         oOperandPop
         oOperandPop
         >>
        ;WriteParameter
        }
        [ (tWriteEnd)
        | tWriteEnd:
        ] or >
        >>
       ;WriteProc
       ] or >
       }
       [ (tTrapBegin)
       | tTrapBegin:
       @TrapStmt
        oEmitSourceCoordinate
        [ (tLiteralAddress)
        | tLiteralAddress:
        @OperandPushVariable
         oOperandPushVariable
         [ (tVarParm)
         | *:
         [ (tVarParm)
         | *:
         [ (tVarParm)
         | *:
         >>
        ;OperandPushVariable
        oOperandPushCopy
        @OperandForceToStack
         [ oOperandChooseLength (two)
         | two:
         ] or >
         oEmitSingle(iPush)
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStatic)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         oOperandPushMode(mStack)
         >>
        ;OperandForceToStack
        oOperandPop
        ?tVarParm (tVarParm)
        ?tParmEnd (tParmEnd)
        [ (tTrap)
        | tTrap:
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        oOperandPushTrap
        oEmitSingle(iCall)
        oOperandPop
        oOperandPushMode(mStackReg)
        oOperandSetLength(two)
        oOperandPushMode(mManifest)
        oOperandSetLength(two)
        oOperandSetValue(four)
        oEmitDouble(iAdd)
        oOperandPop
        oOperandPop
        ] or >
        ] or >
        >>
       ;TrapStmt
       ] or >
       }
       [ (tWriteBegin)
       | tWriteBegin:
       @WriteProc
        oEmitSourceCoordinate
        [ (tTrapBegin)
        | *:
        @WriteParameter
         ?tTrapBegin (tTrapBegin)
         ?tLiteralAddress (tLiteralAddress)
         @OperandPushVariable
          oOperandPushVariable
          [ (tVarParm)
          | *:
          [ (tVarParm)
          | *:
          [ (tVarParm)
          | *:
          >>
         ;OperandPushVariable
         @OperandForceToStack
          [ oOperandChooseLength (two)
          | two:
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tVarParm (tVarParm)
         ?tParmEnd (tParmEnd)
         @OperandPushExpression
          [ (tSkipString)
          | tSkipString:
          oEmitNone(iData)
          ?tStringData (tStringData)
          oEmitString
          oEmitNone(iText)
          ] or >
          }
          [ (tLiteralAddress)
          | tLiteralAddress:
          @OperandPushVariable
           oOperandPushVariable
           [ (tFetchChar)
           | *:
           [ (tFetchChar)
           | *:
           [ (tFetchChar)
           | tFetchChar:
           oOperandSetLength(regCX)
           ] or >
           >>
          ;OperandPushVariable
          ] or >
          }
          [ (tParmEnd)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         [ (tParmEnd)
         | *:
         @OperandForceToStack
          [ oOperandChooseLength (regCX)
          | regCX:
          @OperandForceAddressIntoTemp
           [ oOperandChooseMode (mStatic)
           | mStatic:
           @OperandPushTempWord
            oTempAllocate
            oOperandPushTemp
            oOperandSetValue(zero)
            oOperandSetLength(two)
            >>
           ;OperandPushTempWord
           oOperandSwap
           oEmitDouble(iLoada)
           oOperandPop
           ] or >
           oOperandSetLength(two)
           >>
          ;OperandForceAddressIntoTemp
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mTemp)
           | mTemp:
           oTempFree
           ] or >
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tParmEnd (tParmEnd)
         @OperandPushExpression
          [ (tLiteralInteger)
          | tLiteralInteger:
          oOperandPushInteger
          ] or >
          }
          [ (tParmEnd)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         @OperandForceToStack
          [ oOperandChooseLength (two)
          | two:
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mManifest)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tParmEnd (tParmEnd)
         ?tTrap (tTrap)
         oOperandPushTrap
         oEmitSingle(iCall)
         oOperandPop
         oOperandPushMode(mStackReg)
         oOperandSetLength(two)
         oOperandPushMode(mManifest)
         oOperandSetLength(two)
         oOperandSetValue(twelve)
         oEmitDouble(iAdd)
         oOperandPop
         oOperandPop
         >>
        ;WriteParameter
        }
        [ (tTrapBegin)
        | *:
        @WriteParameter
         ?tTrapBegin (tTrapBegin)
         ?tLiteralAddress (tLiteralAddress)
         @OperandPushVariable
          oOperandPushVariable
          [ (tVarParm)
          | *:
          [ (tVarParm)
          | *:
          [ (tVarParm)
          | *:
          >>
         ;OperandPushVariable
         @OperandForceToStack
          [ oOperandChooseLength (two)
          | two:
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tVarParm (tVarParm)
         ?tParmEnd (tParmEnd)
         @OperandPushExpression
          [ (tLiteralAddress)
          | tLiteralAddress:
          @OperandPushVariable
           oOperandPushVariable
           [ (tFetchInteger)
           | *:
           [ (tFetchInteger)
           | *:
           [ (tFetchInteger)
           | tFetchInteger:
           ] or >
           >>
          ;OperandPushVariable
          ] or >
          }
          [ (tParmEnd)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         [ (tParmEnd)
         | *:
         @OperandForceToStack
          [ oOperandChooseLength (two)
          | two:
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tParmEnd (tParmEnd)
         @OperandPushExpression
          [ (tLiteralInteger)
          | tLiteralInteger:
          oOperandPushInteger
          ] or >
          }
          [ (tParmEnd)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         @OperandForceToStack
          [ oOperandChooseLength (two)
          | two:
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mManifest)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tParmEnd (tParmEnd)
         ?tTrap (tTrap)
         oOperandPushTrap
         oEmitSingle(iCall)
         oOperandPop
         oOperandPushMode(mStackReg)
         oOperandSetLength(two)
         oOperandPushMode(mManifest)
         oOperandSetLength(two)
         oOperandSetValue(twelve)
         oEmitDouble(iAdd)
         oOperandPop
         oOperandPop
         >>
        ;WriteParameter
        }
        [ (tTrapBegin)
        | *:
        @WriteParameter
         ?tTrapBegin (tTrapBegin)
         ?tLiteralAddress (tLiteralAddress)
         @OperandPushVariable
          oOperandPushVariable
          [ (tVarParm)
          | *:
          [ (tVarParm)
          | *:
          [ (tVarParm)
          | *:
          >>
         ;OperandPushVariable
         @OperandForceToStack
          [ oOperandChooseLength (two)
          | two:
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tVarParm (tVarParm)
         ?tParmEnd (tParmEnd)
         @OperandPushExpression
          [ (tSkipString)
          | tSkipString:
          oEmitNone(iData)
          ?tStringData (tStringData)
          oEmitString
          oEmitNone(iText)
          ] or >
          }
          [ (tLiteralAddress)
          | tLiteralAddress:
          @OperandPushVariable
           oOperandPushVariable
           [ (tFetchChar)
           | *:
           [ (tFetchChar)
           | *:
           [ (tFetchChar)
           | tFetchChar:
           oOperandSetLength(regCX)
           ] or >
           >>
          ;OperandPushVariable
          ] or >
          }
          [ (tParmEnd)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         [ (tParmEnd)
         | *:
         @OperandForceToStack
          [ oOperandChooseLength (regCX)
          | regCX:
          @OperandForceAddressIntoTemp
           [ oOperandChooseMode (mStatic)
           | mStatic:
           @OperandPushTempWord
            oTempAllocate
            oOperandPushTemp
            oOperandSetValue(zero)
            oOperandSetLength(two)
            >>
           ;OperandPushTempWord
           oOperandSwap
           oEmitDouble(iLoada)
           oOperandPop
           ] or >
           oOperandSetLength(two)
           >>
          ;OperandForceAddressIntoTemp
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mTemp)
           | mTemp:
           oTempFree
           ] or >
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tParmEnd (tParmEnd)
         @OperandPushExpression
          [ (tLiteralInteger)
          | tLiteralInteger:
          oOperandPushInteger
          ] or >
          }
          [ (tParmEnd)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         @OperandForceToStack
          [ oOperandChooseLength (two)
          | two:
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mManifest)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tParmEnd (tParmEnd)
         ?tTrap (tTrap)
         oOperandPushTrap
         oEmitSingle(iCall)
         oOperandPop
         oOperandPushMode(mStackReg)
         oOperandSetLength(two)
         oOperandPushMode(mManifest)
         oOperandSetLength(two)
         oOperandSetValue(twelve)
         oEmitDouble(iAdd)
         oOperandPop
         oOperandPop
         >>
        ;WriteParameter
        }
        [ (tWriteEnd)
        | tWriteEnd:
        ] or >
        >>
       ;WriteProc
       ] or >
       }
       [ (tCallBegin)
       | tCallBegin:
       @CallStmt
        oEmitSourceCoordinate
        oOperandPushMode(mManifest)
        oOperandSetLength(two)
        oOperandSetValue(zero)
        [ (tCallEnd)
        | tCallEnd:
        ] or >
        oOperandPushProcedure
        oOperandSetMode(mProc)
        oEmitSingle(iCall)
        oOperandPop
        oOperandPushMode(mStackReg)
        oOperandSetLength(two)
        oOperandSwap
        oEmitDouble(iAdd)
        oOperandPop
        oOperandPop
        oEmitMergeSourceCoordinate
        >>
       ;CallStmt
       ] or >
       }
       [ (tWriteBegin)
       | tWriteBegin:
       @WriteProc
        oEmitSourceCoordinate
        [ (tTrapBegin)
        | *:
        @WriteParameter
         ?tTrapBegin (tTrapBegin)
         ?tLiteralAddress (tLiteralAddress)
         @OperandPushVariable
          oOperandPushVariable
          [ (tVarParm)
          | *:
          [ (tVarParm)
          | *:
          [ (tVarParm)
          | *:
          >>
         ;OperandPushVariable
         @OperandForceToStack
          [ oOperandChooseLength (two)
          | two:
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tVarParm (tVarParm)
         ?tParmEnd (tParmEnd)
         @OperandPushExpression
          [ (tSkipString)
          | tSkipString:
          oEmitNone(iData)
          ?tStringData (tStringData)
          oEmitString
          oEmitNone(iText)
          ] or >
          }
          [ (tLiteralAddress)
          | tLiteralAddress:
          @OperandPushVariable
           oOperandPushVariable
           [ (tFetchChar)
           | *:
           [ (tFetchChar)
           | *:
           [ (tFetchChar)
           | tFetchChar:
           oOperandSetLength(regCX)
           ] or >
           >>
          ;OperandPushVariable
          ] or >
          }
          [ (tParmEnd)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         [ (tParmEnd)
         | *:
         @OperandForceToStack
          [ oOperandChooseLength (regCX)
          | regCX:
          @OperandForceAddressIntoTemp
           [ oOperandChooseMode (mStatic)
           | mStatic:
           @OperandPushTempWord
            oTempAllocate
            oOperandPushTemp
            oOperandSetValue(zero)
            oOperandSetLength(two)
            >>
           ;OperandPushTempWord
           oOperandSwap
           oEmitDouble(iLoada)
           oOperandPop
           ] or >
           oOperandSetLength(two)
           >>
          ;OperandForceAddressIntoTemp
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mTemp)
           | mTemp:
           oTempFree
           ] or >
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tParmEnd (tParmEnd)
         @OperandPushExpression
          [ (tLiteralInteger)
          | tLiteralInteger:
          oOperandPushInteger
          ] or >
          }
          [ (tParmEnd)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         @OperandForceToStack
          [ oOperandChooseLength (two)
          | two:
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mManifest)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tParmEnd (tParmEnd)
         ?tTrap (tTrap)
         oOperandPushTrap
         oEmitSingle(iCall)
         oOperandPop
         oOperandPushMode(mStackReg)
         oOperandSetLength(two)
         oOperandPushMode(mManifest)
         oOperandSetLength(two)
         oOperandSetValue(twelve)
         oEmitDouble(iAdd)
         oOperandPop
         oOperandPop
         >>
        ;WriteParameter
        }
        [ (tTrapBegin)
        | *:
        @WriteParameter
         ?tTrapBegin (tTrapBegin)
         ?tLiteralAddress (tLiteralAddress)
         @OperandPushVariable
          oOperandPushVariable
          [ (tVarParm)
          | *:
          [ (tVarParm)
          | *:
          [ (tVarParm)
          | *:
          >>
         ;OperandPushVariable
         @OperandForceToStack
          [ oOperandChooseLength (two)
          | two:
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tVarParm (tVarParm)
         ?tParmEnd (tParmEnd)
         @OperandPushExpression
          [ (tLiteralAddress)
          | tLiteralAddress:
          @OperandPushVariable
           oOperandPushVariable
           [ (tFetchInteger)
           | *:
           [ (tFetchInteger)
           | *:
           [ (tFetchInteger)
           | tFetchInteger:
           ] or >
           >>
          ;OperandPushVariable
          ] or >
          }
          [ (tParmEnd)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         [ (tParmEnd)
         | *:
         @OperandForceToStack
          [ oOperandChooseLength (two)
          | two:
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tParmEnd (tParmEnd)
         @OperandPushExpression
          [ (tLiteralInteger)
          | tLiteralInteger:
          oOperandPushInteger
          ] or >
          }
          [ (tParmEnd)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         @OperandForceToStack
          [ oOperandChooseLength (two)
          | two:
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mManifest)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tParmEnd (tParmEnd)
         ?tTrap (tTrap)
         oOperandPushTrap
         oEmitSingle(iCall)
         oOperandPop
         oOperandPushMode(mStackReg)
         oOperandSetLength(two)
         oOperandPushMode(mManifest)
         oOperandSetLength(two)
         oOperandSetValue(twelve)
         oEmitDouble(iAdd)
         oOperandPop
         oOperandPop
         >>
        ;WriteParameter
        }
        [ (tTrapBegin)
        | *:
        @WriteParameter
         ?tTrapBegin (tTrapBegin)
         ?tLiteralAddress (tLiteralAddress)
         @OperandPushVariable
          oOperandPushVariable
          [ (tVarParm)
          | *:
          [ (tVarParm)
          | *:
          [ (tVarParm)
          | *:
          >>
         ;OperandPushVariable
         @OperandForceToStack
          [ oOperandChooseLength (two)
          | two:
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tVarParm (tVarParm)
         ?tParmEnd (tParmEnd)
         @OperandPushExpression
          [ (tSkipString)
          | tSkipString:
          oEmitNone(iData)
          ?tStringData (tStringData)
          oEmitString
          oEmitNone(iText)
          ] or >
          }
          [ (tLiteralAddress)
          | tLiteralAddress:
          @OperandPushVariable
           oOperandPushVariable
           [ (tFetchChar)
           | *:
           [ (tFetchChar)
           | *:
           [ (tFetchChar)
           | tFetchChar:
           oOperandSetLength(regCX)
           ] or >
           >>
          ;OperandPushVariable
          ] or >
          }
          [ (tParmEnd)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         [ (tParmEnd)
         | *:
         @OperandForceToStack
          [ oOperandChooseLength (regCX)
          | regCX:
          @OperandForceAddressIntoTemp
           [ oOperandChooseMode (mStatic)
           | mStatic:
           @OperandPushTempWord
            oTempAllocate
            oOperandPushTemp
            oOperandSetValue(zero)
            oOperandSetLength(two)
            >>
           ;OperandPushTempWord
           oOperandSwap
           oEmitDouble(iLoada)
           oOperandPop
           ] or >
           oOperandSetLength(two)
           >>
          ;OperandForceAddressIntoTemp
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mTemp)
           | mTemp:
           oTempFree
           ] or >
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tParmEnd (tParmEnd)
         @OperandPushExpression
          [ (tLiteralInteger)
          | tLiteralInteger:
          oOperandPushInteger
          ] or >
          }
          [ (tParmEnd)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         @OperandForceToStack
          [ oOperandChooseLength (two)
          | two:
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mManifest)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tParmEnd (tParmEnd)
         ?tTrap (tTrap)
         oOperandPushTrap
         oEmitSingle(iCall)
         oOperandPop
         oOperandPushMode(mStackReg)
         oOperandSetLength(two)
         oOperandPushMode(mManifest)
         oOperandSetLength(two)
         oOperandSetValue(twelve)
         oEmitDouble(iAdd)
         oOperandPop
         oOperandPop
         >>
        ;WriteParameter
        }
        [ (tTrapBegin)
        | *:
        @WriteParameter
         ?tTrapBegin (tTrapBegin)
         ?tLiteralAddress (tLiteralAddress)
         @OperandPushVariable
          oOperandPushVariable
          [ (tVarParm)
          | *:
          [ (tVarParm)
          | *:
          [ (tVarParm)
          | *:
          >>
         ;OperandPushVariable
         @OperandForceToStack
          [ oOperandChooseLength (two)
          | two:
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tVarParm (tVarParm)
         ?tParmEnd (tParmEnd)
         @OperandPushExpression
          [ (tLiteralAddress)
          | tLiteralAddress:
          @OperandPushVariable
           oOperandPushVariable
           [ (tFetchInteger)
           | *:
           [ (tFetchInteger)
           | *:
           [ (tFetchInteger)
           | tFetchInteger:
           ] or >
           >>
          ;OperandPushVariable
          ] or >
          }
          [ (tParmEnd)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         [ (tParmEnd)
         | *:
         @OperandForceToStack
          [ oOperandChooseLength (two)
          | two:
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tParmEnd (tParmEnd)
         @OperandPushExpression
          [ (tLiteralInteger)
          | tLiteralInteger:
          oOperandPushInteger
          ] or >
          }
          [ (tParmEnd)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         @OperandForceToStack
          [ oOperandChooseLength (two)
          | two:
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mManifest)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tParmEnd (tParmEnd)
         ?tTrap (tTrap)
         oOperandPushTrap
         oEmitSingle(iCall)
         oOperandPop
         oOperandPushMode(mStackReg)
         oOperandSetLength(two)
         oOperandPushMode(mManifest)
         oOperandSetLength(two)
         oOperandSetValue(twelve)
         oEmitDouble(iAdd)
         oOperandPop
         oOperandPop
         >>
        ;WriteParameter
        }
        [ (tTrapBegin)
        | *:
        @WriteParameter
         ?tTrapBegin (tTrapBegin)
         ?tLiteralAddress (tLiteralAddress)
         @OperandPushVariable
          oOperandPushVariable
          [ (tVarParm)
          | *:
          [ (tVarParm)
          | *:
          [ (tVarParm)
          | *:
          >>
         ;OperandPushVariable
         @OperandForceToStack
          [ oOperandChooseLength (two)
          | two:
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tVarParm (tVarParm)
         ?tParmEnd (tParmEnd)
         @OperandPushExpression
          [ (tSkipString)
          | tSkipString:
          oEmitNone(iData)
          ?tStringData (tStringData)
          oEmitString
          oEmitNone(iText)
          ] or >
          }
          [ (tLiteralAddress)
          | tLiteralAddress:
          @OperandPushVariable
           oOperandPushVariable
           [ (tFetchChar)
           | *:
           [ (tFetchChar)
           | *:
           [ (tFetchChar)
           | tFetchChar:
           oOperandSetLength(regCX)
           ] or >
           >>
          ;OperandPushVariable
          ] or >
          }
          [ (tParmEnd)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         [ (tParmEnd)
         | *:
         @OperandForceToStack
          [ oOperandChooseLength (regCX)
          | regCX:
          @OperandForceAddressIntoTemp
           [ oOperandChooseMode (mStatic)
           | mStatic:
           @OperandPushTempWord
            oTempAllocate
            oOperandPushTemp
            oOperandSetValue(zero)
            oOperandSetLength(two)
            >>
           ;OperandPushTempWord
           oOperandSwap
           oEmitDouble(iLoada)
           oOperandPop
           ] or >
           oOperandSetLength(two)
           >>
          ;OperandForceAddressIntoTemp
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mTemp)
           | mTemp:
           oTempFree
           ] or >
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tParmEnd (tParmEnd)
         @OperandPushExpression
          [ (tLiteralInteger)
          | tLiteralInteger:
          oOperandPushInteger
          ] or >
          }
          [ (tParmEnd)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         @OperandForceToStack
          [ oOperandChooseLength (two)
          | two:
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mManifest)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tParmEnd (tParmEnd)
         ?tTrap (tTrap)
         oOperandPushTrap
         oEmitSingle(iCall)
         oOperandPop
         oOperandPushMode(mStackReg)
         oOperandSetLength(two)
         oOperandPushMode(mManifest)
         oOperandSetLength(two)
         oOperandSetValue(twelve)
         oEmitDouble(iAdd)
         oOperandPop
         oOperandPop
         >>
        ;WriteParameter
        }
        [ (tWriteEnd)
        | tWriteEnd:
        ] or >
        >>
       ;WriteProc
       ] or >
       }
       [ (tTrapBegin)
       | tTrapBegin:
       @TrapStmt
        oEmitSourceCoordinate
        [ (tLiteralAddress)
        | tLiteralAddress:
        @OperandPushVariable
         oOperandPushVariable
         [ (tVarParm)
         | *:
         [ (tVarParm)
         | *:
         [ (tVarParm)
         | *:
         >>
        ;OperandPushVariable
        oOperandPushCopy
        @OperandForceToStack
         [ oOperandChooseLength (two)
         | two:
         ] or >
         oEmitSingle(iPush)
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStatic)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         oOperandPushMode(mStack)
         >>
        ;OperandForceToStack
        oOperandPop
        ?tVarParm (tVarParm)
        ?tParmEnd (tParmEnd)
        [ (tTrap)
        | tTrap:
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        oOperandPushTrap
        oEmitSingle(iCall)
        oOperandPop
        oOperandPushMode(mStackReg)
        oOperandSetLength(two)
        oOperandPushMode(mManifest)
        oOperandSetLength(two)
        oOperandSetValue(four)
        oEmitDouble(iAdd)
        oOperandPop
        oOperandPop
        ] or >
        ] or >
        >>
       ;TrapStmt
       ] or >
       }
       [ (tIfBegin)
       | tIfBegin:
       @IfStmt
        oEmitSourceCoordinate
        @OperandPushBooleanControlExpression
         @OperandPushExpression
          [ (tLiteralAddress)
          | tLiteralAddress:
          @OperandPushVariable
           oOperandPushVariable
           [ (tFetchInteger)
           | *:
           [ (tFetchInteger)
           | *:
           [ (tFetchInteger)
           | tFetchInteger:
           ] or >
           >>
          ;OperandPushVariable
          ] or >
          }
          [ (tLiteralAddress)
          | tLiteralAddress:
          @OperandPushVariable
           oOperandPushVariable
           [ (tFetchInteger)
           | *:
           [ (tFetchInteger)
           | *:
           [ (tFetchInteger)
           | tFetchInteger:
           ] or >
           >>
          ;OperandPushVariable
          ] or >
          }
          [ (tGT)
          | tGT:
          @OperandGreaterPop
           [ oOperandCompareLeftAndRight (no)
           | no:
           [ oOperandChooseManifestValue ()
           | *:
           oOperandSwap
           [ oOperandChooseManifestValue ()
           | *:
           oOperandSwap
           @EmitCmp
            oOperandSwap
            [ oOperandChooseMode (mStatic)
            | *:
            oOperandSwap
            @OperandLeftOrRightIsTemp
             [ oOperandChooseMode (mStatic)
             | *:
             oOperandSwap
             [ oOperandChooseMode (mStatic)
             | *:
             oOperandSwap
             >>no
            ;OperandLeftOrRightIsTemp
            [@OperandLeftOrRightIsTemp (no)
            | *:
            [ oOperandChooseMode (mStatic)
            | *:
            oOperandPushCopy
            @OperandForceIntoTemp
             [ oOperandChooseMode (mStatic)
             | *:
             [ oOperandChooseLength (two)
             | two:
             @OperandPushTempWord
              oTempAllocate
              oOperandPushTemp
              oOperandSetValue(zero)
              oOperandSetLength(two)
              >>
             ;OperandPushTempWord
             oOperandSwap
             oEmitDouble(iMov)
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mStatic)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandSetMode(mTemp)
             ] or >
             >>
            ;OperandForceIntoTemp
            oOperandSwapLeftAndDest
            oEmitDouble(iCmp)
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mTemp)
             | mTemp:
             oTempFree
             ] or >
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            oOperandSwap
            >>
           ;EmitCmp
           @OperandPopAndFreeTemp
            [ oOperandChooseMode (mStatic)
            | *:
            oOperandPop
            >>
           ;OperandPopAndFreeTemp
           @OperandPopAndFreeTemp
            [ oOperandChooseMode (mStatic)
            | *:
            oOperandPop
            >>
           ;OperandPopAndFreeTemp
           oOperandPushJumpCondition(iJgt)
           ] or >
           >>
          ;OperandGreaterPop
          ] or >
          }
          [ (tIfThen)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         @OperandForceToJumpCondition
          [ oOperandIsJumpCondition (yes)
          | yes:
          ] or >
          >>
         ;OperandForceToJumpCondition
         >>
        ;OperandPushBooleanControlExpression
        ?tIfThen (tIfThen)
        [ oOperandChooseJumpCondition (iJgt)
        | *:
        @OperandComplementJumpCondition
         [ oOperandChooseJumpCondition (iJgt)
         | *:
         oOperandComplementJumpCondition
         >>
        ;OperandComplementJumpCondition
        @OperandInfixOr
         @OperandForceToJumpCondition
          [ oOperandIsJumpCondition (yes)
          | yes:
          ] or >
          >>
         ;OperandForceToJumpCondition
         [ oOperandChooseJumpCondition (iJle)
         | *:
         oEmitConditionalForwardBranch
         oFixAndFreeFalseBranches
         oFixPushLastAddress
         oOperandMergeShuntsWithAddress
         oFixPopAddress
         >>
        ;OperandInfixOr
        @Statements
         @Block
          [ (tWriteBegin)
          | tWriteBegin:
          @WriteProc
           oEmitSourceCoordinate
           [ (tTrapBegin)
           | *:
           @WriteParameter
            ?tTrapBegin (tTrapBegin)
            ?tLiteralAddress (tLiteralAddress)
            @OperandPushVariable
             oOperandPushVariable
             [ (tVarParm)
             | *:
             [ (tVarParm)
             | *:
             [ (tVarParm)
             | *:
             >>
            ;OperandPushVariable
            @OperandForceToStack
             [ oOperandChooseLength (two)
             | two:
             ] or >
             oEmitSingle(iPush)
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mStatic)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandPushMode(mStack)
             >>
            ;OperandForceToStack
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStack)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            ?tVarParm (tVarParm)
            ?tParmEnd (tParmEnd)
            @OperandPushExpression
             [ (tSkipString)
             | tSkipString:
             oEmitNone(iData)
             ?tStringData (tStringData)
             oEmitString
             oEmitNone(iText)
             ] or >
             }
             [ (tLiteralAddress)
             | tLiteralAddress:
             @OperandPushVariable
              oOperandPushVariable
              [ (tFetchChar)
              | *:
              [ (tFetchChar)
              | *:
              [ (tFetchChar)
              | tFetchChar:
              oOperandSetLength(regCX)
              ] or >
              >>
             ;OperandPushVariable
             ] or >
             }
             [ (tParmEnd)
             | *:
             ] or >
             >>
            ;OperandPushExpression
            [ (tParmEnd)
            | *:
            @OperandForceToStack
             [ oOperandChooseLength (regCX)
             | regCX:
             @OperandForceAddressIntoTemp
              [ oOperandChooseMode (mStatic)
              | mStatic:
              @OperandPushTempWord
               oTempAllocate
               oOperandPushTemp
               oOperandSetValue(zero)
               oOperandSetLength(two)
               >>
              ;OperandPushTempWord
              oOperandSwap
              oEmitDouble(iLoada)
              oOperandPop
              ] or >
              oOperandSetLength(two)
              >>
             ;OperandForceAddressIntoTemp
             ] or >
             oEmitSingle(iPush)
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mTemp)
              | mTemp:
              oTempFree
              ] or >
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandPushMode(mStack)
             >>
            ;OperandForceToStack
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStack)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            ?tParmEnd (tParmEnd)
            @OperandPushExpression
             [ (tLiteralInteger)
             | tLiteralInteger:
             oOperandPushInteger
             ] or >
             }
             [ (tParmEnd)
             | *:
             ] or >
             >>
            ;OperandPushExpression
            @OperandForceToStack
             [ oOperandChooseLength (two)
             | two:
             ] or >
             oEmitSingle(iPush)
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mManifest)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandPushMode(mStack)
             >>
            ;OperandForceToStack
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStack)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            ?tParmEnd (tParmEnd)
            ?tTrap (tTrap)
            oOperandPushTrap
            oEmitSingle(iCall)
            oOperandPop
            oOperandPushMode(mStackReg)
            oOperandSetLength(two)
            oOperandPushMode(mManifest)
            oOperandSetLength(two)
            oOperandSetValue(twelve)
            oEmitDouble(iAdd)
            oOperandPop
            oOperandPop
            >>
           ;WriteParameter
           }
           [ (tWriteEnd)
           | tWriteEnd:
           ] or >
           >>
          ;WriteProc
          ] or >
          }
          [ (tCallBegin)
          | tCallBegin:
          @CallStmt
           oEmitSourceCoordinate
           oOperandPushMode(mManifest)
           oOperandSetLength(two)
           oOperandSetValue(zero)
           [ (tCallEnd)
           | tCallEnd:
           ] or >
           oOperandPushProcedure
           oOperandSetMode(mProc)
           oEmitSingle(iCall)
           oOperandPop
           oOperandPushMode(mStackReg)
           oOperandSetLength(two)
           oOperandSwap
           oEmitDouble(iAdd)
           oOperandPop
           oOperandPop
           oEmitMergeSourceCoordinate
           >>
          ;CallStmt
          ] or >
          }
          [ (tWriteBegin)
          | tWriteBegin:
          @WriteProc
           oEmitSourceCoordinate
           [ (tTrapBegin)
           | *:
           @WriteParameter
            ?tTrapBegin (tTrapBegin)
            ?tLiteralAddress (tLiteralAddress)
            @OperandPushVariable
             oOperandPushVariable
             [ (tVarParm)
             | *:
             [ (tVarParm)
             | *:
             [ (tVarParm)
             | *:
             >>
            ;OperandPushVariable
            @OperandForceToStack
             [ oOperandChooseLength (two)
             | two:
             ] or >
             oEmitSingle(iPush)
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mStatic)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandPushMode(mStack)
             >>
            ;OperandForceToStack
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStack)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            ?tVarParm (tVarParm)
            ?tParmEnd (tParmEnd)
            @OperandPushExpression
             [ (tSkipString)
             | tSkipString:
             oEmitNone(iData)
             ?tStringData (tStringData)
             oEmitString
             oEmitNone(iText)
             ] or >
             }
             [ (tLiteralAddress)
             | tLiteralAddress:
             @OperandPushVariable
              oOperandPushVariable
              [ (tFetchChar)
              | *:
              [ (tFetchChar)
              | *:
              [ (tFetchChar)
              | tFetchChar:
              oOperandSetLength(regCX)
              ] or >
              >>
             ;OperandPushVariable
             ] or >
             }
             [ (tParmEnd)
             | *:
             ] or >
             >>
            ;OperandPushExpression
            [ (tParmEnd)
            | *:
            @OperandForceToStack
             [ oOperandChooseLength (regCX)
             | regCX:
             @OperandForceAddressIntoTemp
              [ oOperandChooseMode (mStatic)
              | mStatic:
              @OperandPushTempWord
               oTempAllocate
               oOperandPushTemp
               oOperandSetValue(zero)
               oOperandSetLength(two)
               >>
              ;OperandPushTempWord
              oOperandSwap
              oEmitDouble(iLoada)
              oOperandPop
              ] or >
              oOperandSetLength(two)
              >>
             ;OperandForceAddressIntoTemp
             ] or >
             oEmitSingle(iPush)
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mTemp)
              | mTemp:
              oTempFree
              ] or >
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandPushMode(mStack)
             >>
            ;OperandForceToStack
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStack)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            ?tParmEnd (tParmEnd)
            @OperandPushExpression
             [ (tLiteralInteger)
             | tLiteralInteger:
             oOperandPushInteger
             ] or >
             }
             [ (tParmEnd)
             | *:
             ] or >
             >>
            ;OperandPushExpression
            @OperandForceToStack
             [ oOperandChooseLength (two)
             | two:
             ] or >
             oEmitSingle(iPush)
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mManifest)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandPushMode(mStack)
             >>
            ;OperandForceToStack
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStack)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            ?tParmEnd (tParmEnd)
            ?tTrap (tTrap)
            oOperandPushTrap
            oEmitSingle(iCall)
            oOperandPop
            oOperandPushMode(mStackReg)
            oOperandSetLength(two)
            oOperandPushMode(mManifest)
            oOperandSetLength(two)
            oOperandSetValue(twelve)
            oEmitDouble(iAdd)
            oOperandPop
            oOperandPop
            >>
           ;WriteParameter
           }
           [ (tWriteEnd)
           | tWriteEnd:
           ] or >
           >>
          ;WriteProc
          ] or >
          }
          [ (tTrapBegin)
          | tTrapBegin:
          @TrapStmt
           oEmitSourceCoordinate
           [ (tLiteralAddress)
           | tLiteralAddress:
           @OperandPushVariable
            oOperandPushVariable
            [ (tVarParm)
            | *:
            [ (tVarParm)
            | *:
            [ (tVarParm)
            | *:
            >>
           ;OperandPushVariable
           oOperandPushCopy
           @OperandForceToStack
            [ oOperandChooseLength (two)
            | two:
            ] or >
            oEmitSingle(iPush)
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStatic)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            oOperandPushMode(mStack)
            >>
           ;OperandForceToStack
           oOperandPop
           ?tVarParm (tVarParm)
           ?tParmEnd (tParmEnd)
           [ (tTrap)
           | tTrap:
           @OperandPopAndFreeTemp
            [ oOperandChooseMode (mStatic)
            | *:
            oOperandPop
            >>
           ;OperandPopAndFreeTemp
           oOperandPushTrap
           oEmitSingle(iCall)
           oOperandPop
           oOperandPushMode(mStackReg)
           oOperandSetLength(two)
           oOperandPushMode(mManifest)
           oOperandSetLength(two)
           oOperandSetValue(four)
           oEmitDouble(iAdd)
           oOperandPop
           oOperandPop
           ] or >
           ] or >
           >>
          ;TrapStmt
          ] or >
          }
          [ (tIfMerge)
          | *:
          ] or >
          >>
         ;Block
         >>
        ;Statements
        [ (tIfMerge)
        | tIfMerge:
        oEmitUnconditionalForwardBranch
        oFixAndFreeShuntList
        oOperandPop
        oFixPushLastAddress
        oEmitMergeSourceCoordinate
        @Statements
         @Block
          [ (tIfBegin)
          | tIfBegin:
          @IfStmt
           oEmitSourceCoordinate
           @OperandPushBooleanControlExpression
            @OperandPushExpression
             [ (tLiteralAddress)
             | tLiteralAddress:
             @OperandPushVariable
              oOperandPushVariable
              [ (tFetchInteger)
              | *:
              [ (tFetchInteger)
              | *:
              [ (tFetchInteger)
              | tFetchInteger:
              ] or >
              >>
             ;OperandPushVariable
             ] or >
             }
             [ (tLiteralAddress)
             | tLiteralAddress:
             @OperandPushVariable
              oOperandPushVariable
              [ (tFetchInteger)
              | *:
              [ (tFetchInteger)
              | *:
              [ (tFetchInteger)
              | tFetchInteger:
              ] or >
              >>
             ;OperandPushVariable
             ] or >
             }
             [ (tGT)
             | tGT:
             @OperandGreaterPop
              [ oOperandCompareLeftAndRight (no)
              | no:
              [ oOperandChooseManifestValue ()
              | *:
              oOperandSwap
              [ oOperandChooseManifestValue ()
              | *:
              oOperandSwap
              @EmitCmp
               oOperandSwap
               [ oOperandChooseMode (mStatic)
               | *:
               oOperandSwap
               @OperandLeftOrRightIsTemp
                [ oOperandChooseMode (mStatic)
                | *:
                oOperandSwap
                [ oOperandChooseMode (mStatic)
                | *:
                oOperandSwap
                >>no
               ;OperandLeftOrRightIsTemp
               [@OperandLeftOrRightIsTemp (no)
               | *:
               [ oOperandChooseMode (mStatic)
               | *:
               oOperandPushCopy
               @OperandForceIntoTemp
                [ oOperandChooseMode (mStatic)
                | *:
                [ oOperandChooseLength (two)
                | two:
                @OperandPushTempWord
                 oTempAllocate
                 oOperandPushTemp
                 oOperandSetValue(zero)
                 oOperandSetLength(two)
                 >>
                ;OperandPushTempWord
                oOperandSwap
                oEmitDouble(iMov)
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mStatic)
                 | *:
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                oOperandSetMode(mTemp)
                ] or >
                >>
               ;OperandForceIntoTemp
               oOperandSwapLeftAndDest
               oEmitDouble(iCmp)
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mTemp)
                | mTemp:
                oTempFree
                ] or >
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               oOperandSwap
               >>
              ;EmitCmp
              @OperandPopAndFreeTemp
               [ oOperandChooseMode (mStatic)
               | *:
               oOperandPop
               >>
              ;OperandPopAndFreeTemp
              @OperandPopAndFreeTemp
               [ oOperandChooseMode (mStatic)
               | *:
               oOperandPop
               >>
              ;OperandPopAndFreeTemp
              oOperandPushJumpCondition(iJgt)
              ] or >
              >>
             ;OperandGreaterPop
             ] or >
             }
             [ (tIfThen)
             | *:
             ] or >
             >>
            ;OperandPushExpression
            @OperandForceToJumpCondition
             [ oOperandIsJumpCondition (yes)
             | yes:
             ] or >
             >>
            ;OperandForceToJumpCondition
            >>
           ;OperandPushBooleanControlExpression
           ?tIfThen (tIfThen)
           [ oOperandChooseJumpCondition (iJgt)
           | *:
           @OperandComplementJumpCondition
            [ oOperandChooseJumpCondition (iJgt)
            | *:
            oOperandComplementJumpCondition
            >>
           ;OperandComplementJumpCondition
           @OperandInfixOr
            @OperandForceToJumpCondition
             [ oOperandIsJumpCondition (yes)
             | yes:
             ] or >
             >>
            ;OperandForceToJumpCondition
            [ oOperandChooseJumpCondition (iJle)
            | *:
            oEmitConditionalForwardBranch
            oFixAndFreeFalseBranches
            oFixPushLastAddress
            oOperandMergeShuntsWithAddress
            oFixPopAddress
            >>
           ;OperandInfixOr
           @Statements
            @Block
             [ (tIfBegin)
             | tIfBegin:
             @IfStmt
              oEmitSourceCoordinate
              @OperandPushBooleanControlExpression
               @OperandPushExpression
                [ (tLiteralAddress)
                | tLiteralAddress:
                @OperandPushVariable
                 oOperandPushVariable
                 [ (tFetchChar)
                 | *:
                 [ (tFetchChar)
                 | *:
                 [ (tFetchChar)
                 | tFetchChar:
                 oOperandSetLength(regCX)
                 ] or >
                 >>
                ;OperandPushVariable
                ] or >
                }
                [ (tSkipString)
                | tSkipString:
                oEmitNone(iData)
                ?tStringData (tStringData)
                oEmitString
                oEmitNone(iText)
                ] or >
                }
                [ (tLiteralAddress)
                | tLiteralAddress:
                @OperandPushVariable
                 oOperandPushVariable
                 [ (tFetchChar)
                 | *:
                 [ (tFetchChar)
                 | *:
                 [ (tFetchChar)
                 | tFetchChar:
                 oOperandSetLength(regCX)
                 ] or >
                 >>
                ;OperandPushVariable
                ] or >
                }
                [ (tStringEQ)
                | tStringEQ:
                @OperandStringEqualPop
                 @SaveTempRegsToStack
                  oOperandPushMode(mTemp)
                  oOperandSetLength(two)
                  oOperandSetRegnum(one)
                  oEmitSingle(iPush)
                  oOperandSetRegnum(two)
                  oEmitSingle(iPush)
                  oOperandSetRegnum(regCX)
                  oEmitSingle(iPush)
                  oOperandSetRegnum(four)
                  oEmitSingle(iPush)
                  oOperandPop
                  >>
                 ;SaveTempRegsToStack
                 @OperandForceAddressIntoTemp
                  [ oOperandChooseMode (mStatic)
                  | mStatic:
                  @OperandPushTempWord
                   oTempAllocate
                   oOperandPushTemp
                   oOperandSetValue(zero)
                   oOperandSetLength(two)
                   >>
                  ;OperandPushTempWord
                  oOperandSwap
                  oEmitDouble(iLoada)
                  oOperandPop
                  ] or >
                  oOperandSetLength(two)
                  >>
                 ;OperandForceAddressIntoTemp
                 @OperandForceToStack
                  [ oOperandChooseLength (two)
                  | two:
                  ] or >
                  oEmitSingle(iPush)
                  @OperandPopAndFreeTemp
                   [ oOperandChooseMode (mTemp)
                   | mTemp:
                   oTempFree
                   ] or >
                   oOperandPop
                   >>
                  ;OperandPopAndFreeTemp
                  oOperandPushMode(mStack)
                  >>
                 ;OperandForceToStack
                 @OperandPopAndFreeTemp
                  [ oOperandChooseMode (mStack)
                  | *:
                  oOperandPop
                  >>
                 ;OperandPopAndFreeTemp
                 @OperandForceAddressIntoTemp
                  [ oOperandChooseMode (mStatic)
                  | mStatic:
                  @OperandPushTempWord
                   oTempAllocate
                   oOperandPushTemp
                   oOperandSetValue(zero)
                   oOperandSetLength(two)
                   >>
                  ;OperandPushTempWord
                  oOperandSwap
                  oEmitDouble(iLoada)
                  oOperandPop
                  ] or >
                  oOperandSetLength(two)
                  >>
                 ;OperandForceAddressIntoTemp
                 @OperandForceToStack
                  [ oOperandChooseLength (two)
                  | two:
                  ] or >
                  oEmitSingle(iPush)
                  @OperandPopAndFreeTemp
                   [ oOperandChooseMode (mTemp)
                   | mTemp:
                   oTempFree
                   ] or >
                   oOperandPop
                   >>
                  ;OperandPopAndFreeTemp
                  oOperandPushMode(mStack)
                  >>
                 ;OperandForceToStack
                 @OperandPopAndFreeTemp
                  [ oOperandChooseMode (mStack)
                  | *:
                  oOperandPop
                  >>
                 ;OperandPopAndFreeTemp
                 oOperandPushMode(mTrap)
                 oOperandSetValue(trStringEqual)
                 oOperandSetLength(two)
                 oEmitSingle(iCall)
                 oOperandPop
                 oOperandPushMode(mStackReg)
                 oOperandSetLength(two)
                 oOperandPushMode(mManifest)
                 oOperandSetLength(two)
                 oOperandSetValue(eight)
                 oEmitDouble(iAdd)
                 oOperandPop
                 oOperandPop
                 oOperandPushMode(mScratchReg1)
                 oOperandSetLength(two)
                 oOperandPushMode(mResultReg)
                 oOperandSetLength(two)
                 oEmitDouble(iMov)
                 oOperandPop
                 @RestoreTempRegsFromStack
                  oOperandPushMode(mTemp)
                  oOperandSetLength(two)
                  oOperandSetRegnum(four)
                  oEmitSingle(iPop)
                  oOperandSetRegnum(regCX)
                  oEmitSingle(iPop)
                  oOperandSetRegnum(two)
                  oEmitSingle(iPop)
                  oOperandSetRegnum(one)
                  oEmitSingle(iPop)
                  oOperandPop
                  >>
                 ;RestoreTempRegsFromStack
                 @OperandForceIntoTemp
                  [ oOperandChooseMode (mScratchReg1)
                  | *:
                  [ oOperandChooseLength (two)
                  | two:
                  @OperandPushTempWord
                   oTempAllocate
                   oOperandPushTemp
                   oOperandSetValue(zero)
                   oOperandSetLength(two)
                   >>
                  ;OperandPushTempWord
                  oOperandSwap
                  oEmitDouble(iMov)
                  @OperandPopAndFreeTemp
                   [ oOperandChooseMode (mScratchReg1)
                   | *:
                   oOperandPop
                   >>
                  ;OperandPopAndFreeTemp
                  oOperandSetMode(mTemp)
                  ] or >
                  >>
                 ;OperandForceIntoTemp
                 oOperandSetLength(one)
                 >>
                ;OperandStringEqualPop
                ] or >
                }
                [ (tIfThen)
                | *:
                ] or >
                >>
               ;OperandPushExpression
               @OperandForceToJumpCondition
                [ oOperandIsJumpCondition (no)
                | *:
                [ oOperandChooseManifestValue ()
                | *:
                @EmitTst
                 [ oOperandChooseLength (one)
                 | one:
                 oOperandPushMode(mManifest)
                 oOperandSetValue(zero)
                 oOperandSetLength(one)
                 ] or >
                 @EmitCmp
                  oOperandSwap
                  [ oOperandChooseMode (mTemp)
                  | *:
                  oOperandSwap
                  @OperandLeftOrRightIsTemp
                   [ oOperandChooseMode (mManifest)
                   | *:
                   oOperandSwap
                   [ oOperandChooseMode (mTemp)
                   | mTemp:
                   oOperandSwap
                   >>yes
                  ;OperandLeftOrRightIsTemp
                  [@OperandLeftOrRightIsTemp (yes)
                  | yes:
                  oEmitDouble(iCmp)
                  ] or >
                  >>
                 ;EmitCmp
                 oOperandPop
                 >>
                ;EmitTst
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mTemp)
                 | mTemp:
                 oTempFree
                 ] or >
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                oOperandPushJumpCondition(iJne)
                >>
               ;OperandForceToJumpCondition
               >>
              ;OperandPushBooleanControlExpression
              ?tIfThen (tIfThen)
              [ oOperandChooseJumpCondition (iJne)
              | *:
              @OperandComplementJumpCondition
               [ oOperandChooseJumpCondition (iJne)
               | *:
               oOperandComplementJumpCondition
               >>
              ;OperandComplementJumpCondition
              @OperandInfixOr
               @OperandForceToJumpCondition
                [ oOperandIsJumpCondition (yes)
                | yes:
                ] or >
                >>
               ;OperandForceToJumpCondition
               [ oOperandChooseJumpCondition (iJeq)
               | *:
               oEmitConditionalForwardBranch
               oFixAndFreeFalseBranches
               oFixPushLastAddress
               oOperandMergeShuntsWithAddress
               oFixPopAddress
               >>
              ;OperandInfixOr
              @Statements
               @Block
                [ (tWriteBegin)
                | tWriteBegin:
                @WriteProc
                 oEmitSourceCoordinate
                 [ (tTrapBegin)
                 | *:
                 @WriteParameter
                  ?tTrapBegin (tTrapBegin)
                  ?tLiteralAddress (tLiteralAddress)
                  @OperandPushVariable
                   oOperandPushVariable
                   [ (tVarParm)
                   | *:
                   [ (tVarParm)
                   | *:
                   [ (tVarParm)
                   | *:
                   >>
                  ;OperandPushVariable
                  @OperandForceToStack
                   [ oOperandChooseLength (two)
                   | two:
                   ] or >
                   oEmitSingle(iPush)
                   @OperandPopAndFreeTemp
                    [ oOperandChooseMode (mStatic)
                    | *:
                    oOperandPop
                    >>
                   ;OperandPopAndFreeTemp
                   oOperandPushMode(mStack)
                   >>
                  ;OperandForceToStack
                  @OperandPopAndFreeTemp
                   [ oOperandChooseMode (mStack)
                   | *:
                   oOperandPop
                   >>
                  ;OperandPopAndFreeTemp
                  ?tVarParm (tVarParm)
                  ?tParmEnd (tParmEnd)
                  @OperandPushExpression
                   [ (tSkipString)
                   | tSkipString:
                   oEmitNone(iData)
                   ?tStringData (tStringData)
                   oEmitString
                   oEmitNone(iText)
                   ] or >
                   }
                   [ (tLiteralAddress)
                   | tLiteralAddress:
                   @OperandPushVariable
                    oOperandPushVariable
                    [ (tFetchChar)
                    | *:
                    [ (tFetchChar)
                    | *:
                    [ (tFetchChar)
                    | tFetchChar:
                    oOperandSetLength(regCX)
                    ] or >
                    >>
                   ;OperandPushVariable
                   ] or >
                   }
                   [ (tParmEnd)
                   | *:
                   ] or >
                   >>
                  ;OperandPushExpression
                  [ (tParmEnd)
                  | *:
                  @OperandForceToStack
                   [ oOperandChooseLength (regCX)
                   | regCX:
                   @OperandForceAddressIntoTemp
                    [ oOperandChooseMode (mStatic)
                    | mStatic:
                    @OperandPushTempWord
                     oTempAllocate
                     oOperandPushTemp
                     oOperandSetValue(zero)
                     oOperandSetLength(two)
                     >>
                    ;OperandPushTempWord
                    oOperandSwap
                    oEmitDouble(iLoada)
                    oOperandPop
                    ] or >
                    oOperandSetLength(two)
                    >>
                   ;OperandForceAddressIntoTemp
                   ] or >
                   oEmitSingle(iPush)
                   @OperandPopAndFreeTemp
                    [ oOperandChooseMode (mTemp)
                    | mTemp:
                    oTempFree
                    ] or >
                    oOperandPop
                    >>
                   ;OperandPopAndFreeTemp
                   oOperandPushMode(mStack)
                   >>
                  ;OperandForceToStack
                  @OperandPopAndFreeTemp
                   [ oOperandChooseMode (mStack)
                   | *:
                   oOperandPop
                   >>
                  ;OperandPopAndFreeTemp
                  ?tParmEnd (tParmEnd)
                  @OperandPushExpression
                   [ (tLiteralInteger)
                   | tLiteralInteger:
                   oOperandPushInteger
                   ] or >
                   }
                   [ (tParmEnd)
                   | *:
                   ] or >
                   >>
                  ;OperandPushExpression
                  @OperandForceToStack
                   [ oOperandChooseLength (two)
                   | two:
                   ] or >
                   oEmitSingle(iPush)
                   @OperandPopAndFreeTemp
                    [ oOperandChooseMode (mManifest)
                    | *:
                    oOperandPop
                    >>
                   ;OperandPopAndFreeTemp
                   oOperandPushMode(mStack)
                   >>
                  ;OperandForceToStack
                  @OperandPopAndFreeTemp
                   [ oOperandChooseMode (mStack)
                   | *:
                   oOperandPop
                   >>
                  ;OperandPopAndFreeTemp
                  ?tParmEnd (tParmEnd)
                  ?tTrap (tTrap)
                  oOperandPushTrap
                  oEmitSingle(iCall)
                  oOperandPop
                  oOperandPushMode(mStackReg)
                  oOperandSetLength(two)
                  oOperandPushMode(mManifest)
                  oOperandSetLength(two)
                  oOperandSetValue(twelve)
                  oEmitDouble(iAdd)
                  oOperandPop
                  oOperandPop
                  >>
                 ;WriteParameter
                 }
                 [ (tWriteEnd)
                 | tWriteEnd:
                 ] or >
                 >>
                ;WriteProc
                ] or >
                }
                [ (tTrapBegin)
                | tTrapBegin:
                @TrapStmt
                 oEmitSourceCoordinate
                 [ (tLiteralAddress)
                 | tLiteralAddress:
                 @OperandPushVariable
                  oOperandPushVariable
                  [ (tVarParm)
                  | *:
                  [ (tVarParm)
                  | *:
                  [ (tVarParm)
                  | *:
                  >>
                 ;OperandPushVariable
                 oOperandPushCopy
                 @OperandForceToStack
                  [ oOperandChooseLength (two)
                  | two:
                  ] or >
                  oEmitSingle(iPush)
                  @OperandPopAndFreeTemp
                   [ oOperandChooseMode (mStatic)
                   | *:
                   oOperandPop
                   >>
                  ;OperandPopAndFreeTemp
                  oOperandPushMode(mStack)
                  >>
                 ;OperandForceToStack
                 oOperandPop
                 ?tVarParm (tVarParm)
                 ?tParmEnd (tParmEnd)
                 [ (tTrap)
                 | tTrap:
                 @OperandPopAndFreeTemp
                  [ oOperandChooseMode (mStatic)
                  | *:
                  oOperandPop
                  >>
                 ;OperandPopAndFreeTemp
                 oOperandPushTrap
                 oEmitSingle(iCall)
                 oOperandPop
                 oOperandPushMode(mStackReg)
                 oOperandSetLength(two)
                 oOperandPushMode(mManifest)
                 oOperandSetLength(two)
                 oOperandSetValue(four)
                 oEmitDouble(iAdd)
                 oOperandPop
                 oOperandPop
                 ] or >
                 ] or >
                 >>
                ;TrapStmt
                ] or >
                }
                [ (tIfMerge)
                | *:
                ] or >
                >>
               ;Block
               >>
              ;Statements
              [ (tIfMerge)
              | tIfMerge:
              oEmitUnconditionalForwardBranch
              oFixAndFreeShuntList
              oOperandPop
              oFixPushLastAddress
              oEmitMergeSourceCoordinate
              @Statements
               @Block
                [ (tCallBegin)
                | tCallBegin:
                @CallStmt
                 oEmitSourceCoordinate
                 oOperandPushMode(mManifest)
                 oOperandSetLength(two)
                 oOperandSetValue(zero)
                 [ (tCallEnd)
                 | tCallEnd:
                 ] or >
                 oOperandPushProcedure
                 oOperandSetMode(mProc)
                 oEmitSingle(iCall)
                 oOperandPop
                 oOperandPushMode(mStackReg)
                 oOperandSetLength(two)
                 oOperandSwap
                 oEmitDouble(iAdd)
                 oOperandPop
                 oOperandPop
                 oEmitMergeSourceCoordinate
                 >>
                ;CallStmt
                ] or >
                }
                [ (tWriteBegin)
                | tWriteBegin:
                @WriteProc
                 oEmitSourceCoordinate
                 [ (tTrapBegin)
                 | *:
                 @WriteParameter
                  ?tTrapBegin (tTrapBegin)
                  ?tLiteralAddress (tLiteralAddress)
                  @OperandPushVariable
                   oOperandPushVariable
                   [ (tVarParm)
                   | *:
                   [ (tVarParm)
                   | *:
                   [ (tVarParm)
                   | *:
                   >>
                  ;OperandPushVariable
                  @OperandForceToStack
                   [ oOperandChooseLength (two)
                   | two:
                   ] or >
                   oEmitSingle(iPush)
                   @OperandPopAndFreeTemp
                    [ oOperandChooseMode (mStatic)
                    | *:
                    oOperandPop
                    >>
                   ;OperandPopAndFreeTemp
                   oOperandPushMode(mStack)
                   >>
                  ;OperandForceToStack
                  @OperandPopAndFreeTemp
                   [ oOperandChooseMode (mStack)
                   | *:
                   oOperandPop
                   >>
                  ;OperandPopAndFreeTemp
                  ?tVarParm (tVarParm)
                  ?tParmEnd (tParmEnd)
                  @OperandPushExpression
                   [ (tSkipString)
                   | tSkipString:
                   oEmitNone(iData)
                   ?tStringData (tStringData)
                   oEmitString
                   oEmitNone(iText)
                   ] or >
                   }
                   [ (tLiteralAddress)
                   | tLiteralAddress:
                   @OperandPushVariable
                    oOperandPushVariable
                    [ (tFetchChar)
                    | *:
                    [ (tFetchChar)
                    | *:
                    [ (tFetchChar)
                    | tFetchChar:
                    oOperandSetLength(regCX)
                    ] or >
                    >>
                   ;OperandPushVariable
                   ] or >
                   }
                   [ (tParmEnd)
                   | *:
                   ] or >
                   >>
                  ;OperandPushExpression
                  [ (tParmEnd)
                  | *:
                  @OperandForceToStack
                   [ oOperandChooseLength (regCX)
                   | regCX:
                   @OperandForceAddressIntoTemp
                    [ oOperandChooseMode (mStatic)
                    | mStatic:
                    @OperandPushTempWord
                     oTempAllocate
                     oOperandPushTemp
                     oOperandSetValue(zero)
                     oOperandSetLength(two)
                     >>
                    ;OperandPushTempWord
                    oOperandSwap
                    oEmitDouble(iLoada)
                    oOperandPop
                    ] or >
                    oOperandSetLength(two)
                    >>
                   ;OperandForceAddressIntoTemp
                   ] or >
                   oEmitSingle(iPush)
                   @OperandPopAndFreeTemp
                    [ oOperandChooseMode (mTemp)
                    | mTemp:
                    oTempFree
                    ] or >
                    oOperandPop
                    >>
                   ;OperandPopAndFreeTemp
                   oOperandPushMode(mStack)
                   >>
                  ;OperandForceToStack
                  @OperandPopAndFreeTemp
                   [ oOperandChooseMode (mStack)
                   | *:
                   oOperandPop
                   >>
                  ;OperandPopAndFreeTemp
                  ?tParmEnd (tParmEnd)
                  @OperandPushExpression
                   [ (tLiteralInteger)
                   | tLiteralInteger:
                   oOperandPushInteger
                   ] or >
                   }
                   [ (tParmEnd)
                   | *:
                   ] or >
                   >>
                  ;OperandPushExpression
                  @OperandForceToStack
                   [ oOperandChooseLength (two)
                   | two:
                   ] or >
                   oEmitSingle(iPush)
                   @OperandPopAndFreeTemp
                    [ oOperandChooseMode (mManifest)
                    | *:
                    oOperandPop
                    >>
                   ;OperandPopAndFreeTemp
                   oOperandPushMode(mStack)
                   >>
                  ;OperandForceToStack
                  @OperandPopAndFreeTemp
                   [ oOperandChooseMode (mStack)
                   | *:
                   oOperandPop
                   >>
                  ;OperandPopAndFreeTemp
                  ?tParmEnd (tParmEnd)
                  ?tTrap (tTrap)
                  oOperandPushTrap
                  oEmitSingle(iCall)
                  oOperandPop
                  oOperandPushMode(mStackReg)
                  oOperandSetLength(two)
                  oOperandPushMode(mManifest)
                  oOperandSetLength(two)
                  oOperandSetValue(twelve)
                  oEmitDouble(iAdd)
                  oOperandPop
                  oOperandPop
                  >>
                 ;WriteParameter
                 }
                 [ (tWriteEnd)
                 | tWriteEnd:
                 ] or >
                 >>
                ;WriteProc
                ] or >
                }
                [ (tTrapBegin)
                | tTrapBegin:
                @TrapStmt
                 oEmitSourceCoordinate
                 [ (tLiteralAddress)
                 | tLiteralAddress:
                 @OperandPushVariable
                  oOperandPushVariable
                  [ (tVarParm)
                  | *:
                  [ (tVarParm)
                  | *:
                  [ (tVarParm)
                  | *:
                  >>
                 ;OperandPushVariable
                 oOperandPushCopy
                 @OperandForceToStack
                  [ oOperandChooseLength (two)
                  | two:
                  ] or >
                  oEmitSingle(iPush)
                  @OperandPopAndFreeTemp
                   [ oOperandChooseMode (mStatic)
                   | *:
                   oOperandPop
                   >>
                  ;OperandPopAndFreeTemp
                  oOperandPushMode(mStack)
                  >>
                 ;OperandForceToStack
                 oOperandPop
                 ?tVarParm (tVarParm)
                 ?tParmEnd (tParmEnd)
                 [ (tTrap)
                 | tTrap:
                 @OperandPopAndFreeTemp
                  [ oOperandChooseMode (mStatic)
                  | *:
                  oOperandPop
                  >>
                 ;OperandPopAndFreeTemp
                 oOperandPushTrap
                 oEmitSingle(iCall)
                 oOperandPop
                 oOperandPushMode(mStackReg)
                 oOperandSetLength(two)
                 oOperandPushMode(mManifest)
                 oOperandSetLength(two)
                 oOperandSetValue(four)
                 oEmitDouble(iAdd)
                 oOperandPop
                 oOperandPop
                 ] or >
                 ] or >
                 >>
                ;TrapStmt
                ] or >
                }
                [ (tIfEnd)
                | *:
                ] or >
                >>
               ;Block
               >>
              ;Statements
              oFixForwardBranch
              oFixPopAddress
              ?tIfEnd (tIfEnd)
              ] or >
              >>
             ;IfStmt
             ] or >
             }
             [ (tIfMerge)
             | *:
             ] or >
             >>
            ;Block
            >>
           ;Statements
           [ (tIfMerge)
           | tIfMerge:
           oEmitUnconditionalForwardBranch
           oFixAndFreeShuntList
           oOperandPop
           oFixPushLastAddress
           oEmitMergeSourceCoordinate
           @Statements
            @Block
             [ (tWriteBegin)
             | tWriteBegin:
             @WriteProc
              oEmitSourceCoordinate
              [ (tTrapBegin)
              | *:
              @WriteParameter
               ?tTrapBegin (tTrapBegin)
               ?tLiteralAddress (tLiteralAddress)
               @OperandPushVariable
                oOperandPushVariable
                [ (tVarParm)
                | *:
                [ (tVarParm)
                | *:
                [ (tVarParm)
                | *:
                >>
               ;OperandPushVariable
               @OperandForceToStack
                [ oOperandChooseLength (two)
                | two:
                ] or >
                oEmitSingle(iPush)
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mStatic)
                 | *:
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                oOperandPushMode(mStack)
                >>
               ;OperandForceToStack
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mStack)
                | *:
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               ?tVarParm (tVarParm)
               ?tParmEnd (tParmEnd)
               @OperandPushExpression
                [ (tSkipString)
                | tSkipString:
                oEmitNone(iData)
                ?tStringData (tStringData)
                oEmitString
                oEmitNone(iText)
                ] or >
                }
                [ (tLiteralAddress)
                | tLiteralAddress:
                @OperandPushVariable
                 oOperandPushVariable
                 [ (tFetchChar)
                 | *:
                 [ (tFetchChar)
                 | *:
                 [ (tFetchChar)
                 | tFetchChar:
                 oOperandSetLength(regCX)
                 ] or >
                 >>
                ;OperandPushVariable
                ] or >
                }
                [ (tParmEnd)
                | *:
                ] or >
                >>
               ;OperandPushExpression
               [ (tParmEnd)
               | *:
               @OperandForceToStack
                [ oOperandChooseLength (regCX)
                | regCX:
                @OperandForceAddressIntoTemp
                 [ oOperandChooseMode (mStatic)
                 | mStatic:
                 @OperandPushTempWord
                  oTempAllocate
                  oOperandPushTemp
                  oOperandSetValue(zero)
                  oOperandSetLength(two)
                  >>
                 ;OperandPushTempWord
                 oOperandSwap
                 oEmitDouble(iLoada)
                 oOperandPop
                 ] or >
                 oOperandSetLength(two)
                 >>
                ;OperandForceAddressIntoTemp
                ] or >
                oEmitSingle(iPush)
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mTemp)
                 | mTemp:
                 oTempFree
                 ] or >
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                oOperandPushMode(mStack)
                >>
               ;OperandForceToStack
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mStack)
                | *:
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               ?tParmEnd (tParmEnd)
               @OperandPushExpression
                [ (tLiteralInteger)
                | tLiteralInteger:
                oOperandPushInteger
                ] or >
                }
                [ (tParmEnd)
                | *:
                ] or >
                >>
               ;OperandPushExpression
               @OperandForceToStack
                [ oOperandChooseLength (two)
                | two:
                ] or >
                oEmitSingle(iPush)
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mManifest)
                 | *:
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                oOperandPushMode(mStack)
                >>
               ;OperandForceToStack
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mStack)
                | *:
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               ?tParmEnd (tParmEnd)
               ?tTrap (tTrap)
               oOperandPushTrap
               oEmitSingle(iCall)
               oOperandPop
               oOperandPushMode(mStackReg)
               oOperandSetLength(two)
               oOperandPushMode(mManifest)
               oOperandSetLength(two)
               oOperandSetValue(twelve)
               oEmitDouble(iAdd)
               oOperandPop
               oOperandPop
               >>
              ;WriteParameter
              }
              [ (tWriteEnd)
              | tWriteEnd:
              ] or >
              >>
             ;WriteProc
             ] or >
             }
             [ (tTrapBegin)
             | tTrapBegin:
             @TrapStmt
              oEmitSourceCoordinate
              [ (tLiteralAddress)
              | tLiteralAddress:
              @OperandPushVariable
               oOperandPushVariable
               [ (tVarParm)
               | *:
               [ (tVarParm)
               | *:
               [ (tVarParm)
               | *:
               >>
              ;OperandPushVariable
              oOperandPushCopy
              @OperandForceToStack
               [ oOperandChooseLength (two)
               | two:
               ] or >
               oEmitSingle(iPush)
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mStatic)
                | *:
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               oOperandPushMode(mStack)
               >>
              ;OperandForceToStack
              oOperandPop
              ?tVarParm (tVarParm)
              ?tParmEnd (tParmEnd)
              [ (tTrap)
              | tTrap:
              @OperandPopAndFreeTemp
               [ oOperandChooseMode (mStatic)
               | *:
               oOperandPop
               >>
              ;OperandPopAndFreeTemp
              oOperandPushTrap
              oEmitSingle(iCall)
              oOperandPop
              oOperandPushMode(mStackReg)
              oOperandSetLength(two)
              oOperandPushMode(mManifest)
              oOperandSetLength(two)
              oOperandSetValue(four)
              oEmitDouble(iAdd)
              oOperandPop
              oOperandPop
              ] or >
              ] or >
              >>
             ;TrapStmt
             ] or >
             }
             [ (tIfEnd)
             | *:
             ] or >
             >>
            ;Block
            >>
           ;Statements
           oFixForwardBranch
           oFixPopAddress
           ?tIfEnd (tIfEnd)
           ] or >
           >>
          ;IfStmt
          ] or >
          }
          [ (tIfEnd)
          | *:
          ] or >
          >>
         ;Block
         >>
        ;Statements
        oFixForwardBranch
        oFixPopAddress
        ?tIfEnd (tIfEnd)
        ] or >
        >>
       ;IfStmt
       ] or >
       }
       [ (tAssignBegin)
       | tAssignBegin:
       @AssignStmt
        oEmitSourceCoordinate
        ?tLiteralAddress (tLiteralAddress)
        @OperandPushVariable
         oOperandPushVariable
         [ (tFetchAddress)
         | tFetchAddress:
         oOperandSetMode(mStatic)
         @OperandForceIntoTemp
          [ oOperandChooseMode (mStatic)
          | *:
          [ oOperandChooseLength (two)
          | two:
          @OperandPushTempWord
           oTempAllocate
           oOperandPushTemp
           oOperandSetValue(zero)
           oOperandSetLength(two)
           >>
          ;OperandPushTempWord
          oOperandSwap
          oEmitDouble(iMov)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandSetMode(mTemp)
          ] or >
          >>
         ;OperandForceIntoTemp
         oOperandSetMode(mTempIndirect)
         ] or >
         [ (tLiteralBoolean)
         | *:
         [ (tLiteralBoolean)
         | *:
         >>
        ;OperandPushVariable
        @OperandPushExpressionAssignPopPop
         [ (tLiteralBoolean)
         | tLiteralBoolean:
         oOperandPushBoolean
         ] or >
         }
         [ (tAssignBoolean)
         | tAssignBoolean:
         @OperandAssignBooleanPopPop
          @OperandConvertJumpConditionToData
           [ oOperandIsJumpCondition (no)
           | no:
           ] or >
           >>
          ;OperandConvertJumpConditionToData
          oOperandSetLength(one)
          @EmitMove
           @OperandLeftOrRightIsTemp
            [ oOperandChooseMode (mManifest)
            | *:
            oOperandSwap
            [ oOperandChooseMode (mTempIndirect)
            | *:
            oOperandSwap
            >>no
           ;OperandLeftOrRightIsTemp
           [@OperandLeftOrRightIsTemp (no)
           | *:
           [ oOperandChooseMode (mManifest)
           | mManifest:
           oEmitDouble(iMov)
           ] or >
           >>
          ;EmitMove
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mManifest)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mTempIndirect)
           | mTempIndirect:
           oTempFree
           ] or >
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          >>
         ;OperandAssignBooleanPopPop
         ] or >
         >>
        ;OperandPushExpressionAssignPopPop
        >>
       ;AssignStmt
       ] or >
       }
       [ (tIfEnd)
       | *:
       ] or >
       >>
      ;Block
      >>
     ;Statements
     oFixForwardBranch
     oFixPopAddress
     ?tIfEnd (tIfEnd)
     ] or >
     >>
    ;IfStmt
    ] or >
    }
    [ (tProcedureEnd)
    | *:
    ] or >
    >>
   ;Block
   ?tProcedureEnd (tProcedureEnd)
   oEmitNone(iLeave)
   oEmitNone(iReturn)
   >>
  ;Routine
  oFixForwardBranch
  oFixPopAddress
  ] or >
  }
  [ (tSkipProc)
  | tSkipProc:
  oEmitUnconditionalForwardBranch
  oFixPushLastAddress
  @Routine
   oEmitProcLabel(mProc)
   oEmitNone(iEnter)
   [ (tParmEnd)
   | tParmEnd:
   ] or >
   @Block
    [ (tAssignBegin)
    | tAssignBegin:
    @AssignStmt
     oEmitSourceCoordinate
     ?tLiteralAddress (tLiteralAddress)
     @OperandPushVariable
      oOperandPushVariable
      [ (tLiteralAddress)
      | *:
      [ (tLiteralAddress)
      | *:
      [ (tLiteralAddress)
      | *:
      >>
     ;OperandPushVariable
     @OperandPushExpressionAssignPopPop
      [ (tLiteralAddress)
      | tLiteralAddress:
      @OperandPushVariable
       oOperandPushVariable
       [ (tFetchInteger)
       | *:
       [ (tFetchInteger)
       | *:
       [ (tFetchInteger)
       | tFetchInteger:
       ] or >
       >>
      ;OperandPushVariable
      ] or >
      }
      [ (tLiteralInteger)
      | tLiteralInteger:
      oOperandPushInteger
      ] or >
      }
      [ (tAdd)
      | tAdd:
      [ (tAssignInteger)
      | tAssignInteger:
      @OperandAddAssignPopPopPop
       [ oOperandCompareRightAndDest (no)
       | *:
       oOperandSwap
       [ oOperandCompareRightAndDest (yes)
       | yes:
       oOperandPop
       @OperandAddRightToLeftPop
        [ oOperandChooseManifestValue (one)
        | one:
        oOperandPop
        oEmitSingle(iInc)
        ] or >
        >>
       ;OperandAddRightToLeftPop
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       ] or >
       >>
      ;OperandAddAssignPopPopPop
      ] or >
      >>
     ;OperandPushExpressionAssignPopPop
     >>
    ;AssignStmt
    ] or >
    }
    [ (tCallBegin)
    | tCallBegin:
    @CallStmt
     oEmitSourceCoordinate
     oOperandPushMode(mManifest)
     oOperandSetLength(two)
     oOperandSetValue(zero)
     [ (tLiteralAddress)
     | *:
     @OperandPushExpression
      [ (tLiteralAddress)
      | tLiteralAddress:
      @OperandPushVariable
       oOperandPushVariable
       [ (tSubscriptBegin)
       | *:
       [ (tSubscriptBegin)
       | tSubscriptBegin:
       @OperandPushExpression
        [ (tLiteralAddress)
        | tLiteralAddress:
        @OperandPushVariable
         oOperandPushVariable
         [ (tFetchInteger)
         | *:
         [ (tFetchInteger)
         | *:
         [ (tFetchInteger)
         | tFetchInteger:
         ] or >
         >>
        ;OperandPushVariable
        ] or >
        }
        [ (tSubscriptInteger)
        | *:
        ] or >
        >>
       ;OperandPushExpression
       [ (tSubscriptInteger)
       | tSubscriptInteger:
       @OperandSubscriptIntegerPop
        [ oOperandChooseMode (mStatic)
        | *:
        @OperandSubscriptNonManifestIntegerPop
         [ oOptionTestChecking (yes)
         | yes:
         @OperandCheckedSubscriptNonManifestIntegerPop
          @OperandForceIntoTemp
           [ oOperandChooseMode (mStatic)
           | *:
           [ oOperandChooseLength (two)
           | two:
           @OperandPushTempWord
            oTempAllocate
            oOperandPushTemp
            oOperandSetValue(zero)
            oOperandSetLength(two)
            >>
           ;OperandPushTempWord
           oOperandSwap
           oEmitDouble(iMov)
           @OperandPopAndFreeTemp
            [ oOperandChooseMode (mStatic)
            | *:
            oOperandPop
            >>
           ;OperandPopAndFreeTemp
           oOperandSetMode(mTemp)
           ] or >
           >>
          ;OperandForceIntoTemp
          [ oOptionTestChecking (yes)
          | yes:
          @EmitSubscriptRangeCheck
           oOperandSwap
           @OperandPushArrayUpperBound
            [ oOperandChooseMode (mStatic)
            | mStatic:
            oOperandPushArrayUpperBound
            ] or >
            >>
           ;OperandPushArrayUpperBound
           oOperandSwapLeftAndDest
           @EmitCmp
            oOperandSwap
            [ oOperandChooseMode (mTemp)
            | *:
            oOperandSwap
            @OperandLeftOrRightIsTemp
             [ oOperandChooseMode (mManifest)
             | *:
             oOperandSwap
             [ oOperandChooseMode (mTemp)
             | mTemp:
             oOperandSwap
             >>yes
            ;OperandLeftOrRightIsTemp
            [@OperandLeftOrRightIsTemp (yes)
            | yes:
            oEmitDouble(iCmp)
            ] or >
            >>
           ;EmitCmp
           oOperandPushJumpCondition(iJgt)
           oEmitConditionalForwardBranch
           oFixPushLastAddress
           oOperandPop
           oOperandPop
           oOperandSwap
           @OperandPushArrayLowerBound
            [ oOperandChooseMode (mStatic)
            | mStatic:
            oOperandPushArrayLowerBound
            ] or >
            >>
           ;OperandPushArrayLowerBound
           oOperandSwapLeftAndDest
           @EmitCmp
            oOperandSwap
            [ oOperandChooseMode (mTemp)
            | *:
            oOperandSwap
            @OperandLeftOrRightIsTemp
             [ oOperandChooseMode (mManifest)
             | *:
             oOperandSwap
             [ oOperandChooseMode (mTemp)
             | mTemp:
             oOperandSwap
             >>yes
            ;OperandLeftOrRightIsTemp
            [@OperandLeftOrRightIsTemp (yes)
            | yes:
            oEmitDouble(iCmp)
            ] or >
            >>
           ;EmitCmp
           oOperandPushJumpCondition(iJge)
           oEmitConditionalForwardBranch
           oFixPushLastAddress
           oOperandPop
           oOperandPop
           oFixSwapAddresses
           oFixForwardBranch
           oFixPopAddress
           @EmitSubscriptAbort
            oOperandPushMode(mLineNum)
            oOperandSetLength(two)
            oEmitSingle(iPush)
            oOperandPop
            oOperandPushMode(mTrap)
            oOperandSetValue(trSubscriptAbort)
            oEmitSingle(iCall)
            oOperandPop
            >>
           ;EmitSubscriptAbort
           oFixForwardBranch
           oFixPopAddress
           >>
          ;EmitSubscriptRangeCheck
          ] or >
          oOperandSwap
          @OperandPushArrayLowerBound
           [ oOperandChooseMode (mStatic)
           | mStatic:
           oOperandPushArrayLowerBound
           ] or >
           >>
          ;OperandPushArrayLowerBound
          oOperandSwapLeftAndDest
          @OperandSubtractPop
           @OperandAreLeftAndRightManifest
            [ oOperandChooseMode (mManifest)
            | mManifest:
            oOperandSwap
            [ oOperandChooseMode (mTemp)
            | *:
            oOperandSwap
            >>no
           ;OperandAreLeftAndRightManifest
           [@OperandAreLeftAndRightManifest (no)
           | no:
           [ oOperandChooseManifestValue (one)
           | one:
           oOperandPop
           @OperandForceIntoTemp
            [ oOperandChooseMode (mTemp)
            | mTemp:
            ] or >
            >>
           ;OperandForceIntoTemp
           oEmitSingle(iDec)
           ] or >
           ] or >
           >>
          ;OperandSubtractPop
          oOperandPushMode(mManifest)
          oOperandSetLength(two)
          oOperandSetValue(two)
          oEmitDouble(iShl)
          oOperandPop
          oOperandSwap
          [ oOperandChooseMode (mStatic)
          | mStatic:
          oOperandPushMode(mManifest)
          oOperandSetLength(two)
          oOperandSetValue(eight)
          oOperandAddManifestValues
          oOperandPop
          @OperandForceAddressIntoTemp
           [ oOperandChooseMode (mStatic)
           | mStatic:
           @OperandPushTempWord
            oTempAllocate
            oOperandPushTemp
            oOperandSetValue(zero)
            oOperandSetLength(two)
            >>
           ;OperandPushTempWord
           oOperandSwap
           oEmitDouble(iLoada)
           oOperandPop
           ] or >
           oOperandSetLength(two)
           >>
          ;OperandForceAddressIntoTemp
          oEmitDouble(iAdd)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mTemp)
           | mTemp:
           oTempFree
           ] or >
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          ] or >
          oOperandSetMode(mTempIndirect)
          oOperandSetLength(two)
          >>
         ;OperandCheckedSubscriptNonManifestIntegerPop
         ] or >
         >>
        ;OperandSubscriptNonManifestIntegerPop
        oOperandSetLength(two)
        >>
       ;OperandSubscriptIntegerPop
       ] or >
       ] or >
       [ (tVarParm)
       | *:
       >>
      ;OperandPushVariable
      ] or >
      }
      [ (tVarParm)
      | *:
      ] or >
      >>
     ;OperandPushExpression
     @OperandConvertJumpConditionToData
      [ oOperandIsJumpCondition (no)
      | no:
      ] or >
      >>
     ;OperandConvertJumpConditionToData
     [ (tVarParm)
     | tVarParm:
     @OperandForceAddressIntoTemp
      [ oOperandChooseMode (mTempIndirect)
      | mTempIndirect:
      [ oOperandChooseValue (zero)
      | zero:
      oOperandSetMode(mTemp)
      ] or >
      ] or >
      oOperandSetLength(two)
      >>
     ;OperandForceAddressIntoTemp
     @OperandForceToStack
      [ oOperandChooseLength (two)
      | two:
      ] or >
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mTemp)
       | mTemp:
       oTempFree
       ] or >
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mStack)
      >>
     ;OperandForceToStack
     ] or >
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStack)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     ?tParmEnd (tParmEnd)
     oOperandPushMode(mManifest)
     oOperandSetLength(two)
     oOperandSetValue(four)
     oOperandAddManifestValues
     oOperandPop
     }
     [ (tCallEnd)
     | tCallEnd:
     ] or >
     oOperandPushProcedure
     oOperandSetMode(mProc)
     oEmitSingle(iCall)
     oOperandPop
     oOperandPushMode(mStackReg)
     oOperandSetLength(two)
     oOperandSwap
     oEmitDouble(iAdd)
     oOperandPop
     oOperandPop
     oEmitMergeSourceCoordinate
     >>
    ;CallStmt
    ] or >
    }
    [ (tProcedureEnd)
    | *:
    ] or >
    >>
   ;Block
   ?tProcedureEnd (tProcedureEnd)
   oEmitNone(iLeave)
   oEmitNone(iReturn)
   >>
  ;Routine
  oFixForwardBranch
  oFixPopAddress
  ] or >
  }
  [ (tSkipProc)
  | tSkipProc:
  oEmitUnconditionalForwardBranch
  oFixPushLastAddress
  @Routine
   oEmitProcLabel(mProc)
   oEmitNone(iEnter)
   [ (tParmEnd)
   | tParmEnd:
   ] or >
   @Block
    [ (tAssignBegin)
    | tAssignBegin:
    @AssignStmt
     oEmitSourceCoordinate
     ?tLiteralAddress (tLiteralAddress)
     @OperandPushVariable
      oOperandPushVariable
      [ (tLiteralAddress)
      | *:
      [ (tLiteralAddress)
      | *:
      [ (tLiteralAddress)
      | *:
      >>
     ;OperandPushVariable
     @OperandPushExpressionAssignPopPop
      [ (tLiteralAddress)
      | tLiteralAddress:
      @OperandPushVariable
       oOperandPushVariable
       [ (tFetchInteger)
       | *:
       [ (tFetchInteger)
       | *:
       [ (tFetchInteger)
       | tFetchInteger:
       ] or >
       >>
      ;OperandPushVariable
      ] or >
      }
      [ (tLiteralInteger)
      | tLiteralInteger:
      oOperandPushInteger
      ] or >
      }
      [ (tAdd)
      | tAdd:
      [ (tAssignInteger)
      | tAssignInteger:
      @OperandAddAssignPopPopPop
       [ oOperandCompareRightAndDest (no)
       | *:
       oOperandSwap
       [ oOperandCompareRightAndDest (yes)
       | yes:
       oOperandPop
       @OperandAddRightToLeftPop
        [ oOperandChooseManifestValue (one)
        | one:
        oOperandPop
        oEmitSingle(iInc)
        ] or >
        >>
       ;OperandAddRightToLeftPop
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       ] or >
       >>
      ;OperandAddAssignPopPopPop
      ] or >
      >>
     ;OperandPushExpressionAssignPopPop
     >>
    ;AssignStmt
    ] or >
    }
    [ (tCallBegin)
    | tCallBegin:
    @CallStmt
     oEmitSourceCoordinate
     oOperandPushMode(mManifest)
     oOperandSetLength(two)
     oOperandSetValue(zero)
     [ (tLiteralAddress)
     | *:
     @OperandPushExpression
      [ (tLiteralAddress)
      | tLiteralAddress:
      @OperandPushVariable
       oOperandPushVariable
       [ (tSubscriptBegin)
       | *:
       [ (tSubscriptBegin)
       | tSubscriptBegin:
       @OperandPushExpression
        [ (tLiteralAddress)
        | tLiteralAddress:
        @OperandPushVariable
         oOperandPushVariable
         [ (tFetchInteger)
         | *:
         [ (tFetchInteger)
         | *:
         [ (tFetchInteger)
         | tFetchInteger:
         ] or >
         >>
        ;OperandPushVariable
        ] or >
        }
        [ (tSubscriptInteger)
        | *:
        ] or >
        >>
       ;OperandPushExpression
       [ (tSubscriptInteger)
       | tSubscriptInteger:
       @OperandSubscriptIntegerPop
        [ oOperandChooseMode (mStatic)
        | *:
        @OperandSubscriptNonManifestIntegerPop
         [ oOptionTestChecking (yes)
         | yes:
         @OperandCheckedSubscriptNonManifestIntegerPop
          @OperandForceIntoTemp
           [ oOperandChooseMode (mStatic)
           | *:
           [ oOperandChooseLength (two)
           | two:
           @OperandPushTempWord
            oTempAllocate
            oOperandPushTemp
            oOperandSetValue(zero)
            oOperandSetLength(two)
            >>
           ;OperandPushTempWord
           oOperandSwap
           oEmitDouble(iMov)
           @OperandPopAndFreeTemp
            [ oOperandChooseMode (mStatic)
            | *:
            oOperandPop
            >>
           ;OperandPopAndFreeTemp
           oOperandSetMode(mTemp)
           ] or >
           >>
          ;OperandForceIntoTemp
          [ oOptionTestChecking (yes)
          | yes:
          @EmitSubscriptRangeCheck
           oOperandSwap
           @OperandPushArrayUpperBound
            [ oOperandChooseMode (mStatic)
            | mStatic:
            oOperandPushArrayUpperBound
            ] or >
            >>
           ;OperandPushArrayUpperBound
           oOperandSwapLeftAndDest
           @EmitCmp
            oOperandSwap
            [ oOperandChooseMode (mTemp)
            | *:
            oOperandSwap
            @OperandLeftOrRightIsTemp
             [ oOperandChooseMode (mManifest)
             | *:
             oOperandSwap
             [ oOperandChooseMode (mTemp)
             | mTemp:
             oOperandSwap
             >>yes
            ;OperandLeftOrRightIsTemp
            [@OperandLeftOrRightIsTemp (yes)
            | yes:
            oEmitDouble(iCmp)
            ] or >
            >>
           ;EmitCmp
           oOperandPushJumpCondition(iJgt)
           oEmitConditionalForwardBranch
           oFixPushLastAddress
           oOperandPop
           oOperandPop
           oOperandSwap
           @OperandPushArrayLowerBound
            [ oOperandChooseMode (mStatic)
            | mStatic:
            oOperandPushArrayLowerBound
            ] or >
            >>
           ;OperandPushArrayLowerBound
           oOperandSwapLeftAndDest
           @EmitCmp
            oOperandSwap
            [ oOperandChooseMode (mTemp)
            | *:
            oOperandSwap
            @OperandLeftOrRightIsTemp
             [ oOperandChooseMode (mManifest)
             | *:
             oOperandSwap
             [ oOperandChooseMode (mTemp)
             | mTemp:
             oOperandSwap
             >>yes
            ;OperandLeftOrRightIsTemp
            [@OperandLeftOrRightIsTemp (yes)
            | yes:
            oEmitDouble(iCmp)
            ] or >
            >>
           ;EmitCmp
           oOperandPushJumpCondition(iJge)
           oEmitConditionalForwardBranch
           oFixPushLastAddress
           oOperandPop
           oOperandPop
           oFixSwapAddresses
           oFixForwardBranch
           oFixPopAddress
           @EmitSubscriptAbort
            oOperandPushMode(mLineNum)
            oOperandSetLength(two)
            oEmitSingle(iPush)
            oOperandPop
            oOperandPushMode(mTrap)
            oOperandSetValue(trSubscriptAbort)
            oEmitSingle(iCall)
            oOperandPop
            >>
           ;EmitSubscriptAbort
           oFixForwardBranch
           oFixPopAddress
           >>
          ;EmitSubscriptRangeCheck
          ] or >
          oOperandSwap
          @OperandPushArrayLowerBound
           [ oOperandChooseMode (mStatic)
           | mStatic:
           oOperandPushArrayLowerBound
           ] or >
           >>
          ;OperandPushArrayLowerBound
          oOperandSwapLeftAndDest
          @OperandSubtractPop
           @OperandAreLeftAndRightManifest
            [ oOperandChooseMode (mManifest)
            | mManifest:
            oOperandSwap
            [ oOperandChooseMode (mTemp)
            | *:
            oOperandSwap
            >>no
           ;OperandAreLeftAndRightManifest
           [@OperandAreLeftAndRightManifest (no)
           | no:
           [ oOperandChooseManifestValue (one)
           | one:
           oOperandPop
           @OperandForceIntoTemp
            [ oOperandChooseMode (mTemp)
            | mTemp:
            ] or >
            >>
           ;OperandForceIntoTemp
           oEmitSingle(iDec)
           ] or >
           ] or >
           >>
          ;OperandSubtractPop
          oOperandPushMode(mManifest)
          oOperandSetLength(two)
          oOperandSetValue(two)
          oEmitDouble(iShl)
          oOperandPop
          oOperandSwap
          [ oOperandChooseMode (mStatic)
          | mStatic:
          oOperandPushMode(mManifest)
          oOperandSetLength(two)
          oOperandSetValue(eight)
          oOperandAddManifestValues
          oOperandPop
          @OperandForceAddressIntoTemp
           [ oOperandChooseMode (mStatic)
           | mStatic:
           @OperandPushTempWord
            oTempAllocate
            oOperandPushTemp
            oOperandSetValue(zero)
            oOperandSetLength(two)
            >>
           ;OperandPushTempWord
           oOperandSwap
           oEmitDouble(iLoada)
           oOperandPop
           ] or >
           oOperandSetLength(two)
           >>
          ;OperandForceAddressIntoTemp
          oEmitDouble(iAdd)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mTemp)
           | mTemp:
           oTempFree
           ] or >
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          ] or >
          oOperandSetMode(mTempIndirect)
          oOperandSetLength(two)
          >>
         ;OperandCheckedSubscriptNonManifestIntegerPop
         ] or >
         >>
        ;OperandSubscriptNonManifestIntegerPop
        oOperandSetLength(two)
        >>
       ;OperandSubscriptIntegerPop
       ] or >
       ] or >
       [ (tVarParm)
       | *:
       >>
      ;OperandPushVariable
      ] or >
      }
      [ (tVarParm)
      | *:
      ] or >
      >>
     ;OperandPushExpression
     @OperandConvertJumpConditionToData
      [ oOperandIsJumpCondition (no)
      | no:
      ] or >
      >>
     ;OperandConvertJumpConditionToData
     [ (tVarParm)
     | tVarParm:
     @OperandForceAddressIntoTemp
      [ oOperandChooseMode (mTempIndirect)
      | mTempIndirect:
      [ oOperandChooseValue (zero)
      | zero:
      oOperandSetMode(mTemp)
      ] or >
      ] or >
      oOperandSetLength(two)
      >>
     ;OperandForceAddressIntoTemp
     @OperandForceToStack
      [ oOperandChooseLength (two)
      | two:
      ] or >
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mTemp)
       | mTemp:
       oTempFree
       ] or >
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mStack)
      >>
     ;OperandForceToStack
     ] or >
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStack)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     ?tParmEnd (tParmEnd)
     oOperandPushMode(mManifest)
     oOperandSetLength(two)
     oOperandSetValue(four)
     oOperandAddManifestValues
     oOperandPop
     }
     [ (tCallEnd)
     | tCallEnd:
     ] or >
     oOperandPushProcedure
     oOperandSetMode(mProc)
     oEmitSingle(iCall)
     oOperandPop
     oOperandPushMode(mStackReg)
     oOperandSetLength(two)
     oOperandSwap
     oEmitDouble(iAdd)
     oOperandPop
     oOperandPop
     oEmitMergeSourceCoordinate
     >>
    ;CallStmt
    ] or >
    }
    [ (tProcedureEnd)
    | *:
    ] or >
    >>
   ;Block
   ?tProcedureEnd (tProcedureEnd)
   oEmitNone(iLeave)
   oEmitNone(iReturn)
   >>
  ;Routine
  oFixForwardBranch
  oFixPopAddress
  ] or >
  }
  [ (tSkipProc)
  | tSkipProc:
  oEmitUnconditionalForwardBranch
  oFixPushLastAddress
  @Routine
   oEmitProcLabel(mProc)
   oEmitNone(iEnter)
   [ (tParmEnd)
   | tParmEnd:
   ] or >
   @Block
    [ (tAssignBegin)
    | tAssignBegin:
    @AssignStmt
     oEmitSourceCoordinate
     ?tLiteralAddress (tLiteralAddress)
     @OperandPushVariable
      oOperandPushVariable
      [ (tLiteralBoolean)
      | *:
      [ (tLiteralBoolean)
      | *:
      [ (tLiteralBoolean)
      | *:
      >>
     ;OperandPushVariable
     @OperandPushExpressionAssignPopPop
      [ (tLiteralBoolean)
      | tLiteralBoolean:
      oOperandPushBoolean
      ] or >
      }
      [ (tAssignBoolean)
      | tAssignBoolean:
      @OperandAssignBooleanPopPop
       @OperandConvertJumpConditionToData
        [ oOperandIsJumpCondition (no)
        | no:
        ] or >
        >>
       ;OperandConvertJumpConditionToData
       oOperandSetLength(one)
       @EmitMove
        @OperandLeftOrRightIsTemp
         [ oOperandChooseMode (mManifest)
         | *:
         oOperandSwap
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandSwap
         >>no
        ;OperandLeftOrRightIsTemp
        [@OperandLeftOrRightIsTemp (no)
        | *:
        [ oOperandChooseMode (mManifest)
        | mManifest:
        oEmitDouble(iMov)
        ] or >
        >>
       ;EmitMove
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mManifest)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       >>
      ;OperandAssignBooleanPopPop
      ] or >
      >>
     ;OperandPushExpressionAssignPopPop
     >>
    ;AssignStmt
    ] or >
    }
    [ (tAssignBegin)
    | tAssignBegin:
    @AssignStmt
     oEmitSourceCoordinate
     ?tLiteralAddress (tLiteralAddress)
     @OperandPushVariable
      oOperandPushVariable
      [ (tLiteralBoolean)
      | *:
      [ (tLiteralBoolean)
      | *:
      [ (tLiteralBoolean)
      | *:
      >>
     ;OperandPushVariable
     @OperandPushExpressionAssignPopPop
      [ (tLiteralBoolean)
      | tLiteralBoolean:
      oOperandPushBoolean
      ] or >
      }
      [ (tAssignBoolean)
      | tAssignBoolean:
      @OperandAssignBooleanPopPop
       @OperandConvertJumpConditionToData
        [ oOperandIsJumpCondition (no)
        | no:
        ] or >
        >>
       ;OperandConvertJumpConditionToData
       oOperandSetLength(one)
       @EmitMove
        @OperandLeftOrRightIsTemp
         [ oOperandChooseMode (mManifest)
         | *:
         oOperandSwap
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandSwap
         >>no
        ;OperandLeftOrRightIsTemp
        [@OperandLeftOrRightIsTemp (no)
        | *:
        [ oOperandChooseMode (mManifest)
        | mManifest:
        oEmitDouble(iMov)
        ] or >
        >>
       ;EmitMove
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mManifest)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       >>
      ;OperandAssignBooleanPopPop
      ] or >
      >>
     ;OperandPushExpressionAssignPopPop
     >>
    ;AssignStmt
    ] or >
    }
    [ (tAssignBegin)
    | tAssignBegin:
    @AssignStmt
     oEmitSourceCoordinate
     ?tLiteralAddress (tLiteralAddress)
     @OperandPushVariable
      oOperandPushVariable
      [ (tLiteralInteger)
      | *:
      [ (tLiteralInteger)
      | *:
      [ (tLiteralInteger)
      | *:
      >>
     ;OperandPushVariable
     @OperandPushExpressionAssignPopPop
      [ (tLiteralInteger)
      | tLiteralInteger:
      oOperandPushInteger
      ] or >
      }
      [ (tAssignInteger)
      | tAssignInteger:
      @OperandAssignIntegerPopPop
       [ oOperandCompareLeftAndRight (no)
       | no:
       @EmitMove
        @OperandLeftOrRightIsTemp
         [ oOperandChooseMode (mManifest)
         | *:
         oOperandSwap
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandSwap
         >>no
        ;OperandLeftOrRightIsTemp
        [@OperandLeftOrRightIsTemp (no)
        | *:
        [ oOperandChooseMode (mManifest)
        | mManifest:
        oEmitDouble(iMov)
        ] or >
        >>
       ;EmitMove
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mManifest)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       ] or >
       >>
      ;OperandAssignIntegerPopPop
      ] or >
      >>
     ;OperandPushExpressionAssignPopPop
     >>
    ;AssignStmt
    ] or >
    }
    [ (tAssignBegin)
    | tAssignBegin:
    @AssignStmt
     oEmitSourceCoordinate
     ?tLiteralAddress (tLiteralAddress)
     @OperandPushVariable
      oOperandPushVariable
      [ (tLiteralInteger)
      | *:
      [ (tLiteralInteger)
      | *:
      [ (tLiteralInteger)
      | *:
      >>
     ;OperandPushVariable
     @OperandPushExpressionAssignPopPop
      [ (tLiteralInteger)
      | tLiteralInteger:
      oOperandPushInteger
      ] or >
      }
      [ (tAssignInteger)
      | tAssignInteger:
      @OperandAssignIntegerPopPop
       [ oOperandCompareLeftAndRight (no)
       | no:
       @EmitMove
        @OperandLeftOrRightIsTemp
         [ oOperandChooseMode (mManifest)
         | *:
         oOperandSwap
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandSwap
         >>no
        ;OperandLeftOrRightIsTemp
        [@OperandLeftOrRightIsTemp (no)
        | *:
        [ oOperandChooseMode (mManifest)
        | mManifest:
        oEmitDouble(iMov)
        ] or >
        >>
       ;EmitMove
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mManifest)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       ] or >
       >>
      ;OperandAssignIntegerPopPop
      ] or >
      >>
     ;OperandPushExpressionAssignPopPop
     >>
    ;AssignStmt
    ] or >
    }
    [ (tCallBegin)
    | tCallBegin:
    @CallStmt
     oEmitSourceCoordinate
     oOperandPushMode(mManifest)
     oOperandSetLength(two)
     oOperandSetValue(zero)
     [ (tCallEnd)
     | tCallEnd:
     ] or >
     oOperandPushProcedure
     oOperandSetMode(mProc)
     oEmitSingle(iCall)
     oOperandPop
     oOperandPushMode(mStackReg)
     oOperandSetLength(two)
     oOperandSwap
     oEmitDouble(iAdd)
     oOperandPop
     oOperandPop
     oEmitMergeSourceCoordinate
     >>
    ;CallStmt
    ] or >
    }
    [ (tCallBegin)
    | tCallBegin:
    @CallStmt
     oEmitSourceCoordinate
     oOperandPushMode(mManifest)
     oOperandSetLength(two)
     oOperandSetValue(zero)
     [ (tCallEnd)
     | tCallEnd:
     ] or >
     oOperandPushProcedure
     oOperandSetMode(mProc)
     oEmitSingle(iCall)
     oOperandPop
     oOperandPushMode(mStackReg)
     oOperandSetLength(two)
     oOperandSwap
     oEmitDouble(iAdd)
     oOperandPop
     oOperandPop
     oEmitMergeSourceCoordinate
     >>
    ;CallStmt
    ] or >
    }
    [ (tCallBegin)
    | tCallBegin:
    @CallStmt
     oEmitSourceCoordinate
     oOperandPushMode(mManifest)
     oOperandSetLength(two)
     oOperandSetValue(zero)
     [ (tCallEnd)
     | tCallEnd:
     ] or >
     oOperandPushProcedure
     oOperandSetMode(mProc)
     oEmitSingle(iCall)
     oOperandPop
     oOperandPushMode(mStackReg)
     oOperandSetLength(two)
     oOperandSwap
     oEmitDouble(iAdd)
     oOperandPop
     oOperandPop
     oEmitMergeSourceCoordinate
     >>
    ;CallStmt
    ] or >
    }
    [ (tCallBegin)
    | tCallBegin:
    @CallStmt
     oEmitSourceCoordinate
     oOperandPushMode(mManifest)
     oOperandSetLength(two)
     oOperandSetValue(zero)
     [ (tCallEnd)
     | tCallEnd:
     ] or >
     oOperandPushProcedure
     oOperandSetMode(mProc)
     oEmitSingle(iCall)
     oOperandPop
     oOperandPushMode(mStackReg)
     oOperandSetLength(two)
     oOperandSwap
     oEmitDouble(iAdd)
     oOperandPop
     oOperandPop
     oEmitMergeSourceCoordinate
     >>
    ;CallStmt
    ] or >
    }
    [ (tWriteBegin)
    | tWriteBegin:
    @WriteProc
     oEmitSourceCoordinate
     [ (tTrapBegin)
     | *:
     @WriteParameter
      ?tTrapBegin (tTrapBegin)
      ?tLiteralAddress (tLiteralAddress)
      @OperandPushVariable
       oOperandPushVariable
       [ (tVarParm)
       | *:
       [ (tVarParm)
       | *:
       [ (tVarParm)
       | *:
       >>
      ;OperandPushVariable
      @OperandForceToStack
       [ oOperandChooseLength (two)
       | two:
       ] or >
       oEmitSingle(iPush)
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandPushMode(mStack)
       >>
      ;OperandForceToStack
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStack)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      ?tVarParm (tVarParm)
      ?tParmEnd (tParmEnd)
      @OperandPushExpression
       [ (tSkipString)
       | tSkipString:
       oEmitNone(iData)
       ?tStringData (tStringData)
       oEmitString
       oEmitNone(iText)
       ] or >
       }
       [ (tLiteralAddress)
       | tLiteralAddress:
       @OperandPushVariable
        oOperandPushVariable
        [ (tFetchChar)
        | *:
        [ (tFetchChar)
        | *:
        [ (tFetchChar)
        | tFetchChar:
        oOperandSetLength(regCX)
        ] or >
        >>
       ;OperandPushVariable
       ] or >
       }
       [ (tParmEnd)
       | *:
       ] or >
       >>
      ;OperandPushExpression
      [ (tParmEnd)
      | *:
      @OperandForceToStack
       [ oOperandChooseLength (regCX)
       | regCX:
       @OperandForceAddressIntoTemp
        [ oOperandChooseMode (mStatic)
        | mStatic:
        @OperandPushTempWord
         oTempAllocate
         oOperandPushTemp
         oOperandSetValue(zero)
         oOperandSetLength(two)
         >>
        ;OperandPushTempWord
        oOperandSwap
        oEmitDouble(iLoada)
        oOperandPop
        ] or >
        oOperandSetLength(two)
        >>
       ;OperandForceAddressIntoTemp
       ] or >
       oEmitSingle(iPush)
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mTemp)
        | mTemp:
        oTempFree
        ] or >
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandPushMode(mStack)
       >>
      ;OperandForceToStack
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStack)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      ?tParmEnd (tParmEnd)
      @OperandPushExpression
       [ (tLiteralInteger)
       | tLiteralInteger:
       oOperandPushInteger
       ] or >
       }
       [ (tParmEnd)
       | *:
       ] or >
       >>
      ;OperandPushExpression
      @OperandForceToStack
       [ oOperandChooseLength (two)
       | two:
       ] or >
       oEmitSingle(iPush)
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mManifest)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandPushMode(mStack)
       >>
      ;OperandForceToStack
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStack)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      ?tParmEnd (tParmEnd)
      ?tTrap (tTrap)
      oOperandPushTrap
      oEmitSingle(iCall)
      oOperandPop
      oOperandPushMode(mStackReg)
      oOperandSetLength(two)
      oOperandPushMode(mManifest)
      oOperandSetLength(two)
      oOperandSetValue(twelve)
      oEmitDouble(iAdd)
      oOperandPop
      oOperandPop
      >>
     ;WriteParameter
     }
     [ (tWriteEnd)
     | tWriteEnd:
     ] or >
     >>
    ;WriteProc
    ] or >
    }
    [ (tCallBegin)
    | tCallBegin:
    @CallStmt
     oEmitSourceCoordinate
     oOperandPushMode(mManifest)
     oOperandSetLength(two)
     oOperandSetValue(zero)
     [ (tCallEnd)
     | tCallEnd:
     ] or >
     oOperandPushProcedure
     oOperandSetMode(mProc)
     oEmitSingle(iCall)
     oOperandPop
     oOperandPushMode(mStackReg)
     oOperandSetLength(two)
     oOperandSwap
     oEmitDouble(iAdd)
     oOperandPop
     oOperandPop
     oEmitMergeSourceCoordinate
     >>
    ;CallStmt
    ] or >
    }
    [ (tWriteBegin)
    | tWriteBegin:
    @WriteProc
     oEmitSourceCoordinate
     [ (tTrapBegin)
     | *:
     @WriteParameter
      ?tTrapBegin (tTrapBegin)
      ?tLiteralAddress (tLiteralAddress)
      @OperandPushVariable
       oOperandPushVariable
       [ (tVarParm)
       | *:
       [ (tVarParm)
       | *:
       [ (tVarParm)
       | *:
       >>
      ;OperandPushVariable
      @OperandForceToStack
       [ oOperandChooseLength (two)
       | two:
       ] or >
       oEmitSingle(iPush)
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandPushMode(mStack)
       >>
      ;OperandForceToStack
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStack)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      ?tVarParm (tVarParm)
      ?tParmEnd (tParmEnd)
      @OperandPushExpression
       [ (tSkipString)
       | tSkipString:
       oEmitNone(iData)
       ?tStringData (tStringData)
       oEmitString
       oEmitNone(iText)
       ] or >
       }
       [ (tLiteralAddress)
       | tLiteralAddress:
       @OperandPushVariable
        oOperandPushVariable
        [ (tFetchChar)
        | *:
        [ (tFetchChar)
        | *:
        [ (tFetchChar)
        | tFetchChar:
        oOperandSetLength(regCX)
        ] or >
        >>
       ;OperandPushVariable
       ] or >
       }
       [ (tParmEnd)
       | *:
       ] or >
       >>
      ;OperandPushExpression
      [ (tParmEnd)
      | *:
      @OperandForceToStack
       [ oOperandChooseLength (regCX)
       | regCX:
       @OperandForceAddressIntoTemp
        [ oOperandChooseMode (mStatic)
        | mStatic:
        @OperandPushTempWord
         oTempAllocate
         oOperandPushTemp
         oOperandSetValue(zero)
         oOperandSetLength(two)
         >>
        ;OperandPushTempWord
        oOperandSwap
        oEmitDouble(iLoada)
        oOperandPop
        ] or >
        oOperandSetLength(two)
        >>
       ;OperandForceAddressIntoTemp
       ] or >
       oEmitSingle(iPush)
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mTemp)
        | mTemp:
        oTempFree
        ] or >
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandPushMode(mStack)
       >>
      ;OperandForceToStack
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStack)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      ?tParmEnd (tParmEnd)
      @OperandPushExpression
       [ (tLiteralInteger)
       | tLiteralInteger:
       oOperandPushInteger
       ] or >
       }
       [ (tParmEnd)
       | *:
       ] or >
       >>
      ;OperandPushExpression
      @OperandForceToStack
       [ oOperandChooseLength (two)
       | two:
       ] or >
       oEmitSingle(iPush)
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mManifest)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandPushMode(mStack)
       >>
      ;OperandForceToStack
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStack)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      ?tParmEnd (tParmEnd)
      ?tTrap (tTrap)
      oOperandPushTrap
      oEmitSingle(iCall)
      oOperandPop
      oOperandPushMode(mStackReg)
      oOperandSetLength(two)
      oOperandPushMode(mManifest)
      oOperandSetLength(two)
      oOperandSetValue(twelve)
      oEmitDouble(iAdd)
      oOperandPop
      oOperandPop
      >>
     ;WriteParameter
     }
     [ (tWriteEnd)
     | tWriteEnd:
     ] or >
     >>
    ;WriteProc
    ] or >
    }
    [ (tCallBegin)
    | tCallBegin:
    @CallStmt
     oEmitSourceCoordinate
     oOperandPushMode(mManifest)
     oOperandSetLength(two)
     oOperandSetValue(zero)
     [ (tLiteralAddress)
     | *:
     @OperandPushExpression
      [ (tLiteralAddress)
      | tLiteralAddress:
      @OperandPushVariable
       oOperandPushVariable
       [ (tFetchInteger)
       | *:
       [ (tFetchInteger)
       | *:
       [ (tFetchInteger)
       | tFetchInteger:
       ] or >
       >>
      ;OperandPushVariable
      ] or >
      }
      [ (tParmEnd)
      | *:
      ] or >
      >>
     ;OperandPushExpression
     @OperandConvertJumpConditionToData
      [ oOperandIsJumpCondition (no)
      | no:
      ] or >
      >>
     ;OperandConvertJumpConditionToData
     [ (tParmEnd)
     | *:
     @OperandForceToStack
      [ oOperandChooseLength (two)
      | two:
      ] or >
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mStack)
      >>
     ;OperandForceToStack
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStack)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     ?tParmEnd (tParmEnd)
     oOperandPushMode(mManifest)
     oOperandSetLength(two)
     oOperandSetValue(four)
     oOperandAddManifestValues
     oOperandPop
     }
     [ (tLiteralAddress)
     | *:
     @OperandPushExpression
      [ (tLiteralAddress)
      | tLiteralAddress:
      @OperandPushVariable
       oOperandPushVariable
       [ (tVarParm)
       | *:
       [ (tVarParm)
       | *:
       [ (tVarParm)
       | *:
       >>
      ;OperandPushVariable
      ] or >
      }
      [ (tVarParm)
      | *:
      ] or >
      >>
     ;OperandPushExpression
     @OperandConvertJumpConditionToData
      [ oOperandIsJumpCondition (no)
      | no:
      ] or >
      >>
     ;OperandConvertJumpConditionToData
     [ (tVarParm)
     | tVarParm:
     @OperandForceAddressIntoTemp
      [ oOperandChooseMode (mStatic)
      | mStatic:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iLoada)
      oOperandPop
      ] or >
      oOperandSetLength(two)
      >>
     ;OperandForceAddressIntoTemp
     @OperandForceToStack
      [ oOperandChooseLength (two)
      | two:
      ] or >
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mTemp)
       | mTemp:
       oTempFree
       ] or >
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mStack)
      >>
     ;OperandForceToStack
     ] or >
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStack)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     ?tParmEnd (tParmEnd)
     oOperandPushMode(mManifest)
     oOperandSetLength(two)
     oOperandSetValue(four)
     oOperandAddManifestValues
     oOperandPop
     }
     [ (tCallEnd)
     | tCallEnd:
     ] or >
     oOperandPushProcedure
     oOperandSetMode(mProc)
     oEmitSingle(iCall)
     oOperandPop
     oOperandPushMode(mStackReg)
     oOperandSetLength(two)
     oOperandSwap
     oEmitDouble(iAdd)
     oOperandPop
     oOperandPop
     oEmitMergeSourceCoordinate
     >>
    ;CallStmt
    ] or >
    }
    [ (tTrapBegin)
    | tTrapBegin:
    @TrapStmt
     oEmitSourceCoordinate
     [ (tLiteralAddress)
     | tLiteralAddress:
     @OperandPushVariable
      oOperandPushVariable
      [ (tVarParm)
      | *:
      [ (tVarParm)
      | *:
      [ (tVarParm)
      | *:
      >>
     ;OperandPushVariable
     oOperandPushCopy
     @OperandForceToStack
      [ oOperandChooseLength (two)
      | two:
      ] or >
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mStack)
      >>
     ;OperandForceToStack
     oOperandPop
     ?tVarParm (tVarParm)
     ?tParmEnd (tParmEnd)
     [ (tTrap)
     | tTrap:
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushTrap
     oEmitSingle(iCall)
     oOperandPop
     oOperandPushMode(mStackReg)
     oOperandSetLength(two)
     oOperandPushMode(mManifest)
     oOperandSetLength(two)
     oOperandSetValue(four)
     oEmitDouble(iAdd)
     oOperandPop
     oOperandPop
     ] or >
     ] or >
     >>
    ;TrapStmt
    ] or >
    }
    [ (tWriteBegin)
    | tWriteBegin:
    @WriteProc
     oEmitSourceCoordinate
     [ (tTrapBegin)
     | *:
     @WriteParameter
      ?tTrapBegin (tTrapBegin)
      ?tLiteralAddress (tLiteralAddress)
      @OperandPushVariable
       oOperandPushVariable
       [ (tVarParm)
       | *:
       [ (tVarParm)
       | *:
       [ (tVarParm)
       | *:
       >>
      ;OperandPushVariable
      @OperandForceToStack
       [ oOperandChooseLength (two)
       | two:
       ] or >
       oEmitSingle(iPush)
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandPushMode(mStack)
       >>
      ;OperandForceToStack
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStack)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      ?tVarParm (tVarParm)
      ?tParmEnd (tParmEnd)
      @OperandPushExpression
       [ (tSkipString)
       | tSkipString:
       oEmitNone(iData)
       ?tStringData (tStringData)
       oEmitString
       oEmitNone(iText)
       ] or >
       }
       [ (tLiteralAddress)
       | tLiteralAddress:
       @OperandPushVariable
        oOperandPushVariable
        [ (tFetchChar)
        | *:
        [ (tFetchChar)
        | *:
        [ (tFetchChar)
        | tFetchChar:
        oOperandSetLength(regCX)
        ] or >
        >>
       ;OperandPushVariable
       ] or >
       }
       [ (tParmEnd)
       | *:
       ] or >
       >>
      ;OperandPushExpression
      [ (tParmEnd)
      | *:
      @OperandForceToStack
       [ oOperandChooseLength (regCX)
       | regCX:
       @OperandForceAddressIntoTemp
        [ oOperandChooseMode (mStatic)
        | mStatic:
        @OperandPushTempWord
         oTempAllocate
         oOperandPushTemp
         oOperandSetValue(zero)
         oOperandSetLength(two)
         >>
        ;OperandPushTempWord
        oOperandSwap
        oEmitDouble(iLoada)
        oOperandPop
        ] or >
        oOperandSetLength(two)
        >>
       ;OperandForceAddressIntoTemp
       ] or >
       oEmitSingle(iPush)
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mTemp)
        | mTemp:
        oTempFree
        ] or >
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandPushMode(mStack)
       >>
      ;OperandForceToStack
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStack)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      ?tParmEnd (tParmEnd)
      @OperandPushExpression
       [ (tLiteralInteger)
       | tLiteralInteger:
       oOperandPushInteger
       ] or >
       }
       [ (tParmEnd)
       | *:
       ] or >
       >>
      ;OperandPushExpression
      @OperandForceToStack
       [ oOperandChooseLength (two)
       | two:
       ] or >
       oEmitSingle(iPush)
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mManifest)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandPushMode(mStack)
       >>
      ;OperandForceToStack
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStack)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      ?tParmEnd (tParmEnd)
      ?tTrap (tTrap)
      oOperandPushTrap
      oEmitSingle(iCall)
      oOperandPop
      oOperandPushMode(mStackReg)
      oOperandSetLength(two)
      oOperandPushMode(mManifest)
      oOperandSetLength(two)
      oOperandSetValue(twelve)
      oEmitDouble(iAdd)
      oOperandPop
      oOperandPop
      >>
     ;WriteParameter
     }
     [ (tWriteEnd)
     | tWriteEnd:
     ] or >
     >>
    ;WriteProc
    ] or >
    }
    [ (tCallBegin)
    | tCallBegin:
    @CallStmt
     oEmitSourceCoordinate
     oOperandPushMode(mManifest)
     oOperandSetLength(two)
     oOperandSetValue(zero)
     [ (tLiteralAddress)
     | *:
     @OperandPushExpression
      [ (tLiteralAddress)
      | tLiteralAddress:
      @OperandPushVariable
       oOperandPushVariable
       [ (tFetchInteger)
       | *:
       [ (tFetchInteger)
       | *:
       [ (tFetchInteger)
       | tFetchInteger:
       ] or >
       >>
      ;OperandPushVariable
      ] or >
      }
      [ (tParmEnd)
      | *:
      ] or >
      >>
     ;OperandPushExpression
     @OperandConvertJumpConditionToData
      [ oOperandIsJumpCondition (no)
      | no:
      ] or >
      >>
     ;OperandConvertJumpConditionToData
     [ (tParmEnd)
     | *:
     @OperandForceToStack
      [ oOperandChooseLength (two)
      | two:
      ] or >
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mStack)
      >>
     ;OperandForceToStack
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStack)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     ?tParmEnd (tParmEnd)
     oOperandPushMode(mManifest)
     oOperandSetLength(two)
     oOperandSetValue(four)
     oOperandAddManifestValues
     oOperandPop
     }
     [ (tLiteralAddress)
     | *:
     @OperandPushExpression
      [ (tLiteralAddress)
      | tLiteralAddress:
      @OperandPushVariable
       oOperandPushVariable
       [ (tVarParm)
       | *:
       [ (tVarParm)
       | *:
       [ (tVarParm)
       | *:
       >>
      ;OperandPushVariable
      ] or >
      }
      [ (tVarParm)
      | *:
      ] or >
      >>
     ;OperandPushExpression
     @OperandConvertJumpConditionToData
      [ oOperandIsJumpCondition (no)
      | no:
      ] or >
      >>
     ;OperandConvertJumpConditionToData
     [ (tVarParm)
     | tVarParm:
     @OperandForceAddressIntoTemp
      [ oOperandChooseMode (mStatic)
      | mStatic:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iLoada)
      oOperandPop
      ] or >
      oOperandSetLength(two)
      >>
     ;OperandForceAddressIntoTemp
     @OperandForceToStack
      [ oOperandChooseLength (two)
      | two:
      ] or >
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mTemp)
       | mTemp:
       oTempFree
       ] or >
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mStack)
      >>
     ;OperandForceToStack
     ] or >
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStack)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     ?tParmEnd (tParmEnd)
     oOperandPushMode(mManifest)
     oOperandSetLength(two)
     oOperandSetValue(four)
     oOperandAddManifestValues
     oOperandPop
     }
     [ (tCallEnd)
     | tCallEnd:
     ] or >
     oOperandPushProcedure
     oOperandSetMode(mProc)
     oEmitSingle(iCall)
     oOperandPop
     oOperandPushMode(mStackReg)
     oOperandSetLength(two)
     oOperandSwap
     oEmitDouble(iAdd)
     oOperandPop
     oOperandPop
     oEmitMergeSourceCoordinate
     >>
    ;CallStmt
    ] or >
    }
    [ (tWriteBegin)
    | tWriteBegin:
    @WriteProc
     oEmitSourceCoordinate
     [ (tTrapBegin)
     | *:
     @WriteParameter
      ?tTrapBegin (tTrapBegin)
      ?tLiteralAddress (tLiteralAddress)
      @OperandPushVariable
       oOperandPushVariable
       [ (tVarParm)
       | *:
       [ (tVarParm)
       | *:
       [ (tVarParm)
       | *:
       >>
      ;OperandPushVariable
      @OperandForceToStack
       [ oOperandChooseLength (two)
       | two:
       ] or >
       oEmitSingle(iPush)
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandPushMode(mStack)
       >>
      ;OperandForceToStack
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStack)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      ?tVarParm (tVarParm)
      ?tParmEnd (tParmEnd)
      @OperandPushExpression
       [ (tSkipString)
       | tSkipString:
       oEmitNone(iData)
       ?tStringData (tStringData)
       oEmitString
       oEmitNone(iText)
       ] or >
       }
       [ (tLiteralAddress)
       | tLiteralAddress:
       @OperandPushVariable
        oOperandPushVariable
        [ (tFetchChar)
        | *:
        [ (tFetchChar)
        | *:
        [ (tFetchChar)
        | tFetchChar:
        oOperandSetLength(regCX)
        ] or >
        >>
       ;OperandPushVariable
       ] or >
       }
       [ (tParmEnd)
       | *:
       ] or >
       >>
      ;OperandPushExpression
      [ (tParmEnd)
      | *:
      @OperandForceToStack
       [ oOperandChooseLength (regCX)
       | regCX:
       @OperandForceAddressIntoTemp
        [ oOperandChooseMode (mStatic)
        | mStatic:
        @OperandPushTempWord
         oTempAllocate
         oOperandPushTemp
         oOperandSetValue(zero)
         oOperandSetLength(two)
         >>
        ;OperandPushTempWord
        oOperandSwap
        oEmitDouble(iLoada)
        oOperandPop
        ] or >
        oOperandSetLength(two)
        >>
       ;OperandForceAddressIntoTemp
       ] or >
       oEmitSingle(iPush)
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mTemp)
        | mTemp:
        oTempFree
        ] or >
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandPushMode(mStack)
       >>
      ;OperandForceToStack
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStack)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      ?tParmEnd (tParmEnd)
      @OperandPushExpression
       [ (tLiteralInteger)
       | tLiteralInteger:
       oOperandPushInteger
       ] or >
       }
       [ (tParmEnd)
       | *:
       ] or >
       >>
      ;OperandPushExpression
      @OperandForceToStack
       [ oOperandChooseLength (two)
       | two:
       ] or >
       oEmitSingle(iPush)
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mManifest)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandPushMode(mStack)
       >>
      ;OperandForceToStack
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStack)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      ?tParmEnd (tParmEnd)
      ?tTrap (tTrap)
      oOperandPushTrap
      oEmitSingle(iCall)
      oOperandPop
      oOperandPushMode(mStackReg)
      oOperandSetLength(two)
      oOperandPushMode(mManifest)
      oOperandSetLength(two)
      oOperandSetValue(twelve)
      oEmitDouble(iAdd)
      oOperandPop
      oOperandPop
      >>
     ;WriteParameter
     }
     [ (tWriteEnd)
     | tWriteEnd:
     ] or >
     >>
    ;WriteProc
    ] or >
    }
    [ (tTrapBegin)
    | tTrapBegin:
    @TrapStmt
     oEmitSourceCoordinate
     [ (tLiteralAddress)
     | tLiteralAddress:
     @OperandPushVariable
      oOperandPushVariable
      [ (tVarParm)
      | *:
      [ (tVarParm)
      | *:
      [ (tVarParm)
      | *:
      >>
     ;OperandPushVariable
     oOperandPushCopy
     @OperandForceToStack
      [ oOperandChooseLength (two)
      | two:
      ] or >
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mStack)
      >>
     ;OperandForceToStack
     oOperandPop
     ?tVarParm (tVarParm)
     ?tParmEnd (tParmEnd)
     [ (tTrap)
     | tTrap:
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushTrap
     oEmitSingle(iCall)
     oOperandPop
     oOperandPushMode(mStackReg)
     oOperandSetLength(two)
     oOperandPushMode(mManifest)
     oOperandSetLength(two)
     oOperandSetValue(four)
     oEmitDouble(iAdd)
     oOperandPop
     oOperandPop
     ] or >
     ] or >
     >>
    ;TrapStmt
    ] or >
    }
    [ (tProcedureEnd)
    | *:
    ] or >
    >>
   ;Block
   ?tProcedureEnd (tProcedureEnd)
   oEmitNone(iLeave)
   oEmitNone(iReturn)
   >>
  ;Routine
  oFixForwardBranch
  oFixPopAddress
  ] or >
  }
  [ (tSkipProc)
  | tSkipProc:
  oEmitUnconditionalForwardBranch
  oFixPushLastAddress
  @Routine
   oEmitProcLabel(mProc)
   oEmitNone(iEnter)
   [ (tLiteralAddress)
   | *:
   oOperandPushMode(mArgument)
   oOperandSetValue(four)
   [ (tLiteralAddress)
   | tLiteralAddress:
   @OperandNextArgument
    oOperandSetMode(mManifest)
    oOperandPushMode(mManifest)
    oOperandSetValue(four)
    oOperandAddManifestValues
    oOperandPop
    oOperandSetMode(mArgument)
    >>
   ;OperandNextArgument
   oOperandPushCopy
   oOperandPushVariable
   oOperandSwap
   [ (tStoreAddress)
   | tStoreAddress:
   oOperandSetLength(two)
   @OperandAssignIntegerPopPop
    [ oOperandCompareLeftAndRight (no)
    | no:
    @EmitMove
     @OperandLeftOrRightIsTemp
      [ oOperandChooseMode (mArgument)
      | *:
      oOperandSwap
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandSwap
      >>no
     ;OperandLeftOrRightIsTemp
     [@OperandLeftOrRightIsTemp (no)
     | *:
     [ oOperandChooseMode (mArgument)
     | *:
     oOperandPushCopy
     @OperandForceIntoTemp
      [ oOperandChooseMode (mArgument)
      | *:
      [ oOperandChooseLength (two)
      | two:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iMov)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mArgument)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandSetMode(mTemp)
      ] or >
      >>
     ;OperandForceIntoTemp
     oOperandSwapLeftAndDest
     oEmitDouble(iMov)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mTemp)
      | mTemp:
      oTempFree
      ] or >
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandSwap
     >>
    ;EmitMove
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mArgument)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ] or >
    >>
   ;OperandAssignIntegerPopPop
   ] or >
   ] or >
   }
   [ (tLiteralAddress)
   | tLiteralAddress:
   @OperandNextArgument
    oOperandSetMode(mManifest)
    oOperandPushMode(mManifest)
    oOperandSetValue(four)
    oOperandAddManifestValues
    oOperandPop
    oOperandSetMode(mArgument)
    >>
   ;OperandNextArgument
   oOperandPushCopy
   oOperandPushVariable
   oOperandSwap
   [ (tStoreAddress)
   | tStoreAddress:
   oOperandSetLength(two)
   @OperandAssignIntegerPopPop
    [ oOperandCompareLeftAndRight (no)
    | no:
    @EmitMove
     @OperandLeftOrRightIsTemp
      [ oOperandChooseMode (mArgument)
      | *:
      oOperandSwap
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandSwap
      >>no
     ;OperandLeftOrRightIsTemp
     [@OperandLeftOrRightIsTemp (no)
     | *:
     [ oOperandChooseMode (mArgument)
     | *:
     oOperandPushCopy
     @OperandForceIntoTemp
      [ oOperandChooseMode (mArgument)
      | *:
      [ oOperandChooseLength (two)
      | two:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iMov)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mArgument)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandSetMode(mTemp)
      ] or >
      >>
     ;OperandForceIntoTemp
     oOperandSwapLeftAndDest
     oEmitDouble(iMov)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mTemp)
      | mTemp:
      oTempFree
      ] or >
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandSwap
     >>
    ;EmitMove
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mArgument)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ] or >
    >>
   ;OperandAssignIntegerPopPop
   ] or >
   ] or >
   }
   [ (tLiteralAddress)
   | tLiteralAddress:
   @OperandNextArgument
    oOperandSetMode(mManifest)
    oOperandPushMode(mManifest)
    oOperandSetValue(four)
    oOperandAddManifestValues
    oOperandPop
    oOperandSetMode(mArgument)
    >>
   ;OperandNextArgument
   oOperandPushCopy
   oOperandPushVariable
   oOperandSwap
   [ (tStoreAddress)
   | tStoreAddress:
   oOperandSetLength(two)
   @OperandAssignIntegerPopPop
    [ oOperandCompareLeftAndRight (no)
    | no:
    @EmitMove
     @OperandLeftOrRightIsTemp
      [ oOperandChooseMode (mArgument)
      | *:
      oOperandSwap
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandSwap
      >>no
     ;OperandLeftOrRightIsTemp
     [@OperandLeftOrRightIsTemp (no)
     | *:
     [ oOperandChooseMode (mArgument)
     | *:
     oOperandPushCopy
     @OperandForceIntoTemp
      [ oOperandChooseMode (mArgument)
      | *:
      [ oOperandChooseLength (two)
      | two:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iMov)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mArgument)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandSetMode(mTemp)
      ] or >
      >>
     ;OperandForceIntoTemp
     oOperandSwapLeftAndDest
     oEmitDouble(iMov)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mTemp)
      | mTemp:
      oTempFree
      ] or >
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandSwap
     >>
    ;EmitMove
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mArgument)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ] or >
    >>
   ;OperandAssignIntegerPopPop
   ] or >
   ] or >
   }
   [ (tLiteralAddress)
   | tLiteralAddress:
   @OperandNextArgument
    oOperandSetMode(mManifest)
    oOperandPushMode(mManifest)
    oOperandSetValue(four)
    oOperandAddManifestValues
    oOperandPop
    oOperandSetMode(mArgument)
    >>
   ;OperandNextArgument
   oOperandPushCopy
   oOperandPushVariable
   oOperandSwap
   [ (tStoreInteger)
   | tStoreInteger:
   oOperandSetLength(two)
   @OperandAssignIntegerPopPop
    [ oOperandCompareLeftAndRight (no)
    | no:
    @EmitMove
     @OperandLeftOrRightIsTemp
      [ oOperandChooseMode (mArgument)
      | *:
      oOperandSwap
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandSwap
      >>no
     ;OperandLeftOrRightIsTemp
     [@OperandLeftOrRightIsTemp (no)
     | *:
     [ oOperandChooseMode (mArgument)
     | *:
     oOperandPushCopy
     @OperandForceIntoTemp
      [ oOperandChooseMode (mArgument)
      | *:
      [ oOperandChooseLength (two)
      | two:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iMov)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mArgument)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandSetMode(mTemp)
      ] or >
      >>
     ;OperandForceIntoTemp
     oOperandSwapLeftAndDest
     oEmitDouble(iMov)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mTemp)
      | mTemp:
      oTempFree
      ] or >
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandSwap
     >>
    ;EmitMove
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mArgument)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ] or >
    >>
   ;OperandAssignIntegerPopPop
   ] or >
   ] or >
   }
   [ (tParmEnd)
   | tParmEnd:
   ] or >
   oOperandPop
   @Block
    [ (tAssignBegin)
    | tAssignBegin:
    @AssignStmt
     oEmitSourceCoordinate
     ?tLiteralAddress (tLiteralAddress)
     @OperandPushVariable
      oOperandPushVariable
      [ (tFetchAddress)
      | tFetchAddress:
      oOperandSetMode(mStatic)
      @OperandForceIntoTemp
       [ oOperandChooseMode (mStatic)
       | *:
       [ oOperandChooseLength (two)
       | two:
       @OperandPushTempWord
        oTempAllocate
        oOperandPushTemp
        oOperandSetValue(zero)
        oOperandSetLength(two)
        >>
       ;OperandPushTempWord
       oOperandSwap
       oEmitDouble(iMov)
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandSetMode(mTemp)
       ] or >
       >>
      ;OperandForceIntoTemp
      oOperandSetMode(mTempIndirect)
      ] or >
      [ (tLiteralInteger)
      | *:
      [ (tLiteralInteger)
      | *:
      >>
     ;OperandPushVariable
     @OperandPushExpressionAssignPopPop
      [ (tLiteralInteger)
      | tLiteralInteger:
      oOperandPushInteger
      ] or >
      }
      [ (tAssignInteger)
      | tAssignInteger:
      @OperandAssignIntegerPopPop
       [ oOperandCompareLeftAndRight (no)
       | no:
       @EmitMove
        @OperandLeftOrRightIsTemp
         [ oOperandChooseMode (mManifest)
         | *:
         oOperandSwap
         [ oOperandChooseMode (mTempIndirect)
         | *:
         oOperandSwap
         >>no
        ;OperandLeftOrRightIsTemp
        [@OperandLeftOrRightIsTemp (no)
        | *:
        [ oOperandChooseMode (mManifest)
        | mManifest:
        oEmitDouble(iMov)
        ] or >
        >>
       ;EmitMove
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mManifest)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mTempIndirect)
        | mTempIndirect:
        oTempFree
        ] or >
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       ] or >
       >>
      ;OperandAssignIntegerPopPop
      ] or >
      >>
     ;OperandPushExpressionAssignPopPop
     >>
    ;AssignStmt
    ] or >
    }
    [ (tInitialValue)
    | tInitialValue:
    @OperandPushExpression
     [ (tLiteralInteger)
     | tLiteralInteger:
     oOperandPushInteger
     ] or >
     }
     [ (tInitEnd)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    ?tInitEnd (tInitEnd)
    ?tLiteralAddress (tLiteralAddress)
    oOperandPushVariable
    oOperandSwap
    [ (tStoreInteger)
    | tStoreInteger:
    oOperandSetLength(two)
    @OperandAssignIntegerPopPop
     [ oOperandCompareLeftAndRight (no)
     | no:
     @EmitMove
      @OperandLeftOrRightIsTemp
       [ oOperandChooseMode (mManifest)
       | *:
       oOperandSwap
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandSwap
       >>no
      ;OperandLeftOrRightIsTemp
      [@OperandLeftOrRightIsTemp (no)
      | *:
      [ oOperandChooseMode (mManifest)
      | mManifest:
      oEmitDouble(iMov)
      ] or >
      >>
     ;EmitMove
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mManifest)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     ] or >
     >>
    ;OperandAssignIntegerPopPop
    ] or >
    ] or >
    }
    [ (tInitialValue)
    | tInitialValue:
    @OperandPushExpression
     [ (tLiteralInteger)
     | tLiteralInteger:
     oOperandPushInteger
     ] or >
     }
     [ (tInitEnd)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    ?tInitEnd (tInitEnd)
    ?tLiteralAddress (tLiteralAddress)
    oOperandPushVariable
    oOperandSwap
    [ (tStoreInteger)
    | tStoreInteger:
    oOperandSetLength(two)
    @OperandAssignIntegerPopPop
     [ oOperandCompareLeftAndRight (no)
     | no:
     @EmitMove
      @OperandLeftOrRightIsTemp
       [ oOperandChooseMode (mManifest)
       | *:
       oOperandSwap
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandSwap
       >>no
      ;OperandLeftOrRightIsTemp
      [@OperandLeftOrRightIsTemp (no)
      | *:
      [ oOperandChooseMode (mManifest)
      | mManifest:
      oEmitDouble(iMov)
      ] or >
      >>
     ;EmitMove
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mManifest)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     ] or >
     >>
    ;OperandAssignIntegerPopPop
    ] or >
    ] or >
    }
    [ (tWhileBegin)
    | tWhileBegin:
    @WhileStmt
     oFixPushAddress
     oEmitMergeSourceCoordinate
     @OperandPushBooleanControlExpression
      @OperandPushExpression
       [ (tLiteralAddress)
       | tLiteralAddress:
       @OperandPushVariable
        oOperandPushVariable
        [ (tFetchInteger)
        | *:
        [ (tFetchInteger)
        | *:
        [ (tFetchInteger)
        | tFetchInteger:
        ] or >
        >>
       ;OperandPushVariable
       ] or >
       }
       [ (tLiteralAddress)
       | tLiteralAddress:
       @OperandPushVariable
        oOperandPushVariable
        [ (tFetchInteger)
        | *:
        [ (tFetchInteger)
        | *:
        [ (tFetchInteger)
        | tFetchInteger:
        ] or >
        >>
       ;OperandPushVariable
       ] or >
       }
       [ (tLE)
       | tLE:
       @OperandGreaterPop
        [ oOperandCompareLeftAndRight (no)
        | no:
        [ oOperandChooseManifestValue ()
        | *:
        oOperandSwap
        [ oOperandChooseManifestValue ()
        | *:
        oOperandSwap
        @EmitCmp
         oOperandSwap
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandSwap
         @OperandLeftOrRightIsTemp
          [ oOperandChooseMode (mStatic)
          | *:
          oOperandSwap
          [ oOperandChooseMode (mStatic)
          | *:
          oOperandSwap
          >>no
         ;OperandLeftOrRightIsTemp
         [@OperandLeftOrRightIsTemp (no)
         | *:
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandPushCopy
         @OperandForceIntoTemp
          [ oOperandChooseMode (mStatic)
          | *:
          [ oOperandChooseLength (two)
          | two:
          @OperandPushTempWord
           oTempAllocate
           oOperandPushTemp
           oOperandSetValue(zero)
           oOperandSetLength(two)
           >>
          ;OperandPushTempWord
          oOperandSwap
          oEmitDouble(iMov)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandSetMode(mTemp)
          ] or >
          >>
         ;OperandForceIntoTemp
         oOperandSwapLeftAndDest
         oEmitDouble(iCmp)
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mTemp)
          | mTemp:
          oTempFree
          ] or >
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         oOperandSwap
         >>
        ;EmitCmp
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        oOperandPushJumpCondition(iJgt)
        ] or >
        >>
       ;OperandGreaterPop
       @OperandNot
        @OperandForceToJumpCondition
         [ oOperandIsJumpCondition (yes)
         | yes:
         ] or >
         >>
        ;OperandForceToJumpCondition
        @OperandComplementJumpCondition
         [ oOperandChooseJumpCondition (iJgt)
         | *:
         oOperandComplementJumpCondition
         >>
        ;OperandComplementJumpCondition
        >>
       ;OperandNot
       ] or >
       }
       [ (tWhileTest)
       | *:
       ] or >
       >>
      ;OperandPushExpression
      @OperandForceToJumpCondition
       [ oOperandIsJumpCondition (yes)
       | yes:
       ] or >
       >>
      ;OperandForceToJumpCondition
      >>
     ;OperandPushBooleanControlExpression
     ?tWhileTest (tWhileTest)
     @OperandComplementJumpCondition
      [ oOperandChooseJumpCondition (iJle)
      | *:
      oOperandComplementJumpCondition
      >>
     ;OperandComplementJumpCondition
     [ oOperandChooseJumpCondition (iJgt)
     | *:
     @OperandInfixOr
      @OperandForceToJumpCondition
       [ oOperandIsJumpCondition (yes)
       | yes:
       ] or >
       >>
      ;OperandForceToJumpCondition
      [ oOperandChooseJumpCondition (iJgt)
      | *:
      oEmitConditionalForwardBranch
      oFixAndFreeFalseBranches
      oFixPushLastAddress
      oOperandMergeShuntsWithAddress
      oFixPopAddress
      >>
     ;OperandInfixOr
     @Statements
      @Block
       [ (tCaseBegin)
       | tCaseBegin:
       @CaseStmt
        oEmitSourceCoordinate
        oCasePush
        oCaseEnterTCodeAddress
        @OperandPushExpression
         [ (tLiteralAddress)
         | tLiteralAddress:
         @OperandPushVariable
          oOperandPushVariable
          [ (tFetchAddress)
          | tFetchAddress:
          oOperandSetMode(mStatic)
          @OperandForceIntoTemp
           [ oOperandChooseMode (mStatic)
           | *:
           [ oOperandChooseLength (two)
           | two:
           @OperandPushTempWord
            oTempAllocate
            oOperandPushTemp
            oOperandSetValue(zero)
            oOperandSetLength(two)
            >>
           ;OperandPushTempWord
           oOperandSwap
           oEmitDouble(iMov)
           @OperandPopAndFreeTemp
            [ oOperandChooseMode (mStatic)
            | *:
            oOperandPop
            >>
           ;OperandPopAndFreeTemp
           oOperandSetMode(mTemp)
           ] or >
           >>
          ;OperandForceIntoTemp
          oOperandSetMode(mTempIndirect)
          ] or >
          [ (tSubscriptBegin)
          | tSubscriptBegin:
          @OperandPushExpression
           [ (tLiteralAddress)
           | tLiteralAddress:
           @OperandPushVariable
            oOperandPushVariable
            [ (tFetchInteger)
            | *:
            [ (tFetchInteger)
            | *:
            [ (tFetchInteger)
            | tFetchInteger:
            ] or >
            >>
           ;OperandPushVariable
           ] or >
           }
           [ (tSubscriptInteger)
           | *:
           ] or >
           >>
          ;OperandPushExpression
          [ (tSubscriptInteger)
          | tSubscriptInteger:
          @OperandSubscriptIntegerPop
           [ oOperandChooseMode (mStatic)
           | *:
           @OperandSubscriptNonManifestIntegerPop
            [ oOptionTestChecking (yes)
            | yes:
            @OperandCheckedSubscriptNonManifestIntegerPop
             @OperandForceIntoTemp
              [ oOperandChooseMode (mStatic)
              | *:
              [ oOperandChooseLength (two)
              | two:
              @OperandPushTempWord
               oTempAllocate
               oOperandPushTemp
               oOperandSetValue(zero)
               oOperandSetLength(two)
               >>
              ;OperandPushTempWord
              oOperandSwap
              oEmitDouble(iMov)
              @OperandPopAndFreeTemp
               [ oOperandChooseMode (mStatic)
               | *:
               oOperandPop
               >>
              ;OperandPopAndFreeTemp
              oOperandSetMode(mTemp)
              ] or >
              >>
             ;OperandForceIntoTemp
             [ oOptionTestChecking (yes)
             | yes:
             @EmitSubscriptRangeCheck
              oOperandSwap
              @OperandPushArrayUpperBound
               [ oOperandChooseMode (mTempIndirect)
               | mTempIndirect:
               oOperandPushCopy
               oOperandSetValue(four)
               ] or >
               >>
              ;OperandPushArrayUpperBound
              oOperandSwapLeftAndDest
              @EmitCmp
               oOperandSwap
               [ oOperandChooseMode (mTemp)
               | *:
               oOperandSwap
               @OperandLeftOrRightIsTemp
                [ oOperandChooseMode (mTempIndirect)
                | *:
                oOperandSwap
                [ oOperandChooseMode (mTemp)
                | mTemp:
                oOperandSwap
                >>yes
               ;OperandLeftOrRightIsTemp
               [@OperandLeftOrRightIsTemp (yes)
               | yes:
               oEmitDouble(iCmp)
               ] or >
               >>
              ;EmitCmp
              oOperandPushJumpCondition(iJgt)
              oEmitConditionalForwardBranch
              oFixPushLastAddress
              oOperandPop
              oOperandPop
              oOperandSwap
              @OperandPushArrayLowerBound
               [ oOperandChooseMode (mTempIndirect)
               | *:
               oOperandPushCopy
               oOperandSetLength(two)
               >>
              ;OperandPushArrayLowerBound
              oOperandSwapLeftAndDest
              @EmitCmp
               oOperandSwap
               [ oOperandChooseMode (mTemp)
               | *:
               oOperandSwap
               @OperandLeftOrRightIsTemp
                [ oOperandChooseMode (mTempIndirect)
                | *:
                oOperandSwap
                [ oOperandChooseMode (mTemp)
                | mTemp:
                oOperandSwap
                >>yes
               ;OperandLeftOrRightIsTemp
               [@OperandLeftOrRightIsTemp (yes)
               | yes:
               oEmitDouble(iCmp)
               ] or >
               >>
              ;EmitCmp
              oOperandPushJumpCondition(iJge)
              oEmitConditionalForwardBranch
              oFixPushLastAddress
              oOperandPop
              oOperandPop
              oFixSwapAddresses
              oFixForwardBranch
              oFixPopAddress
              @EmitSubscriptAbort
               oOperandPushMode(mLineNum)
               oOperandSetLength(two)
               oEmitSingle(iPush)
               oOperandPop
               oOperandPushMode(mTrap)
               oOperandSetValue(trSubscriptAbort)
               oEmitSingle(iCall)
               oOperandPop
               >>
              ;EmitSubscriptAbort
              oFixForwardBranch
              oFixPopAddress
              >>
             ;EmitSubscriptRangeCheck
             ] or >
             oOperandSwap
             @OperandPushArrayLowerBound
              [ oOperandChooseMode (mTempIndirect)
              | *:
              oOperandPushCopy
              oOperandSetLength(two)
              >>
             ;OperandPushArrayLowerBound
             oOperandSwapLeftAndDest
             @OperandSubtractPop
              @OperandAreLeftAndRightManifest
               [ oOperandChooseMode (mTempIndirect)
               | *:
               >>no
              ;OperandAreLeftAndRightManifest
              [@OperandAreLeftAndRightManifest (no)
              | no:
              [ oOperandChooseManifestValue ()
              | *:
              @OperandForceLeftIntoTemp
               oOperandSwap
               [ oOperandChooseMode (mTemp)
               | mTemp:
               oOperandSwap
               ] or >
               >>
              ;OperandForceLeftIntoTemp
              oEmitDouble(iSub)
              @OperandPopAndFreeTemp
               [ oOperandChooseMode (mTempIndirect)
               | mTempIndirect:
               oTempFree
               ] or >
               oOperandPop
               >>
              ;OperandPopAndFreeTemp
              ] or >
              >>
             ;OperandSubtractPop
             oOperandPushMode(mManifest)
             oOperandSetLength(two)
             oOperandSetValue(two)
             oEmitDouble(iShl)
             oOperandPop
             oOperandSwap
             [ oOperandChooseMode (mTempIndirect)
             | *:
             @OperandForceAddressIntoTemp
              [ oOperandChooseMode (mTempIndirect)
              | mTempIndirect:
              [ oOperandChooseValue (zero)
              | zero:
              oOperandSetMode(mTemp)
              ] or >
              ] or >
              oOperandSetLength(two)
              >>
             ;OperandForceAddressIntoTemp
             oOperandPushMode(mManifest)
             oOperandSetLength(two)
             oOperandSetValue(eight)
             oEmitDouble(iAdd)
             oOperandPop
             oEmitDouble(iAdd)
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mTemp)
              | mTemp:
              oTempFree
              ] or >
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandSetMode(mTempIndirect)
             oOperandSetLength(two)
             >>
            ;OperandCheckedSubscriptNonManifestIntegerPop
            ] or >
            >>
           ;OperandSubscriptNonManifestIntegerPop
           oOperandSetLength(two)
           >>
          ;OperandSubscriptIntegerPop
          ] or >
          ] or >
          [ (tFetchInteger)
          | tFetchInteger:
          ] or >
          >>
         ;OperandPushVariable
         ] or >
         }
         [ (tCaseSelect)
         | *:
         ] or >
         >>
        ;OperandPushExpression
        @OperandFreeTemp
         [ oOperandChooseMode (mTempIndirect)
         | mTempIndirect:
         oTempFree
         ] or >
         >>
        ;OperandFreeTemp
        ?tCaseSelect (tCaseSelect)
        @CaseSelect
         oEmitUnconditionalForwardBranch
         oFixPushLastAddress
         >>
        ;CaseSelect
        [ (tAssignBegin)
        | *:
        @CaseVariant
         oCaseEnterVariantAddress
         oEmitMergeSourceCoordinate
         @Statements
          @Block
           [ (tAssignBegin)
           | tAssignBegin:
           @AssignStmt
            oEmitSourceCoordinate
            ?tLiteralAddress (tLiteralAddress)
            @OperandPushVariable
             oOperandPushVariable
             [ (tFetchAddress)
             | tFetchAddress:
             oOperandSetMode(mStatic)
             @OperandForceIntoTemp
              [ oOperandChooseMode (mStatic)
              | *:
              [ oOperandChooseLength (two)
              | two:
              @OperandPushTempWord
               oTempAllocate
               oOperandPushTemp
               oOperandSetValue(zero)
               oOperandSetLength(two)
               >>
              ;OperandPushTempWord
              oOperandSwap
              oEmitDouble(iMov)
              @OperandPopAndFreeTemp
               [ oOperandChooseMode (mStatic)
               | *:
               oOperandPop
               >>
              ;OperandPopAndFreeTemp
              oOperandSetMode(mTemp)
              ] or >
              >>
             ;OperandForceIntoTemp
             oOperandSetMode(mTempIndirect)
             ] or >
             [ (tLiteralAddress)
             | *:
             [ (tLiteralAddress)
             | *:
             >>
            ;OperandPushVariable
            @OperandPushExpressionAssignPopPop
             [ (tLiteralAddress)
             | tLiteralAddress:
             @OperandPushVariable
              oOperandPushVariable
              [ (tFetchAddress)
              | tFetchAddress:
              oOperandSetMode(mStatic)
              @OperandForceIntoTemp
               [ oOperandChooseMode (mStatic)
               | *:
               [ oOperandChooseLength (two)
               | two:
               @OperandPushTempWord
                oTempAllocate
                oOperandPushTemp
                oOperandSetValue(zero)
                oOperandSetLength(two)
                >>
               ;OperandPushTempWord
               oOperandSwap
               oEmitDouble(iMov)
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mStatic)
                | *:
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               oOperandSetMode(mTemp)
               ] or >
               >>
              ;OperandForceIntoTemp
              oOperandSetMode(mTempIndirect)
              ] or >
              [ (tFetchInteger)
              | *:
              [ (tFetchInteger)
              | tFetchInteger:
              ] or >
              >>
             ;OperandPushVariable
             ] or >
             }
             [ (tLiteralAddress)
             | tLiteralAddress:
             @OperandPushVariable
              oOperandPushVariable
              [ (tFetchAddress)
              | tFetchAddress:
              oOperandSetMode(mStatic)
              @OperandForceIntoTemp
               [ oOperandChooseMode (mStatic)
               | *:
               [ oOperandChooseLength (two)
               | two:
               @OperandPushTempWord
                oTempAllocate
                oOperandPushTemp
                oOperandSetValue(zero)
                oOperandSetLength(two)
                >>
               ;OperandPushTempWord
               oOperandSwap
               oEmitDouble(iMov)
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mStatic)
                | *:
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               oOperandSetMode(mTemp)
               ] or >
               >>
              ;OperandForceIntoTemp
              oOperandSetMode(mTempIndirect)
              ] or >
              [ (tSubscriptBegin)
              | tSubscriptBegin:
              @OperandPushExpression
               [ (tLiteralAddress)
               | tLiteralAddress:
               @OperandPushVariable
                oOperandPushVariable
                [ (tFetchInteger)
                | *:
                [ (tFetchInteger)
                | *:
                [ (tFetchInteger)
                | tFetchInteger:
                ] or >
                >>
               ;OperandPushVariable
               ] or >
               }
               [ (tSubscriptInteger)
               | *:
               ] or >
               >>
              ;OperandPushExpression
              [ (tSubscriptInteger)
              | tSubscriptInteger:
              @OperandSubscriptIntegerPop
               [ oOperandChooseMode (mStatic)
               | *:
               @OperandSubscriptNonManifestIntegerPop
                [ oOptionTestChecking (yes)
                | yes:
                @OperandCheckedSubscriptNonManifestIntegerPop
                 @OperandForceIntoTemp
                  [ oOperandChooseMode (mStatic)
                  | *:
                  [ oOperandChooseLength (two)
                  | two:
                  @OperandPushTempWord
                   oTempAllocate
                   oOperandPushTemp
                   oOperandSetValue(zero)
                   oOperandSetLength(two)
                   >>
                  ;OperandPushTempWord
                  oOperandSwap
                  oEmitDouble(iMov)
                  @OperandPopAndFreeTemp
                   [ oOperandChooseMode (mStatic)
                   | *:
                   oOperandPop
                   >>
                  ;OperandPopAndFreeTemp
                  oOperandSetMode(mTemp)
                  ] or >
                  >>
                 ;OperandForceIntoTemp
                 [ oOptionTestChecking (yes)
                 | yes:
                 @EmitSubscriptRangeCheck
                  oOperandSwap
                  @OperandPushArrayUpperBound
                   [ oOperandChooseMode (mTempIndirect)
                   | mTempIndirect:
                   oOperandPushCopy
                   oOperandSetValue(four)
                   ] or >
                   >>
                  ;OperandPushArrayUpperBound
                  oOperandSwapLeftAndDest
                  @EmitCmp
                   oOperandSwap
                   [ oOperandChooseMode (mTemp)
                   | *:
                   oOperandSwap
                   @OperandLeftOrRightIsTemp
                    [ oOperandChooseMode (mTempIndirect)
                    | *:
                    oOperandSwap
                    [ oOperandChooseMode (mTemp)
                    | mTemp:
                    oOperandSwap
                    >>yes
                   ;OperandLeftOrRightIsTemp
                   [@OperandLeftOrRightIsTemp (yes)
                   | yes:
                   oEmitDouble(iCmp)
                   ] or >
                   >>
                  ;EmitCmp
                  oOperandPushJumpCondition(iJgt)
                  oEmitConditionalForwardBranch
                  oFixPushLastAddress
                  oOperandPop
                  oOperandPop
                  oOperandSwap
                  @OperandPushArrayLowerBound
                   [ oOperandChooseMode (mTempIndirect)
                   | *:
                   oOperandPushCopy
                   oOperandSetLength(two)
                   >>
                  ;OperandPushArrayLowerBound
                  oOperandSwapLeftAndDest
                  @EmitCmp
                   oOperandSwap
                   [ oOperandChooseMode (mTemp)
                   | *:
                   oOperandSwap
                   @OperandLeftOrRightIsTemp
                    [ oOperandChooseMode (mTempIndirect)
                    | *:
                    oOperandSwap
                    [ oOperandChooseMode (mTemp)
                    | mTemp:
                    oOperandSwap
                    >>yes
                   ;OperandLeftOrRightIsTemp
                   [@OperandLeftOrRightIsTemp (yes)
                   | yes:
                   oEmitDouble(iCmp)
                   ] or >
                   >>
                  ;EmitCmp
                  oOperandPushJumpCondition(iJge)
                  oEmitConditionalForwardBranch
                  oFixPushLastAddress
                  oOperandPop
                  oOperandPop
                  oFixSwapAddresses
                  oFixForwardBranch
                  oFixPopAddress
                  @EmitSubscriptAbort
                   oOperandPushMode(mLineNum)
                   oOperandSetLength(two)
                   oEmitSingle(iPush)
                   oOperandPop
                   oOperandPushMode(mTrap)
                   oOperandSetValue(trSubscriptAbort)
                   oEmitSingle(iCall)
                   oOperandPop
                   >>
                  ;EmitSubscriptAbort
                  oFixForwardBranch
                  oFixPopAddress
                  >>
                 ;EmitSubscriptRangeCheck
                 ] or >
                 oOperandSwap
                 @OperandPushArrayLowerBound
                  [ oOperandChooseMode (mTempIndirect)
                  | *:
                  oOperandPushCopy
                  oOperandSetLength(two)
                  >>
                 ;OperandPushArrayLowerBound
                 oOperandSwapLeftAndDest
                 @OperandSubtractPop
                  @OperandAreLeftAndRightManifest
                   [ oOperandChooseMode (mTempIndirect)
                   | *:
                   >>no
                  ;OperandAreLeftAndRightManifest
                  [@OperandAreLeftAndRightManifest (no)
                  | no:
                  [ oOperandChooseManifestValue ()
                  | *:
                  @OperandForceLeftIntoTemp
                   oOperandSwap
                   [ oOperandChooseMode (mTemp)
                   | mTemp:
                   oOperandSwap
                   ] or >
                   >>
                  ;OperandForceLeftIntoTemp
                  oEmitDouble(iSub)
                  @OperandPopAndFreeTemp
                   [ oOperandChooseMode (mTempIndirect)
                   | mTempIndirect:
                   oTempFree
                   ] or >
                   oOperandPop
                   >>
                  ;OperandPopAndFreeTemp
                  ] or >
                  >>
                 ;OperandSubtractPop
                 oOperandPushMode(mManifest)
                 oOperandSetLength(two)
                 oOperandSetValue(two)
                 oEmitDouble(iShl)
                 oOperandPop
                 oOperandSwap
                 [ oOperandChooseMode (mTempIndirect)
                 | *:
                 @OperandForceAddressIntoTemp
                  [ oOperandChooseMode (mTempIndirect)
                  | mTempIndirect:
                  [ oOperandChooseValue (zero)
                  | zero:
                  oOperandSetMode(mTemp)
                  ] or >
                  ] or >
                  oOperandSetLength(two)
                  >>
                 ;OperandForceAddressIntoTemp
                 oOperandPushMode(mManifest)
                 oOperandSetLength(two)
                 oOperandSetValue(eight)
                 oEmitDouble(iAdd)
                 oOperandPop
                 oEmitDouble(iAdd)
                 @OperandPopAndFreeTemp
                  [ oOperandChooseMode (mTemp)
                  | mTemp:
                  oTempFree
                  ] or >
                  oOperandPop
                  >>
                 ;OperandPopAndFreeTemp
                 oOperandSetMode(mTempIndirect)
                 oOperandSetLength(two)
                 >>
                ;OperandCheckedSubscriptNonManifestIntegerPop
                ] or >
                >>
               ;OperandSubscriptNonManifestIntegerPop
               oOperandSetLength(two)
               >>
              ;OperandSubscriptIntegerPop
              ] or >
              ] or >
              [ (tFetchInteger)
              | tFetchInteger:
              ] or >
              >>
             ;OperandPushVariable
             ] or >
             }
             [ (tAdd)
             | tAdd:
             [ (tAssignInteger)
             | tAssignInteger:
             @OperandAddAssignPopPopPop
              [ oOperandCompareRightAndDest (no)
              | *:
              oOperandSwap
              [ oOperandCompareRightAndDest (no)
              | *:
              oOperandSwap
              @OperandAddPop
               @OperandAreLeftAndRightManifest
                [ oOperandChooseMode (mTempIndirect)
                | *:
                >>no
               ;OperandAreLeftAndRightManifest
               [@OperandAreLeftAndRightManifest (no)
               | no:
               [ oOperandChooseManifestValue ()
               | *:
               oOperandSwap
               [ oOperandChooseManifestValue ()
               | *:
               [ oOperandChooseMode (mTempIndirect)
               | *:
               @OperandForceLeftIntoTemp
                oOperandSwap
                [ oOperandChooseMode (mTempIndirect)
                | *:
                @OperandForceIntoTemp
                 [ oOperandChooseMode (mTempIndirect)
                 | mTempIndirect:
                 oOperandPushCopy
                 oOperandSetMode(mTemp)
                 oOperandSwap
                 oEmitDouble(iMov)
                 oOperandPop
                 ] or >
                 >>
                ;OperandForceIntoTemp
                oOperandSwap
                >>
               ;OperandForceLeftIntoTemp
               oEmitDouble(iAdd)
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mTempIndirect)
                | mTempIndirect:
                oTempFree
                ] or >
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               ] or >
               >>
              ;OperandAddPop
              @OperandAssignIntegerPopPop
               [ oOperandCompareLeftAndRight (no)
               | no:
               @EmitMove
                @OperandLeftOrRightIsTemp
                 [ oOperandChooseMode (mTemp)
                 | mTemp:
                 >>yes
                ;OperandLeftOrRightIsTemp
                [@OperandLeftOrRightIsTemp (yes)
                | yes:
                oEmitDouble(iMov)
                ] or >
                >>
               ;EmitMove
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mTemp)
                | mTemp:
                oTempFree
                ] or >
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mTempIndirect)
                | mTempIndirect:
                oTempFree
                ] or >
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               ] or >
               >>
              ;OperandAssignIntegerPopPop
              >>
             ;OperandAddAssignPopPopPop
             ] or >
             >>
            ;OperandPushExpressionAssignPopPop
            >>
           ;AssignStmt
           ] or >
           }
           [ (tCaseMerge)
           | *:
           ] or >
           >>
          ;Block
          >>
         ;Statements
         ?tCaseMerge (tCaseMerge)
         oEmitCaseMergeBranch
         >>
        ;CaseVariant
        }
        [ (tAssignBegin)
        | *:
        @CaseVariant
         oCaseEnterVariantAddress
         oEmitMergeSourceCoordinate
         @Statements
          @Block
           [ (tAssignBegin)
           | tAssignBegin:
           @AssignStmt
            oEmitSourceCoordinate
            ?tLiteralAddress (tLiteralAddress)
            @OperandPushVariable
             oOperandPushVariable
             [ (tFetchAddress)
             | tFetchAddress:
             oOperandSetMode(mStatic)
             @OperandForceIntoTemp
              [ oOperandChooseMode (mStatic)
              | *:
              [ oOperandChooseLength (two)
              | two:
              @OperandPushTempWord
               oTempAllocate
               oOperandPushTemp
               oOperandSetValue(zero)
               oOperandSetLength(two)
               >>
              ;OperandPushTempWord
              oOperandSwap
              oEmitDouble(iMov)
              @OperandPopAndFreeTemp
               [ oOperandChooseMode (mStatic)
               | *:
               oOperandPop
               >>
              ;OperandPopAndFreeTemp
              oOperandSetMode(mTemp)
              ] or >
              >>
             ;OperandForceIntoTemp
             oOperandSetMode(mTempIndirect)
             ] or >
             [ (tLiteralAddress)
             | *:
             [ (tLiteralAddress)
             | *:
             >>
            ;OperandPushVariable
            @OperandPushExpressionAssignPopPop
             [ (tLiteralAddress)
             | tLiteralAddress:
             @OperandPushVariable
              oOperandPushVariable
              [ (tFetchAddress)
              | tFetchAddress:
              oOperandSetMode(mStatic)
              @OperandForceIntoTemp
               [ oOperandChooseMode (mStatic)
               | *:
               [ oOperandChooseLength (two)
               | two:
               @OperandPushTempWord
                oTempAllocate
                oOperandPushTemp
                oOperandSetValue(zero)
                oOperandSetLength(two)
                >>
               ;OperandPushTempWord
               oOperandSwap
               oEmitDouble(iMov)
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mStatic)
                | *:
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               oOperandSetMode(mTemp)
               ] or >
               >>
              ;OperandForceIntoTemp
              oOperandSetMode(mTempIndirect)
              ] or >
              [ (tFetchInteger)
              | *:
              [ (tFetchInteger)
              | tFetchInteger:
              ] or >
              >>
             ;OperandPushVariable
             ] or >
             }
             [ (tLiteralInteger)
             | tLiteralInteger:
             oOperandPushInteger
             ] or >
             }
             [ (tAdd)
             | tAdd:
             [ (tAssignInteger)
             | tAssignInteger:
             @OperandAddAssignPopPopPop
              [ oOperandCompareRightAndDest (no)
              | *:
              oOperandSwap
              [ oOperandCompareRightAndDest (no)
              | *:
              oOperandSwap
              @OperandAddPop
               @OperandAreLeftAndRightManifest
                [ oOperandChooseMode (mManifest)
                | mManifest:
                oOperandSwap
                [ oOperandChooseMode (mTempIndirect)
                | *:
                oOperandSwap
                >>no
               ;OperandAreLeftAndRightManifest
               [@OperandAreLeftAndRightManifest (no)
               | no:
               [ oOperandChooseManifestValue (trReadChar)
               | *:
               oOperandSwap
               [ oOperandChooseManifestValue ()
               | *:
               [ oOperandChooseMode (mTempIndirect)
               | *:
               @OperandForceLeftIntoTemp
                oOperandSwap
                [ oOperandChooseMode (mManifest)
                | *:
                @OperandForceIntoTemp
                 [ oOperandChooseMode (mManifest)
                 | *:
                 [ oOperandChooseLength (two)
                 | two:
                 @OperandPushTempWord
                  oTempAllocate
                  oOperandPushTemp
                  oOperandSetValue(zero)
                  oOperandSetLength(two)
                  >>
                 ;OperandPushTempWord
                 oOperandSwap
                 oEmitDouble(iMov)
                 @OperandPopAndFreeTemp
                  [ oOperandChooseMode (mManifest)
                  | *:
                  oOperandPop
                  >>
                 ;OperandPopAndFreeTemp
                 oOperandSetMode(mTemp)
                 ] or >
                 >>
                ;OperandForceIntoTemp
                oOperandSwap
                >>
               ;OperandForceLeftIntoTemp
               oEmitDouble(iAdd)
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mTempIndirect)
                | mTempIndirect:
                oTempFree
                ] or >
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               ] or >
               >>
              ;OperandAddPop
              @OperandAssignIntegerPopPop
               [ oOperandCompareLeftAndRight (no)
               | no:
               @EmitMove
                @OperandLeftOrRightIsTemp
                 [ oOperandChooseMode (mTemp)
                 | mTemp:
                 >>yes
                ;OperandLeftOrRightIsTemp
                [@OperandLeftOrRightIsTemp (yes)
                | yes:
                oEmitDouble(iMov)
                ] or >
                >>
               ;EmitMove
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mTemp)
                | mTemp:
                oTempFree
                ] or >
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mTempIndirect)
                | mTempIndirect:
                oTempFree
                ] or >
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               ] or >
               >>
              ;OperandAssignIntegerPopPop
              >>
             ;OperandAddAssignPopPopPop
             ] or >
             >>
            ;OperandPushExpressionAssignPopPop
            >>
           ;AssignStmt
           ] or >
           }
           [ (tAssignBegin)
           | tAssignBegin:
           @AssignStmt
            oEmitSourceCoordinate
            ?tLiteralAddress (tLiteralAddress)
            @OperandPushVariable
             oOperandPushVariable
             [ (tLiteralAddress)
             | *:
             [ (tLiteralAddress)
             | *:
             [ (tLiteralAddress)
             | *:
             >>
            ;OperandPushVariable
            @OperandPushExpressionAssignPopPop
             [ (tLiteralAddress)
             | tLiteralAddress:
             @OperandPushVariable
              oOperandPushVariable
              [ (tFetchInteger)
              | *:
              [ (tFetchInteger)
              | *:
              [ (tFetchInteger)
              | tFetchInteger:
              ] or >
              >>
             ;OperandPushVariable
             ] or >
             }
             [ (tLiteralInteger)
             | tLiteralInteger:
             oOperandPushInteger
             ] or >
             }
             [ (tAdd)
             | tAdd:
             [ (tAssignInteger)
             | tAssignInteger:
             @OperandAddAssignPopPopPop
              [ oOperandCompareRightAndDest (no)
              | *:
              oOperandSwap
              [ oOperandCompareRightAndDest (yes)
              | yes:
              oOperandPop
              @OperandAddRightToLeftPop
               [ oOperandChooseManifestValue (one)
               | one:
               oOperandPop
               oEmitSingle(iInc)
               ] or >
               >>
              ;OperandAddRightToLeftPop
              @OperandPopAndFreeTemp
               [ oOperandChooseMode (mStatic)
               | *:
               oOperandPop
               >>
              ;OperandPopAndFreeTemp
              ] or >
              >>
             ;OperandAddAssignPopPopPop
             ] or >
             >>
            ;OperandPushExpressionAssignPopPop
            >>
           ;AssignStmt
           ] or >
           }
           [ (tCaseMerge)
           | *:
           ] or >
           >>
          ;Block
          >>
         ;Statements
         ?tCaseMerge (tCaseMerge)
         oEmitCaseMergeBranch
         >>
        ;CaseVariant
        }
        [ (tCaseEnd)
        | tCaseEnd:
        ] or >
        @CaseEnd
         @EmitDefaultCaseAbort
          oCaseEnterAbortAddress
          oFixPushAddress
          oFixSwapAddresses
          oEmitMergeSourceCoordinate
          [ (tCaseElse)
          | tCaseElse:
          @Statements
           @Block
            [ (tAssignBegin)
            | tAssignBegin:
            @AssignStmt
             oEmitSourceCoordinate
             ?tLiteralAddress (tLiteralAddress)
             @OperandPushVariable
              oOperandPushVariable
              [ (tFetchAddress)
              | tFetchAddress:
              oOperandSetMode(mStatic)
              @OperandForceIntoTemp
               [ oOperandChooseMode (mStatic)
               | *:
               [ oOperandChooseLength (two)
               | two:
               @OperandPushTempWord
                oTempAllocate
                oOperandPushTemp
                oOperandSetValue(zero)
                oOperandSetLength(two)
                >>
               ;OperandPushTempWord
               oOperandSwap
               oEmitDouble(iMov)
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mStatic)
                | *:
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               oOperandSetMode(mTemp)
               ] or >
               >>
              ;OperandForceIntoTemp
              oOperandSetMode(mTempIndirect)
              ] or >
              [ (tLiteralAddress)
              | *:
              [ (tLiteralAddress)
              | *:
              >>
             ;OperandPushVariable
             @OperandPushExpressionAssignPopPop
              [ (tLiteralAddress)
              | tLiteralAddress:
              @OperandPushVariable
               oOperandPushVariable
               [ (tFetchAddress)
               | tFetchAddress:
               oOperandSetMode(mStatic)
               @OperandForceIntoTemp
                [ oOperandChooseMode (mStatic)
                | *:
                [ oOperandChooseLength (two)
                | two:
                @OperandPushTempWord
                 oTempAllocate
                 oOperandPushTemp
                 oOperandSetValue(zero)
                 oOperandSetLength(two)
                 >>
                ;OperandPushTempWord
                oOperandSwap
                oEmitDouble(iMov)
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mStatic)
                 | *:
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                oOperandSetMode(mTemp)
                ] or >
                >>
               ;OperandForceIntoTemp
               oOperandSetMode(mTempIndirect)
               ] or >
               [ (tFetchInteger)
               | *:
               [ (tFetchInteger)
               | tFetchInteger:
               ] or >
               >>
              ;OperandPushVariable
              ] or >
              }
              [ (tLiteralInteger)
              | tLiteralInteger:
              oOperandPushInteger
              ] or >
              }
              [ (tAdd)
              | tAdd:
              [ (tAssignInteger)
              | tAssignInteger:
              @OperandAddAssignPopPopPop
               [ oOperandCompareRightAndDest (no)
               | *:
               oOperandSwap
               [ oOperandCompareRightAndDest (no)
               | *:
               oOperandSwap
               @OperandAddPop
                @OperandAreLeftAndRightManifest
                 [ oOperandChooseMode (mManifest)
                 | mManifest:
                 oOperandSwap
                 [ oOperandChooseMode (mTempIndirect)
                 | *:
                 oOperandSwap
                 >>no
                ;OperandAreLeftAndRightManifest
                [@OperandAreLeftAndRightManifest (no)
                | no:
                [ oOperandChooseManifestValue (trReadInteger)
                | *:
                oOperandSwap
                [ oOperandChooseManifestValue ()
                | *:
                [ oOperandChooseMode (mTempIndirect)
                | *:
                @OperandForceLeftIntoTemp
                 oOperandSwap
                 [ oOperandChooseMode (mManifest)
                 | *:
                 @OperandForceIntoTemp
                  [ oOperandChooseMode (mManifest)
                  | *:
                  [ oOperandChooseLength (two)
                  | two:
                  @OperandPushTempWord
                   oTempAllocate
                   oOperandPushTemp
                   oOperandSetValue(zero)
                   oOperandSetLength(two)
                   >>
                  ;OperandPushTempWord
                  oOperandSwap
                  oEmitDouble(iMov)
                  @OperandPopAndFreeTemp
                   [ oOperandChooseMode (mManifest)
                   | *:
                   oOperandPop
                   >>
                  ;OperandPopAndFreeTemp
                  oOperandSetMode(mTemp)
                  ] or >
                  >>
                 ;OperandForceIntoTemp
                 oOperandSwap
                 >>
                ;OperandForceLeftIntoTemp
                oEmitDouble(iAdd)
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mTempIndirect)
                 | mTempIndirect:
                 oTempFree
                 ] or >
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                ] or >
                >>
               ;OperandAddPop
               @OperandAssignIntegerPopPop
                [ oOperandCompareLeftAndRight (no)
                | no:
                @EmitMove
                 @OperandLeftOrRightIsTemp
                  [ oOperandChooseMode (mTemp)
                  | mTemp:
                  >>yes
                 ;OperandLeftOrRightIsTemp
                 [@OperandLeftOrRightIsTemp (yes)
                 | yes:
                 oEmitDouble(iMov)
                 ] or >
                 >>
                ;EmitMove
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mTemp)
                 | mTemp:
                 oTempFree
                 ] or >
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mTempIndirect)
                 | mTempIndirect:
                 oTempFree
                 ] or >
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                ] or >
                >>
               ;OperandAssignIntegerPopPop
               >>
              ;OperandAddAssignPopPopPop
              ] or >
              >>
             ;OperandPushExpressionAssignPopPop
             >>
            ;AssignStmt
            ] or >
            }
            [ (tCaseElseEnd)
            | *:
            ] or >
            >>
           ;Block
           >>
          ;Statements
          ?tCaseElseEnd (tCaseElseEnd)
          oEmitCaseMergeBranch
          ] or >
          >>
         ;EmitDefaultCaseAbort
         oFixForwardBranch
         oFixPopAddress
         @EmitCaseSubscriptJump
          @OperandForceIntoTemp
           [ oOperandChooseMode (mTempIndirect)
           | mTempIndirect:
           oOperandPushCopy
           oOperandSetMode(mTemp)
           oOperandSwap
           oEmitDouble(iMov)
           oOperandPop
           ] or >
           >>
          ;OperandForceIntoTemp
          oOperandPushCaseLow
          @OperandSubtractRightFromLeftPop
           [ oOperandChooseManifestValue (one)
           | one:
           oOperandPop
           oEmitSingle(iDec)
           ] or >
           >>
          ;OperandSubtractRightFromLeftPop
          [ oOptionTestChecking (yes)
          | yes:
          oOperandPushCaseHigh
          oOperandPushCaseLow
          oOperandSubtractManifestValues
          oOperandPop
          oEmitDouble(iCmp)
          oOperandPop
          oOperandPushJumpCondition(iJhi)
          oEmitConditionalBackwardBranch
          oFixPopAddress
          oOperandPop
          ] or >
          oOperandPushMode(mManifest)
          oOperandSetLength(two)
          oOperandSetValue(two)
          oEmitDouble(iShl)
          oOperandPop
          oOperandPushCopy
          oOperandEnterValueFromCaseTableAddress
          oOperandSetMode(mTempIndirectCaseOffset)
          oEmitDouble(iMov)
          oOperandPop
          oOperandSetMode(mTempIndirect)
          oEmitSingle(iJmp)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mTempIndirect)
           | mTempIndirect:
           oTempFree
           ] or >
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          >>
         ;EmitCaseSubscriptJump
         oEmitCaseBranchTable
         oCaseEnterMergeAddress
         oEmitMergeSourceCoordinate
         >>
        ;CaseEnd
        oCasePop
        >>
       ;CaseStmt
       ] or >
       }
       [ (tAssignBegin)
       | tAssignBegin:
       @AssignStmt
        oEmitSourceCoordinate
        ?tLiteralAddress (tLiteralAddress)
        @OperandPushVariable
         oOperandPushVariable
         [ (tLiteralAddress)
         | *:
         [ (tLiteralAddress)
         | *:
         [ (tLiteralAddress)
         | *:
         >>
        ;OperandPushVariable
        @OperandPushExpressionAssignPopPop
         [ (tLiteralAddress)
         | tLiteralAddress:
         @OperandPushVariable
          oOperandPushVariable
          [ (tFetchInteger)
          | *:
          [ (tFetchInteger)
          | *:
          [ (tFetchInteger)
          | tFetchInteger:
          ] or >
          >>
         ;OperandPushVariable
         ] or >
         }
         [ (tLiteralInteger)
         | tLiteralInteger:
         oOperandPushInteger
         ] or >
         }
         [ (tAdd)
         | tAdd:
         [ (tAssignInteger)
         | tAssignInteger:
         @OperandAddAssignPopPopPop
          [ oOperandCompareRightAndDest (no)
          | *:
          oOperandSwap
          [ oOperandCompareRightAndDest (yes)
          | yes:
          oOperandPop
          @OperandAddRightToLeftPop
           [ oOperandChooseManifestValue (one)
           | one:
           oOperandPop
           oEmitSingle(iInc)
           ] or >
           >>
          ;OperandAddRightToLeftPop
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          ] or >
          >>
         ;OperandAddAssignPopPopPop
         ] or >
         >>
        ;OperandPushExpressionAssignPopPop
        >>
       ;AssignStmt
       ] or >
       }
       [ (tWhileEnd)
       | *:
       ] or >
       >>
      ;Block
      >>
     ;Statements
     ?tWhileEnd (tWhileEnd)
     oEmitUnconditionalBackwardBranch
     oFixPopAddress
     oFixAndFreeShuntList
     oOperandPop
     >>
    ;WhileStmt
    ] or >
    }
    [ (tWhileBegin)
    | tWhileBegin:
    @WhileStmt
     oFixPushAddress
     oEmitMergeSourceCoordinate
     @OperandPushBooleanControlExpression
      @OperandPushExpression
       [ (tLiteralAddress)
       | tLiteralAddress:
       @OperandPushVariable
        oOperandPushVariable
        [ (tFetchAddress)
        | tFetchAddress:
        oOperandSetMode(mStatic)
        @OperandForceIntoTemp
         [ oOperandChooseMode (mStatic)
         | *:
         [ oOperandChooseLength (two)
         | two:
         @OperandPushTempWord
          oTempAllocate
          oOperandPushTemp
          oOperandSetValue(zero)
          oOperandSetLength(two)
          >>
         ;OperandPushTempWord
         oOperandSwap
         oEmitDouble(iMov)
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStatic)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         oOperandSetMode(mTemp)
         ] or >
         >>
        ;OperandForceIntoTemp
        oOperandSetMode(mTempIndirect)
        ] or >
        [ (tFetchInteger)
        | *:
        [ (tFetchInteger)
        | tFetchInteger:
        ] or >
        >>
       ;OperandPushVariable
       ] or >
       }
       [ (tLiteralInteger)
       | tLiteralInteger:
       oOperandPushInteger
       ] or >
       }
       [ (tGT)
       | tGT:
       @OperandGreaterPop
        [ oOperandCompareLeftAndRight (no)
        | no:
        [ oOperandChooseManifestValue ()
        | *:
        oOperandSwap
        [ oOperandChooseManifestValue ()
        | *:
        oOperandSwap
        @EmitCmp
         oOperandSwap
         [ oOperandChooseMode (mTempIndirect)
         | *:
         oOperandSwap
         @OperandLeftOrRightIsTemp
          [ oOperandChooseMode (mManifest)
          | *:
          oOperandSwap
          [ oOperandChooseMode (mTempIndirect)
          | *:
          oOperandSwap
          >>no
         ;OperandLeftOrRightIsTemp
         [@OperandLeftOrRightIsTemp (no)
         | *:
         [ oOperandChooseMode (mManifest)
         | mManifest:
         oEmitDouble(iCmp)
         ] or >
         >>
        ;EmitCmp
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mManifest)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mTempIndirect)
         | mTempIndirect:
         oTempFree
         ] or >
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        oOperandPushJumpCondition(iJgt)
        ] or >
        >>
       ;OperandGreaterPop
       ] or >
       }
       [ (tInfixAnd)
       | tInfixAnd:
       @OperandNot
        @OperandForceToJumpCondition
         [ oOperandIsJumpCondition (yes)
         | yes:
         ] or >
         >>
        ;OperandForceToJumpCondition
        @OperandComplementJumpCondition
         [ oOperandChooseJumpCondition (iJgt)
         | *:
         oOperandComplementJumpCondition
         >>
        ;OperandComplementJumpCondition
        >>
       ;OperandNot
       @OperandInfixOr
        @OperandForceToJumpCondition
         [ oOperandIsJumpCondition (yes)
         | yes:
         ] or >
         >>
        ;OperandForceToJumpCondition
        [ oOperandChooseJumpCondition (iJle)
        | *:
        oEmitConditionalForwardBranch
        oFixAndFreeFalseBranches
        oFixPushLastAddress
        oOperandMergeShuntsWithAddress
        oFixPopAddress
        >>
       ;OperandInfixOr
       ] or >
       }
       [ (tLiteralAddress)
       | tLiteralAddress:
       @OperandPushVariable
        oOperandPushVariable
        [ (tFetchInteger)
        | *:
        [ (tFetchInteger)
        | *:
        [ (tFetchInteger)
        | tFetchInteger:
        ] or >
        >>
       ;OperandPushVariable
       ] or >
       }
       [ (tLiteralInteger)
       | tLiteralInteger:
       oOperandPushInteger
       ] or >
       }
       [ (tGT)
       | tGT:
       @OperandGreaterPop
        [ oOperandCompareLeftAndRight (no)
        | no:
        [ oOperandChooseManifestValue (zero)
        | zero:
        oOperandPop
        @EmitTst
         [ oOperandChooseLength (two)
         | two:
         oOperandPushMode(mManifest)
         oOperandSetValue(zero)
         oOperandSetLength(two)
         ] or >
         @EmitCmp
          oOperandSwap
          [ oOperandChooseMode (mStatic)
          | *:
          oOperandSwap
          @OperandLeftOrRightIsTemp
           [ oOperandChooseMode (mManifest)
           | *:
           oOperandSwap
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandSwap
           >>no
          ;OperandLeftOrRightIsTemp
          [@OperandLeftOrRightIsTemp (no)
          | *:
          [ oOperandChooseMode (mManifest)
          | mManifest:
          oEmitDouble(iCmp)
          ] or >
          >>
         ;EmitCmp
         oOperandPop
         >>
        ;EmitTst
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        oOperandPushJumpCondition(iJgt)
        ] or >
        ] or >
        >>
       ;OperandGreaterPop
       ] or >
       }
       [ (tAnd)
       | tAnd:
       @OperandNot
        @OperandForceToJumpCondition
         [ oOperandIsJumpCondition (yes)
         | yes:
         ] or >
         >>
        ;OperandForceToJumpCondition
        @OperandComplementJumpCondition
         [ oOperandChooseJumpCondition (iJgt)
         | *:
         oOperandComplementJumpCondition
         >>
        ;OperandComplementJumpCondition
        >>
       ;OperandNot
       @OperandOrPop
        @OperandForceToJumpCondition
         [ oOperandIsJumpCondition (yes)
         | yes:
         ] or >
         >>
        ;OperandForceToJumpCondition
        oOperandSwap
        [ oOperandChooseJumpCondition ()
        | *:
        oOperandSwap
        oOperandMergeShunts
        oOperandSwap
        oOperandPop
        >>
       ;OperandOrPop
       @OperandNot
        @OperandForceToJumpCondition
         [ oOperandIsJumpCondition (yes)
         | yes:
         ] or >
         >>
        ;OperandForceToJumpCondition
        @OperandComplementJumpCondition
         [ oOperandChooseJumpCondition (iJle)
         | *:
         oOperandComplementJumpCondition
         >>
        ;OperandComplementJumpCondition
        >>
       ;OperandNot
       ] or >
       }
       [ (tWhileTest)
       | *:
       ] or >
       >>
      ;OperandPushExpression
      @OperandForceToJumpCondition
       [ oOperandIsJumpCondition (yes)
       | yes:
       ] or >
       >>
      ;OperandForceToJumpCondition
      >>
     ;OperandPushBooleanControlExpression
     ?tWhileTest (tWhileTest)
     @OperandComplementJumpCondition
      [ oOperandChooseJumpCondition (iJgt)
      | *:
      oOperandComplementJumpCondition
      >>
     ;OperandComplementJumpCondition
     [ oOperandChooseJumpCondition (iJle)
     | *:
     @OperandInfixOr
      @OperandForceToJumpCondition
       [ oOperandIsJumpCondition (yes)
       | yes:
       ] or >
       >>
      ;OperandForceToJumpCondition
      [ oOperandChooseJumpCondition (iJle)
      | *:
      oEmitConditionalForwardBranch
      oFixAndFreeFalseBranches
      oFixPushLastAddress
      oOperandMergeShuntsWithAddress
      oFixPopAddress
      >>
     ;OperandInfixOr
     @Statements
      @Block
       [ (tAssignBegin)
       | tAssignBegin:
       @AssignStmt
        oEmitSourceCoordinate
        ?tLiteralAddress (tLiteralAddress)
        @OperandPushVariable
         oOperandPushVariable
         [ (tFetchAddress)
         | tFetchAddress:
         oOperandSetMode(mStatic)
         @OperandForceIntoTemp
          [ oOperandChooseMode (mStatic)
          | *:
          [ oOperandChooseLength (two)
          | two:
          @OperandPushTempWord
           oTempAllocate
           oOperandPushTemp
           oOperandSetValue(zero)
           oOperandSetLength(two)
           >>
          ;OperandPushTempWord
          oOperandSwap
          oEmitDouble(iMov)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandSetMode(mTemp)
          ] or >
          >>
         ;OperandForceIntoTemp
         oOperandSetMode(mTempIndirect)
         ] or >
         [ (tLiteralAddress)
         | *:
         [ (tLiteralAddress)
         | *:
         >>
        ;OperandPushVariable
        @OperandPushExpressionAssignPopPop
         [ (tLiteralAddress)
         | tLiteralAddress:
         @OperandPushVariable
          oOperandPushVariable
          [ (tFetchAddress)
          | tFetchAddress:
          oOperandSetMode(mStatic)
          @OperandForceIntoTemp
           [ oOperandChooseMode (mStatic)
           | *:
           [ oOperandChooseLength (two)
           | two:
           @OperandPushTempWord
            oTempAllocate
            oOperandPushTemp
            oOperandSetValue(zero)
            oOperandSetLength(two)
            >>
           ;OperandPushTempWord
           oOperandSwap
           oEmitDouble(iMov)
           @OperandPopAndFreeTemp
            [ oOperandChooseMode (mStatic)
            | *:
            oOperandPop
            >>
           ;OperandPopAndFreeTemp
           oOperandSetMode(mTemp)
           ] or >
           >>
          ;OperandForceIntoTemp
          oOperandSetMode(mTempIndirect)
          ] or >
          [ (tFetchInteger)
          | *:
          [ (tFetchInteger)
          | tFetchInteger:
          ] or >
          >>
         ;OperandPushVariable
         ] or >
         }
         [ (tLiteralInteger)
         | tLiteralInteger:
         oOperandPushInteger
         ] or >
         }
         [ (tSubtract)
         | tSubtract:
         [ (tAssignInteger)
         | tAssignInteger:
         @OperandSubtractAssignPopPopPop
          oOperandSwap
          [ oOperandCompareRightAndDest (no)
          | *:
          oOperandSwap
          @OperandSubtractPop
           @OperandAreLeftAndRightManifest
            [ oOperandChooseMode (mManifest)
            | mManifest:
            oOperandSwap
            [ oOperandChooseMode (mTempIndirect)
            | *:
            oOperandSwap
            >>no
           ;OperandAreLeftAndRightManifest
           [@OperandAreLeftAndRightManifest (no)
           | no:
           [ oOperandChooseManifestValue (trReadInteger)
           | *:
           @OperandForceLeftIntoTemp
            oOperandSwap
            [ oOperandChooseMode (mTempIndirect)
            | *:
            @OperandForceIntoTemp
             [ oOperandChooseMode (mTempIndirect)
             | mTempIndirect:
             oOperandPushCopy
             oOperandSetMode(mTemp)
             oOperandSwap
             oEmitDouble(iMov)
             oOperandPop
             ] or >
             >>
            ;OperandForceIntoTemp
            oOperandSwap
            >>
           ;OperandForceLeftIntoTemp
           oEmitDouble(iSub)
           @OperandPopAndFreeTemp
            [ oOperandChooseMode (mManifest)
            | *:
            oOperandPop
            >>
           ;OperandPopAndFreeTemp
           ] or >
           >>
          ;OperandSubtractPop
          @OperandAssignIntegerPopPop
           [ oOperandCompareLeftAndRight (no)
           | no:
           @EmitMove
            @OperandLeftOrRightIsTemp
             [ oOperandChooseMode (mTemp)
             | mTemp:
             >>yes
            ;OperandLeftOrRightIsTemp
            [@OperandLeftOrRightIsTemp (yes)
            | yes:
            oEmitDouble(iMov)
            ] or >
            >>
           ;EmitMove
           @OperandPopAndFreeTemp
            [ oOperandChooseMode (mTemp)
            | mTemp:
            oTempFree
            ] or >
            oOperandPop
            >>
           ;OperandPopAndFreeTemp
           @OperandPopAndFreeTemp
            [ oOperandChooseMode (mTempIndirect)
            | mTempIndirect:
            oTempFree
            ] or >
            oOperandPop
            >>
           ;OperandPopAndFreeTemp
           ] or >
           >>
          ;OperandAssignIntegerPopPop
          >>
         ;OperandSubtractAssignPopPopPop
         ] or >
         >>
        ;OperandPushExpressionAssignPopPop
        >>
       ;AssignStmt
       ] or >
       }
       [ (tAssignBegin)
       | tAssignBegin:
       @AssignStmt
        oEmitSourceCoordinate
        ?tLiteralAddress (tLiteralAddress)
        @OperandPushVariable
         oOperandPushVariable
         [ (tLiteralAddress)
         | *:
         [ (tLiteralAddress)
         | *:
         [ (tLiteralAddress)
         | *:
         >>
        ;OperandPushVariable
        @OperandPushExpressionAssignPopPop
         [ (tLiteralAddress)
         | tLiteralAddress:
         @OperandPushVariable
          oOperandPushVariable
          [ (tFetchInteger)
          | *:
          [ (tFetchInteger)
          | *:
          [ (tFetchInteger)
          | tFetchInteger:
          ] or >
          >>
         ;OperandPushVariable
         ] or >
         }
         [ (tLiteralInteger)
         | tLiteralInteger:
         oOperandPushInteger
         ] or >
         }
         [ (tSubtract)
         | tSubtract:
         [ (tAssignInteger)
         | tAssignInteger:
         @OperandSubtractAssignPopPopPop
          oOperandSwap
          [ oOperandCompareRightAndDest (yes)
          | yes:
          oOperandPop
          @OperandSubtractRightFromLeftPop
           [ oOperandChooseManifestValue (one)
           | one:
           oOperandPop
           oEmitSingle(iDec)
           ] or >
           >>
          ;OperandSubtractRightFromLeftPop
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          ] or >
          >>
         ;OperandSubtractAssignPopPopPop
         ] or >
         >>
        ;OperandPushExpressionAssignPopPop
        >>
       ;AssignStmt
       ] or >
       }
       [ (tWhileEnd)
       | *:
       ] or >
       >>
      ;Block
      >>
     ;Statements
     ?tWhileEnd (tWhileEnd)
     oEmitUnconditionalBackwardBranch
     oFixPopAddress
     oFixAndFreeShuntList
     oOperandPop
     >>
    ;WhileStmt
    ] or >
    }
    [ (tAssignBegin)
    | tAssignBegin:
    @AssignStmt
     oEmitSourceCoordinate
     ?tLiteralAddress (tLiteralAddress)
     @OperandPushVariable
      oOperandPushVariable
      [ (tFetchAddress)
      | tFetchAddress:
      oOperandSetMode(mStatic)
      @OperandForceIntoTemp
       [ oOperandChooseMode (mStatic)
       | *:
       [ oOperandChooseLength (two)
       | two:
       @OperandPushTempWord
        oTempAllocate
        oOperandPushTemp
        oOperandSetValue(zero)
        oOperandSetLength(two)
        >>
       ;OperandPushTempWord
       oOperandSwap
       oEmitDouble(iMov)
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandSetMode(mTemp)
       ] or >
       >>
      ;OperandForceIntoTemp
      oOperandSetMode(mTempIndirect)
      ] or >
      [ (tLiteralAddress)
      | *:
      [ (tLiteralAddress)
      | *:
      >>
     ;OperandPushVariable
     @OperandPushExpressionAssignPopPop
      [ (tLiteralAddress)
      | tLiteralAddress:
      @OperandPushVariable
       oOperandPushVariable
       [ (tFetchInteger)
       | *:
       [ (tFetchInteger)
       | *:
       [ (tFetchInteger)
       | tFetchInteger:
       ] or >
       >>
      ;OperandPushVariable
      ] or >
      }
      [ (tLiteralInteger)
      | tLiteralInteger:
      oOperandPushInteger
      ] or >
      }
      [ (tGT)
      | tGT:
      @OperandGreaterPop
       [ oOperandCompareLeftAndRight (no)
       | no:
       [ oOperandChooseManifestValue (zero)
       | zero:
       oOperandPop
       @EmitTst
        [ oOperandChooseLength (two)
        | two:
        oOperandPushMode(mManifest)
        oOperandSetValue(zero)
        oOperandSetLength(two)
        ] or >
        @EmitCmp
         oOperandSwap
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandSwap
         @OperandLeftOrRightIsTemp
          [ oOperandChooseMode (mManifest)
          | *:
          oOperandSwap
          [ oOperandChooseMode (mStatic)
          | *:
          oOperandSwap
          >>no
         ;OperandLeftOrRightIsTemp
         [@OperandLeftOrRightIsTemp (no)
         | *:
         [ oOperandChooseMode (mManifest)
         | mManifest:
         oEmitDouble(iCmp)
         ] or >
         >>
        ;EmitCmp
        oOperandPop
        >>
       ;EmitTst
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandPushJumpCondition(iJgt)
       ] or >
       ] or >
       >>
      ;OperandGreaterPop
      ] or >
      }
      [ (tAssignBoolean)
      | tAssignBoolean:
      @OperandAssignBooleanPopPop
       @OperandConvertJumpConditionToData
        [ oOperandIsJumpCondition (yes)
        | yes:
        [ oOperandChooseJumpCondition (iJgt)
        | *:
        @OperandNot
         @OperandForceToJumpCondition
          [ oOperandIsJumpCondition (yes)
          | yes:
          ] or >
          >>
         ;OperandForceToJumpCondition
         @OperandComplementJumpCondition
          [ oOperandChooseJumpCondition (iJgt)
          | *:
          oOperandComplementJumpCondition
          >>
         ;OperandComplementJumpCondition
         >>
        ;OperandNot
        @OperandInfixOr
         @OperandForceToJumpCondition
          [ oOperandIsJumpCondition (yes)
          | yes:
          ] or >
          >>
         ;OperandForceToJumpCondition
         [ oOperandChooseJumpCondition (iJle)
         | *:
         oEmitConditionalForwardBranch
         oFixAndFreeFalseBranches
         oFixPushLastAddress
         oOperandMergeShuntsWithAddress
         oFixPopAddress
         >>
        ;OperandInfixOr
        @OperandPushTrueTemp
         @OperandPushTempByte
          oTempAllocate
          oOperandPushTemp
          oOperandSetValue(zero)
          oOperandSetLength(one)
          >>
         ;OperandPushTempByte
         oOperandPushMode(mManifest)
         oOperandSetValue(one)
         oOperandSetLength(one)
         oEmitDouble(iMov)
         oOperandPop
         >>
        ;OperandPushTrueTemp
        oEmitUnconditionalForwardBranch
        oFixPushLastAddress
        oOperandSwap
        oFixAndFreeShuntList
        oOperandPop
        oOperandPushMode(mManifest)
        oOperandSetValue(zero)
        oOperandSetLength(one)
        oEmitDouble(iMov)
        oOperandPop
        oFixForwardBranch
        oFixPopAddress
        oOperandSetMode(mTemp)
        ] or >
        >>
       ;OperandConvertJumpConditionToData
       oOperandSetLength(one)
       @EmitMove
        @OperandLeftOrRightIsTemp
         [ oOperandChooseMode (mTemp)
         | mTemp:
         >>yes
        ;OperandLeftOrRightIsTemp
        [@OperandLeftOrRightIsTemp (yes)
        | yes:
        oEmitDouble(iMov)
        ] or >
        >>
       ;EmitMove
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mTemp)
        | mTemp:
        oTempFree
        ] or >
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mTempIndirect)
        | mTempIndirect:
        oTempFree
        ] or >
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       >>
      ;OperandAssignBooleanPopPop
      ] or >
      >>
     ;OperandPushExpressionAssignPopPop
     >>
    ;AssignStmt
    ] or >
    }
    [ (tProcedureEnd)
    | *:
    ] or >
    >>
   ;Block
   ?tProcedureEnd (tProcedureEnd)
   oEmitNone(iLeave)
   oEmitNone(iReturn)
   >>
  ;Routine
  oFixForwardBranch
  oFixPopAddress
  ] or >
  }
  [ (tSkipProc)
  | tSkipProc:
  oEmitUnconditionalForwardBranch
  oFixPushLastAddress
  @Routine
   oEmitProcLabel(mProc)
   oEmitNone(iEnter)
   [ (tParmEnd)
   | tParmEnd:
   ] or >
   @Block
    [ (tCallBegin)
    | tCallBegin:
    @CallStmt
     oEmitSourceCoordinate
     oOperandPushMode(mManifest)
     oOperandSetLength(two)
     oOperandSetValue(zero)
     [ (tLiteralAddress)
     | *:
     @OperandPushExpression
      [ (tLiteralAddress)
      | tLiteralAddress:
      @OperandPushVariable
       oOperandPushVariable
       [ (tFetchInteger)
       | *:
       [ (tFetchInteger)
       | *:
       [ (tFetchInteger)
       | tFetchInteger:
       ] or >
       >>
      ;OperandPushVariable
      ] or >
      }
      [ (tParmEnd)
      | *:
      ] or >
      >>
     ;OperandPushExpression
     @OperandConvertJumpConditionToData
      [ oOperandIsJumpCondition (no)
      | no:
      ] or >
      >>
     ;OperandConvertJumpConditionToData
     [ (tParmEnd)
     | *:
     @OperandForceToStack
      [ oOperandChooseLength (two)
      | two:
      ] or >
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mStack)
      >>
     ;OperandForceToStack
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStack)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     ?tParmEnd (tParmEnd)
     oOperandPushMode(mManifest)
     oOperandSetLength(two)
     oOperandSetValue(four)
     oOperandAddManifestValues
     oOperandPop
     }
     [ (tLiteralAddress)
     | *:
     @OperandPushExpression
      [ (tLiteralAddress)
      | tLiteralAddress:
      @OperandPushVariable
       oOperandPushVariable
       [ (tVarParm)
       | *:
       [ (tVarParm)
       | *:
       [ (tVarParm)
       | *:
       >>
      ;OperandPushVariable
      ] or >
      }
      [ (tVarParm)
      | *:
      ] or >
      >>
     ;OperandPushExpression
     @OperandConvertJumpConditionToData
      [ oOperandIsJumpCondition (no)
      | no:
      ] or >
      >>
     ;OperandConvertJumpConditionToData
     [ (tVarParm)
     | tVarParm:
     @OperandForceAddressIntoTemp
      [ oOperandChooseMode (mStatic)
      | mStatic:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iLoada)
      oOperandPop
      ] or >
      oOperandSetLength(two)
      >>
     ;OperandForceAddressIntoTemp
     @OperandForceToStack
      [ oOperandChooseLength (two)
      | two:
      ] or >
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mTemp)
       | mTemp:
       oTempFree
       ] or >
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mStack)
      >>
     ;OperandForceToStack
     ] or >
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStack)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     ?tParmEnd (tParmEnd)
     oOperandPushMode(mManifest)
     oOperandSetLength(two)
     oOperandSetValue(four)
     oOperandAddManifestValues
     oOperandPop
     }
     [ (tLiteralAddress)
     | *:
     @OperandPushExpression
      [ (tLiteralAddress)
      | tLiteralAddress:
      @OperandPushVariable
       oOperandPushVariable
       [ (tVarParm)
       | *:
       [ (tVarParm)
       | *:
       [ (tVarParm)
       | *:
       >>
      ;OperandPushVariable
      ] or >
      }
      [ (tVarParm)
      | *:
      ] or >
      >>
     ;OperandPushExpression
     @OperandConvertJumpConditionToData
      [ oOperandIsJumpCondition (no)
      | no:
      ] or >
      >>
     ;OperandConvertJumpConditionToData
     [ (tVarParm)
     | tVarParm:
     @OperandForceAddressIntoTemp
      [ oOperandChooseMode (mStatic)
      | mStatic:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iLoada)
      oOperandPop
      ] or >
      oOperandSetLength(two)
      >>
     ;OperandForceAddressIntoTemp
     @OperandForceToStack
      [ oOperandChooseLength (two)
      | two:
      ] or >
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mTemp)
       | mTemp:
       oTempFree
       ] or >
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mStack)
      >>
     ;OperandForceToStack
     ] or >
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStack)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     ?tParmEnd (tParmEnd)
     oOperandPushMode(mManifest)
     oOperandSetLength(two)
     oOperandSetValue(four)
     oOperandAddManifestValues
     oOperandPop
     }
     [ (tLiteralAddress)
     | *:
     @OperandPushExpression
      [ (tLiteralAddress)
      | tLiteralAddress:
      @OperandPushVariable
       oOperandPushVariable
       [ (tVarParm)
       | *:
       [ (tVarParm)
       | *:
       [ (tVarParm)
       | *:
       >>
      ;OperandPushVariable
      ] or >
      }
      [ (tVarParm)
      | *:
      ] or >
      >>
     ;OperandPushExpression
     @OperandConvertJumpConditionToData
      [ oOperandIsJumpCondition (no)
      | no:
      ] or >
      >>
     ;OperandConvertJumpConditionToData
     [ (tVarParm)
     | tVarParm:
     @OperandForceAddressIntoTemp
      [ oOperandChooseMode (mStatic)
      | mStatic:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iLoada)
      oOperandPop
      ] or >
      oOperandSetLength(two)
      >>
     ;OperandForceAddressIntoTemp
     @OperandForceToStack
      [ oOperandChooseLength (two)
      | two:
      ] or >
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mTemp)
       | mTemp:
       oTempFree
       ] or >
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mStack)
      >>
     ;OperandForceToStack
     ] or >
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStack)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     ?tParmEnd (tParmEnd)
     oOperandPushMode(mManifest)
     oOperandSetLength(two)
     oOperandSetValue(four)
     oOperandAddManifestValues
     oOperandPop
     }
     [ (tCallEnd)
     | tCallEnd:
     ] or >
     oOperandPushProcedure
     oOperandSetMode(mProc)
     oEmitSingle(iCall)
     oOperandPop
     oOperandPushMode(mStackReg)
     oOperandSetLength(two)
     oOperandSwap
     oEmitDouble(iAdd)
     oOperandPop
     oOperandPop
     oEmitMergeSourceCoordinate
     >>
    ;CallStmt
    ] or >
    }
    [ (tIfBegin)
    | tIfBegin:
    @IfStmt
     oEmitSourceCoordinate
     @OperandPushBooleanControlExpression
      @OperandPushExpression
       [ (tLiteralAddress)
       | tLiteralAddress:
       @OperandPushVariable
        oOperandPushVariable
        [ (tFetchInteger)
        | *:
        [ (tFetchInteger)
        | *:
        [ (tFetchInteger)
        | tFetchInteger:
        ] or >
        >>
       ;OperandPushVariable
       ] or >
       }
       [ (tLiteralInteger)
       | tLiteralInteger:
       oOperandPushInteger
       ] or >
       }
       [ (tGT)
       | tGT:
       @OperandGreaterPop
        [ oOperandCompareLeftAndRight (no)
        | no:
        [ oOperandChooseManifestValue ()
        | *:
        oOperandSwap
        [ oOperandChooseManifestValue ()
        | *:
        oOperandSwap
        @EmitCmp
         oOperandSwap
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandSwap
         @OperandLeftOrRightIsTemp
          [ oOperandChooseMode (mManifest)
          | *:
          oOperandSwap
          [ oOperandChooseMode (mStatic)
          | *:
          oOperandSwap
          >>no
         ;OperandLeftOrRightIsTemp
         [@OperandLeftOrRightIsTemp (no)
         | *:
         [ oOperandChooseMode (mManifest)
         | mManifest:
         oEmitDouble(iCmp)
         ] or >
         >>
        ;EmitCmp
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mManifest)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        oOperandPushJumpCondition(iJgt)
        ] or >
        >>
       ;OperandGreaterPop
       ] or >
       }
       [ (tIfThen)
       | *:
       ] or >
       >>
      ;OperandPushExpression
      @OperandForceToJumpCondition
       [ oOperandIsJumpCondition (yes)
       | yes:
       ] or >
       >>
      ;OperandForceToJumpCondition
      >>
     ;OperandPushBooleanControlExpression
     ?tIfThen (tIfThen)
     [ oOperandChooseJumpCondition (iJgt)
     | *:
     @OperandComplementJumpCondition
      [ oOperandChooseJumpCondition (iJgt)
      | *:
      oOperandComplementJumpCondition
      >>
     ;OperandComplementJumpCondition
     @OperandInfixOr
      @OperandForceToJumpCondition
       [ oOperandIsJumpCondition (yes)
       | yes:
       ] or >
       >>
      ;OperandForceToJumpCondition
      [ oOperandChooseJumpCondition (iJle)
      | *:
      oEmitConditionalForwardBranch
      oFixAndFreeFalseBranches
      oFixPushLastAddress
      oOperandMergeShuntsWithAddress
      oFixPopAddress
      >>
     ;OperandInfixOr
     @Statements
      @Block
       [ (tWriteBegin)
       | tWriteBegin:
       @WriteProc
        oEmitSourceCoordinate
        [ (tTrapBegin)
        | *:
        @WriteParameter
         ?tTrapBegin (tTrapBegin)
         ?tLiteralAddress (tLiteralAddress)
         @OperandPushVariable
          oOperandPushVariable
          [ (tVarParm)
          | *:
          [ (tVarParm)
          | *:
          [ (tVarParm)
          | *:
          >>
         ;OperandPushVariable
         @OperandForceToStack
          [ oOperandChooseLength (two)
          | two:
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tVarParm (tVarParm)
         ?tParmEnd (tParmEnd)
         @OperandPushExpression
          [ (tSkipString)
          | tSkipString:
          oEmitNone(iData)
          ?tStringData (tStringData)
          oEmitString
          oEmitNone(iText)
          ] or >
          }
          [ (tLiteralAddress)
          | tLiteralAddress:
          @OperandPushVariable
           oOperandPushVariable
           [ (tFetchChar)
           | *:
           [ (tFetchChar)
           | *:
           [ (tFetchChar)
           | tFetchChar:
           oOperandSetLength(regCX)
           ] or >
           >>
          ;OperandPushVariable
          ] or >
          }
          [ (tParmEnd)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         [ (tParmEnd)
         | *:
         @OperandForceToStack
          [ oOperandChooseLength (regCX)
          | regCX:
          @OperandForceAddressIntoTemp
           [ oOperandChooseMode (mStatic)
           | mStatic:
           @OperandPushTempWord
            oTempAllocate
            oOperandPushTemp
            oOperandSetValue(zero)
            oOperandSetLength(two)
            >>
           ;OperandPushTempWord
           oOperandSwap
           oEmitDouble(iLoada)
           oOperandPop
           ] or >
           oOperandSetLength(two)
           >>
          ;OperandForceAddressIntoTemp
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mTemp)
           | mTemp:
           oTempFree
           ] or >
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tParmEnd (tParmEnd)
         @OperandPushExpression
          [ (tLiteralInteger)
          | tLiteralInteger:
          oOperandPushInteger
          ] or >
          }
          [ (tParmEnd)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         @OperandForceToStack
          [ oOperandChooseLength (two)
          | two:
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mManifest)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tParmEnd (tParmEnd)
         ?tTrap (tTrap)
         oOperandPushTrap
         oEmitSingle(iCall)
         oOperandPop
         oOperandPushMode(mStackReg)
         oOperandSetLength(two)
         oOperandPushMode(mManifest)
         oOperandSetLength(two)
         oOperandSetValue(twelve)
         oEmitDouble(iAdd)
         oOperandPop
         oOperandPop
         >>
        ;WriteParameter
        }
        [ (tWriteEnd)
        | tWriteEnd:
        ] or >
        >>
       ;WriteProc
       ] or >
       }
       [ (tTrapBegin)
       | tTrapBegin:
       @TrapStmt
        oEmitSourceCoordinate
        [ (tLiteralAddress)
        | tLiteralAddress:
        @OperandPushVariable
         oOperandPushVariable
         [ (tVarParm)
         | *:
         [ (tVarParm)
         | *:
         [ (tVarParm)
         | *:
         >>
        ;OperandPushVariable
        oOperandPushCopy
        @OperandForceToStack
         [ oOperandChooseLength (two)
         | two:
         ] or >
         oEmitSingle(iPush)
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStatic)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         oOperandPushMode(mStack)
         >>
        ;OperandForceToStack
        oOperandPop
        ?tVarParm (tVarParm)
        ?tParmEnd (tParmEnd)
        [ (tTrap)
        | tTrap:
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        oOperandPushTrap
        oEmitSingle(iCall)
        oOperandPop
        oOperandPushMode(mStackReg)
        oOperandSetLength(two)
        oOperandPushMode(mManifest)
        oOperandSetLength(two)
        oOperandSetValue(four)
        oEmitDouble(iAdd)
        oOperandPop
        oOperandPop
        ] or >
        ] or >
        >>
       ;TrapStmt
       ] or >
       }
       [ (tAssignBegin)
       | tAssignBegin:
       @AssignStmt
        oEmitSourceCoordinate
        ?tLiteralAddress (tLiteralAddress)
        @OperandPushVariable
         oOperandPushVariable
         [ (tLiteralBoolean)
         | *:
         [ (tLiteralBoolean)
         | *:
         [ (tLiteralBoolean)
         | *:
         >>
        ;OperandPushVariable
        @OperandPushExpressionAssignPopPop
         [ (tLiteralBoolean)
         | tLiteralBoolean:
         oOperandPushBoolean
         ] or >
         }
         [ (tAssignBoolean)
         | tAssignBoolean:
         @OperandAssignBooleanPopPop
          @OperandConvertJumpConditionToData
           [ oOperandIsJumpCondition (no)
           | no:
           ] or >
           >>
          ;OperandConvertJumpConditionToData
          oOperandSetLength(one)
          @EmitMove
           @OperandLeftOrRightIsTemp
            [ oOperandChooseMode (mManifest)
            | *:
            oOperandSwap
            [ oOperandChooseMode (mStatic)
            | *:
            oOperandSwap
            >>no
           ;OperandLeftOrRightIsTemp
           [@OperandLeftOrRightIsTemp (no)
           | *:
           [ oOperandChooseMode (mManifest)
           | mManifest:
           oEmitDouble(iMov)
           ] or >
           >>
          ;EmitMove
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mManifest)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          >>
         ;OperandAssignBooleanPopPop
         ] or >
         >>
        ;OperandPushExpressionAssignPopPop
        >>
       ;AssignStmt
       ] or >
       }
       [ (tAssignBegin)
       | tAssignBegin:
       @AssignStmt
        oEmitSourceCoordinate
        ?tLiteralAddress (tLiteralAddress)
        @OperandPushVariable
         oOperandPushVariable
         [ (tLiteralAddress)
         | *:
         [ (tLiteralAddress)
         | *:
         [ (tLiteralAddress)
         | *:
         >>
        ;OperandPushVariable
        @OperandPushExpressionAssignPopPop
         [ (tLiteralAddress)
         | tLiteralAddress:
         @OperandPushVariable
          oOperandPushVariable
          [ (tFetchInteger)
          | *:
          [ (tFetchInteger)
          | *:
          [ (tFetchInteger)
          | tFetchInteger:
          ] or >
          >>
         ;OperandPushVariable
         ] or >
         }
         [ (tLiteralInteger)
         | tLiteralInteger:
         oOperandPushInteger
         ] or >
         }
         [ (tAdd)
         | tAdd:
         [ (tAssignInteger)
         | tAssignInteger:
         @OperandAddAssignPopPopPop
          [ oOperandCompareRightAndDest (no)
          | *:
          oOperandSwap
          [ oOperandCompareRightAndDest (yes)
          | yes:
          oOperandPop
          @OperandAddRightToLeftPop
           [ oOperandChooseManifestValue (one)
           | one:
           oOperandPop
           oEmitSingle(iInc)
           ] or >
           >>
          ;OperandAddRightToLeftPop
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          ] or >
          >>
         ;OperandAddAssignPopPopPop
         ] or >
         >>
        ;OperandPushExpressionAssignPopPop
        >>
       ;AssignStmt
       ] or >
       }
       [ (tIfMerge)
       | *:
       ] or >
       >>
      ;Block
      >>
     ;Statements
     [ (tIfMerge)
     | tIfMerge:
     oEmitUnconditionalForwardBranch
     oFixAndFreeShuntList
     oOperandPop
     oFixPushLastAddress
     oEmitMergeSourceCoordinate
     @Statements
      @Block
       [ (tIfBegin)
       | tIfBegin:
       @IfStmt
        oEmitSourceCoordinate
        @OperandPushBooleanControlExpression
         @OperandPushExpression
          [ (tLiteralAddress)
          | tLiteralAddress:
          @OperandPushVariable
           oOperandPushVariable
           [ (tFetchInteger)
           | *:
           [ (tFetchInteger)
           | *:
           [ (tFetchInteger)
           | tFetchInteger:
           ] or >
           >>
          ;OperandPushVariable
          ] or >
          }
          [ (tLiteralInteger)
          | tLiteralInteger:
          oOperandPushInteger
          ] or >
          }
          [ (tEQ)
          | tEQ:
          @OperandEqualPop
           [ oOperandCompareLeftAndRight (no)
           | no:
           [ oOperandChooseManifestValue ()
           | *:
           oOperandSwap
           [ oOperandChooseManifestValue ()
           | *:
           oOperandSwap
           @OperandAreLeftAndRightManifest
            [ oOperandChooseMode (mManifest)
            | mManifest:
            oOperandSwap
            [ oOperandChooseMode (mStatic)
            | *:
            oOperandSwap
            >>no
           ;OperandAreLeftAndRightManifest
           [@OperandAreLeftAndRightManifest (no)
           | *:
           @EmitCmp
            oOperandSwap
            [ oOperandChooseMode (mStatic)
            | *:
            oOperandSwap
            @OperandLeftOrRightIsTemp
             [ oOperandChooseMode (mManifest)
             | *:
             oOperandSwap
             [ oOperandChooseMode (mStatic)
             | *:
             oOperandSwap
             >>no
            ;OperandLeftOrRightIsTemp
            [@OperandLeftOrRightIsTemp (no)
            | *:
            [ oOperandChooseMode (mManifest)
            | mManifest:
            oEmitDouble(iCmp)
            ] or >
            >>
           ;EmitCmp
           @OperandPopAndFreeTemp
            [ oOperandChooseMode (mManifest)
            | *:
            oOperandPop
            >>
           ;OperandPopAndFreeTemp
           @OperandPopAndFreeTemp
            [ oOperandChooseMode (mStatic)
            | *:
            oOperandPop
            >>
           ;OperandPopAndFreeTemp
           oOperandPushJumpCondition(iJeq)
           ] or >
           >>
          ;OperandEqualPop
          ] or >
          }
          [ (tIfThen)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         @OperandForceToJumpCondition
          [ oOperandIsJumpCondition (yes)
          | yes:
          ] or >
          >>
         ;OperandForceToJumpCondition
         >>
        ;OperandPushBooleanControlExpression
        ?tIfThen (tIfThen)
        [ oOperandChooseJumpCondition (iJeq)
        | *:
        @OperandComplementJumpCondition
         [ oOperandChooseJumpCondition (iJeq)
         | *:
         oOperandComplementJumpCondition
         >>
        ;OperandComplementJumpCondition
        @OperandInfixOr
         @OperandForceToJumpCondition
          [ oOperandIsJumpCondition (yes)
          | yes:
          ] or >
          >>
         ;OperandForceToJumpCondition
         [ oOperandChooseJumpCondition (iJne)
         | *:
         oEmitConditionalForwardBranch
         oFixAndFreeFalseBranches
         oFixPushLastAddress
         oOperandMergeShuntsWithAddress
         oFixPopAddress
         >>
        ;OperandInfixOr
        @Statements
         @Block
          [ (tWriteBegin)
          | tWriteBegin:
          @WriteProc
           oEmitSourceCoordinate
           [ (tTrapBegin)
           | *:
           @WriteParameter
            ?tTrapBegin (tTrapBegin)
            ?tLiteralAddress (tLiteralAddress)
            @OperandPushVariable
             oOperandPushVariable
             [ (tVarParm)
             | *:
             [ (tVarParm)
             | *:
             [ (tVarParm)
             | *:
             >>
            ;OperandPushVariable
            @OperandForceToStack
             [ oOperandChooseLength (two)
             | two:
             ] or >
             oEmitSingle(iPush)
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mStatic)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandPushMode(mStack)
             >>
            ;OperandForceToStack
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStack)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            ?tVarParm (tVarParm)
            ?tParmEnd (tParmEnd)
            @OperandPushExpression
             [ (tSkipString)
             | tSkipString:
             oEmitNone(iData)
             ?tStringData (tStringData)
             oEmitString
             oEmitNone(iText)
             ] or >
             }
             [ (tLiteralAddress)
             | tLiteralAddress:
             @OperandPushVariable
              oOperandPushVariable
              [ (tFetchChar)
              | *:
              [ (tFetchChar)
              | *:
              [ (tFetchChar)
              | tFetchChar:
              oOperandSetLength(regCX)
              ] or >
              >>
             ;OperandPushVariable
             ] or >
             }
             [ (tParmEnd)
             | *:
             ] or >
             >>
            ;OperandPushExpression
            [ (tParmEnd)
            | *:
            @OperandForceToStack
             [ oOperandChooseLength (regCX)
             | regCX:
             @OperandForceAddressIntoTemp
              [ oOperandChooseMode (mStatic)
              | mStatic:
              @OperandPushTempWord
               oTempAllocate
               oOperandPushTemp
               oOperandSetValue(zero)
               oOperandSetLength(two)
               >>
              ;OperandPushTempWord
              oOperandSwap
              oEmitDouble(iLoada)
              oOperandPop
              ] or >
              oOperandSetLength(two)
              >>
             ;OperandForceAddressIntoTemp
             ] or >
             oEmitSingle(iPush)
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mTemp)
              | mTemp:
              oTempFree
              ] or >
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandPushMode(mStack)
             >>
            ;OperandForceToStack
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStack)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            ?tParmEnd (tParmEnd)
            @OperandPushExpression
             [ (tLiteralInteger)
             | tLiteralInteger:
             oOperandPushInteger
             ] or >
             }
             [ (tParmEnd)
             | *:
             ] or >
             >>
            ;OperandPushExpression
            @OperandForceToStack
             [ oOperandChooseLength (two)
             | two:
             ] or >
             oEmitSingle(iPush)
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mManifest)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandPushMode(mStack)
             >>
            ;OperandForceToStack
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStack)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            ?tParmEnd (tParmEnd)
            ?tTrap (tTrap)
            oOperandPushTrap
            oEmitSingle(iCall)
            oOperandPop
            oOperandPushMode(mStackReg)
            oOperandSetLength(two)
            oOperandPushMode(mManifest)
            oOperandSetLength(two)
            oOperandSetValue(twelve)
            oEmitDouble(iAdd)
            oOperandPop
            oOperandPop
            >>
           ;WriteParameter
           }
           [ (tWriteEnd)
           | tWriteEnd:
           ] or >
           >>
          ;WriteProc
          ] or >
          }
          [ (tTrapBegin)
          | tTrapBegin:
          @TrapStmt
           oEmitSourceCoordinate
           [ (tLiteralAddress)
           | tLiteralAddress:
           @OperandPushVariable
            oOperandPushVariable
            [ (tVarParm)
            | *:
            [ (tVarParm)
            | *:
            [ (tVarParm)
            | *:
            >>
           ;OperandPushVariable
           oOperandPushCopy
           @OperandForceToStack
            [ oOperandChooseLength (two)
            | two:
            ] or >
            oEmitSingle(iPush)
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStatic)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            oOperandPushMode(mStack)
            >>
           ;OperandForceToStack
           oOperandPop
           ?tVarParm (tVarParm)
           ?tParmEnd (tParmEnd)
           [ (tTrap)
           | tTrap:
           @OperandPopAndFreeTemp
            [ oOperandChooseMode (mStatic)
            | *:
            oOperandPop
            >>
           ;OperandPopAndFreeTemp
           oOperandPushTrap
           oEmitSingle(iCall)
           oOperandPop
           oOperandPushMode(mStackReg)
           oOperandSetLength(two)
           oOperandPushMode(mManifest)
           oOperandSetLength(two)
           oOperandSetValue(four)
           oEmitDouble(iAdd)
           oOperandPop
           oOperandPop
           ] or >
           ] or >
           >>
          ;TrapStmt
          ] or >
          }
          [ (tAssignBegin)
          | tAssignBegin:
          @AssignStmt
           oEmitSourceCoordinate
           ?tLiteralAddress (tLiteralAddress)
           @OperandPushVariable
            oOperandPushVariable
            [ (tLiteralBoolean)
            | *:
            [ (tLiteralBoolean)
            | *:
            [ (tLiteralBoolean)
            | *:
            >>
           ;OperandPushVariable
           @OperandPushExpressionAssignPopPop
            [ (tLiteralBoolean)
            | tLiteralBoolean:
            oOperandPushBoolean
            ] or >
            }
            [ (tAssignBoolean)
            | tAssignBoolean:
            @OperandAssignBooleanPopPop
             @OperandConvertJumpConditionToData
              [ oOperandIsJumpCondition (no)
              | no:
              ] or >
              >>
             ;OperandConvertJumpConditionToData
             oOperandSetLength(one)
             @EmitMove
              @OperandLeftOrRightIsTemp
               [ oOperandChooseMode (mManifest)
               | *:
               oOperandSwap
               [ oOperandChooseMode (mStatic)
               | *:
               oOperandSwap
               >>no
              ;OperandLeftOrRightIsTemp
              [@OperandLeftOrRightIsTemp (no)
              | *:
              [ oOperandChooseMode (mManifest)
              | mManifest:
              oEmitDouble(iMov)
              ] or >
              >>
             ;EmitMove
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mManifest)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mStatic)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             >>
            ;OperandAssignBooleanPopPop
            ] or >
            >>
           ;OperandPushExpressionAssignPopPop
           >>
          ;AssignStmt
          ] or >
          }
          [ (tAssignBegin)
          | tAssignBegin:
          @AssignStmt
           oEmitSourceCoordinate
           ?tLiteralAddress (tLiteralAddress)
           @OperandPushVariable
            oOperandPushVariable
            [ (tLiteralAddress)
            | *:
            [ (tLiteralAddress)
            | *:
            [ (tLiteralAddress)
            | *:
            >>
           ;OperandPushVariable
           @OperandPushExpressionAssignPopPop
            [ (tLiteralAddress)
            | tLiteralAddress:
            @OperandPushVariable
             oOperandPushVariable
             [ (tFetchInteger)
             | *:
             [ (tFetchInteger)
             | *:
             [ (tFetchInteger)
             | tFetchInteger:
             ] or >
             >>
            ;OperandPushVariable
            ] or >
            }
            [ (tLiteralInteger)
            | tLiteralInteger:
            oOperandPushInteger
            ] or >
            }
            [ (tAdd)
            | tAdd:
            [ (tAssignInteger)
            | tAssignInteger:
            @OperandAddAssignPopPopPop
             [ oOperandCompareRightAndDest (no)
             | *:
             oOperandSwap
             [ oOperandCompareRightAndDest (yes)
             | yes:
             oOperandPop
             @OperandAddRightToLeftPop
              [ oOperandChooseManifestValue (one)
              | one:
              oOperandPop
              oEmitSingle(iInc)
              ] or >
              >>
             ;OperandAddRightToLeftPop
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mStatic)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             ] or >
             >>
            ;OperandAddAssignPopPopPop
            ] or >
            >>
           ;OperandPushExpressionAssignPopPop
           >>
          ;AssignStmt
          ] or >
          }
          [ (tIfMerge)
          | *:
          ] or >
          >>
         ;Block
         >>
        ;Statements
        [ (tIfMerge)
        | tIfMerge:
        oEmitUnconditionalForwardBranch
        oFixAndFreeShuntList
        oOperandPop
        oFixPushLastAddress
        oEmitMergeSourceCoordinate
        @Statements
         @Block
          [ (tIfBegin)
          | tIfBegin:
          @IfStmt
           oEmitSourceCoordinate
           @OperandPushBooleanControlExpression
            @OperandPushExpression
             [ (tLiteralAddress)
             | tLiteralAddress:
             @OperandPushVariable
              oOperandPushVariable
              [ (tFetchInteger)
              | *:
              [ (tFetchInteger)
              | *:
              [ (tFetchInteger)
              | tFetchInteger:
              ] or >
              >>
             ;OperandPushVariable
             ] or >
             }
             [ (tLiteralInteger)
             | tLiteralInteger:
             oOperandPushInteger
             ] or >
             }
             [ (tLT)
             | tLT:
             @OperandLessPop
              oOperandSwap
              @OperandGreaterPop
               [ oOperandCompareLeftAndRight (no)
               | no:
               [ oOperandChooseManifestValue ()
               | *:
               oOperandSwap
               [ oOperandChooseManifestValue ()
               | *:
               oOperandSwap
               @EmitCmp
                oOperandSwap
                [ oOperandChooseMode (mManifest)
                | mManifest:
                oOperandPushCopy
                @OperandForceIntoTemp
                 [ oOperandChooseMode (mManifest)
                 | *:
                 [ oOperandChooseLength (two)
                 | two:
                 @OperandPushTempWord
                  oTempAllocate
                  oOperandPushTemp
                  oOperandSetValue(zero)
                  oOperandSetLength(two)
                  >>
                 ;OperandPushTempWord
                 oOperandSwap
                 oEmitDouble(iMov)
                 @OperandPopAndFreeTemp
                  [ oOperandChooseMode (mManifest)
                  | *:
                  oOperandPop
                  >>
                 ;OperandPopAndFreeTemp
                 oOperandSetMode(mTemp)
                 ] or >
                 >>
                ;OperandForceIntoTemp
                oOperandSwap
                oOperandSwapRightAndDest
                oEmitDouble(iCmp)
                oOperandSwap
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mTemp)
                 | mTemp:
                 oTempFree
                 ] or >
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                >>
               ;EmitCmp
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mStatic)
                | *:
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mManifest)
                | *:
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               oOperandPushJumpCondition(iJgt)
               ] or >
               >>
              ;OperandGreaterPop
              >>
             ;OperandLessPop
             ] or >
             }
             [ (tIfThen)
             | *:
             ] or >
             >>
            ;OperandPushExpression
            @OperandForceToJumpCondition
             [ oOperandIsJumpCondition (yes)
             | yes:
             ] or >
             >>
            ;OperandForceToJumpCondition
            >>
           ;OperandPushBooleanControlExpression
           ?tIfThen (tIfThen)
           [ oOperandChooseJumpCondition (iJgt)
           | *:
           @OperandComplementJumpCondition
            [ oOperandChooseJumpCondition (iJgt)
            | *:
            oOperandComplementJumpCondition
            >>
           ;OperandComplementJumpCondition
           @OperandInfixOr
            @OperandForceToJumpCondition
             [ oOperandIsJumpCondition (yes)
             | yes:
             ] or >
             >>
            ;OperandForceToJumpCondition
            [ oOperandChooseJumpCondition (iJle)
            | *:
            oEmitConditionalForwardBranch
            oFixAndFreeFalseBranches
            oFixPushLastAddress
            oOperandMergeShuntsWithAddress
            oFixPopAddress
            >>
           ;OperandInfixOr
           @Statements
            @Block
             [ (tCallBegin)
             | tCallBegin:
             @CallStmt
              oEmitSourceCoordinate
              oOperandPushMode(mManifest)
              oOperandSetLength(two)
              oOperandSetValue(zero)
              [ (tCallEnd)
              | tCallEnd:
              ] or >
              oOperandPushProcedure
              oOperandSetMode(mProc)
              oEmitSingle(iCall)
              oOperandPop
              oOperandPushMode(mStackReg)
              oOperandSetLength(two)
              oOperandSwap
              oEmitDouble(iAdd)
              oOperandPop
              oOperandPop
              oEmitMergeSourceCoordinate
              >>
             ;CallStmt
             ] or >
             }
             [ (tIfMerge)
             | *:
             ] or >
             >>
            ;Block
            >>
           ;Statements
           [ (tIfMerge)
           | tIfMerge:
           oEmitUnconditionalForwardBranch
           oFixAndFreeShuntList
           oOperandPop
           oFixPushLastAddress
           oEmitMergeSourceCoordinate
           @Statements
            @Block
             [ (tAssignBegin)
             | tAssignBegin:
             @AssignStmt
              oEmitSourceCoordinate
              ?tLiteralAddress (tLiteralAddress)
              @OperandPushVariable
               oOperandPushVariable
               [ (tLiteralBoolean)
               | *:
               [ (tLiteralBoolean)
               | *:
               [ (tLiteralBoolean)
               | *:
               >>
              ;OperandPushVariable
              @OperandPushExpressionAssignPopPop
               [ (tLiteralBoolean)
               | tLiteralBoolean:
               oOperandPushBoolean
               ] or >
               }
               [ (tAssignBoolean)
               | tAssignBoolean:
               @OperandAssignBooleanPopPop
                @OperandConvertJumpConditionToData
                 [ oOperandIsJumpCondition (no)
                 | no:
                 ] or >
                 >>
                ;OperandConvertJumpConditionToData
                oOperandSetLength(one)
                @EmitMove
                 @OperandLeftOrRightIsTemp
                  [ oOperandChooseMode (mManifest)
                  | *:
                  oOperandSwap
                  [ oOperandChooseMode (mStatic)
                  | *:
                  oOperandSwap
                  >>no
                 ;OperandLeftOrRightIsTemp
                 [@OperandLeftOrRightIsTemp (no)
                 | *:
                 [ oOperandChooseMode (mManifest)
                 | mManifest:
                 oEmitDouble(iMov)
                 ] or >
                 >>
                ;EmitMove
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mManifest)
                 | *:
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mStatic)
                 | *:
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                >>
               ;OperandAssignBooleanPopPop
               ] or >
               >>
              ;OperandPushExpressionAssignPopPop
              >>
             ;AssignStmt
             ] or >
             }
             [ (tIfEnd)
             | *:
             ] or >
             >>
            ;Block
            >>
           ;Statements
           oFixForwardBranch
           oFixPopAddress
           ?tIfEnd (tIfEnd)
           ] or >
           >>
          ;IfStmt
          ] or >
          }
          [ (tIfEnd)
          | *:
          ] or >
          >>
         ;Block
         >>
        ;Statements
        oFixForwardBranch
        oFixPopAddress
        ?tIfEnd (tIfEnd)
        ] or >
        >>
       ;IfStmt
       ] or >
       }
       [ (tIfEnd)
       | *:
       ] or >
       >>
      ;Block
      >>
     ;Statements
     oFixForwardBranch
     oFixPopAddress
     ?tIfEnd (tIfEnd)
     ] or >
     >>
    ;IfStmt
    ] or >
    }
    [ (tIfBegin)
    | tIfBegin:
    @IfStmt
     oEmitSourceCoordinate
     @OperandPushBooleanControlExpression
      @OperandPushExpression
       [ (tLiteralAddress)
       | tLiteralAddress:
       @OperandPushVariable
        oOperandPushVariable
        [ (tFetchBoolean)
        | *:
        [ (tFetchBoolean)
        | *:
        [ (tFetchBoolean)
        | tFetchBoolean:
        oOperandSetLength(one)
        ] or >
        >>
       ;OperandPushVariable
       ] or >
       }
       [ (tIfThen)
       | *:
       ] or >
       >>
      ;OperandPushExpression
      @OperandForceToJumpCondition
       [ oOperandIsJumpCondition (no)
       | *:
       [ oOperandChooseManifestValue ()
       | *:
       @EmitTst
        [ oOperandChooseLength (one)
        | one:
        oOperandPushMode(mManifest)
        oOperandSetValue(zero)
        oOperandSetLength(one)
        ] or >
        @EmitCmp
         oOperandSwap
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandSwap
         @OperandLeftOrRightIsTemp
          [ oOperandChooseMode (mManifest)
          | *:
          oOperandSwap
          [ oOperandChooseMode (mStatic)
          | *:
          oOperandSwap
          >>no
         ;OperandLeftOrRightIsTemp
         [@OperandLeftOrRightIsTemp (no)
         | *:
         [ oOperandChooseMode (mManifest)
         | mManifest:
         oEmitDouble(iCmp)
         ] or >
         >>
        ;EmitCmp
        oOperandPop
        >>
       ;EmitTst
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandPushJumpCondition(iJne)
       >>
      ;OperandForceToJumpCondition
      >>
     ;OperandPushBooleanControlExpression
     ?tIfThen (tIfThen)
     [ oOperandChooseJumpCondition (iJne)
     | *:
     @OperandComplementJumpCondition
      [ oOperandChooseJumpCondition (iJne)
      | *:
      oOperandComplementJumpCondition
      >>
     ;OperandComplementJumpCondition
     @OperandInfixOr
      @OperandForceToJumpCondition
       [ oOperandIsJumpCondition (yes)
       | yes:
       ] or >
       >>
      ;OperandForceToJumpCondition
      [ oOperandChooseJumpCondition (iJeq)
      | *:
      oEmitConditionalForwardBranch
      oFixAndFreeFalseBranches
      oFixPushLastAddress
      oOperandMergeShuntsWithAddress
      oFixPopAddress
      >>
     ;OperandInfixOr
     @Statements
      @Block
       [ (tWriteBegin)
       | tWriteBegin:
       @WriteProc
        oEmitSourceCoordinate
        [ (tTrapBegin)
        | *:
        @WriteParameter
         ?tTrapBegin (tTrapBegin)
         ?tLiteralAddress (tLiteralAddress)
         @OperandPushVariable
          oOperandPushVariable
          [ (tVarParm)
          | *:
          [ (tVarParm)
          | *:
          [ (tVarParm)
          | *:
          >>
         ;OperandPushVariable
         @OperandForceToStack
          [ oOperandChooseLength (two)
          | two:
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tVarParm (tVarParm)
         ?tParmEnd (tParmEnd)
         @OperandPushExpression
          [ (tSkipString)
          | tSkipString:
          oEmitNone(iData)
          ?tStringData (tStringData)
          oEmitString
          oEmitNone(iText)
          ] or >
          }
          [ (tLiteralAddress)
          | tLiteralAddress:
          @OperandPushVariable
           oOperandPushVariable
           [ (tFetchChar)
           | *:
           [ (tFetchChar)
           | *:
           [ (tFetchChar)
           | tFetchChar:
           oOperandSetLength(regCX)
           ] or >
           >>
          ;OperandPushVariable
          ] or >
          }
          [ (tParmEnd)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         [ (tParmEnd)
         | *:
         @OperandForceToStack
          [ oOperandChooseLength (regCX)
          | regCX:
          @OperandForceAddressIntoTemp
           [ oOperandChooseMode (mStatic)
           | mStatic:
           @OperandPushTempWord
            oTempAllocate
            oOperandPushTemp
            oOperandSetValue(zero)
            oOperandSetLength(two)
            >>
           ;OperandPushTempWord
           oOperandSwap
           oEmitDouble(iLoada)
           oOperandPop
           ] or >
           oOperandSetLength(two)
           >>
          ;OperandForceAddressIntoTemp
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mTemp)
           | mTemp:
           oTempFree
           ] or >
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tParmEnd (tParmEnd)
         @OperandPushExpression
          [ (tLiteralInteger)
          | tLiteralInteger:
          oOperandPushInteger
          ] or >
          }
          [ (tParmEnd)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         @OperandForceToStack
          [ oOperandChooseLength (two)
          | two:
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mManifest)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tParmEnd (tParmEnd)
         ?tTrap (tTrap)
         oOperandPushTrap
         oEmitSingle(iCall)
         oOperandPop
         oOperandPushMode(mStackReg)
         oOperandSetLength(two)
         oOperandPushMode(mManifest)
         oOperandSetLength(two)
         oOperandSetValue(twelve)
         oEmitDouble(iAdd)
         oOperandPop
         oOperandPop
         >>
        ;WriteParameter
        }
        [ (tTrapBegin)
        | *:
        @WriteParameter
         ?tTrapBegin (tTrapBegin)
         ?tLiteralAddress (tLiteralAddress)
         @OperandPushVariable
          oOperandPushVariable
          [ (tVarParm)
          | *:
          [ (tVarParm)
          | *:
          [ (tVarParm)
          | *:
          >>
         ;OperandPushVariable
         @OperandForceToStack
          [ oOperandChooseLength (two)
          | two:
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tVarParm (tVarParm)
         ?tParmEnd (tParmEnd)
         @OperandPushExpression
          [ (tLiteralAddress)
          | tLiteralAddress:
          @OperandPushVariable
           oOperandPushVariable
           [ (tFetchInteger)
           | *:
           [ (tFetchInteger)
           | *:
           [ (tFetchInteger)
           | tFetchInteger:
           ] or >
           >>
          ;OperandPushVariable
          ] or >
          }
          [ (tParmEnd)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         [ (tParmEnd)
         | *:
         @OperandForceToStack
          [ oOperandChooseLength (two)
          | two:
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tParmEnd (tParmEnd)
         @OperandPushExpression
          [ (tLiteralInteger)
          | tLiteralInteger:
          oOperandPushInteger
          ] or >
          }
          [ (tParmEnd)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         @OperandForceToStack
          [ oOperandChooseLength (two)
          | two:
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mManifest)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tParmEnd (tParmEnd)
         ?tTrap (tTrap)
         oOperandPushTrap
         oEmitSingle(iCall)
         oOperandPop
         oOperandPushMode(mStackReg)
         oOperandSetLength(two)
         oOperandPushMode(mManifest)
         oOperandSetLength(two)
         oOperandSetValue(twelve)
         oEmitDouble(iAdd)
         oOperandPop
         oOperandPop
         >>
        ;WriteParameter
        }
        [ (tTrapBegin)
        | *:
        @WriteParameter
         ?tTrapBegin (tTrapBegin)
         ?tLiteralAddress (tLiteralAddress)
         @OperandPushVariable
          oOperandPushVariable
          [ (tVarParm)
          | *:
          [ (tVarParm)
          | *:
          [ (tVarParm)
          | *:
          >>
         ;OperandPushVariable
         @OperandForceToStack
          [ oOperandChooseLength (two)
          | two:
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tVarParm (tVarParm)
         ?tParmEnd (tParmEnd)
         @OperandPushExpression
          [ (tSkipString)
          | tSkipString:
          oEmitNone(iData)
          ?tStringData (tStringData)
          oEmitString
          oEmitNone(iText)
          ] or >
          }
          [ (tLiteralAddress)
          | tLiteralAddress:
          @OperandPushVariable
           oOperandPushVariable
           [ (tFetchChar)
           | *:
           [ (tFetchChar)
           | *:
           [ (tFetchChar)
           | tFetchChar:
           oOperandSetLength(regCX)
           ] or >
           >>
          ;OperandPushVariable
          ] or >
          }
          [ (tParmEnd)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         [ (tParmEnd)
         | *:
         @OperandForceToStack
          [ oOperandChooseLength (regCX)
          | regCX:
          @OperandForceAddressIntoTemp
           [ oOperandChooseMode (mStatic)
           | mStatic:
           @OperandPushTempWord
            oTempAllocate
            oOperandPushTemp
            oOperandSetValue(zero)
            oOperandSetLength(two)
            >>
           ;OperandPushTempWord
           oOperandSwap
           oEmitDouble(iLoada)
           oOperandPop
           ] or >
           oOperandSetLength(two)
           >>
          ;OperandForceAddressIntoTemp
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mTemp)
           | mTemp:
           oTempFree
           ] or >
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tParmEnd (tParmEnd)
         @OperandPushExpression
          [ (tLiteralInteger)
          | tLiteralInteger:
          oOperandPushInteger
          ] or >
          }
          [ (tParmEnd)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         @OperandForceToStack
          [ oOperandChooseLength (two)
          | two:
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mManifest)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tParmEnd (tParmEnd)
         ?tTrap (tTrap)
         oOperandPushTrap
         oEmitSingle(iCall)
         oOperandPop
         oOperandPushMode(mStackReg)
         oOperandSetLength(two)
         oOperandPushMode(mManifest)
         oOperandSetLength(two)
         oOperandSetValue(twelve)
         oEmitDouble(iAdd)
         oOperandPop
         oOperandPop
         >>
        ;WriteParameter
        }
        [ (tWriteEnd)
        | tWriteEnd:
        ] or >
        >>
       ;WriteProc
       ] or >
       }
       [ (tTrapBegin)
       | tTrapBegin:
       @TrapStmt
        oEmitSourceCoordinate
        [ (tLiteralAddress)
        | tLiteralAddress:
        @OperandPushVariable
         oOperandPushVariable
         [ (tVarParm)
         | *:
         [ (tVarParm)
         | *:
         [ (tVarParm)
         | *:
         >>
        ;OperandPushVariable
        oOperandPushCopy
        @OperandForceToStack
         [ oOperandChooseLength (two)
         | two:
         ] or >
         oEmitSingle(iPush)
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStatic)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         oOperandPushMode(mStack)
         >>
        ;OperandForceToStack
        oOperandPop
        ?tVarParm (tVarParm)
        ?tParmEnd (tParmEnd)
        [ (tTrap)
        | tTrap:
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        oOperandPushTrap
        oEmitSingle(iCall)
        oOperandPop
        oOperandPushMode(mStackReg)
        oOperandSetLength(two)
        oOperandPushMode(mManifest)
        oOperandSetLength(two)
        oOperandSetValue(four)
        oEmitDouble(iAdd)
        oOperandPop
        oOperandPop
        ] or >
        ] or >
        >>
       ;TrapStmt
       ] or >
       }
       [ (tIfBegin)
       | tIfBegin:
       @IfStmt
        oEmitSourceCoordinate
        @OperandPushBooleanControlExpression
         @OperandPushExpression
          [ (tLiteralAddress)
          | tLiteralAddress:
          @OperandPushVariable
           oOperandPushVariable
           [ (tFetchInteger)
           | *:
           [ (tFetchInteger)
           | *:
           [ (tFetchInteger)
           | tFetchInteger:
           ] or >
           >>
          ;OperandPushVariable
          ] or >
          }
          [ (tLiteralAddress)
          | tLiteralAddress:
          @OperandPushVariable
           oOperandPushVariable
           [ (tFetchInteger)
           | *:
           [ (tFetchInteger)
           | *:
           [ (tFetchInteger)
           | tFetchInteger:
           ] or >
           >>
          ;OperandPushVariable
          ] or >
          }
          [ (tGT)
          | tGT:
          @OperandGreaterPop
           [ oOperandCompareLeftAndRight (no)
           | no:
           [ oOperandChooseManifestValue ()
           | *:
           oOperandSwap
           [ oOperandChooseManifestValue ()
           | *:
           oOperandSwap
           @EmitCmp
            oOperandSwap
            [ oOperandChooseMode (mStatic)
            | *:
            oOperandSwap
            @OperandLeftOrRightIsTemp
             [ oOperandChooseMode (mStatic)
             | *:
             oOperandSwap
             [ oOperandChooseMode (mStatic)
             | *:
             oOperandSwap
             >>no
            ;OperandLeftOrRightIsTemp
            [@OperandLeftOrRightIsTemp (no)
            | *:
            [ oOperandChooseMode (mStatic)
            | *:
            oOperandPushCopy
            @OperandForceIntoTemp
             [ oOperandChooseMode (mStatic)
             | *:
             [ oOperandChooseLength (two)
             | two:
             @OperandPushTempWord
              oTempAllocate
              oOperandPushTemp
              oOperandSetValue(zero)
              oOperandSetLength(two)
              >>
             ;OperandPushTempWord
             oOperandSwap
             oEmitDouble(iMov)
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mStatic)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandSetMode(mTemp)
             ] or >
             >>
            ;OperandForceIntoTemp
            oOperandSwapLeftAndDest
            oEmitDouble(iCmp)
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mTemp)
             | mTemp:
             oTempFree
             ] or >
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            oOperandSwap
            >>
           ;EmitCmp
           @OperandPopAndFreeTemp
            [ oOperandChooseMode (mStatic)
            | *:
            oOperandPop
            >>
           ;OperandPopAndFreeTemp
           @OperandPopAndFreeTemp
            [ oOperandChooseMode (mStatic)
            | *:
            oOperandPop
            >>
           ;OperandPopAndFreeTemp
           oOperandPushJumpCondition(iJgt)
           ] or >
           >>
          ;OperandGreaterPop
          ] or >
          }
          [ (tIfThen)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         @OperandForceToJumpCondition
          [ oOperandIsJumpCondition (yes)
          | yes:
          ] or >
          >>
         ;OperandForceToJumpCondition
         >>
        ;OperandPushBooleanControlExpression
        ?tIfThen (tIfThen)
        [ oOperandChooseJumpCondition (iJgt)
        | *:
        @OperandComplementJumpCondition
         [ oOperandChooseJumpCondition (iJgt)
         | *:
         oOperandComplementJumpCondition
         >>
        ;OperandComplementJumpCondition
        @OperandInfixOr
         @OperandForceToJumpCondition
          [ oOperandIsJumpCondition (yes)
          | yes:
          ] or >
          >>
         ;OperandForceToJumpCondition
         [ oOperandChooseJumpCondition (iJle)
         | *:
         oEmitConditionalForwardBranch
         oFixAndFreeFalseBranches
         oFixPushLastAddress
         oOperandMergeShuntsWithAddress
         oFixPopAddress
         >>
        ;OperandInfixOr
        @Statements
         @Block
          [ (tWriteBegin)
          | tWriteBegin:
          @WriteProc
           oEmitSourceCoordinate
           [ (tTrapBegin)
           | *:
           @WriteParameter
            ?tTrapBegin (tTrapBegin)
            ?tLiteralAddress (tLiteralAddress)
            @OperandPushVariable
             oOperandPushVariable
             [ (tVarParm)
             | *:
             [ (tVarParm)
             | *:
             [ (tVarParm)
             | *:
             >>
            ;OperandPushVariable
            @OperandForceToStack
             [ oOperandChooseLength (two)
             | two:
             ] or >
             oEmitSingle(iPush)
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mStatic)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandPushMode(mStack)
             >>
            ;OperandForceToStack
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStack)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            ?tVarParm (tVarParm)
            ?tParmEnd (tParmEnd)
            @OperandPushExpression
             [ (tSkipString)
             | tSkipString:
             oEmitNone(iData)
             ?tStringData (tStringData)
             oEmitString
             oEmitNone(iText)
             ] or >
             }
             [ (tLiteralAddress)
             | tLiteralAddress:
             @OperandPushVariable
              oOperandPushVariable
              [ (tFetchChar)
              | *:
              [ (tFetchChar)
              | *:
              [ (tFetchChar)
              | tFetchChar:
              oOperandSetLength(regCX)
              ] or >
              >>
             ;OperandPushVariable
             ] or >
             }
             [ (tParmEnd)
             | *:
             ] or >
             >>
            ;OperandPushExpression
            [ (tParmEnd)
            | *:
            @OperandForceToStack
             [ oOperandChooseLength (regCX)
             | regCX:
             @OperandForceAddressIntoTemp
              [ oOperandChooseMode (mStatic)
              | mStatic:
              @OperandPushTempWord
               oTempAllocate
               oOperandPushTemp
               oOperandSetValue(zero)
               oOperandSetLength(two)
               >>
              ;OperandPushTempWord
              oOperandSwap
              oEmitDouble(iLoada)
              oOperandPop
              ] or >
              oOperandSetLength(two)
              >>
             ;OperandForceAddressIntoTemp
             ] or >
             oEmitSingle(iPush)
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mTemp)
              | mTemp:
              oTempFree
              ] or >
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandPushMode(mStack)
             >>
            ;OperandForceToStack
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStack)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            ?tParmEnd (tParmEnd)
            @OperandPushExpression
             [ (tLiteralInteger)
             | tLiteralInteger:
             oOperandPushInteger
             ] or >
             }
             [ (tParmEnd)
             | *:
             ] or >
             >>
            ;OperandPushExpression
            @OperandForceToStack
             [ oOperandChooseLength (two)
             | two:
             ] or >
             oEmitSingle(iPush)
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mManifest)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandPushMode(mStack)
             >>
            ;OperandForceToStack
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStack)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            ?tParmEnd (tParmEnd)
            ?tTrap (tTrap)
            oOperandPushTrap
            oEmitSingle(iCall)
            oOperandPop
            oOperandPushMode(mStackReg)
            oOperandSetLength(two)
            oOperandPushMode(mManifest)
            oOperandSetLength(two)
            oOperandSetValue(twelve)
            oEmitDouble(iAdd)
            oOperandPop
            oOperandPop
            >>
           ;WriteParameter
           }
           [ (tWriteEnd)
           | tWriteEnd:
           ] or >
           >>
          ;WriteProc
          ] or >
          }
          [ (tTrapBegin)
          | tTrapBegin:
          @TrapStmt
           oEmitSourceCoordinate
           [ (tLiteralAddress)
           | tLiteralAddress:
           @OperandPushVariable
            oOperandPushVariable
            [ (tVarParm)
            | *:
            [ (tVarParm)
            | *:
            [ (tVarParm)
            | *:
            >>
           ;OperandPushVariable
           oOperandPushCopy
           @OperandForceToStack
            [ oOperandChooseLength (two)
            | two:
            ] or >
            oEmitSingle(iPush)
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStatic)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            oOperandPushMode(mStack)
            >>
           ;OperandForceToStack
           oOperandPop
           ?tVarParm (tVarParm)
           ?tParmEnd (tParmEnd)
           [ (tTrap)
           | tTrap:
           @OperandPopAndFreeTemp
            [ oOperandChooseMode (mStatic)
            | *:
            oOperandPop
            >>
           ;OperandPopAndFreeTemp
           oOperandPushTrap
           oEmitSingle(iCall)
           oOperandPop
           oOperandPushMode(mStackReg)
           oOperandSetLength(two)
           oOperandPushMode(mManifest)
           oOperandSetLength(two)
           oOperandSetValue(four)
           oEmitDouble(iAdd)
           oOperandPop
           oOperandPop
           ] or >
           ] or >
           >>
          ;TrapStmt
          ] or >
          }
          [ (tAssignBegin)
          | tAssignBegin:
          @AssignStmt
           oEmitSourceCoordinate
           ?tLiteralAddress (tLiteralAddress)
           @OperandPushVariable
            oOperandPushVariable
            [ (tLiteralAddress)
            | *:
            [ (tLiteralAddress)
            | *:
            [ (tLiteralAddress)
            | *:
            >>
           ;OperandPushVariable
           @OperandPushExpressionAssignPopPop
            [ (tLiteralAddress)
            | tLiteralAddress:
            @OperandPushVariable
             oOperandPushVariable
             [ (tFetchInteger)
             | *:
             [ (tFetchInteger)
             | *:
             [ (tFetchInteger)
             | tFetchInteger:
             ] or >
             >>
            ;OperandPushVariable
            ] or >
            }
            [ (tLiteralInteger)
            | tLiteralInteger:
            oOperandPushInteger
            ] or >
            }
            [ (tAdd)
            | tAdd:
            [ (tAssignInteger)
            | tAssignInteger:
            @OperandAddAssignPopPopPop
             [ oOperandCompareRightAndDest (no)
             | *:
             oOperandSwap
             [ oOperandCompareRightAndDest (yes)
             | yes:
             oOperandPop
             @OperandAddRightToLeftPop
              [ oOperandChooseManifestValue (one)
              | one:
              oOperandPop
              oEmitSingle(iInc)
              ] or >
              >>
             ;OperandAddRightToLeftPop
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mStatic)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             ] or >
             >>
            ;OperandAddAssignPopPopPop
            ] or >
            >>
           ;OperandPushExpressionAssignPopPop
           >>
          ;AssignStmt
          ] or >
          }
          [ (tIfMerge)
          | *:
          ] or >
          >>
         ;Block
         >>
        ;Statements
        [ (tIfMerge)
        | tIfMerge:
        oEmitUnconditionalForwardBranch
        oFixAndFreeShuntList
        oOperandPop
        oFixPushLastAddress
        oEmitMergeSourceCoordinate
        @Statements
         @Block
          [ (tIfBegin)
          | tIfBegin:
          @IfStmt
           oEmitSourceCoordinate
           @OperandPushBooleanControlExpression
            @OperandPushExpression
             [ (tLiteralAddress)
             | tLiteralAddress:
             @OperandPushVariable
              oOperandPushVariable
              [ (tFetchInteger)
              | *:
              [ (tFetchInteger)
              | *:
              [ (tFetchInteger)
              | tFetchInteger:
              ] or >
              >>
             ;OperandPushVariable
             ] or >
             }
             [ (tLiteralAddress)
             | tLiteralAddress:
             @OperandPushVariable
              oOperandPushVariable
              [ (tFetchInteger)
              | *:
              [ (tFetchInteger)
              | *:
              [ (tFetchInteger)
              | tFetchInteger:
              ] or >
              >>
             ;OperandPushVariable
             ] or >
             }
             [ (tLT)
             | tLT:
             @OperandLessPop
              oOperandSwap
              @OperandGreaterPop
               [ oOperandCompareLeftAndRight (no)
               | no:
               [ oOperandChooseManifestValue ()
               | *:
               oOperandSwap
               [ oOperandChooseManifestValue ()
               | *:
               oOperandSwap
               @EmitCmp
                oOperandSwap
                [ oOperandChooseMode (mStatic)
                | *:
                oOperandSwap
                @OperandLeftOrRightIsTemp
                 [ oOperandChooseMode (mStatic)
                 | *:
                 oOperandSwap
                 [ oOperandChooseMode (mStatic)
                 | *:
                 oOperandSwap
                 >>no
                ;OperandLeftOrRightIsTemp
                [@OperandLeftOrRightIsTemp (no)
                | *:
                [ oOperandChooseMode (mStatic)
                | *:
                oOperandPushCopy
                @OperandForceIntoTemp
                 [ oOperandChooseMode (mStatic)
                 | *:
                 [ oOperandChooseLength (two)
                 | two:
                 @OperandPushTempWord
                  oTempAllocate
                  oOperandPushTemp
                  oOperandSetValue(zero)
                  oOperandSetLength(two)
                  >>
                 ;OperandPushTempWord
                 oOperandSwap
                 oEmitDouble(iMov)
                 @OperandPopAndFreeTemp
                  [ oOperandChooseMode (mStatic)
                  | *:
                  oOperandPop
                  >>
                 ;OperandPopAndFreeTemp
                 oOperandSetMode(mTemp)
                 ] or >
                 >>
                ;OperandForceIntoTemp
                oOperandSwapLeftAndDest
                oEmitDouble(iCmp)
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mTemp)
                 | mTemp:
                 oTempFree
                 ] or >
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                oOperandSwap
                >>
               ;EmitCmp
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mStatic)
                | *:
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mStatic)
                | *:
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               oOperandPushJumpCondition(iJgt)
               ] or >
               >>
              ;OperandGreaterPop
              >>
             ;OperandLessPop
             ] or >
             }
             [ (tIfThen)
             | *:
             ] or >
             >>
            ;OperandPushExpression
            @OperandForceToJumpCondition
             [ oOperandIsJumpCondition (yes)
             | yes:
             ] or >
             >>
            ;OperandForceToJumpCondition
            >>
           ;OperandPushBooleanControlExpression
           ?tIfThen (tIfThen)
           [ oOperandChooseJumpCondition (iJgt)
           | *:
           @OperandComplementJumpCondition
            [ oOperandChooseJumpCondition (iJgt)
            | *:
            oOperandComplementJumpCondition
            >>
           ;OperandComplementJumpCondition
           @OperandInfixOr
            @OperandForceToJumpCondition
             [ oOperandIsJumpCondition (yes)
             | yes:
             ] or >
             >>
            ;OperandForceToJumpCondition
            [ oOperandChooseJumpCondition (iJle)
            | *:
            oEmitConditionalForwardBranch
            oFixAndFreeFalseBranches
            oFixPushLastAddress
            oOperandMergeShuntsWithAddress
            oFixPopAddress
            >>
           ;OperandInfixOr
           @Statements
            @Block
             [ (tCallBegin)
             | tCallBegin:
             @CallStmt
              oEmitSourceCoordinate
              oOperandPushMode(mManifest)
              oOperandSetLength(two)
              oOperandSetValue(zero)
              [ (tCallEnd)
              | tCallEnd:
              ] or >
              oOperandPushProcedure
              oOperandSetMode(mProc)
              oEmitSingle(iCall)
              oOperandPop
              oOperandPushMode(mStackReg)
              oOperandSetLength(two)
              oOperandSwap
              oEmitDouble(iAdd)
              oOperandPop
              oOperandPop
              oEmitMergeSourceCoordinate
              >>
             ;CallStmt
             ] or >
             }
             [ (tWriteBegin)
             | tWriteBegin:
             @WriteProc
              oEmitSourceCoordinate
              [ (tTrapBegin)
              | *:
              @WriteParameter
               ?tTrapBegin (tTrapBegin)
               ?tLiteralAddress (tLiteralAddress)
               @OperandPushVariable
                oOperandPushVariable
                [ (tVarParm)
                | *:
                [ (tVarParm)
                | *:
                [ (tVarParm)
                | *:
                >>
               ;OperandPushVariable
               @OperandForceToStack
                [ oOperandChooseLength (two)
                | two:
                ] or >
                oEmitSingle(iPush)
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mStatic)
                 | *:
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                oOperandPushMode(mStack)
                >>
               ;OperandForceToStack
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mStack)
                | *:
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               ?tVarParm (tVarParm)
               ?tParmEnd (tParmEnd)
               @OperandPushExpression
                [ (tSkipString)
                | tSkipString:
                oEmitNone(iData)
                ?tStringData (tStringData)
                oEmitString
                oEmitNone(iText)
                ] or >
                }
                [ (tLiteralAddress)
                | tLiteralAddress:
                @OperandPushVariable
                 oOperandPushVariable
                 [ (tFetchChar)
                 | *:
                 [ (tFetchChar)
                 | *:
                 [ (tFetchChar)
                 | tFetchChar:
                 oOperandSetLength(regCX)
                 ] or >
                 >>
                ;OperandPushVariable
                ] or >
                }
                [ (tParmEnd)
                | *:
                ] or >
                >>
               ;OperandPushExpression
               [ (tParmEnd)
               | *:
               @OperandForceToStack
                [ oOperandChooseLength (regCX)
                | regCX:
                @OperandForceAddressIntoTemp
                 [ oOperandChooseMode (mStatic)
                 | mStatic:
                 @OperandPushTempWord
                  oTempAllocate
                  oOperandPushTemp
                  oOperandSetValue(zero)
                  oOperandSetLength(two)
                  >>
                 ;OperandPushTempWord
                 oOperandSwap
                 oEmitDouble(iLoada)
                 oOperandPop
                 ] or >
                 oOperandSetLength(two)
                 >>
                ;OperandForceAddressIntoTemp
                ] or >
                oEmitSingle(iPush)
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mTemp)
                 | mTemp:
                 oTempFree
                 ] or >
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                oOperandPushMode(mStack)
                >>
               ;OperandForceToStack
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mStack)
                | *:
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               ?tParmEnd (tParmEnd)
               @OperandPushExpression
                [ (tLiteralInteger)
                | tLiteralInteger:
                oOperandPushInteger
                ] or >
                }
                [ (tParmEnd)
                | *:
                ] or >
                >>
               ;OperandPushExpression
               @OperandForceToStack
                [ oOperandChooseLength (two)
                | two:
                ] or >
                oEmitSingle(iPush)
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mManifest)
                 | *:
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                oOperandPushMode(mStack)
                >>
               ;OperandForceToStack
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mStack)
                | *:
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               ?tParmEnd (tParmEnd)
               ?tTrap (tTrap)
               oOperandPushTrap
               oEmitSingle(iCall)
               oOperandPop
               oOperandPushMode(mStackReg)
               oOperandSetLength(two)
               oOperandPushMode(mManifest)
               oOperandSetLength(two)
               oOperandSetValue(twelve)
               oEmitDouble(iAdd)
               oOperandPop
               oOperandPop
               >>
              ;WriteParameter
              }
              [ (tWriteEnd)
              | tWriteEnd:
              ] or >
              >>
             ;WriteProc
             ] or >
             }
             [ (tTrapBegin)
             | tTrapBegin:
             @TrapStmt
              oEmitSourceCoordinate
              [ (tLiteralAddress)
              | tLiteralAddress:
              @OperandPushVariable
               oOperandPushVariable
               [ (tVarParm)
               | *:
               [ (tVarParm)
               | *:
               [ (tVarParm)
               | *:
               >>
              ;OperandPushVariable
              oOperandPushCopy
              @OperandForceToStack
               [ oOperandChooseLength (two)
               | two:
               ] or >
               oEmitSingle(iPush)
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mStatic)
                | *:
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               oOperandPushMode(mStack)
               >>
              ;OperandForceToStack
              oOperandPop
              ?tVarParm (tVarParm)
              ?tParmEnd (tParmEnd)
              [ (tTrap)
              | tTrap:
              @OperandPopAndFreeTemp
               [ oOperandChooseMode (mStatic)
               | *:
               oOperandPop
               >>
              ;OperandPopAndFreeTemp
              oOperandPushTrap
              oEmitSingle(iCall)
              oOperandPop
              oOperandPushMode(mStackReg)
              oOperandSetLength(two)
              oOperandPushMode(mManifest)
              oOperandSetLength(two)
              oOperandSetValue(four)
              oEmitDouble(iAdd)
              oOperandPop
              oOperandPop
              ] or >
              ] or >
              >>
             ;TrapStmt
             ] or >
             }
             [ (tAssignBegin)
             | tAssignBegin:
             @AssignStmt
              oEmitSourceCoordinate
              ?tLiteralAddress (tLiteralAddress)
              @OperandPushVariable
               oOperandPushVariable
               [ (tLiteralAddress)
               | *:
               [ (tLiteralAddress)
               | *:
               [ (tLiteralAddress)
               | *:
               >>
              ;OperandPushVariable
              @OperandPushExpressionAssignPopPop
               [ (tLiteralAddress)
               | tLiteralAddress:
               @OperandPushVariable
                oOperandPushVariable
                [ (tFetchInteger)
                | *:
                [ (tFetchInteger)
                | *:
                [ (tFetchInteger)
                | tFetchInteger:
                ] or >
                >>
               ;OperandPushVariable
               ] or >
               }
               [ (tLiteralInteger)
               | tLiteralInteger:
               oOperandPushInteger
               ] or >
               }
               [ (tAdd)
               | tAdd:
               [ (tAssignInteger)
               | tAssignInteger:
               @OperandAddAssignPopPopPop
                [ oOperandCompareRightAndDest (no)
                | *:
                oOperandSwap
                [ oOperandCompareRightAndDest (yes)
                | yes:
                oOperandPop
                @OperandAddRightToLeftPop
                 [ oOperandChooseManifestValue (one)
                 | one:
                 oOperandPop
                 oEmitSingle(iInc)
                 ] or >
                 >>
                ;OperandAddRightToLeftPop
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mStatic)
                 | *:
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                ] or >
                >>
               ;OperandAddAssignPopPopPop
               ] or >
               >>
              ;OperandPushExpressionAssignPopPop
              >>
             ;AssignStmt
             ] or >
             }
             [ (tIfMerge)
             | *:
             ] or >
             >>
            ;Block
            >>
           ;Statements
           [ (tIfMerge)
           | tIfMerge:
           oEmitUnconditionalForwardBranch
           oFixAndFreeShuntList
           oOperandPop
           oFixPushLastAddress
           oEmitMergeSourceCoordinate
           @Statements
            @Block
             [ (tWriteBegin)
             | tWriteBegin:
             @WriteProc
              oEmitSourceCoordinate
              [ (tTrapBegin)
              | *:
              @WriteParameter
               ?tTrapBegin (tTrapBegin)
               ?tLiteralAddress (tLiteralAddress)
               @OperandPushVariable
                oOperandPushVariable
                [ (tVarParm)
                | *:
                [ (tVarParm)
                | *:
                [ (tVarParm)
                | *:
                >>
               ;OperandPushVariable
               @OperandForceToStack
                [ oOperandChooseLength (two)
                | two:
                ] or >
                oEmitSingle(iPush)
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mStatic)
                 | *:
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                oOperandPushMode(mStack)
                >>
               ;OperandForceToStack
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mStack)
                | *:
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               ?tVarParm (tVarParm)
               ?tParmEnd (tParmEnd)
               @OperandPushExpression
                [ (tSkipString)
                | tSkipString:
                oEmitNone(iData)
                ?tStringData (tStringData)
                oEmitString
                oEmitNone(iText)
                ] or >
                }
                [ (tLiteralAddress)
                | tLiteralAddress:
                @OperandPushVariable
                 oOperandPushVariable
                 [ (tFetchChar)
                 | *:
                 [ (tFetchChar)
                 | *:
                 [ (tFetchChar)
                 | tFetchChar:
                 oOperandSetLength(regCX)
                 ] or >
                 >>
                ;OperandPushVariable
                ] or >
                }
                [ (tParmEnd)
                | *:
                ] or >
                >>
               ;OperandPushExpression
               [ (tParmEnd)
               | *:
               @OperandForceToStack
                [ oOperandChooseLength (regCX)
                | regCX:
                @OperandForceAddressIntoTemp
                 [ oOperandChooseMode (mStatic)
                 | mStatic:
                 @OperandPushTempWord
                  oTempAllocate
                  oOperandPushTemp
                  oOperandSetValue(zero)
                  oOperandSetLength(two)
                  >>
                 ;OperandPushTempWord
                 oOperandSwap
                 oEmitDouble(iLoada)
                 oOperandPop
                 ] or >
                 oOperandSetLength(two)
                 >>
                ;OperandForceAddressIntoTemp
                ] or >
                oEmitSingle(iPush)
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mTemp)
                 | mTemp:
                 oTempFree
                 ] or >
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                oOperandPushMode(mStack)
                >>
               ;OperandForceToStack
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mStack)
                | *:
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               ?tParmEnd (tParmEnd)
               @OperandPushExpression
                [ (tLiteralInteger)
                | tLiteralInteger:
                oOperandPushInteger
                ] or >
                }
                [ (tParmEnd)
                | *:
                ] or >
                >>
               ;OperandPushExpression
               @OperandForceToStack
                [ oOperandChooseLength (two)
                | two:
                ] or >
                oEmitSingle(iPush)
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mManifest)
                 | *:
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                oOperandPushMode(mStack)
                >>
               ;OperandForceToStack
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mStack)
                | *:
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               ?tParmEnd (tParmEnd)
               ?tTrap (tTrap)
               oOperandPushTrap
               oEmitSingle(iCall)
               oOperandPop
               oOperandPushMode(mStackReg)
               oOperandSetLength(two)
               oOperandPushMode(mManifest)
               oOperandSetLength(two)
               oOperandSetValue(twelve)
               oEmitDouble(iAdd)
               oOperandPop
               oOperandPop
               >>
              ;WriteParameter
              }
              [ (tWriteEnd)
              | tWriteEnd:
              ] or >
              >>
             ;WriteProc
             ] or >
             }
             [ (tTrapBegin)
             | tTrapBegin:
             @TrapStmt
              oEmitSourceCoordinate
              [ (tLiteralAddress)
              | tLiteralAddress:
              @OperandPushVariable
               oOperandPushVariable
               [ (tVarParm)
               | *:
               [ (tVarParm)
               | *:
               [ (tVarParm)
               | *:
               >>
              ;OperandPushVariable
              oOperandPushCopy
              @OperandForceToStack
               [ oOperandChooseLength (two)
               | two:
               ] or >
               oEmitSingle(iPush)
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mStatic)
                | *:
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               oOperandPushMode(mStack)
               >>
              ;OperandForceToStack
              oOperandPop
              ?tVarParm (tVarParm)
              ?tParmEnd (tParmEnd)
              [ (tTrap)
              | tTrap:
              @OperandPopAndFreeTemp
               [ oOperandChooseMode (mStatic)
               | *:
               oOperandPop
               >>
              ;OperandPopAndFreeTemp
              oOperandPushTrap
              oEmitSingle(iCall)
              oOperandPop
              oOperandPushMode(mStackReg)
              oOperandSetLength(two)
              oOperandPushMode(mManifest)
              oOperandSetLength(two)
              oOperandSetValue(four)
              oEmitDouble(iAdd)
              oOperandPop
              oOperandPop
              ] or >
              ] or >
              >>
             ;TrapStmt
             ] or >
             }
             [ (tIfEnd)
             | *:
             ] or >
             >>
            ;Block
            >>
           ;Statements
           oFixForwardBranch
           oFixPopAddress
           ?tIfEnd (tIfEnd)
           ] or >
           >>
          ;IfStmt
          ] or >
          }
          [ (tIfEnd)
          | *:
          ] or >
          >>
         ;Block
         >>
        ;Statements
        oFixForwardBranch
        oFixPopAddress
        ?tIfEnd (tIfEnd)
        ] or >
        >>
       ;IfStmt
       ] or >
       }
       [ (tIfMerge)
       | *:
       ] or >
       >>
      ;Block
      >>
     ;Statements
     [ (tIfMerge)
     | tIfMerge:
     oEmitUnconditionalForwardBranch
     oFixAndFreeShuntList
     oOperandPop
     oFixPushLastAddress
     oEmitMergeSourceCoordinate
     @Statements
      @Block
       [ (tWriteBegin)
       | tWriteBegin:
       @WriteProc
        oEmitSourceCoordinate
        [ (tTrapBegin)
        | *:
        @WriteParameter
         ?tTrapBegin (tTrapBegin)
         ?tLiteralAddress (tLiteralAddress)
         @OperandPushVariable
          oOperandPushVariable
          [ (tVarParm)
          | *:
          [ (tVarParm)
          | *:
          [ (tVarParm)
          | *:
          >>
         ;OperandPushVariable
         @OperandForceToStack
          [ oOperandChooseLength (two)
          | two:
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tVarParm (tVarParm)
         ?tParmEnd (tParmEnd)
         @OperandPushExpression
          [ (tSkipString)
          | tSkipString:
          oEmitNone(iData)
          ?tStringData (tStringData)
          oEmitString
          oEmitNone(iText)
          ] or >
          }
          [ (tLiteralAddress)
          | tLiteralAddress:
          @OperandPushVariable
           oOperandPushVariable
           [ (tFetchChar)
           | *:
           [ (tFetchChar)
           | *:
           [ (tFetchChar)
           | tFetchChar:
           oOperandSetLength(regCX)
           ] or >
           >>
          ;OperandPushVariable
          ] or >
          }
          [ (tParmEnd)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         [ (tParmEnd)
         | *:
         @OperandForceToStack
          [ oOperandChooseLength (regCX)
          | regCX:
          @OperandForceAddressIntoTemp
           [ oOperandChooseMode (mStatic)
           | mStatic:
           @OperandPushTempWord
            oTempAllocate
            oOperandPushTemp
            oOperandSetValue(zero)
            oOperandSetLength(two)
            >>
           ;OperandPushTempWord
           oOperandSwap
           oEmitDouble(iLoada)
           oOperandPop
           ] or >
           oOperandSetLength(two)
           >>
          ;OperandForceAddressIntoTemp
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mTemp)
           | mTemp:
           oTempFree
           ] or >
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tParmEnd (tParmEnd)
         @OperandPushExpression
          [ (tLiteralInteger)
          | tLiteralInteger:
          oOperandPushInteger
          ] or >
          }
          [ (tParmEnd)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         @OperandForceToStack
          [ oOperandChooseLength (two)
          | two:
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mManifest)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tParmEnd (tParmEnd)
         ?tTrap (tTrap)
         oOperandPushTrap
         oEmitSingle(iCall)
         oOperandPop
         oOperandPushMode(mStackReg)
         oOperandSetLength(two)
         oOperandPushMode(mManifest)
         oOperandSetLength(two)
         oOperandSetValue(twelve)
         oEmitDouble(iAdd)
         oOperandPop
         oOperandPop
         >>
        ;WriteParameter
        }
        [ (tWriteEnd)
        | tWriteEnd:
        ] or >
        >>
       ;WriteProc
       ] or >
       }
       [ (tCallBegin)
       | tCallBegin:
       @CallStmt
        oEmitSourceCoordinate
        oOperandPushMode(mManifest)
        oOperandSetLength(two)
        oOperandSetValue(zero)
        [ (tLiteralAddress)
        | *:
        @OperandPushExpression
         [ (tLiteralAddress)
         | tLiteralAddress:
         @OperandPushVariable
          oOperandPushVariable
          [ (tFetchInteger)
          | *:
          [ (tFetchInteger)
          | *:
          [ (tFetchInteger)
          | tFetchInteger:
          ] or >
          >>
         ;OperandPushVariable
         ] or >
         }
         [ (tParmEnd)
         | *:
         ] or >
         >>
        ;OperandPushExpression
        @OperandConvertJumpConditionToData
         [ oOperandIsJumpCondition (no)
         | no:
         ] or >
         >>
        ;OperandConvertJumpConditionToData
        [ (tParmEnd)
        | *:
        @OperandForceToStack
         [ oOperandChooseLength (two)
         | two:
         ] or >
         oEmitSingle(iPush)
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStatic)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         oOperandPushMode(mStack)
         >>
        ;OperandForceToStack
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mStack)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        ?tParmEnd (tParmEnd)
        oOperandPushMode(mManifest)
        oOperandSetLength(two)
        oOperandSetValue(four)
        oOperandAddManifestValues
        oOperandPop
        }
        [ (tLiteralAddress)
        | *:
        @OperandPushExpression
         [ (tLiteralAddress)
         | tLiteralAddress:
         @OperandPushVariable
          oOperandPushVariable
          [ (tVarParm)
          | *:
          [ (tVarParm)
          | *:
          [ (tVarParm)
          | *:
          >>
         ;OperandPushVariable
         ] or >
         }
         [ (tVarParm)
         | *:
         ] or >
         >>
        ;OperandPushExpression
        @OperandConvertJumpConditionToData
         [ oOperandIsJumpCondition (no)
         | no:
         ] or >
         >>
        ;OperandConvertJumpConditionToData
        [ (tVarParm)
        | tVarParm:
        @OperandForceAddressIntoTemp
         [ oOperandChooseMode (mStatic)
         | mStatic:
         @OperandPushTempWord
          oTempAllocate
          oOperandPushTemp
          oOperandSetValue(zero)
          oOperandSetLength(two)
          >>
         ;OperandPushTempWord
         oOperandSwap
         oEmitDouble(iLoada)
         oOperandPop
         ] or >
         oOperandSetLength(two)
         >>
        ;OperandForceAddressIntoTemp
        @OperandForceToStack
         [ oOperandChooseLength (two)
         | two:
         ] or >
         oEmitSingle(iPush)
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mTemp)
          | mTemp:
          oTempFree
          ] or >
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         oOperandPushMode(mStack)
         >>
        ;OperandForceToStack
        ] or >
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mStack)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        ?tParmEnd (tParmEnd)
        oOperandPushMode(mManifest)
        oOperandSetLength(two)
        oOperandSetValue(four)
        oOperandAddManifestValues
        oOperandPop
        }
        [ (tCallEnd)
        | tCallEnd:
        ] or >
        oOperandPushProcedure
        oOperandSetMode(mProc)
        oEmitSingle(iCall)
        oOperandPop
        oOperandPushMode(mStackReg)
        oOperandSetLength(two)
        oOperandSwap
        oEmitDouble(iAdd)
        oOperandPop
        oOperandPop
        oEmitMergeSourceCoordinate
        >>
       ;CallStmt
       ] or >
       }
       [ (tTrapBegin)
       | tTrapBegin:
       @TrapStmt
        oEmitSourceCoordinate
        [ (tLiteralAddress)
        | tLiteralAddress:
        @OperandPushVariable
         oOperandPushVariable
         [ (tVarParm)
         | *:
         [ (tVarParm)
         | *:
         [ (tVarParm)
         | *:
         >>
        ;OperandPushVariable
        oOperandPushCopy
        @OperandForceToStack
         [ oOperandChooseLength (two)
         | two:
         ] or >
         oEmitSingle(iPush)
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStatic)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         oOperandPushMode(mStack)
         >>
        ;OperandForceToStack
        oOperandPop
        ?tVarParm (tVarParm)
        ?tParmEnd (tParmEnd)
        [ (tTrap)
        | tTrap:
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        oOperandPushTrap
        oEmitSingle(iCall)
        oOperandPop
        oOperandPushMode(mStackReg)
        oOperandSetLength(two)
        oOperandPushMode(mManifest)
        oOperandSetLength(two)
        oOperandSetValue(four)
        oEmitDouble(iAdd)
        oOperandPop
        oOperandPop
        ] or >
        ] or >
        >>
       ;TrapStmt
       ] or >
       }
       [ (tIfEnd)
       | *:
       ] or >
       >>
      ;Block
      >>
     ;Statements
     oFixForwardBranch
     oFixPopAddress
     ?tIfEnd (tIfEnd)
     ] or >
     >>
    ;IfStmt
    ] or >
    }
    [ (tProcedureEnd)
    | *:
    ] or >
    >>
   ;Block
   ?tProcedureEnd (tProcedureEnd)
   oEmitNone(iLeave)
   oEmitNone(iReturn)
   >>
  ;Routine
  oFixForwardBranch
  oFixPopAddress
  ] or >
  }
  [ (tSkipProc)
  | tSkipProc:
  oEmitUnconditionalForwardBranch
  oFixPushLastAddress
  @Routine
   oEmitProcLabel(mProc)
   oEmitNone(iEnter)
   [ (tParmEnd)
   | tParmEnd:
   ] or >
   @Block
    [ (tIfBegin)
    | tIfBegin:
    @IfStmt
     oEmitSourceCoordinate
     @OperandPushBooleanControlExpression
      @OperandPushExpression
       [ (tLiteralAddress)
       | tLiteralAddress:
       @OperandPushVariable
        oOperandPushVariable
        [ (tFetchInteger)
        | *:
        [ (tFetchInteger)
        | *:
        [ (tFetchInteger)
        | tFetchInteger:
        ] or >
        >>
       ;OperandPushVariable
       ] or >
       }
       [ (tLiteralAddress)
       | tLiteralAddress:
       @OperandPushVariable
        oOperandPushVariable
        [ (tFetchInteger)
        | *:
        [ (tFetchInteger)
        | *:
        [ (tFetchInteger)
        | tFetchInteger:
        ] or >
        >>
       ;OperandPushVariable
       ] or >
       }
       [ (tLT)
       | tLT:
       @OperandLessPop
        oOperandSwap
        @OperandGreaterPop
         [ oOperandCompareLeftAndRight (no)
         | no:
         [ oOperandChooseManifestValue ()
         | *:
         oOperandSwap
         [ oOperandChooseManifestValue ()
         | *:
         oOperandSwap
         @EmitCmp
          oOperandSwap
          [ oOperandChooseMode (mStatic)
          | *:
          oOperandSwap
          @OperandLeftOrRightIsTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandSwap
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandSwap
           >>no
          ;OperandLeftOrRightIsTemp
          [@OperandLeftOrRightIsTemp (no)
          | *:
          [ oOperandChooseMode (mStatic)
          | *:
          oOperandPushCopy
          @OperandForceIntoTemp
           [ oOperandChooseMode (mStatic)
           | *:
           [ oOperandChooseLength (two)
           | two:
           @OperandPushTempWord
            oTempAllocate
            oOperandPushTemp
            oOperandSetValue(zero)
            oOperandSetLength(two)
            >>
           ;OperandPushTempWord
           oOperandSwap
           oEmitDouble(iMov)
           @OperandPopAndFreeTemp
            [ oOperandChooseMode (mStatic)
            | *:
            oOperandPop
            >>
           ;OperandPopAndFreeTemp
           oOperandSetMode(mTemp)
           ] or >
           >>
          ;OperandForceIntoTemp
          oOperandSwapLeftAndDest
          oEmitDouble(iCmp)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mTemp)
           | mTemp:
           oTempFree
           ] or >
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandSwap
          >>
         ;EmitCmp
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStatic)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStatic)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         oOperandPushJumpCondition(iJgt)
         ] or >
         >>
        ;OperandGreaterPop
        >>
       ;OperandLessPop
       ] or >
       }
       [ (tIfThen)
       | *:
       ] or >
       >>
      ;OperandPushExpression
      @OperandForceToJumpCondition
       [ oOperandIsJumpCondition (yes)
       | yes:
       ] or >
       >>
      ;OperandForceToJumpCondition
      >>
     ;OperandPushBooleanControlExpression
     ?tIfThen (tIfThen)
     [ oOperandChooseJumpCondition (iJgt)
     | *:
     @OperandComplementJumpCondition
      [ oOperandChooseJumpCondition (iJgt)
      | *:
      oOperandComplementJumpCondition
      >>
     ;OperandComplementJumpCondition
     @OperandInfixOr
      @OperandForceToJumpCondition
       [ oOperandIsJumpCondition (yes)
       | yes:
       ] or >
       >>
      ;OperandForceToJumpCondition
      [ oOperandChooseJumpCondition (iJle)
      | *:
      oEmitConditionalForwardBranch
      oFixAndFreeFalseBranches
      oFixPushLastAddress
      oOperandMergeShuntsWithAddress
      oFixPopAddress
      >>
     ;OperandInfixOr
     @Statements
      @Block
       [ (tCallBegin)
       | tCallBegin:
       @CallStmt
        oEmitSourceCoordinate
        oOperandPushMode(mManifest)
        oOperandSetLength(two)
        oOperandSetValue(zero)
        [ (tCallEnd)
        | tCallEnd:
        ] or >
        oOperandPushProcedure
        oOperandSetMode(mProc)
        oEmitSingle(iCall)
        oOperandPop
        oOperandPushMode(mStackReg)
        oOperandSetLength(two)
        oOperandSwap
        oEmitDouble(iAdd)
        oOperandPop
        oOperandPop
        oEmitMergeSourceCoordinate
        >>
       ;CallStmt
       ] or >
       }
       [ (tIfMerge)
       | *:
       ] or >
       >>
      ;Block
      >>
     ;Statements
     [ (tIfMerge)
     | tIfMerge:
     oEmitUnconditionalForwardBranch
     oFixAndFreeShuntList
     oOperandPop
     oFixPushLastAddress
     oEmitMergeSourceCoordinate
     @Statements
      @Block
       [ (tAssignBegin)
       | tAssignBegin:
       @AssignStmt
        oEmitSourceCoordinate
        ?tLiteralAddress (tLiteralAddress)
        @OperandPushVariable
         oOperandPushVariable
         [ (tLiteralBoolean)
         | *:
         [ (tLiteralBoolean)
         | *:
         [ (tLiteralBoolean)
         | *:
         >>
        ;OperandPushVariable
        @OperandPushExpressionAssignPopPop
         [ (tLiteralBoolean)
         | tLiteralBoolean:
         oOperandPushBoolean
         ] or >
         }
         [ (tAssignBoolean)
         | tAssignBoolean:
         @OperandAssignBooleanPopPop
          @OperandConvertJumpConditionToData
           [ oOperandIsJumpCondition (no)
           | no:
           ] or >
           >>
          ;OperandConvertJumpConditionToData
          oOperandSetLength(one)
          @EmitMove
           @OperandLeftOrRightIsTemp
            [ oOperandChooseMode (mManifest)
            | *:
            oOperandSwap
            [ oOperandChooseMode (mStatic)
            | *:
            oOperandSwap
            >>no
           ;OperandLeftOrRightIsTemp
           [@OperandLeftOrRightIsTemp (no)
           | *:
           [ oOperandChooseMode (mManifest)
           | mManifest:
           oEmitDouble(iMov)
           ] or >
           >>
          ;EmitMove
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mManifest)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          >>
         ;OperandAssignBooleanPopPop
         ] or >
         >>
        ;OperandPushExpressionAssignPopPop
        >>
       ;AssignStmt
       ] or >
       }
       [ (tIfEnd)
       | *:
       ] or >
       >>
      ;Block
      >>
     ;Statements
     oFixForwardBranch
     oFixPopAddress
     ?tIfEnd (tIfEnd)
     ] or >
     >>
    ;IfStmt
    ] or >
    }
    [ (tProcedureEnd)
    | *:
    ] or >
    >>
   ;Block
   ?tProcedureEnd (tProcedureEnd)
   oEmitNone(iLeave)
   oEmitNone(iReturn)
   >>
  ;Routine
  oFixForwardBranch
  oFixPopAddress
  ] or >
  }
  [ (tSkipProc)
  | tSkipProc:
  oEmitUnconditionalForwardBranch
  oFixPushLastAddress
  @Routine
   oEmitProcLabel(mProc)
   oEmitNone(iEnter)
   [ (tLiteralAddress)
   | *:
   oOperandPushMode(mArgument)
   oOperandSetValue(four)
   [ (tLiteralAddress)
   | tLiteralAddress:
   @OperandNextArgument
    oOperandSetMode(mManifest)
    oOperandPushMode(mManifest)
    oOperandSetValue(four)
    oOperandAddManifestValues
    oOperandPop
    oOperandSetMode(mArgument)
    >>
   ;OperandNextArgument
   oOperandPushCopy
   oOperandPushVariable
   oOperandSwap
   [ (tStoreBoolean)
   | tStoreBoolean:
   oOperandSetLength(one)
   @OperandAssignBooleanPopPop
    @OperandConvertJumpConditionToData
     [ oOperandIsJumpCondition (no)
     | no:
     ] or >
     >>
    ;OperandConvertJumpConditionToData
    oOperandSetLength(one)
    @EmitMove
     @OperandLeftOrRightIsTemp
      [ oOperandChooseMode (mArgument)
      | *:
      oOperandSwap
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandSwap
      >>no
     ;OperandLeftOrRightIsTemp
     [@OperandLeftOrRightIsTemp (no)
     | *:
     [ oOperandChooseMode (mArgument)
     | *:
     oOperandPushCopy
     @OperandForceIntoTemp
      [ oOperandChooseMode (mArgument)
      | *:
      [ oOperandChooseLength (one)
      | one:
      @OperandPushTempByte
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(one)
       >>
      ;OperandPushTempByte
      oOperandSwap
      oEmitDouble(iMov)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mArgument)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandSetMode(mTemp)
      ] or >
      >>
     ;OperandForceIntoTemp
     oOperandSwapLeftAndDest
     oEmitDouble(iMov)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mTemp)
      | mTemp:
      oTempFree
      ] or >
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandSwap
     >>
    ;EmitMove
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mArgument)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    >>
   ;OperandAssignBooleanPopPop
   ] or >
   ] or >
   }
   [ (tParmEnd)
   | tParmEnd:
   ] or >
   oOperandPop
   @Block
    [ (tAssignBegin)
    | tAssignBegin:
    @AssignStmt
     oEmitSourceCoordinate
     ?tLiteralAddress (tLiteralAddress)
     @OperandPushVariable
      oOperandPushVariable
      [ (tLiteralAddress)
      | *:
      [ (tLiteralAddress)
      | *:
      [ (tLiteralAddress)
      | *:
      >>
     ;OperandPushVariable
     @OperandPushExpressionAssignPopPop
      [ (tLiteralAddress)
      | tLiteralAddress:
      @OperandPushVariable
       oOperandPushVariable
       [ (tSubscriptBegin)
       | *:
       [ (tSubscriptBegin)
       | tSubscriptBegin:
       @OperandPushExpression
        [ (tLiteralInteger)
        | tLiteralInteger:
        oOperandPushInteger
        ] or >
        }
        [ (tSubscriptInteger)
        | *:
        ] or >
        >>
       ;OperandPushExpression
       [ (tSubscriptInteger)
       | tSubscriptInteger:
       @OperandSubscriptIntegerPop
        [ oOperandChooseMode (mManifest)
        | mManifest:
        oOperandSwap
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandSwap
        oOperandFoldManifestSubscript
        oOperandPop
        ] or >
        oOperandSetLength(two)
        >>
       ;OperandSubscriptIntegerPop
       ] or >
       ] or >
       [ (tFetchInteger)
       | tFetchInteger:
       ] or >
       >>
      ;OperandPushVariable
      ] or >
      }
      [ (tAssignInteger)
      | tAssignInteger:
      @OperandAssignIntegerPopPop
       [ oOperandCompareLeftAndRight (no)
       | no:
       @EmitMove
        @OperandLeftOrRightIsTemp
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandSwap
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandSwap
         >>no
        ;OperandLeftOrRightIsTemp
        [@OperandLeftOrRightIsTemp (no)
        | *:
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandPushCopy
        @OperandForceIntoTemp
         [ oOperandChooseMode (mStatic)
         | *:
         [ oOperandChooseLength (two)
         | two:
         @OperandPushTempWord
          oTempAllocate
          oOperandPushTemp
          oOperandSetValue(zero)
          oOperandSetLength(two)
          >>
         ;OperandPushTempWord
         oOperandSwap
         oEmitDouble(iMov)
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStatic)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         oOperandSetMode(mTemp)
         ] or >
         >>
        ;OperandForceIntoTemp
        oOperandSwapLeftAndDest
        oEmitDouble(iMov)
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mTemp)
         | mTemp:
         oTempFree
         ] or >
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        oOperandSwap
        >>
       ;EmitMove
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       ] or >
       >>
      ;OperandAssignIntegerPopPop
      ] or >
      >>
     ;OperandPushExpressionAssignPopPop
     >>
    ;AssignStmt
    ] or >
    }
    [ (tIfBegin)
    | tIfBegin:
    @IfStmt
     oEmitSourceCoordinate
     @OperandPushBooleanControlExpression
      @OperandPushExpression
       [ (tLiteralAddress)
       | tLiteralAddress:
       @OperandPushVariable
        oOperandPushVariable
        [ (tFetchBoolean)
        | *:
        [ (tFetchBoolean)
        | *:
        [ (tFetchBoolean)
        | tFetchBoolean:
        oOperandSetLength(one)
        ] or >
        >>
       ;OperandPushVariable
       ] or >
       }
       [ (tIfThen)
       | *:
       ] or >
       >>
      ;OperandPushExpression
      @OperandForceToJumpCondition
       [ oOperandIsJumpCondition (no)
       | *:
       [ oOperandChooseManifestValue ()
       | *:
       @EmitTst
        [ oOperandChooseLength (one)
        | one:
        oOperandPushMode(mManifest)
        oOperandSetValue(zero)
        oOperandSetLength(one)
        ] or >
        @EmitCmp
         oOperandSwap
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandSwap
         @OperandLeftOrRightIsTemp
          [ oOperandChooseMode (mManifest)
          | *:
          oOperandSwap
          [ oOperandChooseMode (mStatic)
          | *:
          oOperandSwap
          >>no
         ;OperandLeftOrRightIsTemp
         [@OperandLeftOrRightIsTemp (no)
         | *:
         [ oOperandChooseMode (mManifest)
         | mManifest:
         oEmitDouble(iCmp)
         ] or >
         >>
        ;EmitCmp
        oOperandPop
        >>
       ;EmitTst
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandPushJumpCondition(iJne)
       >>
      ;OperandForceToJumpCondition
      >>
     ;OperandPushBooleanControlExpression
     ?tIfThen (tIfThen)
     [ oOperandChooseJumpCondition (iJne)
     | *:
     @OperandComplementJumpCondition
      [ oOperandChooseJumpCondition (iJne)
      | *:
      oOperandComplementJumpCondition
      >>
     ;OperandComplementJumpCondition
     @OperandInfixOr
      @OperandForceToJumpCondition
       [ oOperandIsJumpCondition (yes)
       | yes:
       ] or >
       >>
      ;OperandForceToJumpCondition
      [ oOperandChooseJumpCondition (iJeq)
      | *:
      oEmitConditionalForwardBranch
      oFixAndFreeFalseBranches
      oFixPushLastAddress
      oOperandMergeShuntsWithAddress
      oFixPopAddress
      >>
     ;OperandInfixOr
     @Statements
      @Block
       [ (tIfBegin)
       | tIfBegin:
       @IfStmt
        oEmitSourceCoordinate
        @OperandPushBooleanControlExpression
         @OperandPushExpression
          [ (tLiteralAddress)
          | tLiteralAddress:
          @OperandPushVariable
           oOperandPushVariable
           [ (tFetchInteger)
           | *:
           [ (tFetchInteger)
           | *:
           [ (tFetchInteger)
           | tFetchInteger:
           ] or >
           >>
          ;OperandPushVariable
          ] or >
          }
          [ (tLiteralInteger)
          | tLiteralInteger:
          oOperandPushInteger
          ] or >
          }
          [ (tGT)
          | tGT:
          @OperandGreaterPop
           [ oOperandCompareLeftAndRight (no)
           | no:
           [ oOperandChooseManifestValue (eight)
           | *:
           oOperandSwap
           [ oOperandChooseManifestValue ()
           | *:
           oOperandSwap
           @EmitCmp
            oOperandSwap
            [ oOperandChooseMode (mStatic)
            | *:
            oOperandSwap
            @OperandLeftOrRightIsTemp
             [ oOperandChooseMode (mManifest)
             | *:
             oOperandSwap
             [ oOperandChooseMode (mStatic)
             | *:
             oOperandSwap
             >>no
            ;OperandLeftOrRightIsTemp
            [@OperandLeftOrRightIsTemp (no)
            | *:
            [ oOperandChooseMode (mManifest)
            | mManifest:
            oEmitDouble(iCmp)
            ] or >
            >>
           ;EmitCmp
           @OperandPopAndFreeTemp
            [ oOperandChooseMode (mManifest)
            | *:
            oOperandPop
            >>
           ;OperandPopAndFreeTemp
           @OperandPopAndFreeTemp
            [ oOperandChooseMode (mStatic)
            | *:
            oOperandPop
            >>
           ;OperandPopAndFreeTemp
           oOperandPushJumpCondition(iJgt)
           ] or >
           >>
          ;OperandGreaterPop
          ] or >
          }
          [ (tIfThen)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         @OperandForceToJumpCondition
          [ oOperandIsJumpCondition (yes)
          | yes:
          ] or >
          >>
         ;OperandForceToJumpCondition
         >>
        ;OperandPushBooleanControlExpression
        ?tIfThen (tIfThen)
        [ oOperandChooseJumpCondition (iJgt)
        | *:
        @OperandComplementJumpCondition
         [ oOperandChooseJumpCondition (iJgt)
         | *:
         oOperandComplementJumpCondition
         >>
        ;OperandComplementJumpCondition
        @OperandInfixOr
         @OperandForceToJumpCondition
          [ oOperandIsJumpCondition (yes)
          | yes:
          ] or >
          >>
         ;OperandForceToJumpCondition
         [ oOperandChooseJumpCondition (iJle)
         | *:
         oEmitConditionalForwardBranch
         oFixAndFreeFalseBranches
         oFixPushLastAddress
         oOperandMergeShuntsWithAddress
         oFixPopAddress
         >>
        ;OperandInfixOr
        @Statements
         @Block
          [ (tAssignBegin)
          | tAssignBegin:
          @AssignStmt
           oEmitSourceCoordinate
           ?tLiteralAddress (tLiteralAddress)
           @OperandPushVariable
            oOperandPushVariable
            [ (tLiteralAddress)
            | *:
            [ (tLiteralAddress)
            | *:
            [ (tLiteralAddress)
            | *:
            >>
           ;OperandPushVariable
           @OperandPushExpressionAssignPopPop
            [ (tLiteralAddress)
            | tLiteralAddress:
            @OperandPushVariable
             oOperandPushVariable
             [ (tFetchInteger)
             | *:
             [ (tFetchInteger)
             | *:
             [ (tFetchInteger)
             | tFetchInteger:
             ] or >
             >>
            ;OperandPushVariable
            ] or >
            }
            [ (tLiteralInteger)
            | tLiteralInteger:
            oOperandPushInteger
            ] or >
            }
            [ (tGT)
            | tGT:
            @OperandGreaterPop
             [ oOperandCompareLeftAndRight (no)
             | no:
             [ oOperandChooseManifestValue ()
             | *:
             oOperandSwap
             [ oOperandChooseManifestValue ()
             | *:
             oOperandSwap
             @EmitCmp
              oOperandSwap
              [ oOperandChooseMode (mStatic)
              | *:
              oOperandSwap
              @OperandLeftOrRightIsTemp
               [ oOperandChooseMode (mManifest)
               | *:
               oOperandSwap
               [ oOperandChooseMode (mStatic)
               | *:
               oOperandSwap
               >>no
              ;OperandLeftOrRightIsTemp
              [@OperandLeftOrRightIsTemp (no)
              | *:
              [ oOperandChooseMode (mManifest)
              | mManifest:
              oEmitDouble(iCmp)
              ] or >
              >>
             ;EmitCmp
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mManifest)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mStatic)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandPushJumpCondition(iJgt)
             ] or >
             >>
            ;OperandGreaterPop
            ] or >
            }
            [ (tAssignBoolean)
            | tAssignBoolean:
            @OperandAssignBooleanPopPop
             @OperandConvertJumpConditionToData
              [ oOperandIsJumpCondition (yes)
              | yes:
              [ oOperandChooseJumpCondition (iJgt)
              | *:
              @OperandNot
               @OperandForceToJumpCondition
                [ oOperandIsJumpCondition (yes)
                | yes:
                ] or >
                >>
               ;OperandForceToJumpCondition
               @OperandComplementJumpCondition
                [ oOperandChooseJumpCondition (iJgt)
                | *:
                oOperandComplementJumpCondition
                >>
               ;OperandComplementJumpCondition
               >>
              ;OperandNot
              @OperandInfixOr
               @OperandForceToJumpCondition
                [ oOperandIsJumpCondition (yes)
                | yes:
                ] or >
                >>
               ;OperandForceToJumpCondition
               [ oOperandChooseJumpCondition (iJle)
               | *:
               oEmitConditionalForwardBranch
               oFixAndFreeFalseBranches
               oFixPushLastAddress
               oOperandMergeShuntsWithAddress
               oFixPopAddress
               >>
              ;OperandInfixOr
              @OperandPushTrueTemp
               @OperandPushTempByte
                oTempAllocate
                oOperandPushTemp
                oOperandSetValue(zero)
                oOperandSetLength(one)
                >>
               ;OperandPushTempByte
               oOperandPushMode(mManifest)
               oOperandSetValue(one)
               oOperandSetLength(one)
               oEmitDouble(iMov)
               oOperandPop
               >>
              ;OperandPushTrueTemp
              oEmitUnconditionalForwardBranch
              oFixPushLastAddress
              oOperandSwap
              oFixAndFreeShuntList
              oOperandPop
              oOperandPushMode(mManifest)
              oOperandSetValue(zero)
              oOperandSetLength(one)
              oEmitDouble(iMov)
              oOperandPop
              oFixForwardBranch
              oFixPopAddress
              oOperandSetMode(mTemp)
              ] or >
              >>
             ;OperandConvertJumpConditionToData
             oOperandSetLength(one)
             @EmitMove
              @OperandLeftOrRightIsTemp
               [ oOperandChooseMode (mTemp)
               | mTemp:
               >>yes
              ;OperandLeftOrRightIsTemp
              [@OperandLeftOrRightIsTemp (yes)
              | yes:
              oEmitDouble(iMov)
              ] or >
              >>
             ;EmitMove
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mTemp)
              | mTemp:
              oTempFree
              ] or >
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mStatic)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             >>
            ;OperandAssignBooleanPopPop
            ] or >
            >>
           ;OperandPushExpressionAssignPopPop
           >>
          ;AssignStmt
          ] or >
          }
          [ (tIfMerge)
          | *:
          ] or >
          >>
         ;Block
         >>
        ;Statements
        [ (tIfMerge)
        | tIfMerge:
        oEmitUnconditionalForwardBranch
        oFixAndFreeShuntList
        oOperandPop
        oFixPushLastAddress
        oEmitMergeSourceCoordinate
        @Statements
         @Block
          [ (tAssignBegin)
          | tAssignBegin:
          @AssignStmt
           oEmitSourceCoordinate
           ?tLiteralAddress (tLiteralAddress)
           @OperandPushVariable
            oOperandPushVariable
            [ (tLiteralAddress)
            | *:
            [ (tLiteralAddress)
            | *:
            [ (tLiteralAddress)
            | *:
            >>
           ;OperandPushVariable
           @OperandPushExpressionAssignPopPop
            [ (tLiteralAddress)
            | tLiteralAddress:
            @OperandPushVariable
             oOperandPushVariable
             [ (tFetchInteger)
             | *:
             [ (tFetchInteger)
             | *:
             [ (tFetchInteger)
             | tFetchInteger:
             ] or >
             >>
            ;OperandPushVariable
            ] or >
            }
            [ (tLiteralInteger)
            | tLiteralInteger:
            oOperandPushInteger
            ] or >
            }
            [ (tGT)
            | tGT:
            @OperandGreaterPop
             [ oOperandCompareLeftAndRight (no)
             | no:
             [ oOperandChooseManifestValue ()
             | *:
             oOperandSwap
             [ oOperandChooseManifestValue ()
             | *:
             oOperandSwap
             @EmitCmp
              oOperandSwap
              [ oOperandChooseMode (mStatic)
              | *:
              oOperandSwap
              @OperandLeftOrRightIsTemp
               [ oOperandChooseMode (mManifest)
               | *:
               oOperandSwap
               [ oOperandChooseMode (mStatic)
               | *:
               oOperandSwap
               >>no
              ;OperandLeftOrRightIsTemp
              [@OperandLeftOrRightIsTemp (no)
              | *:
              [ oOperandChooseMode (mManifest)
              | mManifest:
              oEmitDouble(iCmp)
              ] or >
              >>
             ;EmitCmp
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mManifest)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mStatic)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandPushJumpCondition(iJgt)
             ] or >
             >>
            ;OperandGreaterPop
            ] or >
            }
            [ (tAssignBoolean)
            | tAssignBoolean:
            @OperandAssignBooleanPopPop
             @OperandConvertJumpConditionToData
              [ oOperandIsJumpCondition (yes)
              | yes:
              [ oOperandChooseJumpCondition (iJgt)
              | *:
              @OperandNot
               @OperandForceToJumpCondition
                [ oOperandIsJumpCondition (yes)
                | yes:
                ] or >
                >>
               ;OperandForceToJumpCondition
               @OperandComplementJumpCondition
                [ oOperandChooseJumpCondition (iJgt)
                | *:
                oOperandComplementJumpCondition
                >>
               ;OperandComplementJumpCondition
               >>
              ;OperandNot
              @OperandInfixOr
               @OperandForceToJumpCondition
                [ oOperandIsJumpCondition (yes)
                | yes:
                ] or >
                >>
               ;OperandForceToJumpCondition
               [ oOperandChooseJumpCondition (iJle)
               | *:
               oEmitConditionalForwardBranch
               oFixAndFreeFalseBranches
               oFixPushLastAddress
               oOperandMergeShuntsWithAddress
               oFixPopAddress
               >>
              ;OperandInfixOr
              @OperandPushTrueTemp
               @OperandPushTempByte
                oTempAllocate
                oOperandPushTemp
                oOperandSetValue(zero)
                oOperandSetLength(one)
                >>
               ;OperandPushTempByte
               oOperandPushMode(mManifest)
               oOperandSetValue(one)
               oOperandSetLength(one)
               oEmitDouble(iMov)
               oOperandPop
               >>
              ;OperandPushTrueTemp
              oEmitUnconditionalForwardBranch
              oFixPushLastAddress
              oOperandSwap
              oFixAndFreeShuntList
              oOperandPop
              oOperandPushMode(mManifest)
              oOperandSetValue(zero)
              oOperandSetLength(one)
              oEmitDouble(iMov)
              oOperandPop
              oFixForwardBranch
              oFixPopAddress
              oOperandSetMode(mTemp)
              ] or >
              >>
             ;OperandConvertJumpConditionToData
             oOperandSetLength(one)
             @EmitMove
              @OperandLeftOrRightIsTemp
               [ oOperandChooseMode (mTemp)
               | mTemp:
               >>yes
              ;OperandLeftOrRightIsTemp
              [@OperandLeftOrRightIsTemp (yes)
              | yes:
              oEmitDouble(iMov)
              ] or >
              >>
             ;EmitMove
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mTemp)
              | mTemp:
              oTempFree
              ] or >
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mStatic)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             >>
            ;OperandAssignBooleanPopPop
            ] or >
            >>
           ;OperandPushExpressionAssignPopPop
           >>
          ;AssignStmt
          ] or >
          }
          [ (tIfEnd)
          | *:
          ] or >
          >>
         ;Block
         >>
        ;Statements
        oFixForwardBranch
        oFixPopAddress
        ?tIfEnd (tIfEnd)
        ] or >
        >>
       ;IfStmt
       ] or >
       }
       [ (tIfMerge)
       | *:
       ] or >
       >>
      ;Block
      >>
     ;Statements
     [ (tIfMerge)
     | tIfMerge:
     oEmitUnconditionalForwardBranch
     oFixAndFreeShuntList
     oOperandPop
     oFixPushLastAddress
     oEmitMergeSourceCoordinate
     @Statements
      @Block
       [ (tIfBegin)
       | tIfBegin:
       @IfStmt
        oEmitSourceCoordinate
        @OperandPushBooleanControlExpression
         @OperandPushExpression
          [ (tLiteralAddress)
          | tLiteralAddress:
          @OperandPushVariable
           oOperandPushVariable
           [ (tFetchInteger)
           | *:
           [ (tFetchInteger)
           | *:
           [ (tFetchInteger)
           | tFetchInteger:
           ] or >
           >>
          ;OperandPushVariable
          ] or >
          }
          [ (tLiteralInteger)
          | tLiteralInteger:
          oOperandPushInteger
          ] or >
          }
          [ (tGT)
          | tGT:
          @OperandGreaterPop
           [ oOperandCompareLeftAndRight (no)
           | no:
           [ oOperandChooseManifestValue (one)
           | *:
           oOperandSwap
           [ oOperandChooseManifestValue ()
           | *:
           oOperandSwap
           @EmitCmp
            oOperandSwap
            [ oOperandChooseMode (mStatic)
            | *:
            oOperandSwap
            @OperandLeftOrRightIsTemp
             [ oOperandChooseMode (mManifest)
             | *:
             oOperandSwap
             [ oOperandChooseMode (mStatic)
             | *:
             oOperandSwap
             >>no
            ;OperandLeftOrRightIsTemp
            [@OperandLeftOrRightIsTemp (no)
            | *:
            [ oOperandChooseMode (mManifest)
            | mManifest:
            oEmitDouble(iCmp)
            ] or >
            >>
           ;EmitCmp
           @OperandPopAndFreeTemp
            [ oOperandChooseMode (mManifest)
            | *:
            oOperandPop
            >>
           ;OperandPopAndFreeTemp
           @OperandPopAndFreeTemp
            [ oOperandChooseMode (mStatic)
            | *:
            oOperandPop
            >>
           ;OperandPopAndFreeTemp
           oOperandPushJumpCondition(iJgt)
           ] or >
           >>
          ;OperandGreaterPop
          ] or >
          }
          [ (tInfixAnd)
          | tInfixAnd:
          @OperandNot
           @OperandForceToJumpCondition
            [ oOperandIsJumpCondition (yes)
            | yes:
            ] or >
            >>
           ;OperandForceToJumpCondition
           @OperandComplementJumpCondition
            [ oOperandChooseJumpCondition (iJgt)
            | *:
            oOperandComplementJumpCondition
            >>
           ;OperandComplementJumpCondition
           >>
          ;OperandNot
          @OperandInfixOr
           @OperandForceToJumpCondition
            [ oOperandIsJumpCondition (yes)
            | yes:
            ] or >
            >>
           ;OperandForceToJumpCondition
           [ oOperandChooseJumpCondition (iJle)
           | *:
           oEmitConditionalForwardBranch
           oFixAndFreeFalseBranches
           oFixPushLastAddress
           oOperandMergeShuntsWithAddress
           oFixPopAddress
           >>
          ;OperandInfixOr
          ] or >
          }
          [ (tLiteralAddress)
          | tLiteralAddress:
          @OperandPushVariable
           oOperandPushVariable
           [ (tFetchInteger)
           | *:
           [ (tFetchInteger)
           | *:
           [ (tFetchInteger)
           | tFetchInteger:
           ] or >
           >>
          ;OperandPushVariable
          ] or >
          }
          [ (tLiteralInteger)
          | tLiteralInteger:
          oOperandPushInteger
          ] or >
          }
          [ (tLT)
          | tLT:
          @OperandLessPop
           oOperandSwap
           @OperandGreaterPop
            [ oOperandCompareLeftAndRight (no)
            | no:
            [ oOperandChooseManifestValue ()
            | *:
            oOperandSwap
            [ oOperandChooseManifestValue (four)
            | *:
            oOperandSwap
            @EmitCmp
             oOperandSwap
             [ oOperandChooseMode (mManifest)
             | mManifest:
             oOperandPushCopy
             @OperandForceIntoTemp
              [ oOperandChooseMode (mManifest)
              | *:
              [ oOperandChooseLength (two)
              | two:
              @OperandPushTempWord
               oTempAllocate
               oOperandPushTemp
               oOperandSetValue(zero)
               oOperandSetLength(two)
               >>
              ;OperandPushTempWord
              oOperandSwap
              oEmitDouble(iMov)
              @OperandPopAndFreeTemp
               [ oOperandChooseMode (mManifest)
               | *:
               oOperandPop
               >>
              ;OperandPopAndFreeTemp
              oOperandSetMode(mTemp)
              ] or >
              >>
             ;OperandForceIntoTemp
             oOperandSwap
             oOperandSwapRightAndDest
             oEmitDouble(iCmp)
             oOperandSwap
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mTemp)
              | mTemp:
              oTempFree
              ] or >
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             >>
            ;EmitCmp
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStatic)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mManifest)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            oOperandPushJumpCondition(iJgt)
            ] or >
            >>
           ;OperandGreaterPop
           >>
          ;OperandLessPop
          ] or >
          }
          [ (tAnd)
          | tAnd:
          @OperandNot
           @OperandForceToJumpCondition
            [ oOperandIsJumpCondition (yes)
            | yes:
            ] or >
            >>
           ;OperandForceToJumpCondition
           @OperandComplementJumpCondition
            [ oOperandChooseJumpCondition (iJgt)
            | *:
            oOperandComplementJumpCondition
            >>
           ;OperandComplementJumpCondition
           >>
          ;OperandNot
          @OperandOrPop
           @OperandForceToJumpCondition
            [ oOperandIsJumpCondition (yes)
            | yes:
            ] or >
            >>
           ;OperandForceToJumpCondition
           oOperandSwap
           [ oOperandChooseJumpCondition ()
           | *:
           oOperandSwap
           oOperandMergeShunts
           oOperandSwap
           oOperandPop
           >>
          ;OperandOrPop
          @OperandNot
           @OperandForceToJumpCondition
            [ oOperandIsJumpCondition (yes)
            | yes:
            ] or >
            >>
           ;OperandForceToJumpCondition
           @OperandComplementJumpCondition
            [ oOperandChooseJumpCondition (iJle)
            | *:
            oOperandComplementJumpCondition
            >>
           ;OperandComplementJumpCondition
           >>
          ;OperandNot
          ] or >
          }
          [ (tIfThen)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         @OperandForceToJumpCondition
          [ oOperandIsJumpCondition (yes)
          | yes:
          ] or >
          >>
         ;OperandForceToJumpCondition
         >>
        ;OperandPushBooleanControlExpression
        ?tIfThen (tIfThen)
        [ oOperandChooseJumpCondition (iJgt)
        | *:
        @OperandComplementJumpCondition
         [ oOperandChooseJumpCondition (iJgt)
         | *:
         oOperandComplementJumpCondition
         >>
        ;OperandComplementJumpCondition
        @OperandInfixOr
         @OperandForceToJumpCondition
          [ oOperandIsJumpCondition (yes)
          | yes:
          ] or >
          >>
         ;OperandForceToJumpCondition
         [ oOperandChooseJumpCondition (iJle)
         | *:
         oEmitConditionalForwardBranch
         oFixAndFreeFalseBranches
         oFixPushLastAddress
         oOperandMergeShuntsWithAddress
         oFixPopAddress
         >>
        ;OperandInfixOr
        @Statements
         @Block
          [ (tAssignBegin)
          | tAssignBegin:
          @AssignStmt
           oEmitSourceCoordinate
           ?tLiteralAddress (tLiteralAddress)
           @OperandPushVariable
            oOperandPushVariable
            [ (tLiteralAddress)
            | *:
            [ (tLiteralAddress)
            | *:
            [ (tLiteralAddress)
            | *:
            >>
           ;OperandPushVariable
           @OperandPushExpressionAssignPopPop
            [ (tLiteralAddress)
            | tLiteralAddress:
            @OperandPushVariable
             oOperandPushVariable
             [ (tFetchInteger)
             | *:
             [ (tFetchInteger)
             | *:
             [ (tFetchInteger)
             | tFetchInteger:
             ] or >
             >>
            ;OperandPushVariable
            ] or >
            }
            [ (tLiteralInteger)
            | tLiteralInteger:
            oOperandPushInteger
            ] or >
            }
            [ (tGT)
            | tGT:
            @OperandGreaterPop
             [ oOperandCompareLeftAndRight (no)
             | no:
             [ oOperandChooseManifestValue (twelve)
             | *:
             oOperandSwap
             [ oOperandChooseManifestValue ()
             | *:
             oOperandSwap
             @EmitCmp
              oOperandSwap
              [ oOperandChooseMode (mStatic)
              | *:
              oOperandSwap
              @OperandLeftOrRightIsTemp
               [ oOperandChooseMode (mManifest)
               | *:
               oOperandSwap
               [ oOperandChooseMode (mStatic)
               | *:
               oOperandSwap
               >>no
              ;OperandLeftOrRightIsTemp
              [@OperandLeftOrRightIsTemp (no)
              | *:
              [ oOperandChooseMode (mManifest)
              | mManifest:
              oEmitDouble(iCmp)
              ] or >
              >>
             ;EmitCmp
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mManifest)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mStatic)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandPushJumpCondition(iJgt)
             ] or >
             >>
            ;OperandGreaterPop
            ] or >
            }
            [ (tAssignBoolean)
            | tAssignBoolean:
            @OperandAssignBooleanPopPop
             @OperandConvertJumpConditionToData
              [ oOperandIsJumpCondition (yes)
              | yes:
              [ oOperandChooseJumpCondition (iJgt)
              | *:
              @OperandNot
               @OperandForceToJumpCondition
                [ oOperandIsJumpCondition (yes)
                | yes:
                ] or >
                >>
               ;OperandForceToJumpCondition
               @OperandComplementJumpCondition
                [ oOperandChooseJumpCondition (iJgt)
                | *:
                oOperandComplementJumpCondition
                >>
               ;OperandComplementJumpCondition
               >>
              ;OperandNot
              @OperandInfixOr
               @OperandForceToJumpCondition
                [ oOperandIsJumpCondition (yes)
                | yes:
                ] or >
                >>
               ;OperandForceToJumpCondition
               [ oOperandChooseJumpCondition (iJle)
               | *:
               oEmitConditionalForwardBranch
               oFixAndFreeFalseBranches
               oFixPushLastAddress
               oOperandMergeShuntsWithAddress
               oFixPopAddress
               >>
              ;OperandInfixOr
              @OperandPushTrueTemp
               @OperandPushTempByte
                oTempAllocate
                oOperandPushTemp
                oOperandSetValue(zero)
                oOperandSetLength(one)
                >>
               ;OperandPushTempByte
               oOperandPushMode(mManifest)
               oOperandSetValue(one)
               oOperandSetLength(one)
               oEmitDouble(iMov)
               oOperandPop
               >>
              ;OperandPushTrueTemp
              oEmitUnconditionalForwardBranch
              oFixPushLastAddress
              oOperandSwap
              oFixAndFreeShuntList
              oOperandPop
              oOperandPushMode(mManifest)
              oOperandSetValue(zero)
              oOperandSetLength(one)
              oEmitDouble(iMov)
              oOperandPop
              oFixForwardBranch
              oFixPopAddress
              oOperandSetMode(mTemp)
              ] or >
              >>
             ;OperandConvertJumpConditionToData
             oOperandSetLength(one)
             @EmitMove
              @OperandLeftOrRightIsTemp
               [ oOperandChooseMode (mTemp)
               | mTemp:
               >>yes
              ;OperandLeftOrRightIsTemp
              [@OperandLeftOrRightIsTemp (yes)
              | yes:
              oEmitDouble(iMov)
              ] or >
              >>
             ;EmitMove
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mTemp)
              | mTemp:
              oTempFree
              ] or >
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mStatic)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             >>
            ;OperandAssignBooleanPopPop
            ] or >
            >>
           ;OperandPushExpressionAssignPopPop
           >>
          ;AssignStmt
          ] or >
          }
          [ (tIfMerge)
          | *:
          ] or >
          >>
         ;Block
         >>
        ;Statements
        [ (tIfMerge)
        | tIfMerge:
        oEmitUnconditionalForwardBranch
        oFixAndFreeShuntList
        oOperandPop
        oFixPushLastAddress
        oEmitMergeSourceCoordinate
        @Statements
         @Block
          [ (tIfBegin)
          | tIfBegin:
          @IfStmt
           oEmitSourceCoordinate
           @OperandPushBooleanControlExpression
            @OperandPushExpression
             [ (tLiteralAddress)
             | tLiteralAddress:
             @OperandPushVariable
              oOperandPushVariable
              [ (tFetchInteger)
              | *:
              [ (tFetchInteger)
              | *:
              [ (tFetchInteger)
              | tFetchInteger:
              ] or >
              >>
             ;OperandPushVariable
             ] or >
             }
             [ (tLiteralInteger)
             | tLiteralInteger:
             oOperandPushInteger
             ] or >
             }
             [ (tGT)
             | tGT:
             @OperandGreaterPop
              [ oOperandCompareLeftAndRight (no)
              | no:
              [ oOperandChooseManifestValue (regCX)
              | *:
              oOperandSwap
              [ oOperandChooseManifestValue ()
              | *:
              oOperandSwap
              @EmitCmp
               oOperandSwap
               [ oOperandChooseMode (mStatic)
               | *:
               oOperandSwap
               @OperandLeftOrRightIsTemp
                [ oOperandChooseMode (mManifest)
                | *:
                oOperandSwap
                [ oOperandChooseMode (mStatic)
                | *:
                oOperandSwap
                >>no
               ;OperandLeftOrRightIsTemp
               [@OperandLeftOrRightIsTemp (no)
               | *:
               [ oOperandChooseMode (mManifest)
               | mManifest:
               oEmitDouble(iCmp)
               ] or >
               >>
              ;EmitCmp
              @OperandPopAndFreeTemp
               [ oOperandChooseMode (mManifest)
               | *:
               oOperandPop
               >>
              ;OperandPopAndFreeTemp
              @OperandPopAndFreeTemp
               [ oOperandChooseMode (mStatic)
               | *:
               oOperandPop
               >>
              ;OperandPopAndFreeTemp
              oOperandPushJumpCondition(iJgt)
              ] or >
              >>
             ;OperandGreaterPop
             ] or >
             }
             [ (tInfixAnd)
             | tInfixAnd:
             @OperandNot
              @OperandForceToJumpCondition
               [ oOperandIsJumpCondition (yes)
               | yes:
               ] or >
               >>
              ;OperandForceToJumpCondition
              @OperandComplementJumpCondition
               [ oOperandChooseJumpCondition (iJgt)
               | *:
               oOperandComplementJumpCondition
               >>
              ;OperandComplementJumpCondition
              >>
             ;OperandNot
             @OperandInfixOr
              @OperandForceToJumpCondition
               [ oOperandIsJumpCondition (yes)
               | yes:
               ] or >
               >>
              ;OperandForceToJumpCondition
              [ oOperandChooseJumpCondition (iJle)
              | *:
              oEmitConditionalForwardBranch
              oFixAndFreeFalseBranches
              oFixPushLastAddress
              oOperandMergeShuntsWithAddress
              oFixPopAddress
              >>
             ;OperandInfixOr
             ] or >
             }
             [ (tLiteralAddress)
             | tLiteralAddress:
             @OperandPushVariable
              oOperandPushVariable
              [ (tFetchInteger)
              | *:
              [ (tFetchInteger)
              | *:
              [ (tFetchInteger)
              | tFetchInteger:
              ] or >
              >>
             ;OperandPushVariable
             ] or >
             }
             [ (tLiteralInteger)
             | tLiteralInteger:
             oOperandPushInteger
             ] or >
             }
             [ (tLT)
             | tLT:
             @OperandLessPop
              oOperandSwap
              @OperandGreaterPop
               [ oOperandCompareLeftAndRight (no)
               | no:
               [ oOperandChooseManifestValue ()
               | *:
               oOperandSwap
               [ oOperandChooseManifestValue ()
               | *:
               oOperandSwap
               @EmitCmp
                oOperandSwap
                [ oOperandChooseMode (mManifest)
                | mManifest:
                oOperandPushCopy
                @OperandForceIntoTemp
                 [ oOperandChooseMode (mManifest)
                 | *:
                 [ oOperandChooseLength (two)
                 | two:
                 @OperandPushTempWord
                  oTempAllocate
                  oOperandPushTemp
                  oOperandSetValue(zero)
                  oOperandSetLength(two)
                  >>
                 ;OperandPushTempWord
                 oOperandSwap
                 oEmitDouble(iMov)
                 @OperandPopAndFreeTemp
                  [ oOperandChooseMode (mManifest)
                  | *:
                  oOperandPop
                  >>
                 ;OperandPopAndFreeTemp
                 oOperandSetMode(mTemp)
                 ] or >
                 >>
                ;OperandForceIntoTemp
                oOperandSwap
                oOperandSwapRightAndDest
                oEmitDouble(iCmp)
                oOperandSwap
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mTemp)
                 | mTemp:
                 oTempFree
                 ] or >
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                >>
               ;EmitCmp
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mStatic)
                | *:
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mManifest)
                | *:
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               oOperandPushJumpCondition(iJgt)
               ] or >
               >>
              ;OperandGreaterPop
              >>
             ;OperandLessPop
             ] or >
             }
             [ (tAnd)
             | tAnd:
             @OperandNot
              @OperandForceToJumpCondition
               [ oOperandIsJumpCondition (yes)
               | yes:
               ] or >
               >>
              ;OperandForceToJumpCondition
              @OperandComplementJumpCondition
               [ oOperandChooseJumpCondition (iJgt)
               | *:
               oOperandComplementJumpCondition
               >>
              ;OperandComplementJumpCondition
              >>
             ;OperandNot
             @OperandOrPop
              @OperandForceToJumpCondition
               [ oOperandIsJumpCondition (yes)
               | yes:
               ] or >
               >>
              ;OperandForceToJumpCondition
              oOperandSwap
              [ oOperandChooseJumpCondition ()
              | *:
              oOperandSwap
              oOperandMergeShunts
              oOperandSwap
              oOperandPop
              >>
             ;OperandOrPop
             @OperandNot
              @OperandForceToJumpCondition
               [ oOperandIsJumpCondition (yes)
               | yes:
               ] or >
               >>
              ;OperandForceToJumpCondition
              @OperandComplementJumpCondition
               [ oOperandChooseJumpCondition (iJle)
               | *:
               oOperandComplementJumpCondition
               >>
              ;OperandComplementJumpCondition
              >>
             ;OperandNot
             ] or >
             }
             [ (tIfThen)
             | *:
             ] or >
             >>
            ;OperandPushExpression
            @OperandForceToJumpCondition
             [ oOperandIsJumpCondition (yes)
             | yes:
             ] or >
             >>
            ;OperandForceToJumpCondition
            >>
           ;OperandPushBooleanControlExpression
           ?tIfThen (tIfThen)
           [ oOperandChooseJumpCondition (iJgt)
           | *:
           @OperandComplementJumpCondition
            [ oOperandChooseJumpCondition (iJgt)
            | *:
            oOperandComplementJumpCondition
            >>
           ;OperandComplementJumpCondition
           @OperandInfixOr
            @OperandForceToJumpCondition
             [ oOperandIsJumpCondition (yes)
             | yes:
             ] or >
             >>
            ;OperandForceToJumpCondition
            [ oOperandChooseJumpCondition (iJle)
            | *:
            oEmitConditionalForwardBranch
            oFixAndFreeFalseBranches
            oFixPushLastAddress
            oOperandMergeShuntsWithAddress
            oFixPopAddress
            >>
           ;OperandInfixOr
           @Statements
            @Block
             [ (tAssignBegin)
             | tAssignBegin:
             @AssignStmt
              oEmitSourceCoordinate
              ?tLiteralAddress (tLiteralAddress)
              @OperandPushVariable
               oOperandPushVariable
               [ (tLiteralAddress)
               | *:
               [ (tLiteralAddress)
               | *:
               [ (tLiteralAddress)
               | *:
               >>
              ;OperandPushVariable
              @OperandPushExpressionAssignPopPop
               [ (tLiteralAddress)
               | tLiteralAddress:
               @OperandPushVariable
                oOperandPushVariable
                [ (tFetchInteger)
                | *:
                [ (tFetchInteger)
                | *:
                [ (tFetchInteger)
                | tFetchInteger:
                ] or >
                >>
               ;OperandPushVariable
               ] or >
               }
               [ (tLiteralInteger)
               | tLiteralInteger:
               oOperandPushInteger
               ] or >
               }
               [ (tGT)
               | tGT:
               @OperandGreaterPop
                [ oOperandCompareLeftAndRight (no)
                | no:
                [ oOperandChooseManifestValue (trReadChar)
                | *:
                oOperandSwap
                [ oOperandChooseManifestValue ()
                | *:
                oOperandSwap
                @EmitCmp
                 oOperandSwap
                 [ oOperandChooseMode (mStatic)
                 | *:
                 oOperandSwap
                 @OperandLeftOrRightIsTemp
                  [ oOperandChooseMode (mManifest)
                  | *:
                  oOperandSwap
                  [ oOperandChooseMode (mStatic)
                  | *:
                  oOperandSwap
                  >>no
                 ;OperandLeftOrRightIsTemp
                 [@OperandLeftOrRightIsTemp (no)
                 | *:
                 [ oOperandChooseMode (mManifest)
                 | mManifest:
                 oEmitDouble(iCmp)
                 ] or >
                 >>
                ;EmitCmp
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mManifest)
                 | *:
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mStatic)
                 | *:
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                oOperandPushJumpCondition(iJgt)
                ] or >
                >>
               ;OperandGreaterPop
               ] or >
               }
               [ (tAssignBoolean)
               | tAssignBoolean:
               @OperandAssignBooleanPopPop
                @OperandConvertJumpConditionToData
                 [ oOperandIsJumpCondition (yes)
                 | yes:
                 [ oOperandChooseJumpCondition (iJgt)
                 | *:
                 @OperandNot
                  @OperandForceToJumpCondition
                   [ oOperandIsJumpCondition (yes)
                   | yes:
                   ] or >
                   >>
                  ;OperandForceToJumpCondition
                  @OperandComplementJumpCondition
                   [ oOperandChooseJumpCondition (iJgt)
                   | *:
                   oOperandComplementJumpCondition
                   >>
                  ;OperandComplementJumpCondition
                  >>
                 ;OperandNot
                 @OperandInfixOr
                  @OperandForceToJumpCondition
                   [ oOperandIsJumpCondition (yes)
                   | yes:
                   ] or >
                   >>
                  ;OperandForceToJumpCondition
                  [ oOperandChooseJumpCondition (iJle)
                  | *:
                  oEmitConditionalForwardBranch
                  oFixAndFreeFalseBranches
                  oFixPushLastAddress
                  oOperandMergeShuntsWithAddress
                  oFixPopAddress
                  >>
                 ;OperandInfixOr
                 @OperandPushTrueTemp
                  @OperandPushTempByte
                   oTempAllocate
                   oOperandPushTemp
                   oOperandSetValue(zero)
                   oOperandSetLength(one)
                   >>
                  ;OperandPushTempByte
                  oOperandPushMode(mManifest)
                  oOperandSetValue(one)
                  oOperandSetLength(one)
                  oEmitDouble(iMov)
                  oOperandPop
                  >>
                 ;OperandPushTrueTemp
                 oEmitUnconditionalForwardBranch
                 oFixPushLastAddress
                 oOperandSwap
                 oFixAndFreeShuntList
                 oOperandPop
                 oOperandPushMode(mManifest)
                 oOperandSetValue(zero)
                 oOperandSetLength(one)
                 oEmitDouble(iMov)
                 oOperandPop
                 oFixForwardBranch
                 oFixPopAddress
                 oOperandSetMode(mTemp)
                 ] or >
                 >>
                ;OperandConvertJumpConditionToData
                oOperandSetLength(one)
                @EmitMove
                 @OperandLeftOrRightIsTemp
                  [ oOperandChooseMode (mTemp)
                  | mTemp:
                  >>yes
                 ;OperandLeftOrRightIsTemp
                 [@OperandLeftOrRightIsTemp (yes)
                 | yes:
                 oEmitDouble(iMov)
                 ] or >
                 >>
                ;EmitMove
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mTemp)
                 | mTemp:
                 oTempFree
                 ] or >
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mStatic)
                 | *:
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                >>
               ;OperandAssignBooleanPopPop
               ] or >
               >>
              ;OperandPushExpressionAssignPopPop
              >>
             ;AssignStmt
             ] or >
             }
             [ (tIfMerge)
             | *:
             ] or >
             >>
            ;Block
            >>
           ;Statements
           [ (tIfMerge)
           | tIfMerge:
           oEmitUnconditionalForwardBranch
           oFixAndFreeShuntList
           oOperandPop
           oFixPushLastAddress
           oEmitMergeSourceCoordinate
           @Statements
            @Block
             [ (tAssignBegin)
             | tAssignBegin:
             @AssignStmt
              oEmitSourceCoordinate
              ?tLiteralAddress (tLiteralAddress)
              @OperandPushVariable
               oOperandPushVariable
               [ (tLiteralAddress)
               | *:
               [ (tLiteralAddress)
               | *:
               [ (tLiteralAddress)
               | *:
               >>
              ;OperandPushVariable
              @OperandPushExpressionAssignPopPop
               [ (tLiteralAddress)
               | tLiteralAddress:
               @OperandPushVariable
                oOperandPushVariable
                [ (tFetchInteger)
                | *:
                [ (tFetchInteger)
                | *:
                [ (tFetchInteger)
                | tFetchInteger:
                ] or >
                >>
               ;OperandPushVariable
               ] or >
               }
               [ (tLiteralInteger)
               | tLiteralInteger:
               oOperandPushInteger
               ] or >
               }
               [ (tGT)
               | tGT:
               @OperandGreaterPop
                [ oOperandCompareLeftAndRight (no)
                | no:
                [ oOperandChooseManifestValue (trEof)
                | *:
                oOperandSwap
                [ oOperandChooseManifestValue ()
                | *:
                oOperandSwap
                @EmitCmp
                 oOperandSwap
                 [ oOperandChooseMode (mStatic)
                 | *:
                 oOperandSwap
                 @OperandLeftOrRightIsTemp
                  [ oOperandChooseMode (mManifest)
                  | *:
                  oOperandSwap
                  [ oOperandChooseMode (mStatic)
                  | *:
                  oOperandSwap
                  >>no
                 ;OperandLeftOrRightIsTemp
                 [@OperandLeftOrRightIsTemp (no)
                 | *:
                 [ oOperandChooseMode (mManifest)
                 | mManifest:
                 oEmitDouble(iCmp)
                 ] or >
                 >>
                ;EmitCmp
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mManifest)
                 | *:
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mStatic)
                 | *:
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                oOperandPushJumpCondition(iJgt)
                ] or >
                >>
               ;OperandGreaterPop
               ] or >
               }
               [ (tAssignBoolean)
               | tAssignBoolean:
               @OperandAssignBooleanPopPop
                @OperandConvertJumpConditionToData
                 [ oOperandIsJumpCondition (yes)
                 | yes:
                 [ oOperandChooseJumpCondition (iJgt)
                 | *:
                 @OperandNot
                  @OperandForceToJumpCondition
                   [ oOperandIsJumpCondition (yes)
                   | yes:
                   ] or >
                   >>
                  ;OperandForceToJumpCondition
                  @OperandComplementJumpCondition
                   [ oOperandChooseJumpCondition (iJgt)
                   | *:
                   oOperandComplementJumpCondition
                   >>
                  ;OperandComplementJumpCondition
                  >>
                 ;OperandNot
                 @OperandInfixOr
                  @OperandForceToJumpCondition
                   [ oOperandIsJumpCondition (yes)
                   | yes:
                   ] or >
                   >>
                  ;OperandForceToJumpCondition
                  [ oOperandChooseJumpCondition (iJle)
                  | *:
                  oEmitConditionalForwardBranch
                  oFixAndFreeFalseBranches
                  oFixPushLastAddress
                  oOperandMergeShuntsWithAddress
                  oFixPopAddress
                  >>
                 ;OperandInfixOr
                 @OperandPushTrueTemp
                  @OperandPushTempByte
                   oTempAllocate
                   oOperandPushTemp
                   oOperandSetValue(zero)
                   oOperandSetLength(one)
                   >>
                  ;OperandPushTempByte
                  oOperandPushMode(mManifest)
                  oOperandSetValue(one)
                  oOperandSetLength(one)
                  oEmitDouble(iMov)
                  oOperandPop
                  >>
                 ;OperandPushTrueTemp
                 oEmitUnconditionalForwardBranch
                 oFixPushLastAddress
                 oOperandSwap
                 oFixAndFreeShuntList
                 oOperandPop
                 oOperandPushMode(mManifest)
                 oOperandSetValue(zero)
                 oOperandSetLength(one)
                 oEmitDouble(iMov)
                 oOperandPop
                 oFixForwardBranch
                 oFixPopAddress
                 oOperandSetMode(mTemp)
                 ] or >
                 >>
                ;OperandConvertJumpConditionToData
                oOperandSetLength(one)
                @EmitMove
                 @OperandLeftOrRightIsTemp
                  [ oOperandChooseMode (mTemp)
                  | mTemp:
                  >>yes
                 ;OperandLeftOrRightIsTemp
                 [@OperandLeftOrRightIsTemp (yes)
                 | yes:
                 oEmitDouble(iMov)
                 ] or >
                 >>
                ;EmitMove
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mTemp)
                 | mTemp:
                 oTempFree
                 ] or >
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mStatic)
                 | *:
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                >>
               ;OperandAssignBooleanPopPop
               ] or >
               >>
              ;OperandPushExpressionAssignPopPop
              >>
             ;AssignStmt
             ] or >
             }
             [ (tIfEnd)
             | *:
             ] or >
             >>
            ;Block
            >>
           ;Statements
           oFixForwardBranch
           oFixPopAddress
           ?tIfEnd (tIfEnd)
           ] or >
           >>
          ;IfStmt
          ] or >
          }
          [ (tIfEnd)
          | *:
          ] or >
          >>
         ;Block
         >>
        ;Statements
        oFixForwardBranch
        oFixPopAddress
        ?tIfEnd (tIfEnd)
        ] or >
        >>
       ;IfStmt
       ] or >
       }
       [ (tIfEnd)
       | *:
       ] or >
       >>
      ;Block
      >>
     ;Statements
     oFixForwardBranch
     oFixPopAddress
     ?tIfEnd (tIfEnd)
     ] or >
     >>
    ;IfStmt
    ] or >
    }
    [ (tIfBegin)
    | tIfBegin:
    @IfStmt
     oEmitSourceCoordinate
     @OperandPushBooleanControlExpression
      @OperandPushExpression
       [ (tLiteralAddress)
       | tLiteralAddress:
       @OperandPushVariable
        oOperandPushVariable
        [ (tFetchBoolean)
        | *:
        [ (tFetchBoolean)
        | *:
        [ (tFetchBoolean)
        | tFetchBoolean:
        oOperandSetLength(one)
        ] or >
        >>
       ;OperandPushVariable
       ] or >
       }
       [ (tNot)
       | tNot:
       @OperandNot
        @OperandForceToJumpCondition
         [ oOperandIsJumpCondition (no)
         | *:
         [ oOperandChooseManifestValue ()
         | *:
         @EmitTst
          [ oOperandChooseLength (one)
          | one:
          oOperandPushMode(mManifest)
          oOperandSetValue(zero)
          oOperandSetLength(one)
          ] or >
          @EmitCmp
           oOperandSwap
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandSwap
           @OperandLeftOrRightIsTemp
            [ oOperandChooseMode (mManifest)
            | *:
            oOperandSwap
            [ oOperandChooseMode (mStatic)
            | *:
            oOperandSwap
            >>no
           ;OperandLeftOrRightIsTemp
           [@OperandLeftOrRightIsTemp (no)
           | *:
           [ oOperandChooseMode (mManifest)
           | mManifest:
           oEmitDouble(iCmp)
           ] or >
           >>
          ;EmitCmp
          oOperandPop
          >>
         ;EmitTst
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStatic)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         oOperandPushJumpCondition(iJne)
         >>
        ;OperandForceToJumpCondition
        @OperandComplementJumpCondition
         [ oOperandChooseJumpCondition (iJne)
         | *:
         oOperandComplementJumpCondition
         >>
        ;OperandComplementJumpCondition
        >>
       ;OperandNot
       ] or >
       }
       [ (tIfThen)
       | *:
       ] or >
       >>
      ;OperandPushExpression
      @OperandForceToJumpCondition
       [ oOperandIsJumpCondition (yes)
       | yes:
       ] or >
       >>
      ;OperandForceToJumpCondition
      >>
     ;OperandPushBooleanControlExpression
     ?tIfThen (tIfThen)
     [ oOperandChooseJumpCondition (iJeq)
     | *:
     @OperandComplementJumpCondition
      [ oOperandChooseJumpCondition (iJeq)
      | *:
      oOperandComplementJumpCondition
      >>
     ;OperandComplementJumpCondition
     @OperandInfixOr
      @OperandForceToJumpCondition
       [ oOperandIsJumpCondition (yes)
       | yes:
       ] or >
       >>
      ;OperandForceToJumpCondition
      [ oOperandChooseJumpCondition (iJne)
      | *:
      oEmitConditionalForwardBranch
      oFixAndFreeFalseBranches
      oFixPushLastAddress
      oOperandMergeShuntsWithAddress
      oFixPopAddress
      >>
     ;OperandInfixOr
     @Statements
      @Block
       [ (tCallBegin)
       | tCallBegin:
       @CallStmt
        oEmitSourceCoordinate
        oOperandPushMode(mManifest)
        oOperandSetLength(two)
        oOperandSetValue(zero)
        [ (tCallEnd)
        | tCallEnd:
        ] or >
        oOperandPushProcedure
        oOperandSetMode(mProc)
        oEmitSingle(iCall)
        oOperandPop
        oOperandPushMode(mStackReg)
        oOperandSetLength(two)
        oOperandSwap
        oEmitDouble(iAdd)
        oOperandPop
        oOperandPop
        oEmitMergeSourceCoordinate
        >>
       ;CallStmt
       ] or >
       }
       [ (tIfEnd)
       | *:
       ] or >
       >>
      ;Block
      >>
     ;Statements
     [ (tIfEnd)
     | tIfEnd:
     oFixAndFreeShuntList
     oOperandPop
     oEmitMergeSourceCoordinate
     ] or >
     >>
    ;IfStmt
    ] or >
    }
    [ (tProcedureEnd)
    | *:
    ] or >
    >>
   ;Block
   ?tProcedureEnd (tProcedureEnd)
   oEmitNone(iLeave)
   oEmitNone(iReturn)
   >>
  ;Routine
  oFixForwardBranch
  oFixPopAddress
  ] or >
  }
  [ (tSkipProc)
  | tSkipProc:
  oEmitUnconditionalForwardBranch
  oFixPushLastAddress
  @Routine
   oEmitProcLabel(mProc)
   oEmitNone(iEnter)
   [ (tParmEnd)
   | tParmEnd:
   ] or >
   @Block
    [ (tCallBegin)
    | tCallBegin:
    @CallStmt
     oEmitSourceCoordinate
     oOperandPushMode(mManifest)
     oOperandSetLength(two)
     oOperandSetValue(zero)
     [ (tLiteralAddress)
     | *:
     @OperandPushExpression
      [ (tLiteralAddress)
      | tLiteralAddress:
      @OperandPushVariable
       oOperandPushVariable
       [ (tFetchInteger)
       | *:
       [ (tFetchInteger)
       | *:
       [ (tFetchInteger)
       | tFetchInteger:
       ] or >
       >>
      ;OperandPushVariable
      ] or >
      }
      [ (tParmEnd)
      | *:
      ] or >
      >>
     ;OperandPushExpression
     @OperandConvertJumpConditionToData
      [ oOperandIsJumpCondition (no)
      | no:
      ] or >
      >>
     ;OperandConvertJumpConditionToData
     [ (tParmEnd)
     | *:
     @OperandForceToStack
      [ oOperandChooseLength (two)
      | two:
      ] or >
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mStack)
      >>
     ;OperandForceToStack
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStack)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     ?tParmEnd (tParmEnd)
     oOperandPushMode(mManifest)
     oOperandSetLength(two)
     oOperandSetValue(four)
     oOperandAddManifestValues
     oOperandPop
     }
     [ (tLiteralAddress)
     | *:
     @OperandPushExpression
      [ (tLiteralAddress)
      | tLiteralAddress:
      @OperandPushVariable
       oOperandPushVariable
       [ (tVarParm)
       | *:
       [ (tVarParm)
       | *:
       [ (tVarParm)
       | *:
       >>
      ;OperandPushVariable
      ] or >
      }
      [ (tVarParm)
      | *:
      ] or >
      >>
     ;OperandPushExpression
     @OperandConvertJumpConditionToData
      [ oOperandIsJumpCondition (no)
      | no:
      ] or >
      >>
     ;OperandConvertJumpConditionToData
     [ (tVarParm)
     | tVarParm:
     @OperandForceAddressIntoTemp
      [ oOperandChooseMode (mStatic)
      | mStatic:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iLoada)
      oOperandPop
      ] or >
      oOperandSetLength(two)
      >>
     ;OperandForceAddressIntoTemp
     @OperandForceToStack
      [ oOperandChooseLength (two)
      | two:
      ] or >
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mTemp)
       | mTemp:
       oTempFree
       ] or >
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mStack)
      >>
     ;OperandForceToStack
     ] or >
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStack)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     ?tParmEnd (tParmEnd)
     oOperandPushMode(mManifest)
     oOperandSetLength(two)
     oOperandSetValue(four)
     oOperandAddManifestValues
     oOperandPop
     }
     [ (tLiteralAddress)
     | *:
     @OperandPushExpression
      [ (tLiteralAddress)
      | tLiteralAddress:
      @OperandPushVariable
       oOperandPushVariable
       [ (tVarParm)
       | *:
       [ (tVarParm)
       | *:
       [ (tVarParm)
       | *:
       >>
      ;OperandPushVariable
      ] or >
      }
      [ (tVarParm)
      | *:
      ] or >
      >>
     ;OperandPushExpression
     @OperandConvertJumpConditionToData
      [ oOperandIsJumpCondition (no)
      | no:
      ] or >
      >>
     ;OperandConvertJumpConditionToData
     [ (tVarParm)
     | tVarParm:
     @OperandForceAddressIntoTemp
      [ oOperandChooseMode (mStatic)
      | mStatic:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iLoada)
      oOperandPop
      ] or >
      oOperandSetLength(two)
      >>
     ;OperandForceAddressIntoTemp
     @OperandForceToStack
      [ oOperandChooseLength (two)
      | two:
      ] or >
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mTemp)
       | mTemp:
       oTempFree
       ] or >
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mStack)
      >>
     ;OperandForceToStack
     ] or >
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStack)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     ?tParmEnd (tParmEnd)
     oOperandPushMode(mManifest)
     oOperandSetLength(two)
     oOperandSetValue(four)
     oOperandAddManifestValues
     oOperandPop
     }
     [ (tLiteralAddress)
     | *:
     @OperandPushExpression
      [ (tLiteralAddress)
      | tLiteralAddress:
      @OperandPushVariable
       oOperandPushVariable
       [ (tVarParm)
       | *:
       [ (tVarParm)
       | *:
       [ (tVarParm)
       | *:
       >>
      ;OperandPushVariable
      ] or >
      }
      [ (tVarParm)
      | *:
      ] or >
      >>
     ;OperandPushExpression
     @OperandConvertJumpConditionToData
      [ oOperandIsJumpCondition (no)
      | no:
      ] or >
      >>
     ;OperandConvertJumpConditionToData
     [ (tVarParm)
     | tVarParm:
     @OperandForceAddressIntoTemp
      [ oOperandChooseMode (mStatic)
      | mStatic:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iLoada)
      oOperandPop
      ] or >
      oOperandSetLength(two)
      >>
     ;OperandForceAddressIntoTemp
     @OperandForceToStack
      [ oOperandChooseLength (two)
      | two:
      ] or >
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mTemp)
       | mTemp:
       oTempFree
       ] or >
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mStack)
      >>
     ;OperandForceToStack
     ] or >
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStack)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     ?tParmEnd (tParmEnd)
     oOperandPushMode(mManifest)
     oOperandSetLength(two)
     oOperandSetValue(four)
     oOperandAddManifestValues
     oOperandPop
     }
     [ (tCallEnd)
     | tCallEnd:
     ] or >
     oOperandPushProcedure
     oOperandSetMode(mProc)
     oEmitSingle(iCall)
     oOperandPop
     oOperandPushMode(mStackReg)
     oOperandSetLength(two)
     oOperandSwap
     oEmitDouble(iAdd)
     oOperandPop
     oOperandPop
     oEmitMergeSourceCoordinate
     >>
    ;CallStmt
    ] or >
    }
    [ (tIfBegin)
    | tIfBegin:
    @IfStmt
     oEmitSourceCoordinate
     @OperandPushBooleanControlExpression
      @OperandPushExpression
       [ (tLiteralAddress)
       | tLiteralAddress:
       @OperandPushVariable
        oOperandPushVariable
        [ (tFetchInteger)
        | *:
        [ (tFetchInteger)
        | *:
        [ (tFetchInteger)
        | tFetchInteger:
        ] or >
        >>
       ;OperandPushVariable
       ] or >
       }
       [ (tLiteralInteger)
       | tLiteralInteger:
       oOperandPushInteger
       ] or >
       }
       [ (tEQ)
       | tEQ:
       @OperandEqualPop
        [ oOperandCompareLeftAndRight (no)
        | no:
        [ oOperandChooseManifestValue ()
        | *:
        oOperandSwap
        [ oOperandChooseManifestValue ()
        | *:
        oOperandSwap
        @OperandAreLeftAndRightManifest
         [ oOperandChooseMode (mManifest)
         | mManifest:
         oOperandSwap
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandSwap
         >>no
        ;OperandAreLeftAndRightManifest
        [@OperandAreLeftAndRightManifest (no)
        | *:
        @EmitCmp
         oOperandSwap
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandSwap
         @OperandLeftOrRightIsTemp
          [ oOperandChooseMode (mManifest)
          | *:
          oOperandSwap
          [ oOperandChooseMode (mStatic)
          | *:
          oOperandSwap
          >>no
         ;OperandLeftOrRightIsTemp
         [@OperandLeftOrRightIsTemp (no)
         | *:
         [ oOperandChooseMode (mManifest)
         | mManifest:
         oEmitDouble(iCmp)
         ] or >
         >>
        ;EmitCmp
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mManifest)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        oOperandPushJumpCondition(iJeq)
        ] or >
        >>
       ;OperandEqualPop
       ] or >
       }
       [ (tIfThen)
       | *:
       ] or >
       >>
      ;OperandPushExpression
      @OperandForceToJumpCondition
       [ oOperandIsJumpCondition (yes)
       | yes:
       ] or >
       >>
      ;OperandForceToJumpCondition
      >>
     ;OperandPushBooleanControlExpression
     ?tIfThen (tIfThen)
     [ oOperandChooseJumpCondition (iJeq)
     | *:
     @OperandComplementJumpCondition
      [ oOperandChooseJumpCondition (iJeq)
      | *:
      oOperandComplementJumpCondition
      >>
     ;OperandComplementJumpCondition
     @OperandInfixOr
      @OperandForceToJumpCondition
       [ oOperandIsJumpCondition (yes)
       | yes:
       ] or >
       >>
      ;OperandForceToJumpCondition
      [ oOperandChooseJumpCondition (iJne)
      | *:
      oEmitConditionalForwardBranch
      oFixAndFreeFalseBranches
      oFixPushLastAddress
      oOperandMergeShuntsWithAddress
      oFixPopAddress
      >>
     ;OperandInfixOr
     @Statements
      @Block
       [ (tCallBegin)
       | tCallBegin:
       @CallStmt
        oEmitSourceCoordinate
        oOperandPushMode(mManifest)
        oOperandSetLength(two)
        oOperandSetValue(zero)
        [ (tCallEnd)
        | tCallEnd:
        ] or >
        oOperandPushProcedure
        oOperandSetMode(mProc)
        oEmitSingle(iCall)
        oOperandPop
        oOperandPushMode(mStackReg)
        oOperandSetLength(two)
        oOperandSwap
        oEmitDouble(iAdd)
        oOperandPop
        oOperandPop
        oEmitMergeSourceCoordinate
        >>
       ;CallStmt
       ] or >
       }
       [ (tWriteBegin)
       | tWriteBegin:
       @WriteProc
        oEmitSourceCoordinate
        [ (tTrapBegin)
        | *:
        @WriteParameter
         ?tTrapBegin (tTrapBegin)
         ?tLiteralAddress (tLiteralAddress)
         @OperandPushVariable
          oOperandPushVariable
          [ (tVarParm)
          | *:
          [ (tVarParm)
          | *:
          [ (tVarParm)
          | *:
          >>
         ;OperandPushVariable
         @OperandForceToStack
          [ oOperandChooseLength (two)
          | two:
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tVarParm (tVarParm)
         ?tParmEnd (tParmEnd)
         @OperandPushExpression
          [ (tSkipString)
          | tSkipString:
          oEmitNone(iData)
          ?tStringData (tStringData)
          oEmitString
          oEmitNone(iText)
          ] or >
          }
          [ (tLiteralAddress)
          | tLiteralAddress:
          @OperandPushVariable
           oOperandPushVariable
           [ (tFetchChar)
           | *:
           [ (tFetchChar)
           | *:
           [ (tFetchChar)
           | tFetchChar:
           oOperandSetLength(regCX)
           ] or >
           >>
          ;OperandPushVariable
          ] or >
          }
          [ (tParmEnd)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         [ (tParmEnd)
         | *:
         @OperandForceToStack
          [ oOperandChooseLength (regCX)
          | regCX:
          @OperandForceAddressIntoTemp
           [ oOperandChooseMode (mStatic)
           | mStatic:
           @OperandPushTempWord
            oTempAllocate
            oOperandPushTemp
            oOperandSetValue(zero)
            oOperandSetLength(two)
            >>
           ;OperandPushTempWord
           oOperandSwap
           oEmitDouble(iLoada)
           oOperandPop
           ] or >
           oOperandSetLength(two)
           >>
          ;OperandForceAddressIntoTemp
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mTemp)
           | mTemp:
           oTempFree
           ] or >
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tParmEnd (tParmEnd)
         @OperandPushExpression
          [ (tLiteralInteger)
          | tLiteralInteger:
          oOperandPushInteger
          ] or >
          }
          [ (tParmEnd)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         @OperandForceToStack
          [ oOperandChooseLength (two)
          | two:
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mManifest)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tParmEnd (tParmEnd)
         ?tTrap (tTrap)
         oOperandPushTrap
         oEmitSingle(iCall)
         oOperandPop
         oOperandPushMode(mStackReg)
         oOperandSetLength(two)
         oOperandPushMode(mManifest)
         oOperandSetLength(two)
         oOperandSetValue(twelve)
         oEmitDouble(iAdd)
         oOperandPop
         oOperandPop
         >>
        ;WriteParameter
        }
        [ (tWriteEnd)
        | tWriteEnd:
        ] or >
        >>
       ;WriteProc
       ] or >
       }
       [ (tTrapBegin)
       | tTrapBegin:
       @TrapStmt
        oEmitSourceCoordinate
        [ (tLiteralAddress)
        | tLiteralAddress:
        @OperandPushVariable
         oOperandPushVariable
         [ (tVarParm)
         | *:
         [ (tVarParm)
         | *:
         [ (tVarParm)
         | *:
         >>
        ;OperandPushVariable
        oOperandPushCopy
        @OperandForceToStack
         [ oOperandChooseLength (two)
         | two:
         ] or >
         oEmitSingle(iPush)
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStatic)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         oOperandPushMode(mStack)
         >>
        ;OperandForceToStack
        oOperandPop
        ?tVarParm (tVarParm)
        ?tParmEnd (tParmEnd)
        [ (tTrap)
        | tTrap:
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        oOperandPushTrap
        oEmitSingle(iCall)
        oOperandPop
        oOperandPushMode(mStackReg)
        oOperandSetLength(two)
        oOperandPushMode(mManifest)
        oOperandSetLength(two)
        oOperandSetValue(four)
        oEmitDouble(iAdd)
        oOperandPop
        oOperandPop
        ] or >
        ] or >
        >>
       ;TrapStmt
       ] or >
       }
       [ (tAssignBegin)
       | tAssignBegin:
       @AssignStmt
        oEmitSourceCoordinate
        ?tLiteralAddress (tLiteralAddress)
        @OperandPushVariable
         oOperandPushVariable
         [ (tLiteralBoolean)
         | *:
         [ (tLiteralBoolean)
         | *:
         [ (tLiteralBoolean)
         | *:
         >>
        ;OperandPushVariable
        @OperandPushExpressionAssignPopPop
         [ (tLiteralBoolean)
         | tLiteralBoolean:
         oOperandPushBoolean
         ] or >
         }
         [ (tAssignBoolean)
         | tAssignBoolean:
         @OperandAssignBooleanPopPop
          @OperandConvertJumpConditionToData
           [ oOperandIsJumpCondition (no)
           | no:
           ] or >
           >>
          ;OperandConvertJumpConditionToData
          oOperandSetLength(one)
          @EmitMove
           @OperandLeftOrRightIsTemp
            [ oOperandChooseMode (mManifest)
            | *:
            oOperandSwap
            [ oOperandChooseMode (mStatic)
            | *:
            oOperandSwap
            >>no
           ;OperandLeftOrRightIsTemp
           [@OperandLeftOrRightIsTemp (no)
           | *:
           [ oOperandChooseMode (mManifest)
           | mManifest:
           oEmitDouble(iMov)
           ] or >
           >>
          ;EmitMove
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mManifest)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          >>
         ;OperandAssignBooleanPopPop
         ] or >
         >>
        ;OperandPushExpressionAssignPopPop
        >>
       ;AssignStmt
       ] or >
       }
       [ (tAssignBegin)
       | tAssignBegin:
       @AssignStmt
        oEmitSourceCoordinate
        ?tLiteralAddress (tLiteralAddress)
        @OperandPushVariable
         oOperandPushVariable
         [ (tLiteralBoolean)
         | *:
         [ (tLiteralBoolean)
         | *:
         [ (tLiteralBoolean)
         | *:
         >>
        ;OperandPushVariable
        @OperandPushExpressionAssignPopPop
         [ (tLiteralBoolean)
         | tLiteralBoolean:
         oOperandPushBoolean
         ] or >
         }
         [ (tAssignBoolean)
         | tAssignBoolean:
         @OperandAssignBooleanPopPop
          @OperandConvertJumpConditionToData
           [ oOperandIsJumpCondition (no)
           | no:
           ] or >
           >>
          ;OperandConvertJumpConditionToData
          oOperandSetLength(one)
          @EmitMove
           @OperandLeftOrRightIsTemp
            [ oOperandChooseMode (mManifest)
            | *:
            oOperandSwap
            [ oOperandChooseMode (mStatic)
            | *:
            oOperandSwap
            >>no
           ;OperandLeftOrRightIsTemp
           [@OperandLeftOrRightIsTemp (no)
           | *:
           [ oOperandChooseMode (mManifest)
           | mManifest:
           oEmitDouble(iMov)
           ] or >
           >>
          ;EmitMove
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mManifest)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          >>
         ;OperandAssignBooleanPopPop
         ] or >
         >>
        ;OperandPushExpressionAssignPopPop
        >>
       ;AssignStmt
       ] or >
       }
       [ (tAssignBegin)
       | tAssignBegin:
       @AssignStmt
        oEmitSourceCoordinate
        ?tLiteralAddress (tLiteralAddress)
        @OperandPushVariable
         oOperandPushVariable
         [ (tLiteralAddress)
         | *:
         [ (tLiteralAddress)
         | *:
         [ (tLiteralAddress)
         | *:
         >>
        ;OperandPushVariable
        @OperandPushExpressionAssignPopPop
         [ (tLiteralAddress)
         | tLiteralAddress:
         @OperandPushVariable
          oOperandPushVariable
          [ (tFetchInteger)
          | *:
          [ (tFetchInteger)
          | *:
          [ (tFetchInteger)
          | tFetchInteger:
          ] or >
          >>
         ;OperandPushVariable
         ] or >
         }
         [ (tLiteralInteger)
         | tLiteralInteger:
         oOperandPushInteger
         ] or >
         }
         [ (tAdd)
         | tAdd:
         [ (tAssignInteger)
         | tAssignInteger:
         @OperandAddAssignPopPopPop
          [ oOperandCompareRightAndDest (no)
          | *:
          oOperandSwap
          [ oOperandCompareRightAndDest (yes)
          | yes:
          oOperandPop
          @OperandAddRightToLeftPop
           [ oOperandChooseManifestValue (one)
           | one:
           oOperandPop
           oEmitSingle(iInc)
           ] or >
           >>
          ;OperandAddRightToLeftPop
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          ] or >
          >>
         ;OperandAddAssignPopPopPop
         ] or >
         >>
        ;OperandPushExpressionAssignPopPop
        >>
       ;AssignStmt
       ] or >
       }
       [ (tIfMerge)
       | *:
       ] or >
       >>
      ;Block
      >>
     ;Statements
     [ (tIfMerge)
     | tIfMerge:
     oEmitUnconditionalForwardBranch
     oFixAndFreeShuntList
     oOperandPop
     oFixPushLastAddress
     oEmitMergeSourceCoordinate
     @Statements
      @Block
       [ (tIfBegin)
       | tIfBegin:
       @IfStmt
        oEmitSourceCoordinate
        @OperandPushBooleanControlExpression
         @OperandPushExpression
          [ (tLiteralAddress)
          | tLiteralAddress:
          @OperandPushVariable
           oOperandPushVariable
           [ (tFetchInteger)
           | *:
           [ (tFetchInteger)
           | *:
           [ (tFetchInteger)
           | tFetchInteger:
           ] or >
           >>
          ;OperandPushVariable
          ] or >
          }
          [ (tLiteralInteger)
          | tLiteralInteger:
          oOperandPushInteger
          ] or >
          }
          [ (tGT)
          | tGT:
          @OperandGreaterPop
           [ oOperandCompareLeftAndRight (no)
           | no:
           [ oOperandChooseManifestValue ()
           | *:
           oOperandSwap
           [ oOperandChooseManifestValue ()
           | *:
           oOperandSwap
           @EmitCmp
            oOperandSwap
            [ oOperandChooseMode (mStatic)
            | *:
            oOperandSwap
            @OperandLeftOrRightIsTemp
             [ oOperandChooseMode (mManifest)
             | *:
             oOperandSwap
             [ oOperandChooseMode (mStatic)
             | *:
             oOperandSwap
             >>no
            ;OperandLeftOrRightIsTemp
            [@OperandLeftOrRightIsTemp (no)
            | *:
            [ oOperandChooseMode (mManifest)
            | mManifest:
            oEmitDouble(iCmp)
            ] or >
            >>
           ;EmitCmp
           @OperandPopAndFreeTemp
            [ oOperandChooseMode (mManifest)
            | *:
            oOperandPop
            >>
           ;OperandPopAndFreeTemp
           @OperandPopAndFreeTemp
            [ oOperandChooseMode (mStatic)
            | *:
            oOperandPop
            >>
           ;OperandPopAndFreeTemp
           oOperandPushJumpCondition(iJgt)
           ] or >
           >>
          ;OperandGreaterPop
          ] or >
          }
          [ (tIfThen)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         @OperandForceToJumpCondition
          [ oOperandIsJumpCondition (yes)
          | yes:
          ] or >
          >>
         ;OperandForceToJumpCondition
         >>
        ;OperandPushBooleanControlExpression
        ?tIfThen (tIfThen)
        [ oOperandChooseJumpCondition (iJgt)
        | *:
        @OperandComplementJumpCondition
         [ oOperandChooseJumpCondition (iJgt)
         | *:
         oOperandComplementJumpCondition
         >>
        ;OperandComplementJumpCondition
        @OperandInfixOr
         @OperandForceToJumpCondition
          [ oOperandIsJumpCondition (yes)
          | yes:
          ] or >
          >>
         ;OperandForceToJumpCondition
         [ oOperandChooseJumpCondition (iJle)
         | *:
         oEmitConditionalForwardBranch
         oFixAndFreeFalseBranches
         oFixPushLastAddress
         oOperandMergeShuntsWithAddress
         oFixPopAddress
         >>
        ;OperandInfixOr
        @Statements
         @Block
          [ (tCallBegin)
          | tCallBegin:
          @CallStmt
           oEmitSourceCoordinate
           oOperandPushMode(mManifest)
           oOperandSetLength(two)
           oOperandSetValue(zero)
           [ (tCallEnd)
           | tCallEnd:
           ] or >
           oOperandPushProcedure
           oOperandSetMode(mProc)
           oEmitSingle(iCall)
           oOperandPop
           oOperandPushMode(mStackReg)
           oOperandSetLength(two)
           oOperandSwap
           oEmitDouble(iAdd)
           oOperandPop
           oOperandPop
           oEmitMergeSourceCoordinate
           >>
          ;CallStmt
          ] or >
          }
          [ (tWriteBegin)
          | tWriteBegin:
          @WriteProc
           oEmitSourceCoordinate
           [ (tTrapBegin)
           | *:
           @WriteParameter
            ?tTrapBegin (tTrapBegin)
            ?tLiteralAddress (tLiteralAddress)
            @OperandPushVariable
             oOperandPushVariable
             [ (tVarParm)
             | *:
             [ (tVarParm)
             | *:
             [ (tVarParm)
             | *:
             >>
            ;OperandPushVariable
            @OperandForceToStack
             [ oOperandChooseLength (two)
             | two:
             ] or >
             oEmitSingle(iPush)
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mStatic)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandPushMode(mStack)
             >>
            ;OperandForceToStack
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStack)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            ?tVarParm (tVarParm)
            ?tParmEnd (tParmEnd)
            @OperandPushExpression
             [ (tSkipString)
             | tSkipString:
             oEmitNone(iData)
             ?tStringData (tStringData)
             oEmitString
             oEmitNone(iText)
             ] or >
             }
             [ (tLiteralAddress)
             | tLiteralAddress:
             @OperandPushVariable
              oOperandPushVariable
              [ (tFetchChar)
              | *:
              [ (tFetchChar)
              | *:
              [ (tFetchChar)
              | tFetchChar:
              oOperandSetLength(regCX)
              ] or >
              >>
             ;OperandPushVariable
             ] or >
             }
             [ (tParmEnd)
             | *:
             ] or >
             >>
            ;OperandPushExpression
            [ (tParmEnd)
            | *:
            @OperandForceToStack
             [ oOperandChooseLength (regCX)
             | regCX:
             @OperandForceAddressIntoTemp
              [ oOperandChooseMode (mStatic)
              | mStatic:
              @OperandPushTempWord
               oTempAllocate
               oOperandPushTemp
               oOperandSetValue(zero)
               oOperandSetLength(two)
               >>
              ;OperandPushTempWord
              oOperandSwap
              oEmitDouble(iLoada)
              oOperandPop
              ] or >
              oOperandSetLength(two)
              >>
             ;OperandForceAddressIntoTemp
             ] or >
             oEmitSingle(iPush)
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mTemp)
              | mTemp:
              oTempFree
              ] or >
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandPushMode(mStack)
             >>
            ;OperandForceToStack
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStack)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            ?tParmEnd (tParmEnd)
            @OperandPushExpression
             [ (tLiteralInteger)
             | tLiteralInteger:
             oOperandPushInteger
             ] or >
             }
             [ (tParmEnd)
             | *:
             ] or >
             >>
            ;OperandPushExpression
            @OperandForceToStack
             [ oOperandChooseLength (two)
             | two:
             ] or >
             oEmitSingle(iPush)
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mManifest)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandPushMode(mStack)
             >>
            ;OperandForceToStack
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStack)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            ?tParmEnd (tParmEnd)
            ?tTrap (tTrap)
            oOperandPushTrap
            oEmitSingle(iCall)
            oOperandPop
            oOperandPushMode(mStackReg)
            oOperandSetLength(two)
            oOperandPushMode(mManifest)
            oOperandSetLength(two)
            oOperandSetValue(twelve)
            oEmitDouble(iAdd)
            oOperandPop
            oOperandPop
            >>
           ;WriteParameter
           }
           [ (tWriteEnd)
           | tWriteEnd:
           ] or >
           >>
          ;WriteProc
          ] or >
          }
          [ (tTrapBegin)
          | tTrapBegin:
          @TrapStmt
           oEmitSourceCoordinate
           [ (tLiteralAddress)
           | tLiteralAddress:
           @OperandPushVariable
            oOperandPushVariable
            [ (tVarParm)
            | *:
            [ (tVarParm)
            | *:
            [ (tVarParm)
            | *:
            >>
           ;OperandPushVariable
           oOperandPushCopy
           @OperandForceToStack
            [ oOperandChooseLength (two)
            | two:
            ] or >
            oEmitSingle(iPush)
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStatic)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            oOperandPushMode(mStack)
            >>
           ;OperandForceToStack
           oOperandPop
           ?tVarParm (tVarParm)
           ?tParmEnd (tParmEnd)
           [ (tTrap)
           | tTrap:
           @OperandPopAndFreeTemp
            [ oOperandChooseMode (mStatic)
            | *:
            oOperandPop
            >>
           ;OperandPopAndFreeTemp
           oOperandPushTrap
           oEmitSingle(iCall)
           oOperandPop
           oOperandPushMode(mStackReg)
           oOperandSetLength(two)
           oOperandPushMode(mManifest)
           oOperandSetLength(two)
           oOperandSetValue(four)
           oEmitDouble(iAdd)
           oOperandPop
           oOperandPop
           ] or >
           ] or >
           >>
          ;TrapStmt
          ] or >
          }
          [ (tAssignBegin)
          | tAssignBegin:
          @AssignStmt
           oEmitSourceCoordinate
           ?tLiteralAddress (tLiteralAddress)
           @OperandPushVariable
            oOperandPushVariable
            [ (tLiteralBoolean)
            | *:
            [ (tLiteralBoolean)
            | *:
            [ (tLiteralBoolean)
            | *:
            >>
           ;OperandPushVariable
           @OperandPushExpressionAssignPopPop
            [ (tLiteralBoolean)
            | tLiteralBoolean:
            oOperandPushBoolean
            ] or >
            }
            [ (tAssignBoolean)
            | tAssignBoolean:
            @OperandAssignBooleanPopPop
             @OperandConvertJumpConditionToData
              [ oOperandIsJumpCondition (no)
              | no:
              ] or >
              >>
             ;OperandConvertJumpConditionToData
             oOperandSetLength(one)
             @EmitMove
              @OperandLeftOrRightIsTemp
               [ oOperandChooseMode (mManifest)
               | *:
               oOperandSwap
               [ oOperandChooseMode (mStatic)
               | *:
               oOperandSwap
               >>no
              ;OperandLeftOrRightIsTemp
              [@OperandLeftOrRightIsTemp (no)
              | *:
              [ oOperandChooseMode (mManifest)
              | mManifest:
              oEmitDouble(iMov)
              ] or >
              >>
             ;EmitMove
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mManifest)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mStatic)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             >>
            ;OperandAssignBooleanPopPop
            ] or >
            >>
           ;OperandPushExpressionAssignPopPop
           >>
          ;AssignStmt
          ] or >
          }
          [ (tAssignBegin)
          | tAssignBegin:
          @AssignStmt
           oEmitSourceCoordinate
           ?tLiteralAddress (tLiteralAddress)
           @OperandPushVariable
            oOperandPushVariable
            [ (tLiteralBoolean)
            | *:
            [ (tLiteralBoolean)
            | *:
            [ (tLiteralBoolean)
            | *:
            >>
           ;OperandPushVariable
           @OperandPushExpressionAssignPopPop
            [ (tLiteralBoolean)
            | tLiteralBoolean:
            oOperandPushBoolean
            ] or >
            }
            [ (tAssignBoolean)
            | tAssignBoolean:
            @OperandAssignBooleanPopPop
             @OperandConvertJumpConditionToData
              [ oOperandIsJumpCondition (no)
              | no:
              ] or >
              >>
             ;OperandConvertJumpConditionToData
             oOperandSetLength(one)
             @EmitMove
              @OperandLeftOrRightIsTemp
               [ oOperandChooseMode (mManifest)
               | *:
               oOperandSwap
               [ oOperandChooseMode (mStatic)
               | *:
               oOperandSwap
               >>no
              ;OperandLeftOrRightIsTemp
              [@OperandLeftOrRightIsTemp (no)
              | *:
              [ oOperandChooseMode (mManifest)
              | mManifest:
              oEmitDouble(iMov)
              ] or >
              >>
             ;EmitMove
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mManifest)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mStatic)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             >>
            ;OperandAssignBooleanPopPop
            ] or >
            >>
           ;OperandPushExpressionAssignPopPop
           >>
          ;AssignStmt
          ] or >
          }
          [ (tAssignBegin)
          | tAssignBegin:
          @AssignStmt
           oEmitSourceCoordinate
           ?tLiteralAddress (tLiteralAddress)
           @OperandPushVariable
            oOperandPushVariable
            [ (tLiteralAddress)
            | *:
            [ (tLiteralAddress)
            | *:
            [ (tLiteralAddress)
            | *:
            >>
           ;OperandPushVariable
           @OperandPushExpressionAssignPopPop
            [ (tLiteralAddress)
            | tLiteralAddress:
            @OperandPushVariable
             oOperandPushVariable
             [ (tFetchInteger)
             | *:
             [ (tFetchInteger)
             | *:
             [ (tFetchInteger)
             | tFetchInteger:
             ] or >
             >>
            ;OperandPushVariable
            ] or >
            }
            [ (tLiteralInteger)
            | tLiteralInteger:
            oOperandPushInteger
            ] or >
            }
            [ (tAdd)
            | tAdd:
            [ (tAssignInteger)
            | tAssignInteger:
            @OperandAddAssignPopPopPop
             [ oOperandCompareRightAndDest (no)
             | *:
             oOperandSwap
             [ oOperandCompareRightAndDest (yes)
             | yes:
             oOperandPop
             @OperandAddRightToLeftPop
              [ oOperandChooseManifestValue (one)
              | one:
              oOperandPop
              oEmitSingle(iInc)
              ] or >
              >>
             ;OperandAddRightToLeftPop
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mStatic)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             ] or >
             >>
            ;OperandAddAssignPopPopPop
            ] or >
            >>
           ;OperandPushExpressionAssignPopPop
           >>
          ;AssignStmt
          ] or >
          }
          [ (tIfMerge)
          | *:
          ] or >
          >>
         ;Block
         >>
        ;Statements
        [ (tIfMerge)
        | tIfMerge:
        oEmitUnconditionalForwardBranch
        oFixAndFreeShuntList
        oOperandPop
        oFixPushLastAddress
        oEmitMergeSourceCoordinate
        @Statements
         @Block
          [ (tIfBegin)
          | tIfBegin:
          @IfStmt
           oEmitSourceCoordinate
           @OperandPushBooleanControlExpression
            @OperandPushExpression
             [ (tLiteralAddress)
             | tLiteralAddress:
             @OperandPushVariable
              oOperandPushVariable
              [ (tFetchChar)
              | *:
              [ (tFetchChar)
              | *:
              [ (tFetchChar)
              | tFetchChar:
              oOperandSetLength(regCX)
              ] or >
              >>
             ;OperandPushVariable
             ] or >
             }
             [ (tSkipString)
             | tSkipString:
             oEmitNone(iData)
             ?tStringData (tStringData)
             oEmitString
             oEmitNone(iText)
             ] or >
             }
             [ (tLiteralAddress)
             | tLiteralAddress:
             @OperandPushVariable
              oOperandPushVariable
              [ (tFetchChar)
              | *:
              [ (tFetchChar)
              | *:
              [ (tFetchChar)
              | tFetchChar:
              oOperandSetLength(regCX)
              ] or >
              >>
             ;OperandPushVariable
             ] or >
             }
             [ (tStringEQ)
             | tStringEQ:
             @OperandStringEqualPop
              @SaveTempRegsToStack
               oOperandPushMode(mTemp)
               oOperandSetLength(two)
               oOperandSetRegnum(one)
               oEmitSingle(iPush)
               oOperandSetRegnum(two)
               oEmitSingle(iPush)
               oOperandSetRegnum(regCX)
               oEmitSingle(iPush)
               oOperandSetRegnum(four)
               oEmitSingle(iPush)
               oOperandPop
               >>
              ;SaveTempRegsToStack
              @OperandForceAddressIntoTemp
               [ oOperandChooseMode (mStatic)
               | mStatic:
               @OperandPushTempWord
                oTempAllocate
                oOperandPushTemp
                oOperandSetValue(zero)
                oOperandSetLength(two)
                >>
               ;OperandPushTempWord
               oOperandSwap
               oEmitDouble(iLoada)
               oOperandPop
               ] or >
               oOperandSetLength(two)
               >>
              ;OperandForceAddressIntoTemp
              @OperandForceToStack
               [ oOperandChooseLength (two)
               | two:
               ] or >
               oEmitSingle(iPush)
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mTemp)
                | mTemp:
                oTempFree
                ] or >
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               oOperandPushMode(mStack)
               >>
              ;OperandForceToStack
              @OperandPopAndFreeTemp
               [ oOperandChooseMode (mStack)
               | *:
               oOperandPop
               >>
              ;OperandPopAndFreeTemp
              @OperandForceAddressIntoTemp
               [ oOperandChooseMode (mStatic)
               | mStatic:
               @OperandPushTempWord
                oTempAllocate
                oOperandPushTemp
                oOperandSetValue(zero)
                oOperandSetLength(two)
                >>
               ;OperandPushTempWord
               oOperandSwap
               oEmitDouble(iLoada)
               oOperandPop
               ] or >
               oOperandSetLength(two)
               >>
              ;OperandForceAddressIntoTemp
              @OperandForceToStack
               [ oOperandChooseLength (two)
               | two:
               ] or >
               oEmitSingle(iPush)
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mTemp)
                | mTemp:
                oTempFree
                ] or >
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               oOperandPushMode(mStack)
               >>
              ;OperandForceToStack
              @OperandPopAndFreeTemp
               [ oOperandChooseMode (mStack)
               | *:
               oOperandPop
               >>
              ;OperandPopAndFreeTemp
              oOperandPushMode(mTrap)
              oOperandSetValue(trStringEqual)
              oOperandSetLength(two)
              oEmitSingle(iCall)
              oOperandPop
              oOperandPushMode(mStackReg)
              oOperandSetLength(two)
              oOperandPushMode(mManifest)
              oOperandSetLength(two)
              oOperandSetValue(eight)
              oEmitDouble(iAdd)
              oOperandPop
              oOperandPop
              oOperandPushMode(mScratchReg1)
              oOperandSetLength(two)
              oOperandPushMode(mResultReg)
              oOperandSetLength(two)
              oEmitDouble(iMov)
              oOperandPop
              @RestoreTempRegsFromStack
               oOperandPushMode(mTemp)
               oOperandSetLength(two)
               oOperandSetRegnum(four)
               oEmitSingle(iPop)
               oOperandSetRegnum(regCX)
               oEmitSingle(iPop)
               oOperandSetRegnum(two)
               oEmitSingle(iPop)
               oOperandSetRegnum(one)
               oEmitSingle(iPop)
               oOperandPop
               >>
              ;RestoreTempRegsFromStack
              @OperandForceIntoTemp
               [ oOperandChooseMode (mScratchReg1)
               | *:
               [ oOperandChooseLength (two)
               | two:
               @OperandPushTempWord
                oTempAllocate
                oOperandPushTemp
                oOperandSetValue(zero)
                oOperandSetLength(two)
                >>
               ;OperandPushTempWord
               oOperandSwap
               oEmitDouble(iMov)
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mScratchReg1)
                | *:
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               oOperandSetMode(mTemp)
               ] or >
               >>
              ;OperandForceIntoTemp
              oOperandSetLength(one)
              >>
             ;OperandStringEqualPop
             ] or >
             }
             [ (tIfThen)
             | *:
             ] or >
             >>
            ;OperandPushExpression
            @OperandForceToJumpCondition
             [ oOperandIsJumpCondition (no)
             | *:
             [ oOperandChooseManifestValue ()
             | *:
             @EmitTst
              [ oOperandChooseLength (one)
              | one:
              oOperandPushMode(mManifest)
              oOperandSetValue(zero)
              oOperandSetLength(one)
              ] or >
              @EmitCmp
               oOperandSwap
               [ oOperandChooseMode (mTemp)
               | *:
               oOperandSwap
               @OperandLeftOrRightIsTemp
                [ oOperandChooseMode (mManifest)
                | *:
                oOperandSwap
                [ oOperandChooseMode (mTemp)
                | mTemp:
                oOperandSwap
                >>yes
               ;OperandLeftOrRightIsTemp
               [@OperandLeftOrRightIsTemp (yes)
               | yes:
               oEmitDouble(iCmp)
               ] or >
               >>
              ;EmitCmp
              oOperandPop
              >>
             ;EmitTst
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mTemp)
              | mTemp:
              oTempFree
              ] or >
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandPushJumpCondition(iJne)
             >>
            ;OperandForceToJumpCondition
            >>
           ;OperandPushBooleanControlExpression
           ?tIfThen (tIfThen)
           [ oOperandChooseJumpCondition (iJne)
           | *:
           @OperandComplementJumpCondition
            [ oOperandChooseJumpCondition (iJne)
            | *:
            oOperandComplementJumpCondition
            >>
           ;OperandComplementJumpCondition
           @OperandInfixOr
            @OperandForceToJumpCondition
             [ oOperandIsJumpCondition (yes)
             | yes:
             ] or >
             >>
            ;OperandForceToJumpCondition
            [ oOperandChooseJumpCondition (iJeq)
            | *:
            oEmitConditionalForwardBranch
            oFixAndFreeFalseBranches
            oFixPushLastAddress
            oOperandMergeShuntsWithAddress
            oFixPopAddress
            >>
           ;OperandInfixOr
           @Statements
            @Block
             [ (tCallBegin)
             | tCallBegin:
             @CallStmt
              oEmitSourceCoordinate
              oOperandPushMode(mManifest)
              oOperandSetLength(two)
              oOperandSetValue(zero)
              [ (tLiteralAddress)
              | *:
              @OperandPushExpression
               [ (tLiteralAddress)
               | tLiteralAddress:
               @OperandPushVariable
                oOperandPushVariable
                [ (tFetchBoolean)
                | *:
                [ (tFetchBoolean)
                | *:
                [ (tFetchBoolean)
                | tFetchBoolean:
                oOperandSetLength(one)
                ] or >
                >>
               ;OperandPushVariable
               ] or >
               }
               [ (tParmEnd)
               | *:
               ] or >
               >>
              ;OperandPushExpression
              @OperandConvertJumpConditionToData
               [ oOperandIsJumpCondition (no)
               | no:
               ] or >
               >>
              ;OperandConvertJumpConditionToData
              [ (tParmEnd)
              | *:
              @OperandForceToStack
               [ oOperandChooseLength (one)
               | one:
               @OperandForceIntoTemp
                [ oOperandChooseMode (mStatic)
                | *:
                [ oOperandChooseLength (one)
                | one:
                @OperandPushTempByte
                 oTempAllocate
                 oOperandPushTemp
                 oOperandSetValue(zero)
                 oOperandSetLength(one)
                 >>
                ;OperandPushTempByte
                oOperandSwap
                oEmitDouble(iMov)
                @OperandPopAndFreeTemp
                 [ oOperandChooseMode (mStatic)
                 | *:
                 oOperandPop
                 >>
                ;OperandPopAndFreeTemp
                oOperandSetMode(mTemp)
                ] or >
                >>
               ;OperandForceIntoTemp
               oOperandSetLength(two)
               ] or >
               oEmitSingle(iPush)
               @OperandPopAndFreeTemp
                [ oOperandChooseMode (mTemp)
                | mTemp:
                oTempFree
                ] or >
                oOperandPop
                >>
               ;OperandPopAndFreeTemp
               oOperandPushMode(mStack)
               >>
              ;OperandForceToStack
              @OperandPopAndFreeTemp
               [ oOperandChooseMode (mStack)
               | *:
               oOperandPop
               >>
              ;OperandPopAndFreeTemp
              ?tParmEnd (tParmEnd)
              oOperandPushMode(mManifest)
              oOperandSetLength(two)
              oOperandSetValue(four)
              oOperandAddManifestValues
              oOperandPop
              }
              [ (tCallEnd)
              | tCallEnd:
              ] or >
              oOperandPushProcedure
              oOperandSetMode(mProc)
              oEmitSingle(iCall)
              oOperandPop
              oOperandPushMode(mStackReg)
              oOperandSetLength(two)
              oOperandSwap
              oEmitDouble(iAdd)
              oOperandPop
              oOperandPop
              oEmitMergeSourceCoordinate
              >>
             ;CallStmt
             ] or >
             }
             [ (tIfMerge)
             | *:
             ] or >
             >>
            ;Block
            >>
           ;Statements
           [ (tIfMerge)
           | tIfMerge:
           oEmitUnconditionalForwardBranch
           oFixAndFreeShuntList
           oOperandPop
           oFixPushLastAddress
           oEmitMergeSourceCoordinate
           @Statements
            @Block
             [ (tCallBegin)
             | tCallBegin:
             @CallStmt
              oEmitSourceCoordinate
              oOperandPushMode(mManifest)
              oOperandSetLength(two)
              oOperandSetValue(zero)
              [ (tCallEnd)
              | tCallEnd:
              ] or >
              oOperandPushProcedure
              oOperandSetMode(mProc)
              oEmitSingle(iCall)
              oOperandPop
              oOperandPushMode(mStackReg)
              oOperandSetLength(two)
              oOperandSwap
              oEmitDouble(iAdd)
              oOperandPop
              oOperandPop
              oEmitMergeSourceCoordinate
              >>
             ;CallStmt
             ] or >
             }
             [ (tIfEnd)
             | *:
             ] or >
             >>
            ;Block
            >>
           ;Statements
           oFixForwardBranch
           oFixPopAddress
           ?tIfEnd (tIfEnd)
           ] or >
           >>
          ;IfStmt
          ] or >
          }
          [ (tIfEnd)
          | *:
          ] or >
          >>
         ;Block
         >>
        ;Statements
        oFixForwardBranch
        oFixPopAddress
        ?tIfEnd (tIfEnd)
        ] or >
        >>
       ;IfStmt
       ] or >
       }
       [ (tIfEnd)
       | *:
       ] or >
       >>
      ;Block
      >>
     ;Statements
     oFixForwardBranch
     oFixPopAddress
     ?tIfEnd (tIfEnd)
     ] or >
     >>
    ;IfStmt
    ] or >
    }
    [ (tIfBegin)
    | tIfBegin:
    @IfStmt
     oEmitSourceCoordinate
     @OperandPushBooleanControlExpression
      @OperandPushExpression
       [ (tLiteralAddress)
       | tLiteralAddress:
       @OperandPushVariable
        oOperandPushVariable
        [ (tFetchBoolean)
        | *:
        [ (tFetchBoolean)
        | *:
        [ (tFetchBoolean)
        | tFetchBoolean:
        oOperandSetLength(one)
        ] or >
        >>
       ;OperandPushVariable
       ] or >
       }
       [ (tIfThen)
       | *:
       ] or >
       >>
      ;OperandPushExpression
      @OperandForceToJumpCondition
       [ oOperandIsJumpCondition (no)
       | *:
       [ oOperandChooseManifestValue ()
       | *:
       @EmitTst
        [ oOperandChooseLength (one)
        | one:
        oOperandPushMode(mManifest)
        oOperandSetValue(zero)
        oOperandSetLength(one)
        ] or >
        @EmitCmp
         oOperandSwap
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandSwap
         @OperandLeftOrRightIsTemp
          [ oOperandChooseMode (mManifest)
          | *:
          oOperandSwap
          [ oOperandChooseMode (mStatic)
          | *:
          oOperandSwap
          >>no
         ;OperandLeftOrRightIsTemp
         [@OperandLeftOrRightIsTemp (no)
         | *:
         [ oOperandChooseMode (mManifest)
         | mManifest:
         oEmitDouble(iCmp)
         ] or >
         >>
        ;EmitCmp
        oOperandPop
        >>
       ;EmitTst
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandPushJumpCondition(iJne)
       >>
      ;OperandForceToJumpCondition
      >>
     ;OperandPushBooleanControlExpression
     ?tIfThen (tIfThen)
     [ oOperandChooseJumpCondition (iJne)
     | *:
     @OperandComplementJumpCondition
      [ oOperandChooseJumpCondition (iJne)
      | *:
      oOperandComplementJumpCondition
      >>
     ;OperandComplementJumpCondition
     @OperandInfixOr
      @OperandForceToJumpCondition
       [ oOperandIsJumpCondition (yes)
       | yes:
       ] or >
       >>
      ;OperandForceToJumpCondition
      [ oOperandChooseJumpCondition (iJeq)
      | *:
      oEmitConditionalForwardBranch
      oFixAndFreeFalseBranches
      oFixPushLastAddress
      oOperandMergeShuntsWithAddress
      oFixPopAddress
      >>
     ;OperandInfixOr
     @Statements
      @Block
       [ (tCallBegin)
       | tCallBegin:
       @CallStmt
        oEmitSourceCoordinate
        oOperandPushMode(mManifest)
        oOperandSetLength(two)
        oOperandSetValue(zero)
        [ (tCallEnd)
        | tCallEnd:
        ] or >
        oOperandPushProcedure
        oOperandSetMode(mProc)
        oEmitSingle(iCall)
        oOperandPop
        oOperandPushMode(mStackReg)
        oOperandSetLength(two)
        oOperandSwap
        oEmitDouble(iAdd)
        oOperandPop
        oOperandPop
        oEmitMergeSourceCoordinate
        >>
       ;CallStmt
       ] or >
       }
       [ (tWriteBegin)
       | tWriteBegin:
       @WriteProc
        oEmitSourceCoordinate
        [ (tTrapBegin)
        | *:
        @WriteParameter
         ?tTrapBegin (tTrapBegin)
         ?tLiteralAddress (tLiteralAddress)
         @OperandPushVariable
          oOperandPushVariable
          [ (tVarParm)
          | *:
          [ (tVarParm)
          | *:
          [ (tVarParm)
          | *:
          >>
         ;OperandPushVariable
         @OperandForceToStack
          [ oOperandChooseLength (two)
          | two:
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tVarParm (tVarParm)
         ?tParmEnd (tParmEnd)
         @OperandPushExpression
          [ (tSkipString)
          | tSkipString:
          oEmitNone(iData)
          ?tStringData (tStringData)
          oEmitString
          oEmitNone(iText)
          ] or >
          }
          [ (tLiteralAddress)
          | tLiteralAddress:
          @OperandPushVariable
           oOperandPushVariable
           [ (tFetchChar)
           | *:
           [ (tFetchChar)
           | *:
           [ (tFetchChar)
           | tFetchChar:
           oOperandSetLength(regCX)
           ] or >
           >>
          ;OperandPushVariable
          ] or >
          }
          [ (tParmEnd)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         [ (tParmEnd)
         | *:
         @OperandForceToStack
          [ oOperandChooseLength (regCX)
          | regCX:
          @OperandForceAddressIntoTemp
           [ oOperandChooseMode (mStatic)
           | mStatic:
           @OperandPushTempWord
            oTempAllocate
            oOperandPushTemp
            oOperandSetValue(zero)
            oOperandSetLength(two)
            >>
           ;OperandPushTempWord
           oOperandSwap
           oEmitDouble(iLoada)
           oOperandPop
           ] or >
           oOperandSetLength(two)
           >>
          ;OperandForceAddressIntoTemp
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mTemp)
           | mTemp:
           oTempFree
           ] or >
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tParmEnd (tParmEnd)
         @OperandPushExpression
          [ (tLiteralInteger)
          | tLiteralInteger:
          oOperandPushInteger
          ] or >
          }
          [ (tParmEnd)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         @OperandForceToStack
          [ oOperandChooseLength (two)
          | two:
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mManifest)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tParmEnd (tParmEnd)
         ?tTrap (tTrap)
         oOperandPushTrap
         oEmitSingle(iCall)
         oOperandPop
         oOperandPushMode(mStackReg)
         oOperandSetLength(two)
         oOperandPushMode(mManifest)
         oOperandSetLength(two)
         oOperandSetValue(twelve)
         oEmitDouble(iAdd)
         oOperandPop
         oOperandPop
         >>
        ;WriteParameter
        }
        [ (tTrapBegin)
        | *:
        @WriteParameter
         ?tTrapBegin (tTrapBegin)
         ?tLiteralAddress (tLiteralAddress)
         @OperandPushVariable
          oOperandPushVariable
          [ (tVarParm)
          | *:
          [ (tVarParm)
          | *:
          [ (tVarParm)
          | *:
          >>
         ;OperandPushVariable
         @OperandForceToStack
          [ oOperandChooseLength (two)
          | two:
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tVarParm (tVarParm)
         ?tParmEnd (tParmEnd)
         @OperandPushExpression
          [ (tLiteralAddress)
          | tLiteralAddress:
          @OperandPushVariable
           oOperandPushVariable
           [ (tFetchInteger)
           | *:
           [ (tFetchInteger)
           | *:
           [ (tFetchInteger)
           | tFetchInteger:
           ] or >
           >>
          ;OperandPushVariable
          ] or >
          }
          [ (tParmEnd)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         [ (tParmEnd)
         | *:
         @OperandForceToStack
          [ oOperandChooseLength (two)
          | two:
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tParmEnd (tParmEnd)
         @OperandPushExpression
          [ (tLiteralInteger)
          | tLiteralInteger:
          oOperandPushInteger
          ] or >
          }
          [ (tParmEnd)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         @OperandForceToStack
          [ oOperandChooseLength (two)
          | two:
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mManifest)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tParmEnd (tParmEnd)
         ?tTrap (tTrap)
         oOperandPushTrap
         oEmitSingle(iCall)
         oOperandPop
         oOperandPushMode(mStackReg)
         oOperandSetLength(two)
         oOperandPushMode(mManifest)
         oOperandSetLength(two)
         oOperandSetValue(twelve)
         oEmitDouble(iAdd)
         oOperandPop
         oOperandPop
         >>
        ;WriteParameter
        }
        [ (tTrapBegin)
        | *:
        @WriteParameter
         ?tTrapBegin (tTrapBegin)
         ?tLiteralAddress (tLiteralAddress)
         @OperandPushVariable
          oOperandPushVariable
          [ (tVarParm)
          | *:
          [ (tVarParm)
          | *:
          [ (tVarParm)
          | *:
          >>
         ;OperandPushVariable
         @OperandForceToStack
          [ oOperandChooseLength (two)
          | two:
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tVarParm (tVarParm)
         ?tParmEnd (tParmEnd)
         @OperandPushExpression
          [ (tSkipString)
          | tSkipString:
          oEmitNone(iData)
          ?tStringData (tStringData)
          oEmitString
          oEmitNone(iText)
          ] or >
          }
          [ (tLiteralAddress)
          | tLiteralAddress:
          @OperandPushVariable
           oOperandPushVariable
           [ (tFetchChar)
           | *:
           [ (tFetchChar)
           | *:
           [ (tFetchChar)
           | tFetchChar:
           oOperandSetLength(regCX)
           ] or >
           >>
          ;OperandPushVariable
          ] or >
          }
          [ (tParmEnd)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         [ (tParmEnd)
         | *:
         @OperandForceToStack
          [ oOperandChooseLength (regCX)
          | regCX:
          @OperandForceAddressIntoTemp
           [ oOperandChooseMode (mStatic)
           | mStatic:
           @OperandPushTempWord
            oTempAllocate
            oOperandPushTemp
            oOperandSetValue(zero)
            oOperandSetLength(two)
            >>
           ;OperandPushTempWord
           oOperandSwap
           oEmitDouble(iLoada)
           oOperandPop
           ] or >
           oOperandSetLength(two)
           >>
          ;OperandForceAddressIntoTemp
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mTemp)
           | mTemp:
           oTempFree
           ] or >
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tParmEnd (tParmEnd)
         @OperandPushExpression
          [ (tLiteralInteger)
          | tLiteralInteger:
          oOperandPushInteger
          ] or >
          }
          [ (tParmEnd)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         @OperandForceToStack
          [ oOperandChooseLength (two)
          | two:
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mManifest)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tParmEnd (tParmEnd)
         ?tTrap (tTrap)
         oOperandPushTrap
         oEmitSingle(iCall)
         oOperandPop
         oOperandPushMode(mStackReg)
         oOperandSetLength(two)
         oOperandPushMode(mManifest)
         oOperandSetLength(two)
         oOperandSetValue(twelve)
         oEmitDouble(iAdd)
         oOperandPop
         oOperandPop
         >>
        ;WriteParameter
        }
        [ (tWriteEnd)
        | tWriteEnd:
        ] or >
        >>
       ;WriteProc
       ] or >
       }
       [ (tTrapBegin)
       | tTrapBegin:
       @TrapStmt
        oEmitSourceCoordinate
        [ (tLiteralAddress)
        | tLiteralAddress:
        @OperandPushVariable
         oOperandPushVariable
         [ (tVarParm)
         | *:
         [ (tVarParm)
         | *:
         [ (tVarParm)
         | *:
         >>
        ;OperandPushVariable
        oOperandPushCopy
        @OperandForceToStack
         [ oOperandChooseLength (two)
         | two:
         ] or >
         oEmitSingle(iPush)
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStatic)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         oOperandPushMode(mStack)
         >>
        ;OperandForceToStack
        oOperandPop
        ?tVarParm (tVarParm)
        ?tParmEnd (tParmEnd)
        [ (tTrap)
        | tTrap:
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        oOperandPushTrap
        oEmitSingle(iCall)
        oOperandPop
        oOperandPushMode(mStackReg)
        oOperandSetLength(two)
        oOperandPushMode(mManifest)
        oOperandSetLength(two)
        oOperandSetValue(four)
        oEmitDouble(iAdd)
        oOperandPop
        oOperandPop
        ] or >
        ] or >
        >>
       ;TrapStmt
       ] or >
       }
       [ (tIfMerge)
       | *:
       ] or >
       >>
      ;Block
      >>
     ;Statements
     [ (tIfMerge)
     | tIfMerge:
     oEmitUnconditionalForwardBranch
     oFixAndFreeShuntList
     oOperandPop
     oFixPushLastAddress
     oEmitMergeSourceCoordinate
     @Statements
      @Block
       [ (tCallBegin)
       | tCallBegin:
       @CallStmt
        oEmitSourceCoordinate
        oOperandPushMode(mManifest)
        oOperandSetLength(two)
        oOperandSetValue(zero)
        [ (tCallEnd)
        | tCallEnd:
        ] or >
        oOperandPushProcedure
        oOperandSetMode(mProc)
        oEmitSingle(iCall)
        oOperandPop
        oOperandPushMode(mStackReg)
        oOperandSetLength(two)
        oOperandSwap
        oEmitDouble(iAdd)
        oOperandPop
        oOperandPop
        oEmitMergeSourceCoordinate
        >>
       ;CallStmt
       ] or >
       }
       [ (tWriteBegin)
       | tWriteBegin:
       @WriteProc
        oEmitSourceCoordinate
        [ (tTrapBegin)
        | *:
        @WriteParameter
         ?tTrapBegin (tTrapBegin)
         ?tLiteralAddress (tLiteralAddress)
         @OperandPushVariable
          oOperandPushVariable
          [ (tVarParm)
          | *:
          [ (tVarParm)
          | *:
          [ (tVarParm)
          | *:
          >>
         ;OperandPushVariable
         @OperandForceToStack
          [ oOperandChooseLength (two)
          | two:
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tVarParm (tVarParm)
         ?tParmEnd (tParmEnd)
         @OperandPushExpression
          [ (tSkipString)
          | tSkipString:
          oEmitNone(iData)
          ?tStringData (tStringData)
          oEmitString
          oEmitNone(iText)
          ] or >
          }
          [ (tLiteralAddress)
          | tLiteralAddress:
          @OperandPushVariable
           oOperandPushVariable
           [ (tFetchChar)
           | *:
           [ (tFetchChar)
           | *:
           [ (tFetchChar)
           | tFetchChar:
           oOperandSetLength(regCX)
           ] or >
           >>
          ;OperandPushVariable
          ] or >
          }
          [ (tParmEnd)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         [ (tParmEnd)
         | *:
         @OperandForceToStack
          [ oOperandChooseLength (regCX)
          | regCX:
          @OperandForceAddressIntoTemp
           [ oOperandChooseMode (mStatic)
           | mStatic:
           @OperandPushTempWord
            oTempAllocate
            oOperandPushTemp
            oOperandSetValue(zero)
            oOperandSetLength(two)
            >>
           ;OperandPushTempWord
           oOperandSwap
           oEmitDouble(iLoada)
           oOperandPop
           ] or >
           oOperandSetLength(two)
           >>
          ;OperandForceAddressIntoTemp
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mTemp)
           | mTemp:
           oTempFree
           ] or >
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tParmEnd (tParmEnd)
         @OperandPushExpression
          [ (tLiteralInteger)
          | tLiteralInteger:
          oOperandPushInteger
          ] or >
          }
          [ (tParmEnd)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         @OperandForceToStack
          [ oOperandChooseLength (two)
          | two:
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mManifest)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tParmEnd (tParmEnd)
         ?tTrap (tTrap)
         oOperandPushTrap
         oEmitSingle(iCall)
         oOperandPop
         oOperandPushMode(mStackReg)
         oOperandSetLength(two)
         oOperandPushMode(mManifest)
         oOperandSetLength(two)
         oOperandSetValue(twelve)
         oEmitDouble(iAdd)
         oOperandPop
         oOperandPop
         >>
        ;WriteParameter
        }
        [ (tWriteEnd)
        | tWriteEnd:
        ] or >
        >>
       ;WriteProc
       ] or >
       }
       [ (tCallBegin)
       | tCallBegin:
       @CallStmt
        oEmitSourceCoordinate
        oOperandPushMode(mManifest)
        oOperandSetLength(two)
        oOperandSetValue(zero)
        [ (tLiteralAddress)
        | *:
        @OperandPushExpression
         [ (tLiteralAddress)
         | tLiteralAddress:
         @OperandPushVariable
          oOperandPushVariable
          [ (tFetchInteger)
          | *:
          [ (tFetchInteger)
          | *:
          [ (tFetchInteger)
          | tFetchInteger:
          ] or >
          >>
         ;OperandPushVariable
         ] or >
         }
         [ (tParmEnd)
         | *:
         ] or >
         >>
        ;OperandPushExpression
        @OperandConvertJumpConditionToData
         [ oOperandIsJumpCondition (no)
         | no:
         ] or >
         >>
        ;OperandConvertJumpConditionToData
        [ (tParmEnd)
        | *:
        @OperandForceToStack
         [ oOperandChooseLength (two)
         | two:
         ] or >
         oEmitSingle(iPush)
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStatic)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         oOperandPushMode(mStack)
         >>
        ;OperandForceToStack
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mStack)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        ?tParmEnd (tParmEnd)
        oOperandPushMode(mManifest)
        oOperandSetLength(two)
        oOperandSetValue(four)
        oOperandAddManifestValues
        oOperandPop
        }
        [ (tLiteralAddress)
        | *:
        @OperandPushExpression
         [ (tLiteralAddress)
         | tLiteralAddress:
         @OperandPushVariable
          oOperandPushVariable
          [ (tVarParm)
          | *:
          [ (tVarParm)
          | *:
          [ (tVarParm)
          | *:
          >>
         ;OperandPushVariable
         ] or >
         }
         [ (tVarParm)
         | *:
         ] or >
         >>
        ;OperandPushExpression
        @OperandConvertJumpConditionToData
         [ oOperandIsJumpCondition (no)
         | no:
         ] or >
         >>
        ;OperandConvertJumpConditionToData
        [ (tVarParm)
        | tVarParm:
        @OperandForceAddressIntoTemp
         [ oOperandChooseMode (mStatic)
         | mStatic:
         @OperandPushTempWord
          oTempAllocate
          oOperandPushTemp
          oOperandSetValue(zero)
          oOperandSetLength(two)
          >>
         ;OperandPushTempWord
         oOperandSwap
         oEmitDouble(iLoada)
         oOperandPop
         ] or >
         oOperandSetLength(two)
         >>
        ;OperandForceAddressIntoTemp
        @OperandForceToStack
         [ oOperandChooseLength (two)
         | two:
         ] or >
         oEmitSingle(iPush)
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mTemp)
          | mTemp:
          oTempFree
          ] or >
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         oOperandPushMode(mStack)
         >>
        ;OperandForceToStack
        ] or >
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mStack)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        ?tParmEnd (tParmEnd)
        oOperandPushMode(mManifest)
        oOperandSetLength(two)
        oOperandSetValue(four)
        oOperandAddManifestValues
        oOperandPop
        }
        [ (tCallEnd)
        | tCallEnd:
        ] or >
        oOperandPushProcedure
        oOperandSetMode(mProc)
        oEmitSingle(iCall)
        oOperandPop
        oOperandPushMode(mStackReg)
        oOperandSetLength(two)
        oOperandSwap
        oEmitDouble(iAdd)
        oOperandPop
        oOperandPop
        oEmitMergeSourceCoordinate
        >>
       ;CallStmt
       ] or >
       }
       [ (tTrapBegin)
       | tTrapBegin:
       @TrapStmt
        oEmitSourceCoordinate
        [ (tLiteralAddress)
        | tLiteralAddress:
        @OperandPushVariable
         oOperandPushVariable
         [ (tVarParm)
         | *:
         [ (tVarParm)
         | *:
         [ (tVarParm)
         | *:
         >>
        ;OperandPushVariable
        oOperandPushCopy
        @OperandForceToStack
         [ oOperandChooseLength (two)
         | two:
         ] or >
         oEmitSingle(iPush)
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStatic)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         oOperandPushMode(mStack)
         >>
        ;OperandForceToStack
        oOperandPop
        ?tVarParm (tVarParm)
        ?tParmEnd (tParmEnd)
        [ (tTrap)
        | tTrap:
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        oOperandPushTrap
        oEmitSingle(iCall)
        oOperandPop
        oOperandPushMode(mStackReg)
        oOperandSetLength(two)
        oOperandPushMode(mManifest)
        oOperandSetLength(two)
        oOperandSetValue(four)
        oEmitDouble(iAdd)
        oOperandPop
        oOperandPop
        ] or >
        ] or >
        >>
       ;TrapStmt
       ] or >
       }
       [ (tIfEnd)
       | *:
       ] or >
       >>
      ;Block
      >>
     ;Statements
     oFixForwardBranch
     oFixPopAddress
     ?tIfEnd (tIfEnd)
     ] or >
     >>
    ;IfStmt
    ] or >
    }
    [ (tProcedureEnd)
    | *:
    ] or >
    >>
   ;Block
   ?tProcedureEnd (tProcedureEnd)
   oEmitNone(iLeave)
   oEmitNone(iReturn)
   >>
  ;Routine
  oFixForwardBranch
  oFixPopAddress
  ] or >
  }
  [ (tWriteBegin)
  | tWriteBegin:
  @WriteProc
   oEmitSourceCoordinate
   [ (tTrapBegin)
   | *:
   @WriteParameter
    ?tTrapBegin (tTrapBegin)
    ?tLiteralAddress (tLiteralAddress)
    @OperandPushVariable
     oOperandPushVariable
     [ (tVarParm)
     | *:
     [ (tVarParm)
     | *:
     [ (tVarParm)
     | *:
     >>
    ;OperandPushVariable
    @OperandForceToStack
     [ oOperandChooseLength (two)
     | two:
     ] or >
     oEmitSingle(iPush)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mStack)
     >>
    ;OperandForceToStack
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStack)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ?tVarParm (tVarParm)
    ?tParmEnd (tParmEnd)
    @OperandPushExpression
     [ (tSkipString)
     | tSkipString:
     oEmitNone(iData)
     ?tStringData (tStringData)
     oEmitString
     oEmitNone(iText)
     ] or >
     }
     [ (tLiteralAddress)
     | tLiteralAddress:
     @OperandPushVariable
      oOperandPushVariable
      [ (tFetchChar)
      | *:
      [ (tFetchChar)
      | *:
      [ (tFetchChar)
      | tFetchChar:
      oOperandSetLength(regCX)
      ] or >
      >>
     ;OperandPushVariable
     ] or >
     }
     [ (tParmEnd)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    [ (tParmEnd)
    | *:
    @OperandForceToStack
     [ oOperandChooseLength (regCX)
     | regCX:
     @OperandForceAddressIntoTemp
      [ oOperandChooseMode (mStatic)
      | mStatic:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iLoada)
      oOperandPop
      ] or >
      oOperandSetLength(two)
      >>
     ;OperandForceAddressIntoTemp
     ] or >
     oEmitSingle(iPush)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mTemp)
      | mTemp:
      oTempFree
      ] or >
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mStack)
     >>
    ;OperandForceToStack
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStack)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ?tParmEnd (tParmEnd)
    @OperandPushExpression
     [ (tLiteralInteger)
     | tLiteralInteger:
     oOperandPushInteger
     ] or >
     }
     [ (tParmEnd)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    @OperandForceToStack
     [ oOperandChooseLength (two)
     | two:
     ] or >
     oEmitSingle(iPush)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mManifest)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mStack)
     >>
    ;OperandForceToStack
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStack)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ?tParmEnd (tParmEnd)
    ?tTrap (tTrap)
    oOperandPushTrap
    oEmitSingle(iCall)
    oOperandPop
    oOperandPushMode(mStackReg)
    oOperandSetLength(two)
    oOperandPushMode(mManifest)
    oOperandSetLength(two)
    oOperandSetValue(twelve)
    oEmitDouble(iAdd)
    oOperandPop
    oOperandPop
    >>
   ;WriteParameter
   }
   [ (tWriteEnd)
   | tWriteEnd:
   ] or >
   >>
  ;WriteProc
  ] or >
  }
  [ (tTrapBegin)
  | tTrapBegin:
  @TrapStmt
   oEmitSourceCoordinate
   [ (tLiteralAddress)
   | tLiteralAddress:
   @OperandPushVariable
    oOperandPushVariable
    [ (tVarParm)
    | *:
    [ (tVarParm)
    | *:
    [ (tVarParm)
    | *:
    >>
   ;OperandPushVariable
   oOperandPushCopy
   @OperandForceToStack
    [ oOperandChooseLength (two)
    | two:
    ] or >
    oEmitSingle(iPush)
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    oOperandPushMode(mStack)
    >>
   ;OperandForceToStack
   oOperandPop
   ?tVarParm (tVarParm)
   ?tParmEnd (tParmEnd)
   [ (tTrap)
   | tTrap:
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStatic)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   oOperandPushTrap
   oEmitSingle(iCall)
   oOperandPop
   oOperandPushMode(mStackReg)
   oOperandSetLength(two)
   oOperandPushMode(mManifest)
   oOperandSetLength(two)
   oOperandSetValue(four)
   oEmitDouble(iAdd)
   oOperandPop
   oOperandPop
   ] or >
   ] or >
   >>
  ;TrapStmt
  ] or >
  }
  [ (tTrapBegin)
  | tTrapBegin:
  @TrapStmt
   oEmitSourceCoordinate
   [ (tLiteralAddress)
   | tLiteralAddress:
   @OperandPushVariable
    oOperandPushVariable
    [ (tVarParm)
    | *:
    [ (tVarParm)
    | *:
    [ (tVarParm)
    | *:
    >>
   ;OperandPushVariable
   oOperandPushCopy
   @OperandForceToStack
    [ oOperandChooseLength (two)
    | two:
    ] or >
    oEmitSingle(iPush)
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    oOperandPushMode(mStack)
    >>
   ;OperandForceToStack
   oOperandPop
   ?tVarParm (tVarParm)
   ?tParmEnd (tParmEnd)
   [ (tTrap)
   | tTrap:
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStatic)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   oOperandPushTrap
   oEmitSingle(iCall)
   oOperandPop
   oOperandPushMode(mStackReg)
   oOperandSetLength(two)
   oOperandPushMode(mManifest)
   oOperandSetLength(two)
   oOperandSetValue(four)
   oEmitDouble(iAdd)
   oOperandPop
   oOperandPop
   ] or >
   ] or >
   >>
  ;TrapStmt
  ] or >
  }
  [ (tWriteBegin)
  | tWriteBegin:
  @WriteProc
   oEmitSourceCoordinate
   [ (tTrapBegin)
   | *:
   @WriteParameter
    ?tTrapBegin (tTrapBegin)
    ?tLiteralAddress (tLiteralAddress)
    @OperandPushVariable
     oOperandPushVariable
     [ (tVarParm)
     | *:
     [ (tVarParm)
     | *:
     [ (tVarParm)
     | *:
     >>
    ;OperandPushVariable
    @OperandForceToStack
     [ oOperandChooseLength (two)
     | two:
     ] or >
     oEmitSingle(iPush)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mStack)
     >>
    ;OperandForceToStack
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStack)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ?tVarParm (tVarParm)
    ?tParmEnd (tParmEnd)
    @OperandPushExpression
     [ (tSkipString)
     | tSkipString:
     oEmitNone(iData)
     ?tStringData (tStringData)
     oEmitString
     oEmitNone(iText)
     ] or >
     }
     [ (tLiteralAddress)
     | tLiteralAddress:
     @OperandPushVariable
      oOperandPushVariable
      [ (tFetchChar)
      | *:
      [ (tFetchChar)
      | *:
      [ (tFetchChar)
      | tFetchChar:
      oOperandSetLength(regCX)
      ] or >
      >>
     ;OperandPushVariable
     ] or >
     }
     [ (tParmEnd)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    [ (tParmEnd)
    | *:
    @OperandForceToStack
     [ oOperandChooseLength (regCX)
     | regCX:
     @OperandForceAddressIntoTemp
      [ oOperandChooseMode (mStatic)
      | mStatic:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iLoada)
      oOperandPop
      ] or >
      oOperandSetLength(two)
      >>
     ;OperandForceAddressIntoTemp
     ] or >
     oEmitSingle(iPush)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mTemp)
      | mTemp:
      oTempFree
      ] or >
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mStack)
     >>
    ;OperandForceToStack
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStack)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ?tParmEnd (tParmEnd)
    @OperandPushExpression
     [ (tLiteralInteger)
     | tLiteralInteger:
     oOperandPushInteger
     ] or >
     }
     [ (tParmEnd)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    @OperandForceToStack
     [ oOperandChooseLength (two)
     | two:
     ] or >
     oEmitSingle(iPush)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mManifest)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mStack)
     >>
    ;OperandForceToStack
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStack)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ?tParmEnd (tParmEnd)
    ?tTrap (tTrap)
    oOperandPushTrap
    oEmitSingle(iCall)
    oOperandPop
    oOperandPushMode(mStackReg)
    oOperandSetLength(two)
    oOperandPushMode(mManifest)
    oOperandSetLength(two)
    oOperandSetValue(twelve)
    oEmitDouble(iAdd)
    oOperandPop
    oOperandPop
    >>
   ;WriteParameter
   }
   [ (tWriteEnd)
   | tWriteEnd:
   ] or >
   >>
  ;WriteProc
  ] or >
  }
  [ (tTrapBegin)
  | tTrapBegin:
  @TrapStmt
   oEmitSourceCoordinate
   [ (tLiteralAddress)
   | tLiteralAddress:
   @OperandPushVariable
    oOperandPushVariable
    [ (tVarParm)
    | *:
    [ (tVarParm)
    | *:
    [ (tVarParm)
    | *:
    >>
   ;OperandPushVariable
   oOperandPushCopy
   @OperandForceToStack
    [ oOperandChooseLength (two)
    | two:
    ] or >
    oEmitSingle(iPush)
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    oOperandPushMode(mStack)
    >>
   ;OperandForceToStack
   oOperandPop
   ?tVarParm (tVarParm)
   ?tParmEnd (tParmEnd)
   [ (tTrap)
   | tTrap:
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStatic)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   oOperandPushTrap
   oEmitSingle(iCall)
   oOperandPop
   oOperandPushMode(mStackReg)
   oOperandSetLength(two)
   oOperandPushMode(mManifest)
   oOperandSetLength(two)
   oOperandSetValue(four)
   oEmitDouble(iAdd)
   oOperandPop
   oOperandPop
   ] or >
   ] or >
   >>
  ;TrapStmt
  ] or >
  }
  [ (tTrapBegin)
  | tTrapBegin:
  @TrapStmt
   oEmitSourceCoordinate
   [ (tLiteralAddress)
   | tLiteralAddress:
   @OperandPushVariable
    oOperandPushVariable
    [ (tVarParm)
    | *:
    [ (tVarParm)
    | *:
    [ (tVarParm)
    | *:
    >>
   ;OperandPushVariable
   oOperandPushCopy
   @OperandForceToStack
    [ oOperandChooseLength (two)
    | two:
    ] or >
    oEmitSingle(iPush)
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    oOperandPushMode(mStack)
    >>
   ;OperandForceToStack
   oOperandPop
   ?tVarParm (tVarParm)
   ?tParmEnd (tParmEnd)
   [ (tTrap)
   | tTrap:
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStatic)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   oOperandPushTrap
   oEmitSingle(iCall)
   oOperandPop
   oOperandPushMode(mStackReg)
   oOperandSetLength(two)
   oOperandPushMode(mManifest)
   oOperandSetLength(two)
   oOperandSetValue(four)
   oEmitDouble(iAdd)
   oOperandPop
   oOperandPop
   ] or >
   ] or >
   >>
  ;TrapStmt
  ] or >
  }
  [ (tWriteBegin)
  | tWriteBegin:
  @WriteProc
   oEmitSourceCoordinate
   [ (tTrapBegin)
   | *:
   @WriteParameter
    ?tTrapBegin (tTrapBegin)
    ?tLiteralAddress (tLiteralAddress)
    @OperandPushVariable
     oOperandPushVariable
     [ (tVarParm)
     | *:
     [ (tVarParm)
     | *:
     [ (tVarParm)
     | *:
     >>
    ;OperandPushVariable
    @OperandForceToStack
     [ oOperandChooseLength (two)
     | two:
     ] or >
     oEmitSingle(iPush)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mStack)
     >>
    ;OperandForceToStack
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStack)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ?tVarParm (tVarParm)
    ?tParmEnd (tParmEnd)
    @OperandPushExpression
     [ (tSkipString)
     | tSkipString:
     oEmitNone(iData)
     ?tStringData (tStringData)
     oEmitString
     oEmitNone(iText)
     ] or >
     }
     [ (tLiteralAddress)
     | tLiteralAddress:
     @OperandPushVariable
      oOperandPushVariable
      [ (tFetchChar)
      | *:
      [ (tFetchChar)
      | *:
      [ (tFetchChar)
      | tFetchChar:
      oOperandSetLength(regCX)
      ] or >
      >>
     ;OperandPushVariable
     ] or >
     }
     [ (tParmEnd)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    [ (tParmEnd)
    | *:
    @OperandForceToStack
     [ oOperandChooseLength (regCX)
     | regCX:
     @OperandForceAddressIntoTemp
      [ oOperandChooseMode (mStatic)
      | mStatic:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iLoada)
      oOperandPop
      ] or >
      oOperandSetLength(two)
      >>
     ;OperandForceAddressIntoTemp
     ] or >
     oEmitSingle(iPush)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mTemp)
      | mTemp:
      oTempFree
      ] or >
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mStack)
     >>
    ;OperandForceToStack
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStack)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ?tParmEnd (tParmEnd)
    @OperandPushExpression
     [ (tLiteralInteger)
     | tLiteralInteger:
     oOperandPushInteger
     ] or >
     }
     [ (tParmEnd)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    @OperandForceToStack
     [ oOperandChooseLength (two)
     | two:
     ] or >
     oEmitSingle(iPush)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mManifest)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mStack)
     >>
    ;OperandForceToStack
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStack)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ?tParmEnd (tParmEnd)
    ?tTrap (tTrap)
    oOperandPushTrap
    oEmitSingle(iCall)
    oOperandPop
    oOperandPushMode(mStackReg)
    oOperandSetLength(two)
    oOperandPushMode(mManifest)
    oOperandSetLength(two)
    oOperandSetValue(twelve)
    oEmitDouble(iAdd)
    oOperandPop
    oOperandPop
    >>
   ;WriteParameter
   }
   [ (tWriteEnd)
   | tWriteEnd:
   ] or >
   >>
  ;WriteProc
  ] or >
  }
  [ (tTrapBegin)
  | tTrapBegin:
  @TrapStmt
   oEmitSourceCoordinate
   [ (tLiteralAddress)
   | tLiteralAddress:
   @OperandPushVariable
    oOperandPushVariable
    [ (tVarParm)
    | *:
    [ (tVarParm)
    | *:
    [ (tVarParm)
    | *:
    >>
   ;OperandPushVariable
   oOperandPushCopy
   @OperandForceToStack
    [ oOperandChooseLength (two)
    | two:
    ] or >
    oEmitSingle(iPush)
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    oOperandPushMode(mStack)
    >>
   ;OperandForceToStack
   oOperandPop
   ?tVarParm (tVarParm)
   ?tParmEnd (tParmEnd)
   [ (tTrap)
   | tTrap:
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStatic)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   oOperandPushTrap
   oEmitSingle(iCall)
   oOperandPop
   oOperandPushMode(mStackReg)
   oOperandSetLength(two)
   oOperandPushMode(mManifest)
   oOperandSetLength(two)
   oOperandSetValue(four)
   oEmitDouble(iAdd)
   oOperandPop
   oOperandPop
   ] or >
   ] or >
   >>
  ;TrapStmt
  ] or >
  }
  [ (tWriteBegin)
  | tWriteBegin:
  @WriteProc
   oEmitSourceCoordinate
   [ (tTrapBegin)
   | *:
   @WriteParameter
    ?tTrapBegin (tTrapBegin)
    ?tLiteralAddress (tLiteralAddress)
    @OperandPushVariable
     oOperandPushVariable
     [ (tVarParm)
     | *:
     [ (tVarParm)
     | *:
     [ (tVarParm)
     | *:
     >>
    ;OperandPushVariable
    @OperandForceToStack
     [ oOperandChooseLength (two)
     | two:
     ] or >
     oEmitSingle(iPush)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mStack)
     >>
    ;OperandForceToStack
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStack)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ?tVarParm (tVarParm)
    ?tParmEnd (tParmEnd)
    @OperandPushExpression
     [ (tSkipString)
     | tSkipString:
     oEmitNone(iData)
     ?tStringData (tStringData)
     oEmitString
     oEmitNone(iText)
     ] or >
     }
     [ (tLiteralAddress)
     | tLiteralAddress:
     @OperandPushVariable
      oOperandPushVariable
      [ (tFetchChar)
      | *:
      [ (tFetchChar)
      | *:
      [ (tFetchChar)
      | tFetchChar:
      oOperandSetLength(regCX)
      ] or >
      >>
     ;OperandPushVariable
     ] or >
     }
     [ (tParmEnd)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    [ (tParmEnd)
    | *:
    @OperandForceToStack
     [ oOperandChooseLength (regCX)
     | regCX:
     @OperandForceAddressIntoTemp
      [ oOperandChooseMode (mStatic)
      | mStatic:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iLoada)
      oOperandPop
      ] or >
      oOperandSetLength(two)
      >>
     ;OperandForceAddressIntoTemp
     ] or >
     oEmitSingle(iPush)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mTemp)
      | mTemp:
      oTempFree
      ] or >
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mStack)
     >>
    ;OperandForceToStack
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStack)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ?tParmEnd (tParmEnd)
    @OperandPushExpression
     [ (tLiteralInteger)
     | tLiteralInteger:
     oOperandPushInteger
     ] or >
     }
     [ (tParmEnd)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    @OperandForceToStack
     [ oOperandChooseLength (two)
     | two:
     ] or >
     oEmitSingle(iPush)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mManifest)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mStack)
     >>
    ;OperandForceToStack
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStack)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ?tParmEnd (tParmEnd)
    ?tTrap (tTrap)
    oOperandPushTrap
    oEmitSingle(iCall)
    oOperandPop
    oOperandPushMode(mStackReg)
    oOperandSetLength(two)
    oOperandPushMode(mManifest)
    oOperandSetLength(two)
    oOperandSetValue(twelve)
    oEmitDouble(iAdd)
    oOperandPop
    oOperandPop
    >>
   ;WriteParameter
   }
   [ (tWriteEnd)
   | tWriteEnd:
   ] or >
   >>
  ;WriteProc
  ] or >
  }
  [ (tTrapBegin)
  | tTrapBegin:
  @TrapStmt
   oEmitSourceCoordinate
   [ (tLiteralAddress)
   | tLiteralAddress:
   @OperandPushVariable
    oOperandPushVariable
    [ (tVarParm)
    | *:
    [ (tVarParm)
    | *:
    [ (tVarParm)
    | *:
    >>
   ;OperandPushVariable
   oOperandPushCopy
   @OperandForceToStack
    [ oOperandChooseLength (two)
    | two:
    ] or >
    oEmitSingle(iPush)
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    oOperandPushMode(mStack)
    >>
   ;OperandForceToStack
   oOperandPop
   ?tVarParm (tVarParm)
   ?tParmEnd (tParmEnd)
   [ (tTrap)
   | tTrap:
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStatic)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   oOperandPushTrap
   oEmitSingle(iCall)
   oOperandPop
   oOperandPushMode(mStackReg)
   oOperandSetLength(two)
   oOperandPushMode(mManifest)
   oOperandSetLength(two)
   oOperandSetValue(four)
   oEmitDouble(iAdd)
   oOperandPop
   oOperandPop
   ] or >
   ] or >
   >>
  ;TrapStmt
  ] or >
  }
  [ (tWriteBegin)
  | tWriteBegin:
  @WriteProc
   oEmitSourceCoordinate
   [ (tTrapBegin)
   | *:
   @WriteParameter
    ?tTrapBegin (tTrapBegin)
    ?tLiteralAddress (tLiteralAddress)
    @OperandPushVariable
     oOperandPushVariable
     [ (tVarParm)
     | *:
     [ (tVarParm)
     | *:
     [ (tVarParm)
     | *:
     >>
    ;OperandPushVariable
    @OperandForceToStack
     [ oOperandChooseLength (two)
     | two:
     ] or >
     oEmitSingle(iPush)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mStack)
     >>
    ;OperandForceToStack
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStack)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ?tVarParm (tVarParm)
    ?tParmEnd (tParmEnd)
    @OperandPushExpression
     [ (tSkipString)
     | tSkipString:
     oEmitNone(iData)
     ?tStringData (tStringData)
     oEmitString
     oEmitNone(iText)
     ] or >
     }
     [ (tLiteralAddress)
     | tLiteralAddress:
     @OperandPushVariable
      oOperandPushVariable
      [ (tFetchChar)
      | *:
      [ (tFetchChar)
      | *:
      [ (tFetchChar)
      | tFetchChar:
      oOperandSetLength(regCX)
      ] or >
      >>
     ;OperandPushVariable
     ] or >
     }
     [ (tParmEnd)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    [ (tParmEnd)
    | *:
    @OperandForceToStack
     [ oOperandChooseLength (regCX)
     | regCX:
     @OperandForceAddressIntoTemp
      [ oOperandChooseMode (mStatic)
      | mStatic:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iLoada)
      oOperandPop
      ] or >
      oOperandSetLength(two)
      >>
     ;OperandForceAddressIntoTemp
     ] or >
     oEmitSingle(iPush)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mTemp)
      | mTemp:
      oTempFree
      ] or >
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mStack)
     >>
    ;OperandForceToStack
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStack)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ?tParmEnd (tParmEnd)
    @OperandPushExpression
     [ (tLiteralInteger)
     | tLiteralInteger:
     oOperandPushInteger
     ] or >
     }
     [ (tParmEnd)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    @OperandForceToStack
     [ oOperandChooseLength (two)
     | two:
     ] or >
     oEmitSingle(iPush)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mManifest)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mStack)
     >>
    ;OperandForceToStack
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStack)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ?tParmEnd (tParmEnd)
    ?tTrap (tTrap)
    oOperandPushTrap
    oEmitSingle(iCall)
    oOperandPop
    oOperandPushMode(mStackReg)
    oOperandSetLength(two)
    oOperandPushMode(mManifest)
    oOperandSetLength(two)
    oOperandSetValue(twelve)
    oEmitDouble(iAdd)
    oOperandPop
    oOperandPop
    >>
   ;WriteParameter
   }
   [ (tWriteEnd)
   | tWriteEnd:
   ] or >
   >>
  ;WriteProc
  ] or >
  }
  [ (tTrapBegin)
  | tTrapBegin:
  @TrapStmt
   oEmitSourceCoordinate
   [ (tLiteralAddress)
   | tLiteralAddress:
   @OperandPushVariable
    oOperandPushVariable
    [ (tVarParm)
    | *:
    [ (tVarParm)
    | *:
    [ (tVarParm)
    | *:
    >>
   ;OperandPushVariable
   oOperandPushCopy
   @OperandForceToStack
    [ oOperandChooseLength (two)
    | two:
    ] or >
    oEmitSingle(iPush)
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    oOperandPushMode(mStack)
    >>
   ;OperandForceToStack
   oOperandPop
   ?tVarParm (tVarParm)
   ?tParmEnd (tParmEnd)
   [ (tTrap)
   | tTrap:
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStatic)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   oOperandPushTrap
   oEmitSingle(iCall)
   oOperandPop
   oOperandPushMode(mStackReg)
   oOperandSetLength(two)
   oOperandPushMode(mManifest)
   oOperandSetLength(two)
   oOperandSetValue(four)
   oEmitDouble(iAdd)
   oOperandPop
   oOperandPop
   ] or >
   ] or >
   >>
  ;TrapStmt
  ] or >
  }
  [ (tWriteBegin)
  | tWriteBegin:
  @WriteProc
   oEmitSourceCoordinate
   [ (tTrapBegin)
   | *:
   @WriteParameter
    ?tTrapBegin (tTrapBegin)
    ?tLiteralAddress (tLiteralAddress)
    @OperandPushVariable
     oOperandPushVariable
     [ (tVarParm)
     | *:
     [ (tVarParm)
     | *:
     [ (tVarParm)
     | *:
     >>
    ;OperandPushVariable
    @OperandForceToStack
     [ oOperandChooseLength (two)
     | two:
     ] or >
     oEmitSingle(iPush)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mStack)
     >>
    ;OperandForceToStack
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStack)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ?tVarParm (tVarParm)
    ?tParmEnd (tParmEnd)
    @OperandPushExpression
     [ (tSkipString)
     | tSkipString:
     oEmitNone(iData)
     ?tStringData (tStringData)
     oEmitString
     oEmitNone(iText)
     ] or >
     }
     [ (tLiteralAddress)
     | tLiteralAddress:
     @OperandPushVariable
      oOperandPushVariable
      [ (tFetchChar)
      | *:
      [ (tFetchChar)
      | *:
      [ (tFetchChar)
      | tFetchChar:
      oOperandSetLength(regCX)
      ] or >
      >>
     ;OperandPushVariable
     ] or >
     }
     [ (tParmEnd)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    [ (tParmEnd)
    | *:
    @OperandForceToStack
     [ oOperandChooseLength (regCX)
     | regCX:
     @OperandForceAddressIntoTemp
      [ oOperandChooseMode (mStatic)
      | mStatic:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iLoada)
      oOperandPop
      ] or >
      oOperandSetLength(two)
      >>
     ;OperandForceAddressIntoTemp
     ] or >
     oEmitSingle(iPush)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mTemp)
      | mTemp:
      oTempFree
      ] or >
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mStack)
     >>
    ;OperandForceToStack
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStack)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ?tParmEnd (tParmEnd)
    @OperandPushExpression
     [ (tLiteralInteger)
     | tLiteralInteger:
     oOperandPushInteger
     ] or >
     }
     [ (tParmEnd)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    @OperandForceToStack
     [ oOperandChooseLength (two)
     | two:
     ] or >
     oEmitSingle(iPush)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mManifest)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mStack)
     >>
    ;OperandForceToStack
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStack)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ?tParmEnd (tParmEnd)
    ?tTrap (tTrap)
    oOperandPushTrap
    oEmitSingle(iCall)
    oOperandPop
    oOperandPushMode(mStackReg)
    oOperandSetLength(two)
    oOperandPushMode(mManifest)
    oOperandSetLength(two)
    oOperandSetValue(twelve)
    oEmitDouble(iAdd)
    oOperandPop
    oOperandPop
    >>
   ;WriteParameter
   }
   [ (tWriteEnd)
   | tWriteEnd:
   ] or >
   >>
  ;WriteProc
  ] or >
  }
  [ (tTrapBegin)
  | tTrapBegin:
  @TrapStmt
   oEmitSourceCoordinate
   [ (tLiteralAddress)
   | tLiteralAddress:
   @OperandPushVariable
    oOperandPushVariable
    [ (tVarParm)
    | *:
    [ (tVarParm)
    | *:
    [ (tVarParm)
    | *:
    >>
   ;OperandPushVariable
   oOperandPushCopy
   @OperandForceToStack
    [ oOperandChooseLength (two)
    | two:
    ] or >
    oEmitSingle(iPush)
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    oOperandPushMode(mStack)
    >>
   ;OperandForceToStack
   oOperandPop
   ?tVarParm (tVarParm)
   ?tParmEnd (tParmEnd)
   [ (tTrap)
   | tTrap:
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStatic)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   oOperandPushTrap
   oEmitSingle(iCall)
   oOperandPop
   oOperandPushMode(mStackReg)
   oOperandSetLength(two)
   oOperandPushMode(mManifest)
   oOperandSetLength(two)
   oOperandSetValue(four)
   oEmitDouble(iAdd)
   oOperandPop
   oOperandPop
   ] or >
   ] or >
   >>
  ;TrapStmt
  ] or >
  }
  [ (tTrapBegin)
  | tTrapBegin:
  @TrapStmt
   oEmitSourceCoordinate
   [ (tLiteralAddress)
   | tLiteralAddress:
   @OperandPushVariable
    oOperandPushVariable
    [ (tVarParm)
    | *:
    [ (tVarParm)
    | *:
    [ (tVarParm)
    | *:
    >>
   ;OperandPushVariable
   oOperandPushCopy
   @OperandForceToStack
    [ oOperandChooseLength (two)
    | two:
    ] or >
    oEmitSingle(iPush)
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    oOperandPushMode(mStack)
    >>
   ;OperandForceToStack
   oOperandPop
   ?tVarParm (tVarParm)
   ?tParmEnd (tParmEnd)
   [ (tTrap)
   | tTrap:
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStatic)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   oOperandPushTrap
   oEmitSingle(iCall)
   oOperandPop
   oOperandPushMode(mStackReg)
   oOperandSetLength(two)
   oOperandPushMode(mManifest)
   oOperandSetLength(two)
   oOperandSetValue(four)
   oEmitDouble(iAdd)
   oOperandPop
   oOperandPop
   ] or >
   ] or >
   >>
  ;TrapStmt
  ] or >
  }
  [ (tWriteBegin)
  | tWriteBegin:
  @WriteProc
   oEmitSourceCoordinate
   [ (tTrapBegin)
   | *:
   @WriteParameter
    ?tTrapBegin (tTrapBegin)
    ?tLiteralAddress (tLiteralAddress)
    @OperandPushVariable
     oOperandPushVariable
     [ (tVarParm)
     | *:
     [ (tVarParm)
     | *:
     [ (tVarParm)
     | *:
     >>
    ;OperandPushVariable
    @OperandForceToStack
     [ oOperandChooseLength (two)
     | two:
     ] or >
     oEmitSingle(iPush)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mStack)
     >>
    ;OperandForceToStack
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStack)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ?tVarParm (tVarParm)
    ?tParmEnd (tParmEnd)
    @OperandPushExpression
     [ (tSkipString)
     | tSkipString:
     oEmitNone(iData)
     ?tStringData (tStringData)
     oEmitString
     oEmitNone(iText)
     ] or >
     }
     [ (tLiteralAddress)
     | tLiteralAddress:
     @OperandPushVariable
      oOperandPushVariable
      [ (tFetchChar)
      | *:
      [ (tFetchChar)
      | *:
      [ (tFetchChar)
      | tFetchChar:
      oOperandSetLength(regCX)
      ] or >
      >>
     ;OperandPushVariable
     ] or >
     }
     [ (tParmEnd)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    [ (tParmEnd)
    | *:
    @OperandForceToStack
     [ oOperandChooseLength (regCX)
     | regCX:
     @OperandForceAddressIntoTemp
      [ oOperandChooseMode (mStatic)
      | mStatic:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iLoada)
      oOperandPop
      ] or >
      oOperandSetLength(two)
      >>
     ;OperandForceAddressIntoTemp
     ] or >
     oEmitSingle(iPush)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mTemp)
      | mTemp:
      oTempFree
      ] or >
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mStack)
     >>
    ;OperandForceToStack
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStack)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ?tParmEnd (tParmEnd)
    @OperandPushExpression
     [ (tLiteralInteger)
     | tLiteralInteger:
     oOperandPushInteger
     ] or >
     }
     [ (tParmEnd)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    @OperandForceToStack
     [ oOperandChooseLength (two)
     | two:
     ] or >
     oEmitSingle(iPush)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mManifest)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mStack)
     >>
    ;OperandForceToStack
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStack)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ?tParmEnd (tParmEnd)
    ?tTrap (tTrap)
    oOperandPushTrap
    oEmitSingle(iCall)
    oOperandPop
    oOperandPushMode(mStackReg)
    oOperandSetLength(two)
    oOperandPushMode(mManifest)
    oOperandSetLength(two)
    oOperandSetValue(twelve)
    oEmitDouble(iAdd)
    oOperandPop
    oOperandPop
    >>
   ;WriteParameter
   }
   [ (tWriteEnd)
   | tWriteEnd:
   ] or >
   >>
  ;WriteProc
  ] or >
  }
  [ (tTrapBegin)
  | tTrapBegin:
  @TrapStmt
   oEmitSourceCoordinate
   [ (tLiteralAddress)
   | tLiteralAddress:
   @OperandPushVariable
    oOperandPushVariable
    [ (tVarParm)
    | *:
    [ (tVarParm)
    | *:
    [ (tVarParm)
    | *:
    >>
   ;OperandPushVariable
   oOperandPushCopy
   @OperandForceToStack
    [ oOperandChooseLength (two)
    | two:
    ] or >
    oEmitSingle(iPush)
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    oOperandPushMode(mStack)
    >>
   ;OperandForceToStack
   oOperandPop
   ?tVarParm (tVarParm)
   ?tParmEnd (tParmEnd)
   [ (tTrap)
   | tTrap:
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStatic)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   oOperandPushTrap
   oEmitSingle(iCall)
   oOperandPop
   oOperandPushMode(mStackReg)
   oOperandSetLength(two)
   oOperandPushMode(mManifest)
   oOperandSetLength(two)
   oOperandSetValue(four)
   oEmitDouble(iAdd)
   oOperandPop
   oOperandPop
   ] or >
   ] or >
   >>
  ;TrapStmt
  ] or >
  }
  [ (tWriteBegin)
  | tWriteBegin:
  @WriteProc
   oEmitSourceCoordinate
   [ (tTrapBegin)
   | *:
   @WriteParameter
    ?tTrapBegin (tTrapBegin)
    ?tLiteralAddress (tLiteralAddress)
    @OperandPushVariable
     oOperandPushVariable
     [ (tVarParm)
     | *:
     [ (tVarParm)
     | *:
     [ (tVarParm)
     | *:
     >>
    ;OperandPushVariable
    @OperandForceToStack
     [ oOperandChooseLength (two)
     | two:
     ] or >
     oEmitSingle(iPush)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mStack)
     >>
    ;OperandForceToStack
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStack)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ?tVarParm (tVarParm)
    ?tParmEnd (tParmEnd)
    @OperandPushExpression
     [ (tSkipString)
     | tSkipString:
     oEmitNone(iData)
     ?tStringData (tStringData)
     oEmitString
     oEmitNone(iText)
     ] or >
     }
     [ (tLiteralAddress)
     | tLiteralAddress:
     @OperandPushVariable
      oOperandPushVariable
      [ (tFetchChar)
      | *:
      [ (tFetchChar)
      | *:
      [ (tFetchChar)
      | tFetchChar:
      oOperandSetLength(regCX)
      ] or >
      >>
     ;OperandPushVariable
     ] or >
     }
     [ (tParmEnd)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    [ (tParmEnd)
    | *:
    @OperandForceToStack
     [ oOperandChooseLength (regCX)
     | regCX:
     @OperandForceAddressIntoTemp
      [ oOperandChooseMode (mStatic)
      | mStatic:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iLoada)
      oOperandPop
      ] or >
      oOperandSetLength(two)
      >>
     ;OperandForceAddressIntoTemp
     ] or >
     oEmitSingle(iPush)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mTemp)
      | mTemp:
      oTempFree
      ] or >
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mStack)
     >>
    ;OperandForceToStack
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStack)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ?tParmEnd (tParmEnd)
    @OperandPushExpression
     [ (tLiteralInteger)
     | tLiteralInteger:
     oOperandPushInteger
     ] or >
     }
     [ (tParmEnd)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    @OperandForceToStack
     [ oOperandChooseLength (two)
     | two:
     ] or >
     oEmitSingle(iPush)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mManifest)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mStack)
     >>
    ;OperandForceToStack
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStack)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ?tParmEnd (tParmEnd)
    ?tTrap (tTrap)
    oOperandPushTrap
    oEmitSingle(iCall)
    oOperandPop
    oOperandPushMode(mStackReg)
    oOperandSetLength(two)
    oOperandPushMode(mManifest)
    oOperandSetLength(two)
    oOperandSetValue(twelve)
    oEmitDouble(iAdd)
    oOperandPop
    oOperandPop
    >>
   ;WriteParameter
   }
   [ (tWriteEnd)
   | tWriteEnd:
   ] or >
   >>
  ;WriteProc
  ] or >
  }
  [ (tTrapBegin)
  | tTrapBegin:
  @TrapStmt
   oEmitSourceCoordinate
   [ (tLiteralAddress)
   | tLiteralAddress:
   @OperandPushVariable
    oOperandPushVariable
    [ (tVarParm)
    | *:
    [ (tVarParm)
    | *:
    [ (tVarParm)
    | *:
    >>
   ;OperandPushVariable
   oOperandPushCopy
   @OperandForceToStack
    [ oOperandChooseLength (two)
    | two:
    ] or >
    oEmitSingle(iPush)
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    oOperandPushMode(mStack)
    >>
   ;OperandForceToStack
   oOperandPop
   ?tVarParm (tVarParm)
   ?tParmEnd (tParmEnd)
   [ (tTrap)
   | tTrap:
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStatic)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   oOperandPushTrap
   oEmitSingle(iCall)
   oOperandPop
   oOperandPushMode(mStackReg)
   oOperandSetLength(two)
   oOperandPushMode(mManifest)
   oOperandSetLength(two)
   oOperandSetValue(four)
   oEmitDouble(iAdd)
   oOperandPop
   oOperandPop
   ] or >
   ] or >
   >>
  ;TrapStmt
  ] or >
  }
  [ (tWriteBegin)
  | tWriteBegin:
  @WriteProc
   oEmitSourceCoordinate
   [ (tTrapBegin)
   | *:
   @WriteParameter
    ?tTrapBegin (tTrapBegin)
    ?tLiteralAddress (tLiteralAddress)
    @OperandPushVariable
     oOperandPushVariable
     [ (tVarParm)
     | *:
     [ (tVarParm)
     | *:
     [ (tVarParm)
     | *:
     >>
    ;OperandPushVariable
    @OperandForceToStack
     [ oOperandChooseLength (two)
     | two:
     ] or >
     oEmitSingle(iPush)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mStack)
     >>
    ;OperandForceToStack
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStack)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ?tVarParm (tVarParm)
    ?tParmEnd (tParmEnd)
    @OperandPushExpression
     [ (tSkipString)
     | tSkipString:
     oEmitNone(iData)
     ?tStringData (tStringData)
     oEmitString
     oEmitNone(iText)
     ] or >
     }
     [ (tLiteralAddress)
     | tLiteralAddress:
     @OperandPushVariable
      oOperandPushVariable
      [ (tFetchChar)
      | *:
      [ (tFetchChar)
      | *:
      [ (tFetchChar)
      | tFetchChar:
      oOperandSetLength(regCX)
      ] or >
      >>
     ;OperandPushVariable
     ] or >
     }
     [ (tParmEnd)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    [ (tParmEnd)
    | *:
    @OperandForceToStack
     [ oOperandChooseLength (regCX)
     | regCX:
     @OperandForceAddressIntoTemp
      [ oOperandChooseMode (mStatic)
      | mStatic:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iLoada)
      oOperandPop
      ] or >
      oOperandSetLength(two)
      >>
     ;OperandForceAddressIntoTemp
     ] or >
     oEmitSingle(iPush)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mTemp)
      | mTemp:
      oTempFree
      ] or >
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mStack)
     >>
    ;OperandForceToStack
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStack)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ?tParmEnd (tParmEnd)
    @OperandPushExpression
     [ (tLiteralInteger)
     | tLiteralInteger:
     oOperandPushInteger
     ] or >
     }
     [ (tParmEnd)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    @OperandForceToStack
     [ oOperandChooseLength (two)
     | two:
     ] or >
     oEmitSingle(iPush)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mManifest)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mStack)
     >>
    ;OperandForceToStack
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStack)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ?tParmEnd (tParmEnd)
    ?tTrap (tTrap)
    oOperandPushTrap
    oEmitSingle(iCall)
    oOperandPop
    oOperandPushMode(mStackReg)
    oOperandSetLength(two)
    oOperandPushMode(mManifest)
    oOperandSetLength(two)
    oOperandSetValue(twelve)
    oEmitDouble(iAdd)
    oOperandPop
    oOperandPop
    >>
   ;WriteParameter
   }
   [ (tWriteEnd)
   | tWriteEnd:
   ] or >
   >>
  ;WriteProc
  ] or >
  }
  [ (tTrapBegin)
  | tTrapBegin:
  @TrapStmt
   oEmitSourceCoordinate
   [ (tLiteralAddress)
   | tLiteralAddress:
   @OperandPushVariable
    oOperandPushVariable
    [ (tVarParm)
    | *:
    [ (tVarParm)
    | *:
    [ (tVarParm)
    | *:
    >>
   ;OperandPushVariable
   oOperandPushCopy
   @OperandForceToStack
    [ oOperandChooseLength (two)
    | two:
    ] or >
    oEmitSingle(iPush)
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    oOperandPushMode(mStack)
    >>
   ;OperandForceToStack
   oOperandPop
   ?tVarParm (tVarParm)
   ?tParmEnd (tParmEnd)
   [ (tTrap)
   | tTrap:
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStatic)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   oOperandPushTrap
   oEmitSingle(iCall)
   oOperandPop
   oOperandPushMode(mStackReg)
   oOperandSetLength(two)
   oOperandPushMode(mManifest)
   oOperandSetLength(two)
   oOperandSetValue(four)
   oEmitDouble(iAdd)
   oOperandPop
   oOperandPop
   ] or >
   ] or >
   >>
  ;TrapStmt
  ] or >
  }
  [ (tWriteBegin)
  | tWriteBegin:
  @WriteProc
   oEmitSourceCoordinate
   [ (tTrapBegin)
   | *:
   @WriteParameter
    ?tTrapBegin (tTrapBegin)
    ?tLiteralAddress (tLiteralAddress)
    @OperandPushVariable
     oOperandPushVariable
     [ (tVarParm)
     | *:
     [ (tVarParm)
     | *:
     [ (tVarParm)
     | *:
     >>
    ;OperandPushVariable
    @OperandForceToStack
     [ oOperandChooseLength (two)
     | two:
     ] or >
     oEmitSingle(iPush)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mStack)
     >>
    ;OperandForceToStack
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStack)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ?tVarParm (tVarParm)
    ?tParmEnd (tParmEnd)
    @OperandPushExpression
     [ (tSkipString)
     | tSkipString:
     oEmitNone(iData)
     ?tStringData (tStringData)
     oEmitString
     oEmitNone(iText)
     ] or >
     }
     [ (tLiteralAddress)
     | tLiteralAddress:
     @OperandPushVariable
      oOperandPushVariable
      [ (tFetchChar)
      | *:
      [ (tFetchChar)
      | *:
      [ (tFetchChar)
      | tFetchChar:
      oOperandSetLength(regCX)
      ] or >
      >>
     ;OperandPushVariable
     ] or >
     }
     [ (tParmEnd)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    [ (tParmEnd)
    | *:
    @OperandForceToStack
     [ oOperandChooseLength (regCX)
     | regCX:
     @OperandForceAddressIntoTemp
      [ oOperandChooseMode (mStatic)
      | mStatic:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iLoada)
      oOperandPop
      ] or >
      oOperandSetLength(two)
      >>
     ;OperandForceAddressIntoTemp
     ] or >
     oEmitSingle(iPush)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mTemp)
      | mTemp:
      oTempFree
      ] or >
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mStack)
     >>
    ;OperandForceToStack
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStack)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ?tParmEnd (tParmEnd)
    @OperandPushExpression
     [ (tLiteralInteger)
     | tLiteralInteger:
     oOperandPushInteger
     ] or >
     }
     [ (tParmEnd)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    @OperandForceToStack
     [ oOperandChooseLength (two)
     | two:
     ] or >
     oEmitSingle(iPush)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mManifest)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mStack)
     >>
    ;OperandForceToStack
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStack)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ?tParmEnd (tParmEnd)
    ?tTrap (tTrap)
    oOperandPushTrap
    oEmitSingle(iCall)
    oOperandPop
    oOperandPushMode(mStackReg)
    oOperandSetLength(two)
    oOperandPushMode(mManifest)
    oOperandSetLength(two)
    oOperandSetValue(twelve)
    oEmitDouble(iAdd)
    oOperandPop
    oOperandPop
    >>
   ;WriteParameter
   }
   [ (tWriteEnd)
   | tWriteEnd:
   ] or >
   >>
  ;WriteProc
  ] or >
  }
  [ (tTrapBegin)
  | tTrapBegin:
  @TrapStmt
   oEmitSourceCoordinate
   [ (tLiteralAddress)
   | tLiteralAddress:
   @OperandPushVariable
    oOperandPushVariable
    [ (tVarParm)
    | *:
    [ (tVarParm)
    | *:
    [ (tVarParm)
    | *:
    >>
   ;OperandPushVariable
   oOperandPushCopy
   @OperandForceToStack
    [ oOperandChooseLength (two)
    | two:
    ] or >
    oEmitSingle(iPush)
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    oOperandPushMode(mStack)
    >>
   ;OperandForceToStack
   oOperandPop
   ?tVarParm (tVarParm)
   ?tParmEnd (tParmEnd)
   [ (tTrap)
   | tTrap:
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStatic)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   oOperandPushTrap
   oEmitSingle(iCall)
   oOperandPop
   oOperandPushMode(mStackReg)
   oOperandSetLength(two)
   oOperandPushMode(mManifest)
   oOperandSetLength(two)
   oOperandSetValue(four)
   oEmitDouble(iAdd)
   oOperandPop
   oOperandPop
   ] or >
   ] or >
   >>
  ;TrapStmt
  ] or >
  }
  [ (tTrapBegin)
  | tTrapBegin:
  @TrapStmt
   oEmitSourceCoordinate
   [ (tLiteralAddress)
   | tLiteralAddress:
   @OperandPushVariable
    oOperandPushVariable
    [ (tVarParm)
    | *:
    [ (tVarParm)
    | *:
    [ (tVarParm)
    | *:
    >>
   ;OperandPushVariable
   oOperandPushCopy
   @OperandForceToStack
    [ oOperandChooseLength (two)
    | two:
    ] or >
    oEmitSingle(iPush)
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    oOperandPushMode(mStack)
    >>
   ;OperandForceToStack
   oOperandPop
   ?tVarParm (tVarParm)
   ?tParmEnd (tParmEnd)
   [ (tTrap)
   | tTrap:
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStatic)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   oOperandPushTrap
   oEmitSingle(iCall)
   oOperandPop
   oOperandPushMode(mStackReg)
   oOperandSetLength(two)
   oOperandPushMode(mManifest)
   oOperandSetLength(two)
   oOperandSetValue(four)
   oEmitDouble(iAdd)
   oOperandPop
   oOperandPop
   ] or >
   ] or >
   >>
  ;TrapStmt
  ] or >
  }
  [ (tWriteBegin)
  | tWriteBegin:
  @WriteProc
   oEmitSourceCoordinate
   [ (tTrapBegin)
   | *:
   @WriteParameter
    ?tTrapBegin (tTrapBegin)
    ?tLiteralAddress (tLiteralAddress)
    @OperandPushVariable
     oOperandPushVariable
     [ (tVarParm)
     | *:
     [ (tVarParm)
     | *:
     [ (tVarParm)
     | *:
     >>
    ;OperandPushVariable
    @OperandForceToStack
     [ oOperandChooseLength (two)
     | two:
     ] or >
     oEmitSingle(iPush)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mStack)
     >>
    ;OperandForceToStack
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStack)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ?tVarParm (tVarParm)
    ?tParmEnd (tParmEnd)
    @OperandPushExpression
     [ (tSkipString)
     | tSkipString:
     oEmitNone(iData)
     ?tStringData (tStringData)
     oEmitString
     oEmitNone(iText)
     ] or >
     }
     [ (tLiteralAddress)
     | tLiteralAddress:
     @OperandPushVariable
      oOperandPushVariable
      [ (tFetchChar)
      | *:
      [ (tFetchChar)
      | *:
      [ (tFetchChar)
      | tFetchChar:
      oOperandSetLength(regCX)
      ] or >
      >>
     ;OperandPushVariable
     ] or >
     }
     [ (tParmEnd)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    [ (tParmEnd)
    | *:
    @OperandForceToStack
     [ oOperandChooseLength (regCX)
     | regCX:
     @OperandForceAddressIntoTemp
      [ oOperandChooseMode (mStatic)
      | mStatic:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iLoada)
      oOperandPop
      ] or >
      oOperandSetLength(two)
      >>
     ;OperandForceAddressIntoTemp
     ] or >
     oEmitSingle(iPush)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mTemp)
      | mTemp:
      oTempFree
      ] or >
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mStack)
     >>
    ;OperandForceToStack
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStack)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ?tParmEnd (tParmEnd)
    @OperandPushExpression
     [ (tLiteralInteger)
     | tLiteralInteger:
     oOperandPushInteger
     ] or >
     }
     [ (tParmEnd)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    @OperandForceToStack
     [ oOperandChooseLength (two)
     | two:
     ] or >
     oEmitSingle(iPush)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mManifest)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mStack)
     >>
    ;OperandForceToStack
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStack)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ?tParmEnd (tParmEnd)
    ?tTrap (tTrap)
    oOperandPushTrap
    oEmitSingle(iCall)
    oOperandPop
    oOperandPushMode(mStackReg)
    oOperandSetLength(two)
    oOperandPushMode(mManifest)
    oOperandSetLength(two)
    oOperandSetValue(twelve)
    oEmitDouble(iAdd)
    oOperandPop
    oOperandPop
    >>
   ;WriteParameter
   }
   [ (tTrapBegin)
   | *:
   @WriteParameter
    ?tTrapBegin (tTrapBegin)
    ?tLiteralAddress (tLiteralAddress)
    @OperandPushVariable
     oOperandPushVariable
     [ (tVarParm)
     | *:
     [ (tVarParm)
     | *:
     [ (tVarParm)
     | *:
     >>
    ;OperandPushVariable
    @OperandForceToStack
     [ oOperandChooseLength (two)
     | two:
     ] or >
     oEmitSingle(iPush)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mStack)
     >>
    ;OperandForceToStack
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStack)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ?tVarParm (tVarParm)
    ?tParmEnd (tParmEnd)
    @OperandPushExpression
     [ (tSkipString)
     | tSkipString:
     oEmitNone(iData)
     ?tStringData (tStringData)
     oEmitString
     oEmitNone(iText)
     ] or >
     }
     [ (tLiteralAddress)
     | tLiteralAddress:
     @OperandPushVariable
      oOperandPushVariable
      [ (tFetchChar)
      | *:
      [ (tFetchChar)
      | *:
      [ (tFetchChar)
      | tFetchChar:
      oOperandSetLength(regCX)
      ] or >
      >>
     ;OperandPushVariable
     ] or >
     }
     [ (tParmEnd)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    [ (tParmEnd)
    | *:
    @OperandForceToStack
     [ oOperandChooseLength (regCX)
     | regCX:
     @OperandForceAddressIntoTemp
      [ oOperandChooseMode (mStatic)
      | mStatic:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iLoada)
      oOperandPop
      ] or >
      oOperandSetLength(two)
      >>
     ;OperandForceAddressIntoTemp
     ] or >
     oEmitSingle(iPush)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mTemp)
      | mTemp:
      oTempFree
      ] or >
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mStack)
     >>
    ;OperandForceToStack
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStack)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ?tParmEnd (tParmEnd)
    @OperandPushExpression
     [ (tLiteralInteger)
     | tLiteralInteger:
     oOperandPushInteger
     ] or >
     }
     [ (tParmEnd)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    @OperandForceToStack
     [ oOperandChooseLength (two)
     | two:
     ] or >
     oEmitSingle(iPush)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mManifest)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mStack)
     >>
    ;OperandForceToStack
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStack)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ?tParmEnd (tParmEnd)
    ?tTrap (tTrap)
    oOperandPushTrap
    oEmitSingle(iCall)
    oOperandPop
    oOperandPushMode(mStackReg)
    oOperandSetLength(two)
    oOperandPushMode(mManifest)
    oOperandSetLength(two)
    oOperandSetValue(twelve)
    oEmitDouble(iAdd)
    oOperandPop
    oOperandPop
    >>
   ;WriteParameter
   }
   [ (tWriteEnd)
   | tWriteEnd:
   ] or >
   >>
  ;WriteProc
  ] or >
  }
  [ (tTrapBegin)
  | tTrapBegin:
  @TrapStmt
   oEmitSourceCoordinate
   [ (tLiteralAddress)
   | tLiteralAddress:
   @OperandPushVariable
    oOperandPushVariable
    [ (tVarParm)
    | *:
    [ (tVarParm)
    | *:
    [ (tVarParm)
    | *:
    >>
   ;OperandPushVariable
   oOperandPushCopy
   @OperandForceToStack
    [ oOperandChooseLength (two)
    | two:
    ] or >
    oEmitSingle(iPush)
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    oOperandPushMode(mStack)
    >>
   ;OperandForceToStack
   oOperandPop
   ?tVarParm (tVarParm)
   ?tParmEnd (tParmEnd)
   [ (tTrap)
   | tTrap:
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStatic)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   oOperandPushTrap
   oEmitSingle(iCall)
   oOperandPop
   oOperandPushMode(mStackReg)
   oOperandSetLength(two)
   oOperandPushMode(mManifest)
   oOperandSetLength(two)
   oOperandSetValue(four)
   oEmitDouble(iAdd)
   oOperandPop
   oOperandPop
   ] or >
   ] or >
   >>
  ;TrapStmt
  ] or >
  }
  [ (tWriteBegin)
  | tWriteBegin:
  @WriteProc
   oEmitSourceCoordinate
   [ (tTrapBegin)
   | *:
   @WriteParameter
    ?tTrapBegin (tTrapBegin)
    ?tLiteralAddress (tLiteralAddress)
    @OperandPushVariable
     oOperandPushVariable
     [ (tVarParm)
     | *:
     [ (tVarParm)
     | *:
     [ (tVarParm)
     | *:
     >>
    ;OperandPushVariable
    @OperandForceToStack
     [ oOperandChooseLength (two)
     | two:
     ] or >
     oEmitSingle(iPush)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mStack)
     >>
    ;OperandForceToStack
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStack)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ?tVarParm (tVarParm)
    ?tParmEnd (tParmEnd)
    @OperandPushExpression
     [ (tSkipString)
     | tSkipString:
     oEmitNone(iData)
     ?tStringData (tStringData)
     oEmitString
     oEmitNone(iText)
     ] or >
     }
     [ (tLiteralAddress)
     | tLiteralAddress:
     @OperandPushVariable
      oOperandPushVariable
      [ (tFetchChar)
      | *:
      [ (tFetchChar)
      | *:
      [ (tFetchChar)
      | tFetchChar:
      oOperandSetLength(regCX)
      ] or >
      >>
     ;OperandPushVariable
     ] or >
     }
     [ (tParmEnd)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    [ (tParmEnd)
    | *:
    @OperandForceToStack
     [ oOperandChooseLength (regCX)
     | regCX:
     @OperandForceAddressIntoTemp
      [ oOperandChooseMode (mStatic)
      | mStatic:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iLoada)
      oOperandPop
      ] or >
      oOperandSetLength(two)
      >>
     ;OperandForceAddressIntoTemp
     ] or >
     oEmitSingle(iPush)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mTemp)
      | mTemp:
      oTempFree
      ] or >
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mStack)
     >>
    ;OperandForceToStack
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStack)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ?tParmEnd (tParmEnd)
    @OperandPushExpression
     [ (tLiteralInteger)
     | tLiteralInteger:
     oOperandPushInteger
     ] or >
     }
     [ (tParmEnd)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    @OperandForceToStack
     [ oOperandChooseLength (two)
     | two:
     ] or >
     oEmitSingle(iPush)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mManifest)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mStack)
     >>
    ;OperandForceToStack
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStack)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ?tParmEnd (tParmEnd)
    ?tTrap (tTrap)
    oOperandPushTrap
    oEmitSingle(iCall)
    oOperandPop
    oOperandPushMode(mStackReg)
    oOperandSetLength(two)
    oOperandPushMode(mManifest)
    oOperandSetLength(two)
    oOperandSetValue(twelve)
    oEmitDouble(iAdd)
    oOperandPop
    oOperandPop
    >>
   ;WriteParameter
   }
   [ (tWriteEnd)
   | tWriteEnd:
   ] or >
   >>
  ;WriteProc
  ] or >
  }
  [ (tTrapBegin)
  | tTrapBegin:
  @TrapStmt
   oEmitSourceCoordinate
   [ (tLiteralAddress)
   | tLiteralAddress:
   @OperandPushVariable
    oOperandPushVariable
    [ (tVarParm)
    | *:
    [ (tVarParm)
    | *:
    [ (tVarParm)
    | *:
    >>
   ;OperandPushVariable
   oOperandPushCopy
   @OperandForceToStack
    [ oOperandChooseLength (two)
    | two:
    ] or >
    oEmitSingle(iPush)
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    oOperandPushMode(mStack)
    >>
   ;OperandForceToStack
   oOperandPop
   ?tVarParm (tVarParm)
   ?tParmEnd (tParmEnd)
   [ (tTrap)
   | tTrap:
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStatic)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   oOperandPushTrap
   oEmitSingle(iCall)
   oOperandPop
   oOperandPushMode(mStackReg)
   oOperandSetLength(two)
   oOperandPushMode(mManifest)
   oOperandSetLength(two)
   oOperandSetValue(four)
   oEmitDouble(iAdd)
   oOperandPop
   oOperandPop
   ] or >
   ] or >
   >>
  ;TrapStmt
  ] or >
  }
  [ (tTrapBegin)
  | tTrapBegin:
  @TrapStmt
   oEmitSourceCoordinate
   [ (tLiteralAddress)
   | tLiteralAddress:
   @OperandPushVariable
    oOperandPushVariable
    [ (tVarParm)
    | *:
    [ (tVarParm)
    | *:
    [ (tVarParm)
    | *:
    >>
   ;OperandPushVariable
   oOperandPushCopy
   @OperandForceToStack
    [ oOperandChooseLength (two)
    | two:
    ] or >
    oEmitSingle(iPush)
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    oOperandPushMode(mStack)
    >>
   ;OperandForceToStack
   oOperandPop
   ?tVarParm (tVarParm)
   ?tParmEnd (tParmEnd)
   [ (tTrap)
   | tTrap:
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStatic)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   oOperandPushTrap
   oEmitSingle(iCall)
   oOperandPop
   oOperandPushMode(mStackReg)
   oOperandSetLength(two)
   oOperandPushMode(mManifest)
   oOperandSetLength(two)
   oOperandSetValue(four)
   oEmitDouble(iAdd)
   oOperandPop
   oOperandPop
   ] or >
   ] or >
   >>
  ;TrapStmt
  ] or >
  }
  [ (tWriteBegin)
  | tWriteBegin:
  @WriteProc
   oEmitSourceCoordinate
   [ (tTrapBegin)
   | *:
   @WriteParameter
    ?tTrapBegin (tTrapBegin)
    ?tLiteralAddress (tLiteralAddress)
    @OperandPushVariable
     oOperandPushVariable
     [ (tVarParm)
     | *:
     [ (tVarParm)
     | *:
     [ (tVarParm)
     | *:
     >>
    ;OperandPushVariable
    @OperandForceToStack
     [ oOperandChooseLength (two)
     | two:
     ] or >
     oEmitSingle(iPush)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mStack)
     >>
    ;OperandForceToStack
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStack)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ?tVarParm (tVarParm)
    ?tParmEnd (tParmEnd)
    @OperandPushExpression
     [ (tSkipString)
     | tSkipString:
     oEmitNone(iData)
     ?tStringData (tStringData)
     oEmitString
     oEmitNone(iText)
     ] or >
     }
     [ (tLiteralAddress)
     | tLiteralAddress:
     @OperandPushVariable
      oOperandPushVariable
      [ (tFetchChar)
      | *:
      [ (tFetchChar)
      | *:
      [ (tFetchChar)
      | tFetchChar:
      oOperandSetLength(regCX)
      ] or >
      >>
     ;OperandPushVariable
     ] or >
     }
     [ (tParmEnd)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    [ (tParmEnd)
    | *:
    @OperandForceToStack
     [ oOperandChooseLength (regCX)
     | regCX:
     @OperandForceAddressIntoTemp
      [ oOperandChooseMode (mStatic)
      | mStatic:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iLoada)
      oOperandPop
      ] or >
      oOperandSetLength(two)
      >>
     ;OperandForceAddressIntoTemp
     ] or >
     oEmitSingle(iPush)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mTemp)
      | mTemp:
      oTempFree
      ] or >
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mStack)
     >>
    ;OperandForceToStack
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStack)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ?tParmEnd (tParmEnd)
    @OperandPushExpression
     [ (tLiteralInteger)
     | tLiteralInteger:
     oOperandPushInteger
     ] or >
     }
     [ (tParmEnd)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    @OperandForceToStack
     [ oOperandChooseLength (two)
     | two:
     ] or >
     oEmitSingle(iPush)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mManifest)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mStack)
     >>
    ;OperandForceToStack
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStack)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ?tParmEnd (tParmEnd)
    ?tTrap (tTrap)
    oOperandPushTrap
    oEmitSingle(iCall)
    oOperandPop
    oOperandPushMode(mStackReg)
    oOperandSetLength(two)
    oOperandPushMode(mManifest)
    oOperandSetLength(two)
    oOperandSetValue(twelve)
    oEmitDouble(iAdd)
    oOperandPop
    oOperandPop
    >>
   ;WriteParameter
   }
   [ (tWriteEnd)
   | tWriteEnd:
   ] or >
   >>
  ;WriteProc
  ] or >
  }
  [ (tTrapBegin)
  | tTrapBegin:
  @TrapStmt
   oEmitSourceCoordinate
   [ (tLiteralAddress)
   | tLiteralAddress:
   @OperandPushVariable
    oOperandPushVariable
    [ (tVarParm)
    | *:
    [ (tVarParm)
    | *:
    [ (tVarParm)
    | *:
    >>
   ;OperandPushVariable
   oOperandPushCopy
   @OperandForceToStack
    [ oOperandChooseLength (two)
    | two:
    ] or >
    oEmitSingle(iPush)
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    oOperandPushMode(mStack)
    >>
   ;OperandForceToStack
   oOperandPop
   ?tVarParm (tVarParm)
   ?tParmEnd (tParmEnd)
   [ (tTrap)
   | tTrap:
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStatic)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   oOperandPushTrap
   oEmitSingle(iCall)
   oOperandPop
   oOperandPushMode(mStackReg)
   oOperandSetLength(two)
   oOperandPushMode(mManifest)
   oOperandSetLength(two)
   oOperandSetValue(four)
   oEmitDouble(iAdd)
   oOperandPop
   oOperandPop
   ] or >
   ] or >
   >>
  ;TrapStmt
  ] or >
  }
  [ (tCallBegin)
  | tCallBegin:
  @CallStmt
   oEmitSourceCoordinate
   oOperandPushMode(mManifest)
   oOperandSetLength(two)
   oOperandSetValue(zero)
   [ (tLiteralAddress)
   | *:
   @OperandPushExpression
    [ (tLiteralAddress)
    | tLiteralAddress:
    @OperandPushVariable
     oOperandPushVariable
     [ (tVarParm)
     | *:
     [ (tVarParm)
     | *:
     [ (tVarParm)
     | *:
     >>
    ;OperandPushVariable
    ] or >
    }
    [ (tVarParm)
    | *:
    ] or >
    >>
   ;OperandPushExpression
   @OperandConvertJumpConditionToData
    [ oOperandIsJumpCondition (no)
    | no:
    ] or >
    >>
   ;OperandConvertJumpConditionToData
   [ (tVarParm)
   | tVarParm:
   @OperandForceAddressIntoTemp
    [ oOperandChooseMode (mStatic)
    | mStatic:
    @OperandPushTempWord
     oTempAllocate
     oOperandPushTemp
     oOperandSetValue(zero)
     oOperandSetLength(two)
     >>
    ;OperandPushTempWord
    oOperandSwap
    oEmitDouble(iLoada)
    oOperandPop
    ] or >
    oOperandSetLength(two)
    >>
   ;OperandForceAddressIntoTemp
   @OperandForceToStack
    [ oOperandChooseLength (two)
    | two:
    ] or >
    oEmitSingle(iPush)
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mTemp)
     | mTemp:
     oTempFree
     ] or >
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    oOperandPushMode(mStack)
    >>
   ;OperandForceToStack
   ] or >
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStack)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   ?tParmEnd (tParmEnd)
   oOperandPushMode(mManifest)
   oOperandSetLength(two)
   oOperandSetValue(four)
   oOperandAddManifestValues
   oOperandPop
   }
   [ (tCallEnd)
   | tCallEnd:
   ] or >
   oOperandPushProcedure
   oOperandSetMode(mProc)
   oEmitSingle(iCall)
   oOperandPop
   oOperandPushMode(mStackReg)
   oOperandSetLength(two)
   oOperandSwap
   oEmitDouble(iAdd)
   oOperandPop
   oOperandPop
   oEmitMergeSourceCoordinate
   >>
  ;CallStmt
  ] or >
  }
  [ (tWhileBegin)
  | tWhileBegin:
  @WhileStmt
   oFixPushAddress
   oEmitMergeSourceCoordinate
   @OperandPushBooleanControlExpression
    @OperandPushExpression
     [ (tLiteralAddress)
     | tLiteralAddress:
     @OperandPushVariable
      oOperandPushVariable
      [ (tFetchBoolean)
      | *:
      [ (tFetchBoolean)
      | *:
      [ (tFetchBoolean)
      | tFetchBoolean:
      oOperandSetLength(one)
      ] or >
      >>
     ;OperandPushVariable
     ] or >
     }
     [ (tWhileTest)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    @OperandForceToJumpCondition
     [ oOperandIsJumpCondition (no)
     | *:
     [ oOperandChooseManifestValue ()
     | *:
     @EmitTst
      [ oOperandChooseLength (one)
      | one:
      oOperandPushMode(mManifest)
      oOperandSetValue(zero)
      oOperandSetLength(one)
      ] or >
      @EmitCmp
       oOperandSwap
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandSwap
       @OperandLeftOrRightIsTemp
        [ oOperandChooseMode (mManifest)
        | *:
        oOperandSwap
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandSwap
        >>no
       ;OperandLeftOrRightIsTemp
       [@OperandLeftOrRightIsTemp (no)
       | *:
       [ oOperandChooseMode (mManifest)
       | mManifest:
       oEmitDouble(iCmp)
       ] or >
       >>
      ;EmitCmp
      oOperandPop
      >>
     ;EmitTst
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushJumpCondition(iJne)
     >>
    ;OperandForceToJumpCondition
    >>
   ;OperandPushBooleanControlExpression
   ?tWhileTest (tWhileTest)
   @OperandComplementJumpCondition
    [ oOperandChooseJumpCondition (iJne)
    | *:
    oOperandComplementJumpCondition
    >>
   ;OperandComplementJumpCondition
   [ oOperandChooseJumpCondition (iJeq)
   | *:
   @OperandInfixOr
    @OperandForceToJumpCondition
     [ oOperandIsJumpCondition (yes)
     | yes:
     ] or >
     >>
    ;OperandForceToJumpCondition
    [ oOperandChooseJumpCondition (iJeq)
    | *:
    oEmitConditionalForwardBranch
    oFixAndFreeFalseBranches
    oFixPushLastAddress
    oOperandMergeShuntsWithAddress
    oFixPopAddress
    >>
   ;OperandInfixOr
   @Statements
    @Block
     [ (tCallBegin)
     | tCallBegin:
     @CallStmt
      oEmitSourceCoordinate
      oOperandPushMode(mManifest)
      oOperandSetLength(two)
      oOperandSetValue(zero)
      [ (tCallEnd)
      | tCallEnd:
      ] or >
      oOperandPushProcedure
      oOperandSetMode(mProc)
      oEmitSingle(iCall)
      oOperandPop
      oOperandPushMode(mStackReg)
      oOperandSetLength(two)
      oOperandSwap
      oEmitDouble(iAdd)
      oOperandPop
      oOperandPop
      oEmitMergeSourceCoordinate
      >>
     ;CallStmt
     ] or >
     }
     [ (tCallBegin)
     | tCallBegin:
     @CallStmt
      oEmitSourceCoordinate
      oOperandPushMode(mManifest)
      oOperandSetLength(two)
      oOperandSetValue(zero)
      [ (tLiteralAddress)
      | *:
      @OperandPushExpression
       [ (tLiteralAddress)
       | tLiteralAddress:
       @OperandPushVariable
        oOperandPushVariable
        [ (tVarParm)
        | *:
        [ (tVarParm)
        | *:
        [ (tVarParm)
        | *:
        >>
       ;OperandPushVariable
       ] or >
       }
       [ (tVarParm)
       | *:
       ] or >
       >>
      ;OperandPushExpression
      @OperandConvertJumpConditionToData
       [ oOperandIsJumpCondition (no)
       | no:
       ] or >
       >>
      ;OperandConvertJumpConditionToData
      [ (tVarParm)
      | tVarParm:
      @OperandForceAddressIntoTemp
       [ oOperandChooseMode (mStatic)
       | mStatic:
       @OperandPushTempWord
        oTempAllocate
        oOperandPushTemp
        oOperandSetValue(zero)
        oOperandSetLength(two)
        >>
       ;OperandPushTempWord
       oOperandSwap
       oEmitDouble(iLoada)
       oOperandPop
       ] or >
       oOperandSetLength(two)
       >>
      ;OperandForceAddressIntoTemp
      @OperandForceToStack
       [ oOperandChooseLength (two)
       | two:
       ] or >
       oEmitSingle(iPush)
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mTemp)
        | mTemp:
        oTempFree
        ] or >
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandPushMode(mStack)
       >>
      ;OperandForceToStack
      ] or >
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStack)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      ?tParmEnd (tParmEnd)
      oOperandPushMode(mManifest)
      oOperandSetLength(two)
      oOperandSetValue(four)
      oOperandAddManifestValues
      oOperandPop
      }
      [ (tCallEnd)
      | tCallEnd:
      ] or >
      oOperandPushProcedure
      oOperandSetMode(mProc)
      oEmitSingle(iCall)
      oOperandPop
      oOperandPushMode(mStackReg)
      oOperandSetLength(two)
      oOperandSwap
      oEmitDouble(iAdd)
      oOperandPop
      oOperandPop
      oEmitMergeSourceCoordinate
      >>
     ;CallStmt
     ] or >
     }
     [ (tWhileBegin)
     | tWhileBegin:
     @WhileStmt
      oFixPushAddress
      oEmitMergeSourceCoordinate
      @OperandPushBooleanControlExpression
       @OperandPushExpression
        [ (tLiteralAddress)
        | tLiteralAddress:
        @OperandPushVariable
         oOperandPushVariable
         [ (tFetchBoolean)
         | *:
         [ (tFetchBoolean)
         | *:
         [ (tFetchBoolean)
         | tFetchBoolean:
         oOperandSetLength(one)
         ] or >
         >>
        ;OperandPushVariable
        ] or >
        }
        [ (tWhileTest)
        | *:
        ] or >
        >>
       ;OperandPushExpression
       @OperandForceToJumpCondition
        [ oOperandIsJumpCondition (no)
        | *:
        [ oOperandChooseManifestValue ()
        | *:
        @EmitTst
         [ oOperandChooseLength (one)
         | one:
         oOperandPushMode(mManifest)
         oOperandSetValue(zero)
         oOperandSetLength(one)
         ] or >
         @EmitCmp
          oOperandSwap
          [ oOperandChooseMode (mStatic)
          | *:
          oOperandSwap
          @OperandLeftOrRightIsTemp
           [ oOperandChooseMode (mManifest)
           | *:
           oOperandSwap
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandSwap
           >>no
          ;OperandLeftOrRightIsTemp
          [@OperandLeftOrRightIsTemp (no)
          | *:
          [ oOperandChooseMode (mManifest)
          | mManifest:
          oEmitDouble(iCmp)
          ] or >
          >>
         ;EmitCmp
         oOperandPop
         >>
        ;EmitTst
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        oOperandPushJumpCondition(iJne)
        >>
       ;OperandForceToJumpCondition
       >>
      ;OperandPushBooleanControlExpression
      ?tWhileTest (tWhileTest)
      @OperandComplementJumpCondition
       [ oOperandChooseJumpCondition (iJne)
       | *:
       oOperandComplementJumpCondition
       >>
      ;OperandComplementJumpCondition
      [ oOperandChooseJumpCondition (iJeq)
      | *:
      @OperandInfixOr
       @OperandForceToJumpCondition
        [ oOperandIsJumpCondition (yes)
        | yes:
        ] or >
        >>
       ;OperandForceToJumpCondition
       [ oOperandChooseJumpCondition (iJeq)
       | *:
       oEmitConditionalForwardBranch
       oFixAndFreeFalseBranches
       oFixPushLastAddress
       oOperandMergeShuntsWithAddress
       oFixPopAddress
       >>
      ;OperandInfixOr
      @Statements
       @Block
        [ (tCallBegin)
        | tCallBegin:
        @CallStmt
         oEmitSourceCoordinate
         oOperandPushMode(mManifest)
         oOperandSetLength(two)
         oOperandSetValue(zero)
         [ (tCallEnd)
         | tCallEnd:
         ] or >
         oOperandPushProcedure
         oOperandSetMode(mProc)
         oEmitSingle(iCall)
         oOperandPop
         oOperandPushMode(mStackReg)
         oOperandSetLength(two)
         oOperandSwap
         oEmitDouble(iAdd)
         oOperandPop
         oOperandPop
         oEmitMergeSourceCoordinate
         >>
        ;CallStmt
        ] or >
        }
        [ (tWhileBegin)
        | tWhileBegin:
        @WhileStmt
         oFixPushAddress
         oEmitMergeSourceCoordinate
         @OperandPushBooleanControlExpression
          @OperandPushExpression
           [ (tLiteralAddress)
           | tLiteralAddress:
           @OperandPushVariable
            oOperandPushVariable
            [ (tFetchBoolean)
            | *:
            [ (tFetchBoolean)
            | *:
            [ (tFetchBoolean)
            | tFetchBoolean:
            oOperandSetLength(one)
            ] or >
            >>
           ;OperandPushVariable
           ] or >
           }
           [ (tNot)
           | tNot:
           @OperandNot
            @OperandForceToJumpCondition
             [ oOperandIsJumpCondition (no)
             | *:
             [ oOperandChooseManifestValue ()
             | *:
             @EmitTst
              [ oOperandChooseLength (one)
              | one:
              oOperandPushMode(mManifest)
              oOperandSetValue(zero)
              oOperandSetLength(one)
              ] or >
              @EmitCmp
               oOperandSwap
               [ oOperandChooseMode (mStatic)
               | *:
               oOperandSwap
               @OperandLeftOrRightIsTemp
                [ oOperandChooseMode (mManifest)
                | *:
                oOperandSwap
                [ oOperandChooseMode (mStatic)
                | *:
                oOperandSwap
                >>no
               ;OperandLeftOrRightIsTemp
               [@OperandLeftOrRightIsTemp (no)
               | *:
               [ oOperandChooseMode (mManifest)
               | mManifest:
               oEmitDouble(iCmp)
               ] or >
               >>
              ;EmitCmp
              oOperandPop
              >>
             ;EmitTst
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mStatic)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandPushJumpCondition(iJne)
             >>
            ;OperandForceToJumpCondition
            @OperandComplementJumpCondition
             [ oOperandChooseJumpCondition (iJne)
             | *:
             oOperandComplementJumpCondition
             >>
            ;OperandComplementJumpCondition
            >>
           ;OperandNot
           ] or >
           }
           [ (tWhileTest)
           | *:
           ] or >
           >>
          ;OperandPushExpression
          @OperandForceToJumpCondition
           [ oOperandIsJumpCondition (yes)
           | yes:
           ] or >
           >>
          ;OperandForceToJumpCondition
          >>
         ;OperandPushBooleanControlExpression
         ?tWhileTest (tWhileTest)
         @OperandComplementJumpCondition
          [ oOperandChooseJumpCondition (iJeq)
          | *:
          oOperandComplementJumpCondition
          >>
         ;OperandComplementJumpCondition
         [ oOperandChooseJumpCondition (iJne)
         | *:
         @OperandInfixOr
          @OperandForceToJumpCondition
           [ oOperandIsJumpCondition (yes)
           | yes:
           ] or >
           >>
          ;OperandForceToJumpCondition
          [ oOperandChooseJumpCondition (iJne)
          | *:
          oEmitConditionalForwardBranch
          oFixAndFreeFalseBranches
          oFixPushLastAddress
          oOperandMergeShuntsWithAddress
          oFixPopAddress
          >>
         ;OperandInfixOr
         @Statements
          @Block
           [ (tCallBegin)
           | tCallBegin:
           @CallStmt
            oEmitSourceCoordinate
            oOperandPushMode(mManifest)
            oOperandSetLength(two)
            oOperandSetValue(zero)
            [ (tCallEnd)
            | tCallEnd:
            ] or >
            oOperandPushProcedure
            oOperandSetMode(mProc)
            oEmitSingle(iCall)
            oOperandPop
            oOperandPushMode(mStackReg)
            oOperandSetLength(two)
            oOperandSwap
            oEmitDouble(iAdd)
            oOperandPop
            oOperandPop
            oEmitMergeSourceCoordinate
            >>
           ;CallStmt
           ] or >
           }
           [ (tWhileEnd)
           | *:
           ] or >
           >>
          ;Block
          >>
         ;Statements
         ?tWhileEnd (tWhileEnd)
         oEmitUnconditionalBackwardBranch
         oFixPopAddress
         oFixAndFreeShuntList
         oOperandPop
         >>
        ;WhileStmt
        ] or >
        }
        [ (tWhileBegin)
        | tWhileBegin:
        @WhileStmt
         oFixPushAddress
         oEmitMergeSourceCoordinate
         @OperandPushBooleanControlExpression
          @OperandPushExpression
           [ (tLiteralAddress)
           | tLiteralAddress:
           @OperandPushVariable
            oOperandPushVariable
            [ (tFetchBoolean)
            | *:
            [ (tFetchBoolean)
            | *:
            [ (tFetchBoolean)
            | tFetchBoolean:
            oOperandSetLength(one)
            ] or >
            >>
           ;OperandPushVariable
           ] or >
           }
           [ (tNot)
           | tNot:
           @OperandNot
            @OperandForceToJumpCondition
             [ oOperandIsJumpCondition (no)
             | *:
             [ oOperandChooseManifestValue ()
             | *:
             @EmitTst
              [ oOperandChooseLength (one)
              | one:
              oOperandPushMode(mManifest)
              oOperandSetValue(zero)
              oOperandSetLength(one)
              ] or >
              @EmitCmp
               oOperandSwap
               [ oOperandChooseMode (mStatic)
               | *:
               oOperandSwap
               @OperandLeftOrRightIsTemp
                [ oOperandChooseMode (mManifest)
                | *:
                oOperandSwap
                [ oOperandChooseMode (mStatic)
                | *:
                oOperandSwap
                >>no
               ;OperandLeftOrRightIsTemp
               [@OperandLeftOrRightIsTemp (no)
               | *:
               [ oOperandChooseMode (mManifest)
               | mManifest:
               oEmitDouble(iCmp)
               ] or >
               >>
              ;EmitCmp
              oOperandPop
              >>
             ;EmitTst
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mStatic)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandPushJumpCondition(iJne)
             >>
            ;OperandForceToJumpCondition
            @OperandComplementJumpCondition
             [ oOperandChooseJumpCondition (iJne)
             | *:
             oOperandComplementJumpCondition
             >>
            ;OperandComplementJumpCondition
            >>
           ;OperandNot
           ] or >
           }
           [ (tWhileTest)
           | *:
           ] or >
           >>
          ;OperandPushExpression
          @OperandForceToJumpCondition
           [ oOperandIsJumpCondition (yes)
           | yes:
           ] or >
           >>
          ;OperandForceToJumpCondition
          >>
         ;OperandPushBooleanControlExpression
         ?tWhileTest (tWhileTest)
         @OperandComplementJumpCondition
          [ oOperandChooseJumpCondition (iJeq)
          | *:
          oOperandComplementJumpCondition
          >>
         ;OperandComplementJumpCondition
         [ oOperandChooseJumpCondition (iJne)
         | *:
         @OperandInfixOr
          @OperandForceToJumpCondition
           [ oOperandIsJumpCondition (yes)
           | yes:
           ] or >
           >>
          ;OperandForceToJumpCondition
          [ oOperandChooseJumpCondition (iJne)
          | *:
          oEmitConditionalForwardBranch
          oFixAndFreeFalseBranches
          oFixPushLastAddress
          oOperandMergeShuntsWithAddress
          oFixPopAddress
          >>
         ;OperandInfixOr
         @Statements
          @Block
           [ (tCallBegin)
           | tCallBegin:
           @CallStmt
            oEmitSourceCoordinate
            oOperandPushMode(mManifest)
            oOperandSetLength(two)
            oOperandSetValue(zero)
            [ (tCallEnd)
            | tCallEnd:
            ] or >
            oOperandPushProcedure
            oOperandSetMode(mProc)
            oEmitSingle(iCall)
            oOperandPop
            oOperandPushMode(mStackReg)
            oOperandSetLength(two)
            oOperandSwap
            oEmitDouble(iAdd)
            oOperandPop
            oOperandPop
            oEmitMergeSourceCoordinate
            >>
           ;CallStmt
           ] or >
           }
           [ (tWhileEnd)
           | *:
           ] or >
           >>
          ;Block
          >>
         ;Statements
         ?tWhileEnd (tWhileEnd)
         oEmitUnconditionalBackwardBranch
         oFixPopAddress
         oFixAndFreeShuntList
         oOperandPop
         >>
        ;WhileStmt
        ] or >
        }
        [ (tCallBegin)
        | tCallBegin:
        @CallStmt
         oEmitSourceCoordinate
         oOperandPushMode(mManifest)
         oOperandSetLength(two)
         oOperandSetValue(zero)
         [ (tLiteralAddress)
         | *:
         @OperandPushExpression
          [ (tLiteralAddress)
          | tLiteralAddress:
          @OperandPushVariable
           oOperandPushVariable
           [ (tVarParm)
           | *:
           [ (tVarParm)
           | *:
           [ (tVarParm)
           | *:
           >>
          ;OperandPushVariable
          ] or >
          }
          [ (tVarParm)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         @OperandConvertJumpConditionToData
          [ oOperandIsJumpCondition (no)
          | no:
          ] or >
          >>
         ;OperandConvertJumpConditionToData
         [ (tVarParm)
         | tVarParm:
         @OperandForceAddressIntoTemp
          [ oOperandChooseMode (mStatic)
          | mStatic:
          @OperandPushTempWord
           oTempAllocate
           oOperandPushTemp
           oOperandSetValue(zero)
           oOperandSetLength(two)
           >>
          ;OperandPushTempWord
          oOperandSwap
          oEmitDouble(iLoada)
          oOperandPop
          ] or >
          oOperandSetLength(two)
          >>
         ;OperandForceAddressIntoTemp
         @OperandForceToStack
          [ oOperandChooseLength (two)
          | two:
          ] or >
          oEmitSingle(iPush)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mTemp)
           | mTemp:
           oTempFree
           ] or >
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandPushMode(mStack)
          >>
         ;OperandForceToStack
         ] or >
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStack)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ?tParmEnd (tParmEnd)
         oOperandPushMode(mManifest)
         oOperandSetLength(two)
         oOperandSetValue(four)
         oOperandAddManifestValues
         oOperandPop
         }
         [ (tCallEnd)
         | tCallEnd:
         ] or >
         oOperandPushProcedure
         oOperandSetMode(mProc)
         oEmitSingle(iCall)
         oOperandPop
         oOperandPushMode(mStackReg)
         oOperandSetLength(two)
         oOperandSwap
         oEmitDouble(iAdd)
         oOperandPop
         oOperandPop
         oEmitMergeSourceCoordinate
         >>
        ;CallStmt
        ] or >
        }
        [ (tWhileEnd)
        | *:
        ] or >
        >>
       ;Block
       >>
      ;Statements
      ?tWhileEnd (tWhileEnd)
      oEmitUnconditionalBackwardBranch
      oFixPopAddress
      oFixAndFreeShuntList
      oOperandPop
      >>
     ;WhileStmt
     ] or >
     }
     [ (tCallBegin)
     | tCallBegin:
     @CallStmt
      oEmitSourceCoordinate
      oOperandPushMode(mManifest)
      oOperandSetLength(two)
      oOperandSetValue(zero)
      [ (tLiteralAddress)
      | *:
      @OperandPushExpression
       [ (tLiteralAddress)
       | tLiteralAddress:
       @OperandPushVariable
        oOperandPushVariable
        [ (tVarParm)
        | *:
        [ (tVarParm)
        | *:
        [ (tVarParm)
        | *:
        >>
       ;OperandPushVariable
       ] or >
       }
       [ (tVarParm)
       | *:
       ] or >
       >>
      ;OperandPushExpression
      @OperandConvertJumpConditionToData
       [ oOperandIsJumpCondition (no)
       | no:
       ] or >
       >>
      ;OperandConvertJumpConditionToData
      [ (tVarParm)
      | tVarParm:
      @OperandForceAddressIntoTemp
       [ oOperandChooseMode (mStatic)
       | mStatic:
       @OperandPushTempWord
        oTempAllocate
        oOperandPushTemp
        oOperandSetValue(zero)
        oOperandSetLength(two)
        >>
       ;OperandPushTempWord
       oOperandSwap
       oEmitDouble(iLoada)
       oOperandPop
       ] or >
       oOperandSetLength(two)
       >>
      ;OperandForceAddressIntoTemp
      @OperandForceToStack
       [ oOperandChooseLength (two)
       | two:
       ] or >
       oEmitSingle(iPush)
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mTemp)
        | mTemp:
        oTempFree
        ] or >
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandPushMode(mStack)
       >>
      ;OperandForceToStack
      ] or >
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStack)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      ?tParmEnd (tParmEnd)
      oOperandPushMode(mManifest)
      oOperandSetLength(two)
      oOperandSetValue(four)
      oOperandAddManifestValues
      oOperandPop
      }
      [ (tCallEnd)
      | tCallEnd:
      ] or >
      oOperandPushProcedure
      oOperandSetMode(mProc)
      oEmitSingle(iCall)
      oOperandPop
      oOperandPushMode(mStackReg)
      oOperandSetLength(two)
      oOperandSwap
      oEmitDouble(iAdd)
      oOperandPop
      oOperandPop
      oEmitMergeSourceCoordinate
      >>
     ;CallStmt
     ] or >
     }
     [ (tWhileEnd)
     | *:
     ] or >
     >>
    ;Block
    >>
   ;Statements
   ?tWhileEnd (tWhileEnd)
   oEmitUnconditionalBackwardBranch
   oFixPopAddress
   oFixAndFreeShuntList
   oOperandPop
   >>
  ;WhileStmt
  ] or >
  }
  [ (tTrapBegin)
  | tTrapBegin:
  @TrapStmt
   oEmitSourceCoordinate
   [ (tTrap)
   | *:
   ?tTrap (tTrap)
   oOperandPushTrap
   oEmitSingle(iCall)
   oOperandPop
   >>
  ;TrapStmt
  ] or >
  }
  [ (tEndOfFile)
  | *:
  ] or >
  >>
 ;Block
 @EmitProgramEpilogue
  oEmitNone(iLeave)
  oEmitNone(iReturn)
  >>
 ;EmitProgramEpilogue
 >>
;Program
