@Program
 @EmitProgramPrologue
  oEmitNone(iData)
  oOperandPushMode(mWord)
  oOperandSetLength(two)
  oOperandEnterValueFromDataAreaSize
  oOperandPushMode(mGlobalBase)
  oEmitDouble(iSpace)
  oOperandPop
  oOperandPop
  oEmitProcLabel(mLineNum)
  oOperandPushMode(mWord)
  oOperandSetLength(two)
  oOperandSetValue(zero)
  oEmitSingle(iWord)
  oOperandPop
  oEmitNone(iText)
  oOperandPushMode(mMainProc)
  oEmitSingle(iGlobl)
  oEmitProcLabel(mMainProc)
  oOperandPop
  oEmitNone(iEnter)
  >>
 ;EmitProgramPrologue
 @Block
  [ (tFileDescriptor)
  | tFileDescriptor:
  ?tLiteralInteger (tLiteralInteger)
  oOperandPushInteger
  ?tFileBind (tFileBind)
  ?tLiteralAddress (tLiteralAddress)
  oOperandPushVariable
  ?tStoreInteger (tStoreInteger)
  oOperandSwap
  @OperandAssignIntegerPopPop
   [ oOperandCompareLeftAndRight (no)
   | no:
   @EmitMove
    @OperandLeftOrRightIsTemp
     [ oOperandChooseMode (mManifest)
     | *:
     oOperandSwap
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandSwap
     >>no
    ;OperandLeftOrRightIsTemp
    [@OperandLeftOrRightIsTemp (no)
    | *:
    [ oOperandChooseMode (mManifest)
    | mManifest:
    oEmitDouble(iMov)
    ] or >
    >>
   ;EmitMove
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mManifest)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStatic)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   ] or >
   >>
  ;OperandAssignIntegerPopPop
  ] or >
  }
  [ (tAssignBegin)
  | tAssignBegin:
  @AssignStmt
   oEmitSourceCoordinate
   ?tLiteralAddress (tLiteralAddress)
   @OperandPushVariable
    oOperandPushVariable
    [ (tLiteralInteger)
    | *:
    [ (tLiteralInteger)
    | *:
    [ (tLiteralInteger)
    | *:
    >>
   ;OperandPushVariable
   @OperandPushExpressionAssignPopPop
    [ (tLiteralInteger)
    | tLiteralInteger:
    oOperandPushInteger
    ] or >
    }
    [ (tAssignInteger)
    | tAssignInteger:
    @OperandAssignIntegerPopPop
     [ oOperandCompareLeftAndRight (no)
     | no:
     @EmitMove
      @OperandLeftOrRightIsTemp
       [ oOperandChooseMode (mManifest)
       | *:
       oOperandSwap
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandSwap
       >>no
      ;OperandLeftOrRightIsTemp
      [@OperandLeftOrRightIsTemp (no)
      | *:
      [ oOperandChooseMode (mManifest)
      | mManifest:
      oEmitDouble(iMov)
      ] or >
      >>
     ;EmitMove
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mManifest)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     ] or >
     >>
    ;OperandAssignIntegerPopPop
    ] or >
    >>
   ;OperandPushExpressionAssignPopPop
   >>
  ;AssignStmt
  ] or >
  }
  [ (tWhileBegin)
  | tWhileBegin:
  @WhileStmt
   oFixPushAddress
   oEmitMergeSourceCoordinate
   @OperandPushBooleanControlExpression
    @OperandPushExpression
     [ (tLiteralAddress)
     | tLiteralAddress:
     @OperandPushVariable
      oOperandPushVariable
      [ (tFetchInteger)
      | *:
      [ (tFetchInteger)
      | *:
      [ (tFetchInteger)
      | tFetchInteger:
      ] or >
      >>
     ;OperandPushVariable
     ] or >
     }
     [ (tLiteralInteger)
     | tLiteralInteger:
     oOperandPushInteger
     ] or >
     }
     [ (tLiteralInteger)
     | tLiteralInteger:
     oOperandPushInteger
     ] or >
     }
     [ (tSubtract)
     | tSubtract:
     @OperandSubtractPop
      @OperandAreLeftAndRightManifest
       [ oOperandChooseMode (mManifest)
       | mManifest:
       oOperandSwap
       [ oOperandChooseMode (mManifest)
       | mManifest:
       oOperandSwap
       >>yes
      ;OperandAreLeftAndRightManifest
      [@OperandAreLeftAndRightManifest (yes)
      | yes:
      oOperandSubtractManifestValues
      oOperandPop
      ] or >
      >>
     ;OperandSubtractPop
     ] or >
     }
     [ (tGE)
     | tGE:
     @OperandLessPop
      oOperandSwap
      @OperandGreaterPop
       [ oOperandCompareLeftAndRight (no)
       | no:
       [ oOperandChooseManifestValue ()
       | *:
       oOperandSwap
       [ oOperandChooseManifestValue ()
       | *:
       oOperandSwap
       @EmitCmp
        oOperandSwap
        [ oOperandChooseMode (mManifest)
        | mManifest:
        oOperandPushCopy
        @OperandForceIntoTemp
         [ oOperandChooseMode (mManifest)
         | *:
         [ oOperandChooseLength (two)
         | two:
         @OperandPushTempWord
          oTempAllocate
          oOperandPushTemp
          oOperandSetValue(zero)
          oOperandSetLength(two)
          >>
         ;OperandPushTempWord
         oOperandSwap
         oEmitDouble(iMov)
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mManifest)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         oOperandSetMode(mTemp)
         ] or >
         >>
        ;OperandForceIntoTemp
        oOperandSwap
        oOperandSwapRightAndDest
        oEmitDouble(iCmp)
        oOperandSwap
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mTemp)
         | mTemp:
         oTempFree
         ] or >
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        >>
       ;EmitCmp
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mManifest)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandPushJumpCondition(iJgt)
       ] or >
       >>
      ;OperandGreaterPop
      >>
     ;OperandLessPop
     @OperandNot
      @OperandForceToJumpCondition
       [ oOperandIsJumpCondition (yes)
       | yes:
       ] or >
       >>
      ;OperandForceToJumpCondition
      @OperandComplementJumpCondition
       [ oOperandChooseJumpCondition (iJgt)
       | *:
       oOperandComplementJumpCondition
       >>
      ;OperandComplementJumpCondition
      >>
     ;OperandNot
     ] or >
     }
     [ (tWhileTest)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    @OperandForceToJumpCondition
     [ oOperandIsJumpCondition (yes)
     | yes:
     ] or >
     >>
    ;OperandForceToJumpCondition
    >>
   ;OperandPushBooleanControlExpression
   ?tWhileTest (tWhileTest)
   @OperandComplementJumpCondition
    [ oOperandChooseJumpCondition (iJle)
    | *:
    oOperandComplementJumpCondition
    >>
   ;OperandComplementJumpCondition
   [ oOperandChooseJumpCondition (iJgt)
   | *:
   @OperandInfixOr
    @OperandForceToJumpCondition
     [ oOperandIsJumpCondition (yes)
     | yes:
     ] or >
     >>
    ;OperandForceToJumpCondition
    [ oOperandChooseJumpCondition (iJgt)
    | *:
    oEmitConditionalForwardBranch
    oFixAndFreeFalseBranches
    oFixPushLastAddress
    oOperandMergeShuntsWithAddress
    oFixPopAddress
    >>
   ;OperandInfixOr
   @Statements
    @Block
     [ (tAssignBegin)
     | tAssignBegin:
     @AssignStmt
      oEmitSourceCoordinate
      ?tLiteralAddress (tLiteralAddress)
      @OperandPushVariable
       oOperandPushVariable
       [ (tLiteralInteger)
       | *:
       [ (tLiteralInteger)
       | *:
       [ (tLiteralInteger)
       | *:
       >>
      ;OperandPushVariable
      @OperandPushExpressionAssignPopPop
       [ (tLiteralInteger)
       | tLiteralInteger:
       oOperandPushInteger
       ] or >
       }
       [ (tLiteralInteger)
       | tLiteralInteger:
       oOperandPushInteger
       ] or >
       }
       [ (tSubtract)
       | tSubtract:
       [ (tAssignInteger)
       | tAssignInteger:
       @OperandSubtractAssignPopPopPop
        oOperandSwap
        [ oOperandCompareRightAndDest (no)
        | *:
        oOperandSwap
        @OperandSubtractPop
         @OperandAreLeftAndRightManifest
          [ oOperandChooseMode (mManifest)
          | mManifest:
          oOperandSwap
          [ oOperandChooseMode (mManifest)
          | mManifest:
          oOperandSwap
          >>yes
         ;OperandAreLeftAndRightManifest
         [@OperandAreLeftAndRightManifest (yes)
         | yes:
         oOperandSubtractManifestValues
         oOperandPop
         ] or >
         >>
        ;OperandSubtractPop
        @OperandAssignIntegerPopPop
         [ oOperandCompareLeftAndRight (no)
         | no:
         @EmitMove
          @OperandLeftOrRightIsTemp
           [ oOperandChooseMode (mManifest)
           | *:
           oOperandSwap
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandSwap
           >>no
          ;OperandLeftOrRightIsTemp
          [@OperandLeftOrRightIsTemp (no)
          | *:
          [ oOperandChooseMode (mManifest)
          | mManifest:
          oEmitDouble(iMov)
          ] or >
          >>
         ;EmitMove
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mManifest)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStatic)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ] or >
         >>
        ;OperandAssignIntegerPopPop
        >>
       ;OperandSubtractAssignPopPopPop
       ] or >
       >>
      ;OperandPushExpressionAssignPopPop
      >>
     ;AssignStmt
     ] or >
     }
     [ (tWhileBegin)
     | tWhileBegin:
     @WhileStmt
      oFixPushAddress
      oEmitMergeSourceCoordinate
      @OperandPushBooleanControlExpression
       @OperandPushExpression
        [ (tLiteralAddress)
        | tLiteralAddress:
        @OperandPushVariable
         oOperandPushVariable
         [ (tFetchInteger)
         | *:
         [ (tFetchInteger)
         | *:
         [ (tFetchInteger)
         | tFetchInteger:
         ] or >
         >>
        ;OperandPushVariable
        ] or >
        }
        [ (tLiteralInteger)
        | tLiteralInteger:
        oOperandPushInteger
        ] or >
        }
        [ (tLE)
        | tLE:
        @OperandGreaterPop
         [ oOperandCompareLeftAndRight (no)
         | no:
         [ oOperandChooseManifestValue (trReadInteger)
         | *:
         oOperandSwap
         [ oOperandChooseManifestValue ()
         | *:
         oOperandSwap
         @EmitCmp
          oOperandSwap
          [ oOperandChooseMode (mStatic)
          | *:
          oOperandSwap
          @OperandLeftOrRightIsTemp
           [ oOperandChooseMode (mManifest)
           | *:
           oOperandSwap
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandSwap
           >>no
          ;OperandLeftOrRightIsTemp
          [@OperandLeftOrRightIsTemp (no)
          | *:
          [ oOperandChooseMode (mManifest)
          | mManifest:
          oEmitDouble(iCmp)
          ] or >
          >>
         ;EmitCmp
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mManifest)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStatic)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         oOperandPushJumpCondition(iJgt)
         ] or >
         >>
        ;OperandGreaterPop
        @OperandNot
         @OperandForceToJumpCondition
          [ oOperandIsJumpCondition (yes)
          | yes:
          ] or >
          >>
         ;OperandForceToJumpCondition
         @OperandComplementJumpCondition
          [ oOperandChooseJumpCondition (iJgt)
          | *:
          oOperandComplementJumpCondition
          >>
         ;OperandComplementJumpCondition
         >>
        ;OperandNot
        ] or >
        }
        [ (tWhileTest)
        | *:
        ] or >
        >>
       ;OperandPushExpression
       @OperandForceToJumpCondition
        [ oOperandIsJumpCondition (yes)
        | yes:
        ] or >
        >>
       ;OperandForceToJumpCondition
       >>
      ;OperandPushBooleanControlExpression
      ?tWhileTest (tWhileTest)
      @OperandComplementJumpCondition
       [ oOperandChooseJumpCondition (iJle)
       | *:
       oOperandComplementJumpCondition
       >>
      ;OperandComplementJumpCondition
      [ oOperandChooseJumpCondition (iJgt)
      | *:
      @OperandInfixOr
       @OperandForceToJumpCondition
        [ oOperandIsJumpCondition (yes)
        | yes:
        ] or >
        >>
       ;OperandForceToJumpCondition
       [ oOperandChooseJumpCondition (iJgt)
       | *:
       oEmitConditionalForwardBranch
       oFixAndFreeFalseBranches
       oFixPushLastAddress
       oOperandMergeShuntsWithAddress
       oFixPopAddress
       >>
      ;OperandInfixOr
      @Statements
       @Block
        [ (tIfBegin)
        | tIfBegin:
        @IfStmt
         oEmitSourceCoordinate
         @OperandPushBooleanControlExpression
          @OperandPushExpression
           [ (tLiteralAddress)
           | tLiteralAddress:
           @OperandPushVariable
            oOperandPushVariable
            [ (tFetchInteger)
            | *:
            [ (tFetchInteger)
            | *:
            [ (tFetchInteger)
            | tFetchInteger:
            ] or >
            >>
           ;OperandPushVariable
           ] or >
           }
           [ (tLiteralAddress)
           | tLiteralAddress:
           @OperandPushVariable
            oOperandPushVariable
            [ (tFetchInteger)
            | *:
            [ (tFetchInteger)
            | *:
            [ (tFetchInteger)
            | tFetchInteger:
            ] or >
            >>
           ;OperandPushVariable
           ] or >
           }
           [ (tMultiply)
           | tMultiply:
           @OperandMultiplyPop
            @OperandAreLeftAndRightManifest
             [ oOperandChooseMode (mStatic)
             | *:
             >>no
            ;OperandAreLeftAndRightManifest
            [@OperandAreLeftAndRightManifest (no)
            | no:
            [ oOperandChooseManifestValue ()
            | *:
            oOperandSwap
            [ oOperandChooseManifestValue ()
            | *:
            @OperandForceIntoTemp
             [ oOperandChooseMode (mStatic)
             | *:
             [ oOperandChooseLength (two)
             | two:
             @OperandPushTempWord
              oTempAllocate
              oOperandPushTemp
              oOperandSetValue(zero)
              oOperandSetLength(two)
              >>
             ;OperandPushTempWord
             oOperandSwap
             oEmitDouble(iMov)
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mStatic)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandSetMode(mTemp)
             ] or >
             >>
            ;OperandForceIntoTemp
            oOperandSwap
            oEmitDouble(iMul)
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStatic)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            ] or >
            >>
           ;OperandMultiplyPop
           ] or >
           }
           [ (tLiteralAddress)
           | tLiteralAddress:
           @OperandPushVariable
            oOperandPushVariable
            [ (tFetchInteger)
            | *:
            [ (tFetchInteger)
            | *:
            [ (tFetchInteger)
            | tFetchInteger:
            ] or >
            >>
           ;OperandPushVariable
           ] or >
           }
           [ (tLiteralAddress)
           | tLiteralAddress:
           @OperandPushVariable
            oOperandPushVariable
            [ (tFetchInteger)
            | *:
            [ (tFetchInteger)
            | *:
            [ (tFetchInteger)
            | tFetchInteger:
            ] or >
            >>
           ;OperandPushVariable
           ] or >
           }
           [ (tMultiply)
           | tMultiply:
           @OperandMultiplyPop
            @OperandAreLeftAndRightManifest
             [ oOperandChooseMode (mStatic)
             | *:
             >>no
            ;OperandAreLeftAndRightManifest
            [@OperandAreLeftAndRightManifest (no)
            | no:
            [ oOperandChooseManifestValue ()
            | *:
            oOperandSwap
            [ oOperandChooseManifestValue ()
            | *:
            @OperandForceIntoTemp
             [ oOperandChooseMode (mStatic)
             | *:
             [ oOperandChooseLength (two)
             | two:
             @OperandPushTempWord
              oTempAllocate
              oOperandPushTemp
              oOperandSetValue(zero)
              oOperandSetLength(two)
              >>
             ;OperandPushTempWord
             oOperandSwap
             oEmitDouble(iMov)
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mStatic)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandSetMode(mTemp)
             ] or >
             >>
            ;OperandForceIntoTemp
            oOperandSwap
            oEmitDouble(iMul)
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStatic)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            ] or >
            >>
           ;OperandMultiplyPop
           ] or >
           }
           [ (tAdd)
           | tAdd:
           @OperandAddPop
            @OperandAreLeftAndRightManifest
             [ oOperandChooseMode (mTemp)
             | *:
             >>no
            ;OperandAreLeftAndRightManifest
            [@OperandAreLeftAndRightManifest (no)
            | no:
            [ oOperandChooseManifestValue ()
            | *:
            oOperandSwap
            [ oOperandChooseManifestValue ()
            | *:
            [ oOperandChooseMode (mTemp)
            | mTemp:
            oOperandSwap
            ] or >
            @OperandForceLeftIntoTemp
             oOperandSwap
             [ oOperandChooseMode (mTemp)
             | mTemp:
             oOperandSwap
             ] or >
             >>
            ;OperandForceLeftIntoTemp
            oEmitDouble(iAdd)
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mTemp)
             | mTemp:
             oTempFree
             ] or >
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            ] or >
            >>
           ;OperandAddPop
           ] or >
           }
           [ (tLiteralInteger)
           | tLiteralInteger:
           oOperandPushInteger
           ] or >
           }
           [ (tLiteralInteger)
           | tLiteralInteger:
           oOperandPushInteger
           ] or >
           }
           [ (tMultiply)
           | tMultiply:
           @OperandMultiplyPop
            @OperandAreLeftAndRightManifest
             [ oOperandChooseMode (mManifest)
             | mManifest:
             oOperandSwap
             [ oOperandChooseMode (mManifest)
             | mManifest:
             oOperandSwap
             >>yes
            ;OperandAreLeftAndRightManifest
            [@OperandAreLeftAndRightManifest (yes)
            | yes:
            oOperandMultiplyManifestValues
            oOperandPop
            ] or >
            >>
           ;OperandMultiplyPop
           ] or >
           }
           [ (tEQ)
           | tEQ:
           @OperandEqualPop
            [ oOperandCompareLeftAndRight (no)
            | no:
            [ oOperandChooseManifestValue ()
            | *:
            oOperandSwap
            [ oOperandChooseManifestValue ()
            | *:
            oOperandSwap
            @OperandAreLeftAndRightManifest
             [ oOperandChooseMode (mManifest)
             | mManifest:
             oOperandSwap
             [ oOperandChooseMode (mTemp)
             | *:
             oOperandSwap
             >>no
            ;OperandAreLeftAndRightManifest
            [@OperandAreLeftAndRightManifest (no)
            | *:
            @EmitCmp
             oOperandSwap
             [ oOperandChooseMode (mTemp)
             | *:
             oOperandSwap
             @OperandLeftOrRightIsTemp
              [ oOperandChooseMode (mManifest)
              | *:
              oOperandSwap
              [ oOperandChooseMode (mTemp)
              | mTemp:
              oOperandSwap
              >>yes
             ;OperandLeftOrRightIsTemp
             [@OperandLeftOrRightIsTemp (yes)
             | yes:
             oEmitDouble(iCmp)
             ] or >
             >>
            ;EmitCmp
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mManifest)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mTemp)
             | mTemp:
             oTempFree
             ] or >
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            oOperandPushJumpCondition(iJeq)
            ] or >
            >>
           ;OperandEqualPop
           ] or >
           }
           [ (tIfThen)
           | *:
           ] or >
           >>
          ;OperandPushExpression
          @OperandForceToJumpCondition
           [ oOperandIsJumpCondition (yes)
           | yes:
           ] or >
           >>
          ;OperandForceToJumpCondition
          >>
         ;OperandPushBooleanControlExpression
         ?tIfThen (tIfThen)
         [ oOperandChooseJumpCondition (iJeq)
         | *:
         @OperandComplementJumpCondition
          [ oOperandChooseJumpCondition (iJeq)
          | *:
          oOperandComplementJumpCondition
          >>
         ;OperandComplementJumpCondition
         @OperandInfixOr
          @OperandForceToJumpCondition
           [ oOperandIsJumpCondition (yes)
           | yes:
           ] or >
           >>
          ;OperandForceToJumpCondition
          [ oOperandChooseJumpCondition (iJne)
          | *:
          oEmitConditionalForwardBranch
          oFixAndFreeFalseBranches
          oFixPushLastAddress
          oOperandMergeShuntsWithAddress
          oFixPopAddress
          >>
         ;OperandInfixOr
         @Statements
          @Block
           [ (tWriteBegin)
           | tWriteBegin:
           @WriteProc
            oEmitSourceCoordinate
            [ (tTrapBegin)
            | *:
            @WriteParameter
             ?tTrapBegin (tTrapBegin)
             ?tLiteralAddress (tLiteralAddress)
             @OperandPushVariable
              oOperandPushVariable
              [ (tVarParm)
              | *:
              [ (tVarParm)
              | *:
              [ (tVarParm)
              | *:
              >>
             ;OperandPushVariable
             @OperandForceToStack
              [ oOperandChooseLength (two)
              | two:
              ] or >
              oEmitSingle(iPush)
              @OperandPopAndFreeTemp
               [ oOperandChooseMode (mStatic)
               | *:
               oOperandPop
               >>
              ;OperandPopAndFreeTemp
              oOperandPushMode(mStack)
              >>
             ;OperandForceToStack
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mStack)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             ?tVarParm (tVarParm)
             ?tParmEnd (tParmEnd)
             @OperandPushExpression
              [ (tSkipString)
              | tSkipString:
              oEmitNone(iData)
              ?tStringData (tStringData)
              oEmitString
              oEmitNone(iText)
              ] or >
              }
              [ (tLiteralAddress)
              | tLiteralAddress:
              @OperandPushVariable
               oOperandPushVariable
               [ (tFetchChar)
               | *:
               [ (tFetchChar)
               | *:
               [ (tFetchChar)
               | tFetchChar:
               oOperandSetLength(regCX)
               ] or >
               >>
              ;OperandPushVariable
              ] or >
              }
              [ (tParmEnd)
              | *:
              ] or >
              >>
             ;OperandPushExpression
             [ (tParmEnd)
             | *:
             @OperandForceToStack
              [ oOperandChooseLength (regCX)
              | regCX:
              @OperandForceAddressIntoTemp
               [ oOperandChooseMode (mStatic)
               | mStatic:
               @OperandPushTempWord
                oTempAllocate
                oOperandPushTemp
                oOperandSetValue(zero)
                oOperandSetLength(two)
                >>
               ;OperandPushTempWord
               oOperandSwap
               oEmitDouble(iLoada)
               oOperandPop
               ] or >
               oOperandSetLength(two)
               >>
              ;OperandForceAddressIntoTemp
              ] or >
              oEmitSingle(iPush)
              @OperandPopAndFreeTemp
               [ oOperandChooseMode (mTemp)
               | mTemp:
               oTempFree
               ] or >
               oOperandPop
               >>
              ;OperandPopAndFreeTemp
              oOperandPushMode(mStack)
              >>
             ;OperandForceToStack
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mStack)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             ?tParmEnd (tParmEnd)
             @OperandPushExpression
              [ (tLiteralInteger)
              | tLiteralInteger:
              oOperandPushInteger
              ] or >
              }
              [ (tParmEnd)
              | *:
              ] or >
              >>
             ;OperandPushExpression
             @OperandForceToStack
              [ oOperandChooseLength (two)
              | two:
              ] or >
              oEmitSingle(iPush)
              @OperandPopAndFreeTemp
               [ oOperandChooseMode (mManifest)
               | *:
               oOperandPop
               >>
              ;OperandPopAndFreeTemp
              oOperandPushMode(mStack)
              >>
             ;OperandForceToStack
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mStack)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             ?tParmEnd (tParmEnd)
             ?tTrap (tTrap)
             oOperandPushTrap
             oEmitSingle(iCall)
             oOperandPop
             oOperandPushMode(mStackReg)
             oOperandSetLength(two)
             oOperandPushMode(mManifest)
             oOperandSetLength(two)
             oOperandSetValue(twelve)
             oEmitDouble(iAdd)
             oOperandPop
             oOperandPop
             >>
            ;WriteParameter
            }
            [ (tWriteEnd)
            | tWriteEnd:
            ] or >
            >>
           ;WriteProc
           ] or >
           }
           [ (tIfMerge)
           | *:
           ] or >
           >>
          ;Block
          >>
         ;Statements
         [ (tIfMerge)
         | tIfMerge:
         oEmitUnconditionalForwardBranch
         oFixAndFreeShuntList
         oOperandPop
         oFixPushLastAddress
         oEmitMergeSourceCoordinate
         @Statements
          @Block
           [ (tWriteBegin)
           | tWriteBegin:
           @WriteProc
            oEmitSourceCoordinate
            [ (tTrapBegin)
            | *:
            @WriteParameter
             ?tTrapBegin (tTrapBegin)
             ?tLiteralAddress (tLiteralAddress)
             @OperandPushVariable
              oOperandPushVariable
              [ (tVarParm)
              | *:
              [ (tVarParm)
              | *:
              [ (tVarParm)
              | *:
              >>
             ;OperandPushVariable
             @OperandForceToStack
              [ oOperandChooseLength (two)
              | two:
              ] or >
              oEmitSingle(iPush)
              @OperandPopAndFreeTemp
               [ oOperandChooseMode (mStatic)
               | *:
               oOperandPop
               >>
              ;OperandPopAndFreeTemp
              oOperandPushMode(mStack)
              >>
             ;OperandForceToStack
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mStack)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             ?tVarParm (tVarParm)
             ?tParmEnd (tParmEnd)
             @OperandPushExpression
              [ (tSkipString)
              | tSkipString:
              oEmitNone(iData)
              ?tStringData (tStringData)
              oEmitString
              oEmitNone(iText)
              ] or >
              }
              [ (tLiteralAddress)
              | tLiteralAddress:
              @OperandPushVariable
               oOperandPushVariable
               [ (tFetchChar)
               | *:
               [ (tFetchChar)
               | *:
               [ (tFetchChar)
               | tFetchChar:
               oOperandSetLength(regCX)
               ] or >
               >>
              ;OperandPushVariable
              ] or >
              }
              [ (tParmEnd)
              | *:
              ] or >
              >>
             ;OperandPushExpression
             [ (tParmEnd)
             | *:
             @OperandForceToStack
              [ oOperandChooseLength (regCX)
              | regCX:
              @OperandForceAddressIntoTemp
               [ oOperandChooseMode (mStatic)
               | mStatic:
               @OperandPushTempWord
                oTempAllocate
                oOperandPushTemp
                oOperandSetValue(zero)
                oOperandSetLength(two)
                >>
               ;OperandPushTempWord
               oOperandSwap
               oEmitDouble(iLoada)
               oOperandPop
               ] or >
               oOperandSetLength(two)
               >>
              ;OperandForceAddressIntoTemp
              ] or >
              oEmitSingle(iPush)
              @OperandPopAndFreeTemp
               [ oOperandChooseMode (mTemp)
               | mTemp:
               oTempFree
               ] or >
               oOperandPop
               >>
              ;OperandPopAndFreeTemp
              oOperandPushMode(mStack)
              >>
             ;OperandForceToStack
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mStack)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             ?tParmEnd (tParmEnd)
             @OperandPushExpression
              [ (tLiteralInteger)
              | tLiteralInteger:
              oOperandPushInteger
              ] or >
              }
              [ (tParmEnd)
              | *:
              ] or >
              >>
             ;OperandPushExpression
             @OperandForceToStack
              [ oOperandChooseLength (two)
              | two:
              ] or >
              oEmitSingle(iPush)
              @OperandPopAndFreeTemp
               [ oOperandChooseMode (mManifest)
               | *:
               oOperandPop
               >>
              ;OperandPopAndFreeTemp
              oOperandPushMode(mStack)
              >>
             ;OperandForceToStack
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mStack)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             ?tParmEnd (tParmEnd)
             ?tTrap (tTrap)
             oOperandPushTrap
             oEmitSingle(iCall)
             oOperandPop
             oOperandPushMode(mStackReg)
             oOperandSetLength(two)
             oOperandPushMode(mManifest)
             oOperandSetLength(two)
             oOperandSetValue(twelve)
             oEmitDouble(iAdd)
             oOperandPop
             oOperandPop
             >>
            ;WriteParameter
            }
            [ (tWriteEnd)
            | tWriteEnd:
            ] or >
            >>
           ;WriteProc
           ] or >
           }
           [ (tIfEnd)
           | *:
           ] or >
           >>
          ;Block
          >>
         ;Statements
         oFixForwardBranch
         oFixPopAddress
         ?tIfEnd (tIfEnd)
         ] or >
         >>
        ;IfStmt
        ] or >
        }
        [ (tAssignBegin)
        | tAssignBegin:
        @AssignStmt
         oEmitSourceCoordinate
         ?tLiteralAddress (tLiteralAddress)
         @OperandPushVariable
          oOperandPushVariable
          [ (tLiteralAddress)
          | *:
          [ (tLiteralAddress)
          | *:
          [ (tLiteralAddress)
          | *:
          >>
         ;OperandPushVariable
         @OperandPushExpressionAssignPopPop
          [ (tLiteralAddress)
          | tLiteralAddress:
          @OperandPushVariable
           oOperandPushVariable
           [ (tFetchInteger)
           | *:
           [ (tFetchInteger)
           | *:
           [ (tFetchInteger)
           | tFetchInteger:
           ] or >
           >>
          ;OperandPushVariable
          ] or >
          }
          [ (tLiteralInteger)
          | tLiteralInteger:
          oOperandPushInteger
          ] or >
          }
          [ (tAdd)
          | tAdd:
          [ (tAssignInteger)
          | tAssignInteger:
          @OperandAddAssignPopPopPop
           [ oOperandCompareRightAndDest (no)
           | *:
           oOperandSwap
           [ oOperandCompareRightAndDest (yes)
           | yes:
           oOperandPop
           @OperandAddRightToLeftPop
            [ oOperandChooseManifestValue (one)
            | one:
            oOperandPop
            oEmitSingle(iInc)
            ] or >
            >>
           ;OperandAddRightToLeftPop
           @OperandPopAndFreeTemp
            [ oOperandChooseMode (mStatic)
            | *:
            oOperandPop
            >>
           ;OperandPopAndFreeTemp
           ] or >
           >>
          ;OperandAddAssignPopPopPop
          ] or >
          >>
         ;OperandPushExpressionAssignPopPop
         >>
        ;AssignStmt
        ] or >
        }
        [ (tWhileEnd)
        | *:
        ] or >
        >>
       ;Block
       >>
      ;Statements
      ?tWhileEnd (tWhileEnd)
      oEmitUnconditionalBackwardBranch
      oFixPopAddress
      oFixAndFreeShuntList
      oOperandPop
      >>
     ;WhileStmt
     ] or >
     }
     [ (tTrapBegin)
     | tTrapBegin:
     @TrapStmt
      oEmitSourceCoordinate
      [ (tLiteralAddress)
      | tLiteralAddress:
      @OperandPushVariable
       oOperandPushVariable
       [ (tVarParm)
       | *:
       [ (tVarParm)
       | *:
       [ (tVarParm)
       | *:
       >>
      ;OperandPushVariable
      oOperandPushCopy
      @OperandForceToStack
       [ oOperandChooseLength (two)
       | two:
       ] or >
       oEmitSingle(iPush)
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandPushMode(mStack)
       >>
      ;OperandForceToStack
      oOperandPop
      ?tVarParm (tVarParm)
      ?tParmEnd (tParmEnd)
      [ (tTrap)
      | tTrap:
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushTrap
      oEmitSingle(iCall)
      oOperandPop
      oOperandPushMode(mStackReg)
      oOperandSetLength(two)
      oOperandPushMode(mManifest)
      oOperandSetLength(two)
      oOperandSetValue(four)
      oEmitDouble(iAdd)
      oOperandPop
      oOperandPop
      ] or >
      ] or >
      >>
     ;TrapStmt
     ] or >
     }
     [ (tAssignBegin)
     | tAssignBegin:
     @AssignStmt
      oEmitSourceCoordinate
      ?tLiteralAddress (tLiteralAddress)
      @OperandPushVariable
       oOperandPushVariable
       [ (tLiteralAddress)
       | *:
       [ (tLiteralAddress)
       | *:
       [ (tLiteralAddress)
       | *:
       >>
      ;OperandPushVariable
      @OperandPushExpressionAssignPopPop
       [ (tLiteralAddress)
       | tLiteralAddress:
       @OperandPushVariable
        oOperandPushVariable
        [ (tFetchInteger)
        | *:
        [ (tFetchInteger)
        | *:
        [ (tFetchInteger)
        | tFetchInteger:
        ] or >
        >>
       ;OperandPushVariable
       ] or >
       }
       [ (tLiteralInteger)
       | tLiteralInteger:
       oOperandPushInteger
       ] or >
       }
       [ (tSubtract)
       | tSubtract:
       [ (tAssignInteger)
       | tAssignInteger:
       @OperandSubtractAssignPopPopPop
        oOperandSwap
        [ oOperandCompareRightAndDest (yes)
        | yes:
        oOperandPop
        @OperandSubtractRightFromLeftPop
         [ oOperandChooseManifestValue (two)
         | *:
         @EmitSub
          @OperandLeftOrRightIsTemp
           [ oOperandChooseMode (mManifest)
           | *:
           oOperandSwap
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandSwap
           >>no
          ;OperandLeftOrRightIsTemp
          [@OperandLeftOrRightIsTemp (no)
          | *:
          @OperandForceIntoTemp
           [ oOperandChooseMode (mManifest)
           | *:
           [ oOperandChooseLength (two)
           | two:
           @OperandPushTempWord
            oTempAllocate
            oOperandPushTemp
            oOperandSetValue(zero)
            oOperandSetLength(two)
            >>
           ;OperandPushTempWord
           oOperandSwap
           oEmitDouble(iMov)
           @OperandPopAndFreeTemp
            [ oOperandChooseMode (mManifest)
            | *:
            oOperandPop
            >>
           ;OperandPopAndFreeTemp
           oOperandSetMode(mTemp)
           ] or >
           >>
          ;OperandForceIntoTemp
          oEmitDouble(iSub)
          >>
         ;EmitSub
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mTemp)
          | mTemp:
          oTempFree
          ] or >
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         >>
        ;OperandSubtractRightFromLeftPop
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        ] or >
        >>
       ;OperandSubtractAssignPopPopPop
       ] or >
       >>
      ;OperandPushExpressionAssignPopPop
      >>
     ;AssignStmt
     ] or >
     }
     [ (tWhileEnd)
     | *:
     ] or >
     >>
    ;Block
    >>
   ;Statements
   ?tWhileEnd (tWhileEnd)
   oEmitUnconditionalBackwardBranch
   oFixPopAddress
   oFixAndFreeShuntList
   oOperandPop
   >>
  ;WhileStmt
  ] or >
  }
  [ (tTrapBegin)
  | tTrapBegin:
  @TrapStmt
   oEmitSourceCoordinate
   [ (tTrap)
   | *:
   ?tTrap (tTrap)
   oOperandPushTrap
   oEmitSingle(iCall)
   oOperandPop
   >>
  ;TrapStmt
  ] or >
  }
  [ (tEndOfFile)
  | *:
  ] or >
  >>
 ;Block
 @EmitProgramEpilogue
  oEmitNone(iLeave)
  oEmitNone(iReturn)
  >>
 ;EmitProgramEpilogue
 >>
;Program
